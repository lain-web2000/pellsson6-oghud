ca65 V2.19 - Git b993d8833
Main file   : lost/lost.asm
Current file: lost/lost.asm

000000r 1               	.org $8000
008000  1               
008000  1               	.segment "bank7"
008000  1               
008000  1               	.include "lost.inc"
008000  2               FDS_IRQ_RELOAD_LOW = $4020
008000  2               FDS_IRQ_RELOAD_HIGH = $4021
008000  2               FDS_IRQ_CONTROL = $4022
008000  2               FDS_CONTROL  = $4024
008000  2               FDS_DISK_STATUS = $4030
008000  2               FDS_DRIVE_STATUS = $4032
008000  2               
008000  2               IsWindy = $07ec ; Old CoinTally
008000  2               FdsOperTask = $07FC				; SMB2J
008000  2               ; WaitForIRQ = $077B				; SMB2J ; KILLED.
008000  2               ; LoadListIndex = $07f7			; SMB2J KILLED
008000  2               FdsBiosIrqAction = $101			; SMB2J
008000  2               FdsLastWrite4025 = $fa			; SMB2J
008000  2               IsPlayingExtendedWorlds = $7FB	; SMB2J
008000  2               byte_7F5 = $7f5 ; what is this...?
008000  2               WorldsCompleted = $7f7 ; Moved from 7FA (think there is other shit there ;))
008000  2               
008000  2               ; ContinueWorld is killed too
008000  2               ; Old LOST timer:
008000  2               ; byte_7EC = $7ec ; KILLED
008000  2               ; byte_7ED = $7ed ; KILLED
008000  2               ; byte_7EE = $7ee ; KILLED
008000  2               ; </timer>
008000  2               
008000  2               ; byte_7FA = $7fa; KILLED. WorldsCompleted
008000  2               ; byte_7F9 = $7f9; KILLED
008000  2               ; GameTimerDisplay_OBSOLETE = $07f8 ; KILLED.
008000  2               
008000  2               byte_2 = $2
008000  2               byte_3 = $3
008000  2               byte_4 = $4
008000  2               byte_5 = $5
008000  2               byte_6 = $6
008000  2               unk_7 = $7
008000  2               
008000  2               byte_14 = $14
008000  2               byte_1B = $1b
008000  2               byte_23 = $23
008000  2               byte_73 = $73
008000  2               byte_8C = $8c
008000  2               byte_BB = $bb
008000  2               byte_D4 = $d4
008000  2               byte_EB = $eb
008000  2               byte_EC = $ec
008000  2               byte_ED = $ed
008000  2               byte_EF = $ef
008000  2               byte_138 = $138
008000  2               byte_139 = $139
008000  2               byte_1A9 = $1a9
008000  2               byte_207 = $207
008000  2               byte_222 = $222
008000  2               byte_226 = $226
008000  2               byte_2A9 = $2a9
008000  2               byte_308 = $308
008000  2               byte_309 = $309
008000  2               byte_314 = $314
008000  2               byte_316 = $316
008000  2               byte_31C = $31c
008000  2               byte_3A9 = $3a9
008000  2               byte_3B2 = $3b2
008000  2               byte_3BD = $3bd
008000  2               byte_3CA = $3ca
008000  2               byte_49F = $49f
008000  2               byte_4A9 = $4a9
008000  2               byte_5B4 = $5b4
008000  2               unk_6A2 = $6a2
008000  2               byte_6A8 = $6a8
008000  2               byte_6AB = $6ab
008000  2               byte_6C9 = $6c9
008000  2               byte_6E2 = $6e2
008000  2               byte_6E3 = $6e3
008000  2               unk_6E9 = $6e9
008000  2               byte_6EA = $6ea
008000  2               unk_6F2 = $6f2
008000  2               byte_731 = $731
008000  2               byte_732 = $732
008000  2               byte_7A9 = $7a9
008000  2               byte_7F6 = $7f6
008000  2               byte_7E7 = $7e7
008000  2               byte_7E8 = $7e8
008000  2               byte_6EB = $6eb
008000  2               
008000  2               TMP_0 = $0
008000  2               TMP_1 = $1
008000  2               
008000  2               
008000  1               	.include "mario.inc"
008000  2               PPU_CTRL_REG1         = $2000
008000  2               PPU_CTRL_REG2         = $2001
008000  2               PPU_STATUS            = $2002
008000  2               PPU_SPR_ADDR          = $2003
008000  2               PPU_SPR_DATA          = $2004
008000  2               PPU_SCROLL_REG        = $2005
008000  2               PPU_ADDRESS           = $2006
008000  2               PPU_DATA              = $2007
008000  2               
008000  2               SND_REGISTER          = $4000
008000  2               SND_SQUARE1_REG       = $4000
008000  2               SND_SQUARE2_REG       = $4004
008000  2               SND_TRIANGLE_REG      = $4008
008000  2               SND_NOISE_REG         = $400c
008000  2               SND_DELTA_REG         = $4010
008000  2               SND_MASTERCTRL_REG    = $4015
008000  2               SND_VOLENV_REG        = $4080
008000  2               SND_FDS0_REG          = $4040
008000  2               SND_FDS1_REG          = $4041
008000  2               SND_PULSE_4002_REG    = $4002
008000  2               SND_PULSE_4003_REG    = $4003
008000  2               SND_PULSE_4004_REG    = $4004
008000  2               SND_PULSE_4005_REG    = $4005
008000  2               SND_PULSE_4006_REG    = $4006
008000  2               SND_TRIANGLE_400A_REG = $400A
008000  2               SND_TRIANGLE_400B_REG = $400B
008000  2               SND_NOISE_400E_REG    = $400E
008000  2               SND_NOISE_400F_REG    = $400F
008000  2               
008000  2               SPR_DMA               = $4014
008000  2               JOYPAD_PORT           = $4016
008000  2               JOYPAD_PORT1          = $4016
008000  2               JOYPAD_PORT2          = $4017
008000  2               
008000  2               ; GAME SPECIFIC DEFINES
008000  2               
008000  2               ObjectOffset          = $08
008000  2               
008000  2               FrameCounter          = $09
008000  2               
008000  2               SavedJoypadBits       = $06fc
008000  2               SavedJoypad1Bits      = $06fc
008000  2               SavedJoypad2Bits      = $06fd
008000  2               JoypadBitMask         = $074a
008000  2               JoypadOverride        = $0758
008000  2               
008000  2               A_B_Buttons           = $0a
008000  2               PreviousA_B_Buttons   = $0d
008000  2               Up_Down_Buttons       = $0b
008000  2               Left_Right_Buttons    = $0c
008000  2               
008000  2               GameEngineSubroutine  = $0e
008000  2               
008000  2               Mirror_PPU_CTRL_REG1  = $0778
008000  2               Mirror_PPU_CTRL_REG2  = $0779
008000  2               
008000  2               OperMode              = $0770
008000  2               OperMode_Task         = $0772
008000  2               ScreenRoutineTask     = $073c
008000  2               
008000  2               GamePauseStatus       = $0776
008000  2               GamePauseTimer        = $0777
008000  2               
008000  2               DemoAction            = $0717
008000  2               DemoActionTimer       = $0718
008000  2               
008000  2               TimerControl          = $0747
008000  2               IntervalTimerControl  = $077f
008000  2               
008000  2               Timers                = $0780
008000  2               SelectTimer           = $0780
008000  2               PlayerAnimTimer       = $0781
008000  2               JumpSwimTimer         = $0782
008000  2               RunningTimer          = $0783
008000  2               BlockBounceTimer      = $0784
008000  2               SideCollisionTimer    = $0785
008000  2               JumpspringTimer       = $0786
008000  2               GameTimerCtrlTimer    = $0787
008000  2               ClimbSideTimer        = $0789
008000  2               EnemyFrameTimer       = $078a
008000  2               FrenzyEnemyTimer      = $078f
008000  2               BowserFireBreathTimer = $0790
008000  2               StompTimer            = $0791
008000  2               AirBubbleTimer        = $0792
008000  2               ScrollIntervalTimer   = $0795
008000  2               EnemyIntervalTimer    = $0796
008000  2               BrickCoinTimer        = $079d
008000  2               InjuryTimer           = $079e
008000  2               StarInvincibleTimer   = $079f
008000  2               ScreenTimer           = $07a0
008000  2               WorldEndTimer         = $07a1
008000  2               DemoTimer             = $07a2
008000  2               
008000  2               Sprite_Data           = $0200
008000  2               
008000  2               Sprite_Y_Position     = $0200
008000  2               Sprite_Tilenumber     = $0201
008000  2               Sprite_Attributes     = $0202
008000  2               Sprite_X_Position     = $0203
008000  2               
008000  2               ScreenEdge_PageLoc    = $071a
008000  2               ScreenEdge_X_Pos      = $071c
008000  2               ScreenLeft_PageLoc    = $071a
008000  2               ScreenRight_PageLoc   = $071b
008000  2               ScreenLeft_X_Pos      = $071c
008000  2               ScreenRight_X_Pos     = $071d
008000  2               
008000  2               PlayerFacingDir       = $33
008000  2               DestinationPageLoc    = $34
008000  2               VictoryWalkControl    = $35
008000  2               ScrollFractional      = $0768
008000  2               PrimaryMsgCounter     = $0719
008000  2               SecondaryMsgCounter   = $0749
008000  2               
008000  2               HorizontalScroll      = $073f
008000  2               VerticalScroll        = $0740
008000  2               ScrollLock            = $0723
008000  2               ScrollThirtyTwo       = $073d
008000  2               Player_X_Scroll       = $06ff
008000  2               Player_Pos_ForScroll  = $0755
008000  2               ScrollAmount          = $0775
008000  2               
008000  2               AreaData              = $e7
008000  2               AreaDataLow           = $e7
008000  2               AreaDataHigh          = $e8
008000  2               EnemyData             = $e9
008000  2               EnemyDataLow          = $e9
008000  2               EnemyDataHigh         = $ea
008000  2               
008000  2               AreaParserTaskNum     = $071f
008000  2               ColumnSets            = $071e
008000  2               CurrentPageLoc        = $0725
008000  2               CurrentColumnPos      = $0726
008000  2               BackloadingFlag       = $0728
008000  2               BehindAreaParserFlag  = $0729
008000  2               AreaObjectPageLoc     = $072a
008000  2               AreaObjectPageSel     = $072b
008000  2               AreaDataOffset        = $072c
008000  2               AreaObjOffsetBuffer   = $072d
008000  2               AreaObjectLength      = $0730
008000  2               StaircaseControl      = $0734
008000  2               AreaObjectHeight      = $0735
008000  2               MushroomLedgeHalfLen  = $0736
008000  2               EnemyDataOffset       = $0739
008000  2               EnemyObjectPageLoc    = $073a
008000  2               EnemyObjectPageSel    = $073b
008000  2               MetatileBuffer        = $06a1
008000  2               BlockBufferColumnPos  = $06a0
008000  2               CurrentNTAddr_Low     = $0721
008000  2               CurrentNTAddr_High    = $0720
008000  2               AttributeBuffer       = $03f9
008000  2               
008000  2               LoopCommand           = $0745
008000  2               
008000  2               DisplayDigits         = $07d7
008000  2               TopScoreDisplay       = $07d7
008000  2               ScoreAndCoinDisplay   = $07dd
008000  2               PlayerScoreDisplay    = $07dd
008000  2               GameTimerDisplay      = $07f8
008000  2               DigitModifier         = $0134
008000  2               
008000  2               VerticalFlipFlag      = $0109
008000  2               FloateyNum_Control    = $0110
008000  2               ShellChainCounter     = $0125
008000  2               FloateyNum_Timer      = $012c
008000  2               FloateyNum_X_Pos      = $0117
008000  2               FloateyNum_Y_Pos      = $011e
008000  2               FlagpoleFNum_Y_Pos    = $010d
008000  2               FlagpoleFNum_YMFDummy = $010e
008000  2               FlagpoleScore         = $010f
008000  2               FlagpoleCollisionYPos = $070f
008000  2               StompChainCounter     = $0484
008000  2               
008000  2               VRAM_Buffer1_Offset   = $0300
008000  2               VRAM_Buffer1          = $0301
008000  2               VRAM_Buffer2_Offset   = $0340
008000  2               VRAM_Buffer2          = $0341
008000  2               VRAM_Buffer_AddrCtrl  = $0773
008000  2               Sprite0HitDetectFlag  = $0722
008000  2               IRQUpdateFlag         = $0722
008000  2               IRQAckFlag            = $077b
008000  2               DisableScreenFlag     = $0774
008000  2               DisableIntermediate   = $0769
008000  2               ColorRotateOffset     = $06d4
008000  2               
008000  2               TerrainControl        = $0727
008000  2               AreaStyle             = $0733
008000  2               ForegroundScenery     = $0741
008000  2               BackgroundScenery     = $0742
008000  2               CloudTypeOverride     = $0743
008000  2               BackgroundColorCtrl   = $0744
008000  2               AreaType              = $074e
008000  2               AreaAddrsLOffset      = $074f
008000  2               AreaPointer           = $0750
008000  2               
008000  2               PlayerEntranceCtrl    = $0710
008000  2               GameTimerSetting      = $0715
008000  2               AltEntranceControl    = $0752
008000  2               EntrancePage          = $0751
008000  2               NumberOfPlayers       = $077a
008000  2               UseNtBase2400 		  = $077a
008000  2               WarpZoneControl       = $06d6
008000  2               ChangeAreaTimer       = $06de
008000  2               
008000  2               MultiLoopCorrectCntr  = $06d9
008000  2               MultiLoopPassCntr     = $06da
008000  2               
008000  2               FetchNewGameTimerFlag = $0757
008000  2               GameTimerExpiredFlag  = $0759
008000  2               
008000  2               PrimaryHardMode       = $076a
008000  2               SecondaryHardMode     = $06cc
008000  2               WorldSelectNumber     = $076b
008000  2               WorldSelectEnableFlag = $07fc
008000  2               ContinueWorld         = $07fd
008000  2               
008000  2               .define IsPlayingLuigi CurrentPlayer
008000  2               
008000  2               CurrentPlayer         = $0753
008000  2               PlayerSize            = $0754
008000  2               PlayerStatus          = $0756
008000  2               
008000  2               ;OnscreenPlayerInfo    = $075a
008000  2               ;NumberofLives         = $075a ;used by current player
008000  2               HalfwayPage           = $075b
008000  2               LevelNumber           = $075c ;the actual dash number
008000  2               Hidden1UpFlag         = $075d
008000  2               CoinTally             = $075e
008000  2               WorldNumber           = $075f
008000  2               AreaNumber            = $0760 ;internal number used to find areas
008000  2               
008000  2               CoinTallyFor1Ups      = $0748
008000  2               
008000  2               OffscreenPlayerInfo   = $0761
008000  2               OffScr_NumberofLives  = $0761 ;used by offscreen player
008000  2               OffScr_HalfwayPage    = $0762
008000  2               OffScr_LevelNumber    = $0763
008000  2               OffScr_Hidden1UpFlag  = $0764
008000  2               OffScr_CoinTally      = $0765
008000  2               OffScr_WorldNumber    = $0766
008000  2               OffScr_AreaNumber     = $0767
008000  2               
008000  2               BalPlatformAlignment  = $03a0
008000  2               Platform_X_Scroll     = $03a1
008000  2               PlatformCollisionFlag = $03a2
008000  2               YPlatformTopYPos      = $0401
008000  2               YPlatformCenterYPos   = $58
008000  2               
008000  2               BrickCoinTimerFlag    = $06bc
008000  2               StarFlagTaskControl   = $0746
008000  2               
008000  2               PseudoRandomBitReg    = $07a7
008000  2               
008000  2               SprShuffleAmtOffset   = $06e0
008000  2               SprShuffleAmt         = $06e1
008000  2               SprDataOffset         = $06e4
008000  2               Player_SprDataOffset  = $06e4
008000  2               Enemy_SprDataOffset   = $06e5
008000  2               Block_SprDataOffset   = $06ec
008000  2               Alt_SprDataOffset     = $06ec
008000  2               Bubble_SprDataOffset  = $06ee
008000  2               FBall_SprDataOffset   = $06f1
008000  2               Misc_SprDataOffset    = $06f3
008000  2               SprDataOffset_Ctrl    = $03ee
008000  2               
008000  2               Player_State          = $1d
008000  2               Enemy_State           = $1e
008000  2               Fireball_State        = $24
008000  2               Block_State           = $26
008000  2               Misc_State            = $2a
008000  2               
008000  2               Player_MovingDir      = $45
008000  2               Enemy_MovingDir       = $46
008000  2               
008000  2               SprObject_X_Speed     = $57
008000  2               Player_X_Speed        = $57
008000  2               Enemy_X_Speed         = $58
008000  2               Fireball_X_Speed      = $5e
008000  2               Block_X_Speed         = $60
008000  2               Misc_X_Speed          = $64
008000  2               
008000  2               Jumpspring_FixedYPos  = $58
008000  2               JumpspringAnimCtrl    = $070e
008000  2               JumpspringForce       = $06db
008000  2               
008000  2               SprObject_PageLoc     = $6d
008000  2               Player_PageLoc        = $6d
008000  2               Enemy_PageLoc         = $6e
008000  2               Fireball_PageLoc      = $74
008000  2               Block_PageLoc         = $76
008000  2               Misc_PageLoc          = $7a
008000  2               Bubble_PageLoc        = $83
008000  2               
008000  2               SprObject_X_Position  = $86
008000  2               Player_X_Position     = $86
008000  2               Enemy_X_Position      = $87
008000  2               Fireball_X_Position   = $8d
008000  2               Block_X_Position      = $8f
008000  2               Misc_X_Position       = $93
008000  2               Bubble_X_Position     = $9c
008000  2               
008000  2               SprObject_Y_Speed     = $9f
008000  2               Player_Y_Speed        = $9f
008000  2               Enemy_Y_Speed         = $a0
008000  2               Fireball_Y_Speed      = $a6
008000  2               Block_Y_Speed         = $a8
008000  2               Misc_Y_Speed          = $ac
008000  2               
008000  2               SprObject_Y_HighPos   = $b5
008000  2               Player_Y_HighPos      = $b5
008000  2               Enemy_Y_HighPos       = $b6
008000  2               Fireball_Y_HighPos    = $bc
008000  2               Block_Y_HighPos       = $be
008000  2               Misc_Y_HighPos        = $c2
008000  2               Bubble_Y_HighPos      = $cb
008000  2               
008000  2               SprObject_Y_Position  = $ce
008000  2               Player_Y_Position     = $ce
008000  2               Enemy_Y_Position      = $cf
008000  2               Fireball_Y_Position   = $d5
008000  2               Block_Y_Position      = $d7
008000  2               Misc_Y_Position       = $db
008000  2               Bubble_Y_Position     = $e4
008000  2               
008000  2               SprObject_Rel_XPos    = $03ad
008000  2               Player_Rel_XPos       = $03ad
008000  2               Enemy_Rel_XPos        = $03ae
008000  2               Fireball_Rel_XPos     = $03af
008000  2               Bubble_Rel_XPos       = $03b0
008000  2               Block_Rel_XPos        = $03b1
008000  2               Misc_Rel_XPos         = $03b3
008000  2               
008000  2               SprObject_Rel_YPos    = $03b8
008000  2               Player_Rel_YPos       = $03b8
008000  2               Enemy_Rel_YPos        = $03b9
008000  2               Fireball_Rel_YPos     = $03ba
008000  2               Bubble_Rel_YPos       = $03bb
008000  2               Block_Rel_YPos        = $03bc
008000  2               Misc_Rel_YPos         = $03be
008000  2               
008000  2               SprObject_SprAttrib   = $03c4
008000  2               Player_SprAttrib      = $03c4
008000  2               Enemy_SprAttrib       = $03c5
008000  2               
008000  2               SprObject_X_MoveForce = $0400
008000  2               Enemy_X_MoveForce     = $0401
008000  2               
008000  2               SprObject_YMF_Dummy   = $0416
008000  2               Player_YMF_Dummy      = $0416
008000  2               Enemy_YMF_Dummy       = $0417
008000  2               Bubble_YMF_Dummy      = $042c
008000  2               
008000  2               SprObject_Y_MoveForce = $0433
008000  2               Player_Y_MoveForce    = $0433
008000  2               Enemy_Y_MoveForce     = $0434
008000  2               Block_Y_MoveForce     = $043c
008000  2               
008000  2               DisableCollisionDet   = $0716
008000  2               Player_CollisionBits  = $0490
008000  2               Enemy_CollisionBits   = $0491
008000  2               
008000  2               SprObj_BoundBoxCtrl   = $0499
008000  2               Player_BoundBoxCtrl   = $0499
008000  2               Enemy_BoundBoxCtrl    = $049a
008000  2               Fireball_BoundBoxCtrl = $04a0
008000  2               Misc_BoundBoxCtrl     = $04a2
008000  2               
008000  2               EnemyFrenzyBuffer     = $06cb
008000  2               EnemyFrenzyQueue      = $06cd
008000  2               Enemy_Flag            = $0f
008000  2               Enemy_ID              = $16
008000  2               
008000  2               PlayerGfxOffset       = $06d5
008000  2               Player_XSpeedAbsolute = $0700
008000  2               FrictionAdderHigh     = $0701
008000  2               FrictionAdderLow      = $0702
008000  2               RunningSpeed          = $0703
008000  2               SwimmingFlag          = $0704
008000  2               Player_X_MoveForce    = $0705
008000  2               DiffToHaltJump        = $0706
008000  2               JumpOrigin_Y_HighPos  = $0707
008000  2               JumpOrigin_Y_Position = $0708
008000  2               VerticalForce         = $0709
008000  2               VerticalForceDown     = $070a
008000  2               PlayerChangeSizeFlag  = $070b
008000  2               PlayerAnimTimerSet    = $070c
008000  2               PlayerAnimCtrl        = $070d
008000  2               DeathMusicLoaded      = $0712
008000  2               FlagpoleSoundQueue    = $0713
008000  2               CrouchingFlag         = $0714
008000  2               MaximumLeftSpeed      = $0450
008000  2               MaximumRightSpeed     = $0456
008000  2               
008000  2               SprObject_OffscrBits  = $03d0
008000  2               Player_OffscreenBits  = $03d0
008000  2               Enemy_OffscreenBits   = $03d1
008000  2               FBall_OffscreenBits   = $03d2
008000  2               Bubble_OffscreenBits  = $03d3
008000  2               Block_OffscreenBits   = $03d4
008000  2               Misc_OffscreenBits    = $03d6
008000  2               EnemyOffscrBitsMasked = $03d8
008000  2               
008000  2               Cannon_Offset         = $046a
008000  2               Cannon_PageLoc        = $046b
008000  2               Cannon_X_Position     = $0471
008000  2               Cannon_Y_Position     = $0477
008000  2               Cannon_Timer          = $047d
008000  2               
008000  2               Whirlpool_Offset      = $046a
008000  2               Whirlpool_PageLoc     = $046b
008000  2               Whirlpool_LeftExtent  = $0471
008000  2               Whirlpool_Length      = $0477
008000  2               Whirlpool_Flag        = $047d
008000  2               
008000  2               VineFlagOffset        = $0398
008000  2               VineHeight            = $0399
008000  2               VineObjOffset         = $039a
008000  2               VineStart_Y_Position  = $039d
008000  2               
008000  2               Block_Orig_YPos       = $03e4
008000  2               Block_BBuf_Low        = $03e6
008000  2               Block_Metatile        = $03e8
008000  2               Block_PageLoc2        = $03ea
008000  2               Block_RepFlag         = $03ec
008000  2               Block_ResidualCounter = $03f0
008000  2               Block_Orig_XPos       = $03f1
008000  2               
008000  2               BoundingBox_UL_XPos   = $04ac
008000  2               BoundingBox_UL_YPos   = $04ad
008000  2               BoundingBox_DR_XPos   = $04ae
008000  2               BoundingBox_DR_YPos   = $04af
008000  2               BoundingBox_UL_Corner = $04ac
008000  2               BoundingBox_LR_Corner = $04ae
008000  2               EnemyBoundingBoxCoord = $04b0
008000  2               
008000  2               PowerUpType           = $39
008000  2               
008000  2               FireballBouncingFlag  = $3a
008000  2               FireballCounter       = $06ce
008000  2               FireballThrowingTimer = $0711
008000  2               
008000  2               HammerEnemyOffset     = $06ae
008000  2               JumpCoinMiscOffset    = $06b7
008000  2               
008000  2               Block_Buffer_1        = $0500
008000  2               Block_Buffer_2        = $05d0
008000  2               
008000  2               HammerThrowingTimer   = $03a2
008000  2               HammerBroJumpTimer    = $3c
008000  2               Misc_Collision_Flag   = $06be
008000  2               
008000  2               RedPTroopaOrigXPos    = $0401
008000  2               RedPTroopaCenterYPos  = $58
008000  2               
008000  2               XMovePrimaryCounter   = $a0
008000  2               XMoveSecondaryCounter = $58
008000  2               
008000  2               CheepCheepMoveMFlag   = $58
008000  2               CheepCheepOrigYPos    = $0434
008000  2               BitMFilter            = $06dd
008000  2               
008000  2               LakituReappearTimer   = $06d1
008000  2               LakituMoveSpeed       = $58
008000  2               LakituMoveDirection   = $a0
008000  2               
008000  2               FirebarSpinState_Low  = $58
008000  2               FirebarSpinState_High = $a0
008000  2               FirebarSpinSpeed      = $0388
008000  2               FirebarSpinDirection  = $34
008000  2               
008000  2               DuplicateObj_Offset   = $06cf
008000  2               NumberofGroupEnemies  = $06d3
008000  2               
008000  2               BlooperMoveCounter    = $a0
008000  2               BlooperMoveSpeed      = $58
008000  2               
008000  2               BowserBodyControls    = $0363
008000  2               BowserFeetCounter     = $0364
008000  2               BowserMovementSpeed   = $0365
008000  2               BowserOrigXPos        = $0366
008000  2               BowserFlameTimerCtrl  = $0367
008000  2               BowserFront_Offset    = $0368
008000  2               BridgeCollapseOffset  = $0369
008000  2               BowserGfxFlag         = $036a
008000  2               BowserHitPoints       = $0483
008000  2               MaxRangeFromOrigin    = $06dc
008000  2               
008000  2               BowserFlamePRandomOfs = $0417
008000  2               
008000  2               PiranhaPlantUpYPos    = $0417
008000  2               PiranhaPlantDownYPos  = $0434
008000  2               PiranhaPlant_Y_Speed  = $58
008000  2               PiranhaPlant_MoveFlag = $a0
008000  2               
008000  2               FireworksCounter      = $06d7
008000  2               ExplosionGfxCounter   = $58
008000  2               ExplosionTimerCounter = $a0
008000  2               
008000  2               ;sound related defines
008000  2               Squ2_NoteLenBuffer    = $07b3
008000  2               Squ2_NoteLenCounter   = $07b4
008000  2               Squ2_EnvelopeDataCtrl = $07b5
008000  2               Squ1_NoteLenCounter   = $07b6
008000  2               Squ1_EnvelopeDataCtrl = $07b7
008000  2               Tri_NoteLenBuffer     = $07b8
008000  2               Tri_NoteLenCounter    = $07b9
008000  2               Noise_BeatLenCounter  = $07ba
008000  2               Squ1_SfxLenCounter    = $07bb
008000  2               Squ2_SfxLenCounter    = $07bd
008000  2               Sfx_SecondaryCounter  = $07be
008000  2               Noise_SfxLenCounter   = $07bf
008000  2               
008000  2               PauseSoundQueue       = $fa
008000  2               Square1SoundQueue     = $ff
008000  2               Square2SoundQueue     = $fe
008000  2               NoiseSoundQueue       = $fd
008000  2               AreaMusicQueue        = $fb
008000  2               EventMusicQueue       = $fc
008000  2               
008000  2               Square1SoundBuffer    = $f1
008000  2               Square2SoundBuffer    = $f2
008000  2               NoiseSoundBuffer      = $f3
008000  2               AreaMusicBuffer       = $f4
008000  2               EventMusicBuffer      = $07b1
008000  2               PauseSoundBuffer      = $07b2
008000  2               
008000  2               MusicData             = $f5
008000  2               MusicDataLow          = $f5
008000  2               MusicDataHigh         = $f6
008000  2               MusicOffset_Square2   = $f7
008000  2               MusicOffset_Square1   = $f8
008000  2               MusicOffset_Triangle  = $f9
008000  2               MusicOffset_Noise     = $07b0
008000  2               
008000  2               NoteLenLookupTblOfs   = $f0
008000  2               DAC_Counter           = $07c0
008000  2               NoiseDataLoopbackOfs  = $07c1
008000  2               NoteLengthTblAdder    = $07c4
008000  2               AreaMusicBuffer_Alt   = $07c5
008000  2               PauseModeFlag         = $07c6
008000  2               GroundMusicHeaderOfs  = $07c7
008000  2               AltRegContentFlag     = $07ca
008000  2               
008000  2               ;-------------------------------------------------------------------------------------
008000  2               ;CONSTANTS
008000  2               
008000  2               ;sound effects constants
008000  2               Sfx_SmallJump         = %10000000
008000  2               Sfx_Flagpole          = %01000000
008000  2               Sfx_Fireball          = %00100000
008000  2               Sfx_PipeDown_Injury   = %00010000
008000  2               Sfx_EnemySmack        = %00001000
008000  2               Sfx_EnemyStomp        = %00000100
008000  2               Sfx_Bump              = %00000010
008000  2               Sfx_BigJump           = %00000001
008000  2               
008000  2               Sfx_BowserFall        = %10000000
008000  2               Sfx_ExtraLife         = %01000000
008000  2               Sfx_PowerUpGrab       = %00100000
008000  2               Sfx_TimerTick         = %00010000
008000  2               Sfx_Blast             = %00001000
008000  2               Sfx_GrowVine          = %00000100
008000  2               Sfx_GrowPowerUp       = %00000010
008000  2               Sfx_CoinGrab          = %00000001
008000  2               
008000  2               Sfx_BowserFlame       = %00000010
008000  2               Sfx_BrickShatter      = %00000001
008000  2               
008000  2               ;music constants
008000  2               Silence               = %10000000
008000  2               
008000  2               StarPowerMusic        = %01000000
008000  2               PipeIntroMusic        = %00100000
008000  2               CloudMusic            = %00010000
008000  2               CastleMusic           = %00001000
008000  2               UndergroundMusic      = %00000100
008000  2               WaterMusic            = %00000010
008000  2               GroundMusic           = %00000001
008000  2               
008000  2               TimeRunningOutMusic   = %01000000
008000  2               EndOfLevelMusic       = %00100000
008000  2               AltGameOverMusic      = %00010000
008000  2               EndOfCastleMusic      = %00001000
008000  2               VictoryMusic          = %00000100
008000  2               GameOverMusic         = %00000010
008000  2               DeathMusic            = %00000001
008000  2               
008000  2               ;enemy object constants
008000  2               GreenKoopa            = $00
008000  2               BuzzyBeetle           = $02
008000  2               RedKoopa              = $03
008000  2               HammerBro             = $05
008000  2               Goomba                = $06
008000  2               Bloober               = $07
008000  2               BulletBill_FrenzyVar  = $08
008000  2               GreyCheepCheep        = $0a
008000  2               RedCheepCheep         = $0b
008000  2               Podoboo               = $0c
008000  2               PiranhaPlant          = $0d
008000  2               GreenParatroopaJump   = $0e
008000  2               RedParatroopa         = $0f
008000  2               GreenParatroopaFly    = $10
008000  2               Lakitu                = $11
008000  2               Spiny                 = $12
008000  2               FlyCheepCheepFrenzy   = $14
008000  2               FlyingCheepCheep      = $14
008000  2               BowserFlame           = $15
008000  2               Fireworks             = $16
008000  2               BBill_CCheep_Frenzy   = $17
008000  2               Stop_Frenzy           = $18
008000  2               Bowser                = $2d
008000  2               PowerUpObject         = $2e
008000  2               VineObject            = $2f
008000  2               FlagpoleFlagObject    = $30
008000  2               StarFlagObject        = $31
008000  2               JumpspringObject      = $32
008000  2               BulletBill_CannonVar  = $33
008000  2               RetainerObject        = $35
008000  2               TallEnemy             = $09
008000  2               
008000  2               ;other constants
008000  2               World1 = 0
008000  2               World2 = 1
008000  2               World3 = 2
008000  2               World4 = 3
008000  2               World5 = 4
008000  2               World6 = 5
008000  2               World7 = 6
008000  2               World8 = 7
008000  2               Level1 = 0
008000  2               Level2 = 1
008000  2               Level3 = 2
008000  2               Level4 = 3
008000  2               
008000  2               WarmBootOffset        = <$07d6
008000  2               ColdBootOffset        = <$07fe
008000  2               TitleScreenDataOffset = $1ec0
008000  2               SoundMemory           = $07b0
008000  2               
008000  2               .define SwimTileRepOffset		PlayerGraphicsTable + $9e
008000  2               .define MusicHeaderOffsetData	MusicHeaderData - 1
008000  2               .define MHD 					MusicHeaderData
008000  2               
008000  2               A_Button              = %10000000
008000  2               B_Button              = %01000000
008000  2               Select_Button         = %00100000
008000  2               Start_Button          = %00010000
008000  2               Up_Dir                = %00001000
008000  2               Down_Dir              = %00000100
008000  2               Left_Dir              = %00000010
008000  2               Right_Dir             = %00000001
008000  2               
008000  2               TitleScreenModeValue  = 0
008000  2               GameModeValue         = 1
008000  2               VictoryModeValue      = 2
008000  2               GameOverModeValue     = 3
008000  2               
008000  1               	.include "shared.inc"
008000  2               BANK_SELECTED = $07ff
008000  2               
008000  2               .define PF_SockMode $01 ; Todo move elsewhere...
008000  2               .define PF_SaveState $02
008000  2               .define PF_LoadState $04
008000  2               .define PF_RestartLevel $08
008000  2               .define PF_LevelEntrySaved $10
008000  2               .define PF_DisablePracticeInfo $20
008000  2               .define PF_EnableInputDisplay $40
008000  2               
008000  2               .macro PF_SetToLevelEnd_A
008000  2               	lda WRAM_PracticeFlags
008000  2               	and #(PF_LevelEntrySaved^$FF)
008000  2               	sta WRAM_PracticeFlags
008000  2               .endmacro
008000  2               
008000  2               .macro MACRO_ThrowFrameImpl
008000  2               ThrowFrame:
008000  2               		lda Mirror_PPU_CTRL_REG2
008000  2               		sta PPU_CTRL_REG2
008000  2               		lda Mirror_PPU_CTRL_REG1
008000  2               		and #$FC
008000  2               		sta Mirror_PPU_CTRL_REG1
008000  2               		sta PPU_CTRL_REG1 ; Force NT-0 (in case no button was pressed)
008000  2               
008000  2               		;
008000  2               		; Wait for sprite 0
008000  2               		;
008000  2               		lda Sprite0HitDetectFlag  ;check for flag here
008000  2               		beq @SkipSprite0
008000  2               		ldx #0
008000  2               		stx PPU_SPR_ADDR
008000  2               		lda Sprite0Data
008000  2               		sta PPU_SPR_DATA
008000  2               		lda Sprite0Data+1
008000  2               		sta PPU_SPR_DATA
008000  2               		lda Sprite0Data+2
008000  2               		sta PPU_SPR_DATA
008000  2               		lda Sprite0Data+3
008000  2               		sta PPU_SPR_DATA
008000  2               		lda PPU_STATUS
008000  2               		stx PPU_SCROLL_REG
008000  2               		stx PPU_SCROLL_REG
008000  2               @Sprite0Clr:
008000  2               		lda PPU_STATUS
008000  2               		and #$40
008000  2               		bne @Sprite0Clr
008000  2               @Sprite0Hit:
008000  2               		lda PPU_STATUS
008000  2               		and #$40
008000  2               		beq @Sprite0Hit
008000  2               		ldy #$14
008000  2               @HBlankDelay:
008000  2               		dey
008000  2               		bne @HBlankDelay
008000  2               @SkipSprite0:
008000  2               		lda PPU_STATUS
008000  2               		lda HorizontalScroll
008000  2               		sta PPU_SCROLL_REG
008000  2               		lda VerticalScroll
008000  2               		sta PPU_SCROLL_REG
008000  2               
008000  2               		lda ScreenLeft_PageLoc
008000  2               		lsr Mirror_PPU_CTRL_REG1
008000  2               		and #$01
008000  2               		ror
008000  2               		rol Mirror_PPU_CTRL_REG1
008000  2               		lda Mirror_PPU_CTRL_REG1
008000  2               		sta PPU_CTRL_REG1
008000  2               
008000  2               		lda WRAM_SlowMotion
008000  2               		cmp #4
008000  2               		bne @done
008000  2               		;
008000  2               		; Latch controllers.
008000  2               		;
008000  2               		ldx #1
008000  2               		stx $4016
008000  2               		dex
008000  2               		stx $4016
008000  2               		;
008000  2               		; Check A
008000  2               		;
008000  2               		lda $4017
008000  2               		lsr
008000  2               		bcs @done ; A pressed. Advance next frame
008000  2               		lda $4017 ; B
008000  2               		lda $4017 ; Select
008000  2               		lda $4017 ; Start
008000  2               		lsr
008000  2               		bcc @VBlank0
008000  2               		;
008000  2               		; Start pressed - Exit frame advance mode.
008000  2               		;
008000  2               		stx WRAM_SlowMotion
008000  2               		jmp @done ; Exit out of this.
008000  2               @VBlank0:
008000  2               		lda PPU_STATUS ; Wait for VBlank
008000  2               		bpl @VBlank0
008000  2               		jmp ThrowFrame
008000  2               @done:
008000  2               		lda Mirror_PPU_CTRL_REG1
008000  2               		ora #$80 ; NMI
008000  2               		sta PPU_CTRL_REG1
008000  2               		jmp Enter_SoundEngine
008000  2               .endmacro
008000  2               
008000  2               .macro MACRO_RunSlowMo gm
008000  2               		dec WRAM_SlowMotionLeft
008000  2               		bmi @allow_frame
008000  2               		lda DisableScreenFlag
008000  2               		bne @allow_frame
008000  2               		lda GamePauseStatus
008000  2               		and #3
008000  2               		bne @allow_frame
008000  2               		ldx OperMode
008000  2               		dex
008000  2               		bne @allow_frame
008000  2               		lda OperMode_Task
008000  2               		cmp #gm
008000  2               		bne @allow_frame
008000  2               		jsr ThrowFrame
008000  2               		rti
008000  2               @allow_frame:
008000  2               		lda WRAM_SlowMotion
008000  2               		sta WRAM_SlowMotionLeft
008000  2               .endmacro
008000  2               
008000  2               .define MMC5_MAKE_PRGBANK(id) ((id)*4)
008000  2               .define MAKE_MMC5_CHRBANK(id) ((id)*1)
008000  2               
008000  2               TITLE_INIT		= $01
008000  2               
008000  2               BANK_LOADER		= MMC5_MAKE_PRGBANK(0)
008000  2               BANK_CHR		= MMC5_MAKE_PRGBANK(1)
008000  2               BANK_ORG		= MMC5_MAKE_PRGBANK(2)
008000  2               BANK_COMMON		= MMC5_MAKE_PRGBANK(3)
008000  2               BANK_SCEN		= MMC5_MAKE_PRGBANK(4)
008000  2               BANK_SCEN_DATA	= MMC5_MAKE_PRGBANK(5)
008000  2               BANK_SMBLL		= MMC5_MAKE_PRGBANK(6)
008000  2               BANK_LLDATA		= MMC5_MAKE_PRGBANK(7)
008000  2               
008000  2               
008000  2               CHR_ORG_SPR = MAKE_MMC5_CHRBANK(0)
008000  2               CHR_ORG_BG = MAKE_MMC5_CHRBANK(1)
008000  2               CHR_ORG_BG_ALTFONT = MAKE_MMC5_CHRBANK(2)
008000  2               CHR_LOST_SPR = MAKE_MMC5_CHRBANK(3)
008000  2               CHR_LOST_BG = MAKE_MMC5_CHRBANK(4)
008000  2               CHR_LOST_BG_ALTFONT = MAKE_MMC5_CHRBANK(5)
008000  2               CHR_PEACH_SPR = MAKE_MMC5_CHRBANK(6)
008000  2               CHR_INTRO_BG = MAKE_MMC5_CHRBANK(7)
008000  2               CHR_INTRO_SPR0 = MAKE_MMC5_CHRBANK(8)
008000  2               
008000  2               CHR_SET_BANK = $A000
008000  2               
008000  2               SavedRule = $07d9
008000  2               RuleIndex = $0717 ; Previously DemoAction (can be changed to temp?)
008000  2               PowerUps = $07e3 ; Previously unused
008000  2               CurrentRule = $7df
008000  2               
008000  2               .ifndef RESTART_LEVEL_BUTTONS
008000  2               	.define RESTART_LEVEL_BUTTONS Select_Button|Up_Dir
008000  2               .endif
008000  2               
008000  2               .ifndef RESTART_GAME_BUTTONS
008000  2               	.define RESTART_GAME_BUTTONS Select_Button|Down_Dir
008000  2               .endif
008000  2               
008000  2               .ifndef SAVE_STATE_BUTTONS
008000  2               	.define SAVE_STATE_BUTTONS Select_Button|Right_Dir
008000  2               .endif
008000  2               
008000  2               .ifndef LOAD_STATE_BUTTONS
008000  2               	.define LOAD_STATE_BUTTONS Select_Button|Left_Dir
008000  2               .endif
008000  2               
008000  2               
008000  1               	.include "macros.inc"
008000  2               .macro lsr_by n
008000  2               	.repeat n, i
008000  2               		lsr
008000  2               	.endrep
008000  2               .endmacro
008000  2               
008000  2               .macro DoUpdateSockHash
008000  2               		.local @dont_render
008000  2               		lda WRAM_PracticeFlags
008000  2               		and #PF_SockMode
008000  2               		bne @dont_render
008000  2               		lda IntervalTimerControl
008000  2               		and #3
008000  2               		cmp #2
008000  2               		bne @dont_render
008000  2               		jsr Enter_ForceUpdateSockHash
008000  2               	@dont_render:
008000  2               .endmacro
008000  2               
008000  2               .macro practice_callgate
008000  2               	.res $FE00 - *, $EA
008000  2               
008000  2               	Enter_EndOfCastle:
008000  2               		lda #BANK_COMMON
008000  2               		jsr SetBankFromA
008000  2               		jmp EndOfCastle
008000  2               
008000  2               	Enter_RenderIntermediateTime:
008000  2               		lda #BANK_COMMON
008000  2               		jsr SetBankFromA
008000  2               		jmp RenderIntermediateTime
008000  2               
008000  2               	Enter_FrameToTime:
008000  2               		lda #BANK_COMMON
008000  2               		jsr SetBankFromA
008000  2               		jmp FrameToTime
008000  2               
008000  2               	Enter_UpdateGameTimer:
008000  2               		lda #BANK_COMMON
008000  2               		jsr SetBankFromA
008000  2               		jmp UpdateGameTimer
008000  2               
008000  2               	Enter_InitializeWRAM:
008000  2               		lda #BANK_COMMON
008000  2               		jsr SetBankFromA
008000  2               		jmp InitializeWRAM
008000  2               
008000  2               	Enter_SetDefaultWRAM:
008000  2               		lda #BANK_COMMON
008000  2               		jsr SetBankFromA
008000  2               		jmp SetDefaultWRAM
008000  2               
008000  2               	Enter_FactoryResetWRAM:
008000  2               		lda #BANK_COMMON
008000  2               		jsr SetBankFromA
008000  2               		jmp FactoryResetWRAM
008000  2               
008000  2               	Enter_RedrawSockTimer:
008000  2               		lda #BANK_COMMON
008000  2               		jsr SetBankFromA
008000  2               		jmp RedrawSockTimer
008000  2               
008000  2               	Enter_PracticeInit:
008000  2               		lda #BANK_COMMON
008000  2               		jsr SetBankFromA
008000  2               		jmp PracticeInit
008000  2               
008000  2               	Enter_ForceUpdateSockHash:
008000  2               		lda #BANK_COMMON
008000  2               		jsr SetBankFromA
008000  2               		jmp ForceUpdateSockHash
008000  2               
008000  2               	Enter_PracticeOnFrame:
008000  2               		lda #BANK_COMMON
008000  2               		jsr SetBankFromA
008000  2               		jmp PracticeOnFrame
008000  2               
008000  2               	Enter_PracticeTitleMenu:
008000  2               		lda #BANK_COMMON
008000  2               		jsr SetBankFromA
008000  2               		jmp PracticeTitleMenu
008000  2               
008000  2               	Enter_UpdateFrameRule:
008000  2               		lda #BANK_COMMON
008000  2               		jsr SetBankFromA
008000  2               		jmp UpdateFrameRule
008000  2               
008000  2               	Enter_WritePracticeTop:
008000  2               		lda #BANK_COMMON
008000  2               		jsr SetBankFromA
008000  2               		jmp WritePracticeTop
008000  2               
008000  2               	Enter_RedrawUserVars:
008000  2               		lda #BANK_COMMON
008000  2               		jsr SetBankFromA
008000  2               		jmp RedrawUserVars
008000  2               
008000  2               	Enter_RedrawAll:
008000  2               		lda #BANK_COMMON
008000  2               		jsr SetBankFromA
008000  2               		jmp RedrawAll
008000  2               
008000  2               	Enter_RedrawFrameNumbers:
008000  2               		lda #BANK_COMMON
008000  2               		jsr SetBankFromA
008000  2               		jmp RedrawFrameNumbers
008000  2               
008000  2               	Enter_ProcessLevelLoad:
008000  2               		lda #BANK_COMMON
008000  2               		jsr SetBankFromA
008000  2               		jmp ProcessLevelLoad
008000  2               
008000  2               	Enter_LoadPhysicsData:
008000  2               		lda #BANK_COMMON
008000  2               		jsr SetBankFromA
008000  2               		jmp LoadPhysicsData
008000  2               
008000  2               	Enter_LoadMarioPhysics:
008000  2               		lda #BANK_COMMON
008000  2               		jsr SetBankFromA
008000  2               		jmp LoadMarioPhysics
008000  2               
008000  2               	Enter_LL_LoadWarpzone:
008000  2               		lda #BANK_LLDATA
008000  2               		jsr SetBankFromA
008000  2               		jmp LoadWarpzone
008000  2               
008000  2               	Enter_LL_GetAreaDataAddrs:
008000  2               		lda #BANK_LLDATA
008000  2               		jsr SetBankFromA
008000  2               		jmp GetAreaDataAddrs
008000  2               
008000  2               	Enter_LL_LoadAreaPointer:
008000  2               		lda #BANK_LLDATA
008000  2               		jsr SetBankFromA
008000  2               		jmp LoadAreaPointer
008000  2               
008000  2               	Enter_LL_WriteHalfwayPages:
008000  2               		lda #BANK_LLDATA
008000  2               		jsr SetBankFromA
008000  2               		jmp WriteHalfwayPages
008000  2               
008000  2               .endmacro
008000  2               
008000  2               
008000  2               .macro scenarios_callgate
008000  2               	.res $FE00 - *, $EA
008000  2               	Enter_ScenLoadArea:
008000  2               		lda #BANK_SCEN_DATA
008000  2               		jsr SetBankFromA
008000  2               		jmp ScenLoadArea
008000  2               
008000  2               	Enter_ScenReset:
008000  2               		lda #BANK_SCEN_DATA
008000  2               		jsr SetBankFromA
008000  2               		jmp ScenReset
008000  2               
008000  2               	Enter_ScenUpdateSelected:
008000  2               		lda #BANK_SCEN_DATA
008000  2               		jsr SetBankFromA
008000  2               		jmp ScenUpdateSelected
008000  2               
008000  2               	Enter_ScenValidate:
008000  2               		lda #BANK_SCEN_DATA
008000  2               		jsr SetBankFromA
008000  2               		jmp ScenValidate
008000  2               
008000  2               .endmacro
008000  2               
008000  2               MMC5_PRGMode          = $5100
008000  2               MMC5_CHRMode          = $5101
008000  2               MMC5_RAMProtect1      = $5102
008000  2               MMC5_RAMProtect2      = $5103
008000  2               MMC5_ExRamMode        = $5104
008000  2               MMC5_Nametables       = $5105
008000  2               MMC5_FillTile         = $5106
008000  2               MMC5_CHRBank          = $5120
008000  2               MMC5_PRGBank          = $5113
008000  2               MMC5_VSplitMode       = $5200
008000  2               MMC5_VSplitScroll     = $5201
008000  2               MMC5_VSplitBank       = $5202
008000  2               MMC5_SLCompare        = $5203
008000  2               MMC5_SLIRQ            = $5204
008000  2               MMC5_ExRamOfs         = $3C00
008000  2               
008000  2               ;
008000  2               ; Lower banks
008000  2               ;
008000  2               .macro control_bank
008000  2               	.res $FF00 - *, $EA
008000  2               
008000  2               	Enter_SoundEngine:
008000  2               		lda #BANK_COMMON
008000  2               		jsr SetBankFromA
008000  2               		jmp SoundEngineExternal
008000  2               
008000  2               	ReturnBank:
008000  2               		lda BANK_SELECTED
008000  2               		jmp SetBankFromA
008000  2               
008000  2               	SetChrBank0FromA:
008000  2               		sta MMC5_CHRBank+3
008000  2               		rts
008000  2               
008000  2               	SetChrBank1FromA:
008000  2               		sta MMC5_CHRBank+7
008000  2               		rts
008000  2               
008000  2               	SetChrBanksFromAX:
008000  2               		jsr SetChrBank0FromA
008000  2               		txa
008000  2               		jmp SetChrBank1FromA
008000  2               
008000  2               	SetBankFromA:
008000  2               		clc
008000  2               		ora #$82			; mark as prg-rom
008000  2               		sta MMC5_PRGBank+4
008000  2               		rts
008000  2               
008000  2               	MapperReset:
008000  2               		;
008000  2               		; clear mapper state
008000  2               		;
008000  2               		sei
008000  2               		cld ;absolutely useless :)
008000  2               		ldx #$FF
008000  2               		txs
008000  2               		lda #%01000000         ; disable apu irq
008000  2               		sta $4017
008000  2               		lda #%10
008000  2               		sta MMC5_RAMProtect1
008000  2               		lda #%01
008000  2               		sta MMC5_RAMProtect2
008000  2               		lda #1
008000  2               		sta MMC5_CHRMode       ; use 1kb chr banking
008000  2               		lda #0
008000  2               		sta MMC5_PRGMode       ; use 32kb prg banking
008000  2               		lsr a
008000  2               		sta MMC5_PRGBank       ; use bank 0 for prg-ram
008000  2               		lda #%11
008000  2               		sta MMC5_ExRamMode
008000  2               		lda #BANK_LOADER
008000  2               		sta BANK_SELECTED
008000  2               		jsr SetBankFromA       ; set startup bank
008000  2               		lda #$44
008000  2               		sta MMC5_Nametables    ; set vertical mirroring
008000  2               		jmp $8000
008000  2               
008000  2               	StartBank:
008000  2               		;
008000  2               		; 0 Bank selected
008000  2               		;
008000  2               		sta BANK_SELECTED
008000  2               		ldx #$00
008000  2               		stx PPU_CTRL_REG1
008000  2               		stx PPU_CTRL_REG2
008000  2               		jsr SetBankFromA
008000  2               		jmp Start
008000  2               
008000  2               	IRQ:
008000  2               		sei
008000  2               		php
008000  2               		pha
008000  2               		lda MMC5_SLIRQ
008000  2               		lda Mirror_PPU_CTRL_REG1      ; waste some time to get to the end of the scanline
008000  2               		lda Mirror_PPU_CTRL_REG1      ; waste some time to get to the end of the scanline
008000  2               		lda Mirror_PPU_CTRL_REG1      ; waste some time to get to the end of the scanline
008000  2               		lda Mirror_PPU_CTRL_REG1
008000  2               		and #%11110110           ;mask out sprite address and nametable
008000  2               		ora UseNtBase2400
008000  2               		sta Mirror_PPU_CTRL_REG1      ;update the register and its mirror
008000  2               		sta PPU_CTRL_REG1
008000  2               		lda HorizontalScroll
008000  2               		sta PPU_SCROLL_REG           ;set scroll regs for the screen under the status bar
008000  2               		lda #$00
008000  2               		sta PPU_SCROLL_REG
008000  2               		sta IRQAckFlag           ;indicate IRQ was acknowledged
008000  2               		tya                      ; waste some time to match 2j irq
008000  2               		ldy #$18                 ; ...
008000  2               	:   dey                      ; ...
008000  2               		bne :-                   ; ...
008000  2               		tay                      ; ...
008000  2               		pla
008000  2               		plp
008000  2               		cli
008000  2               		rti
008000  2               
008000  2               		.res $FFFA - *, $ea
008000  2               		;
008000  2               		; Interrupt table
008000  2               		;
008000  2               		.word NonMaskableInterrupt
008000  2               		.word MapperReset
008000  2               		.word IRQ
008000  2               
008000  2               .endmacro
008000  2               
008000  1               	.include "wram.inc"
008000  2               ;
008000  2               ; ramvars.inc is auto-generated from ram_region.asm
008000  2               ; don't alter directly. bad idea. very bad idea.
008000  2               ;
008000  2               WRAM_StartAddress = $6000
008000  2               WRAM_Magic = $6000
008000  2               WRAM_MenuIndex = $6004
008000  2               WRAM_PracticeFlags = $6005
008000  2               WRAM_CharSet = $6006
008000  2               WRAM_DelaySaveFrames = $6007
008000  2               WRAM_DelayUserFrames = $6008
008000  2               WRAM_SaveFramesLeft = $6009
008000  2               WRAM_UserFramesLeft = $600A
008000  2               WRAM_SaveStateBank = $600B
008000  2               WRAM_DisableMusic = $600C
008000  2               WRAM_DisableSound = $600D
008000  2               WRAM_SaveButtons = $600E
008000  2               WRAM_LoadButtons = $600F
008000  2               WRAM_TitleButtons = $6010
008000  2               WRAM_RestartButtons = $6011
008000  2               WRAM_SlowMotion = $6012
008000  2               WRAM_SlowMotionLeft = $6013
008000  2               WRAM_ToSaveFile = $6014
008000  2               WRAM_LoadedLevel = $6014
008000  2               WRAM_LoadedWorld = $6015
008000  2               WRAM_LevelAreaPointer = $6016
008000  2               WRAM_LevelAreaType = $6017
008000  2               WRAM_LevelIntervalTimerControl = $6018
008000  2               WRAM_LevelFrameCounter = $6019
008000  2               WRAM_LevelPlayerStatus = $601A
008000  2               WRAM_LevelPlayerSize = $601B
008000  2               WRAM_EntrySockTimer = $601C
008000  2               WRAM_LevelRandomData = $601D
008000  2               WRAM_LevelFrameRuleData = $6024
008000  2               WRAM_EnemyData = $6028
008000  2               WRAM_LevelData = $6094
008000  2               WRAM_IsContraMode = $6194
008000  2               WRAM_Temp = $6196
008000  2               WRAM_OrgUser0 = $61FA
008000  2               WRAM_OrgUser1 = $61FC
008000  2               WRAM_LostUser0 = $61FE
008000  2               WRAM_LostUser1 = $6200
008000  2               WRAM_OrgRules = $6202
008000  2               WRAM_LostRules = $6282
008000  2               WRAM_OrgTimes = $6352
008000  2               WRAM_OrgTimesEnd = $6392
008000  2               WRAM_LostTimes = $6392
008000  2               WRAM_LostTimesEnd = $63D2
008000  2               WRAM_ExtTimes = $63D2
008000  2               WRAM_ExtTimesEnd = $63FA
008000  2               WRAM_Timer = $63FA
008000  2               WRAM_PrettyTime = $63FC
008000  2               WRAM_PrettyTimeMin = $63FC
008000  2               WRAM_PrettyTimeSec = $63FD
008000  2               WRAM_PrettyTimeFrac = $63FE
008000  2               WRAM_LostStart = $63FF
008000  2               WRAM_LeafY = $63FF
008000  2               WRAM_LeafX = $640B
008000  2               WRAM_PlayerColors = $6417
008000  2               WRAM_JumpMForceData = $641F
008000  2               WRAM_FallMForceData = $6426
008000  2               WRAM_FrictionData = $642D
008000  2               WRAM_EnemyAttributeData = $6430
008000  2               WRAM_PiranhaPlantAttributeData = $643D
008000  2               WRAM_UnknownAttributeData0 = $6448
008000  2               WRAM_UnknownAttributeData1 = $6449
008000  2               WRAM_UnknownAttributeData2 = $644A
008000  2               WRAM_MushroomSelection = $644B
008000  2               WRAM_SelectMario = $644E
008000  2               WRAM_SelectLuigi = $6450
008000  2               WRAM_PiranhaPlantDist = $6452
008000  2               WRAM_HalfwayPageNybbles = $6453
008000  2               WRAM_LostEnd = $6465
008000  2               WRAM_SaveLost = $6465
008000  2               WRAM_SaveRAM = $64CB
008000  2               WRAM_SaveWRAM = $6CCB
008000  2               WRAM_SaveLevel = $6D4B
008000  2               WRAM_SaveNT = $6E4B
008000  2               WRAM_SavePAL = $764B
008000  2               WRAM_StoredInputs = $766B
008000  2               FrameRuleData = $7676
008000  2               
008000  1               	.include "text.inc"
008000  2               .ifndef __TEXT_INC_DEF__
008000  2               .define __TEXT_INC_DEF__
008000  2               
008000  2               .charmap '0', 0
008000  2               .charmap '1', 1
008000  2               .charmap '2', 2
008000  2               .charmap '3', 3
008000  2               .charmap '4', 4
008000  2               .charmap '5', 5
008000  2               .charmap '6', 6
008000  2               .charmap '7', 7
008000  2               .charmap '8', 8
008000  2               .charmap '9', 9
008000  2               .charmap 'A', $0A
008000  2               .charmap 'B', $0B
008000  2               .charmap 'C', $0C
008000  2               .charmap 'D', $0D
008000  2               .charmap 'E', $0E
008000  2               .charmap 'F', $0F
008000  2               .charmap 'G', $10
008000  2               .charmap 'H', $11
008000  2               .charmap 'I', $12
008000  2               .charmap 'J', $13
008000  2               .charmap 'K', $14
008000  2               .charmap 'L', $15
008000  2               .charmap 'M', $16
008000  2               .charmap 'N', $17
008000  2               .charmap 'O', $18
008000  2               .charmap 'P', $19
008000  2               .charmap 'Q', $1a
008000  2               .charmap 'R', $1b
008000  2               .charmap 'S', $1c
008000  2               .charmap 'T', $1d
008000  2               .charmap 'U', $1e
008000  2               .charmap 'V', $1f
008000  2               .charmap 'W', $20
008000  2               .charmap 'X', $21
008000  2               .charmap 'Y', $22
008000  2               .charmap 'Z', $23
008000  2               .charmap '-', $28
008000  2               .charmap '!', $2b
008000  2               .charmap '*', $29
008000  2               .charmap ' ', $24
008000  2               .charmap '.', $2a
008000  2               .charmap ':', $28
008000  2               
008000  2               .macro text_block at, txt
008000  2               	.byte at >> 8
008000  2               	.byte at & $ff
008000  2               	.byte .strlen(txt)
008000  2               	.byte txt
008000  2               .endmacro
008000  2               
008000  2               .macro inline_write_block name
008000  2               	.local @more_bytes
008000  2               	ldx #0
008000  2               	ldy VRAM_Buffer1_Offset
008000  2               @more_bytes:
008000  2               	lda name, x
008000  2               	sta VRAM_Buffer1, y
008000  2               	inx
008000  2               	iny
008000  2               	cmp #0
008000  2               	bne @more_bytes
008000  2               	dey
008000  2               	sty VRAM_Buffer1_Offset
008000  2               .endmacro
008000  2               
008000  2               .endif
008000  2               
008000  2               
008000  2               
008000  2               
008000  1               
008000  1               	FDS_Delay132:
008000  1               	FDS_LoadFiles:
008000  1  4C 00 80     		jmp FDS_LoadFiles
008003  1               
008003  1               WRAM_DefaultState:
008003  1  30 70 B8 50  		.incbin "wram-init.bin"
008007  1  98 30 70 B8  
00800B  1  50 98 30 70  
008069  1               
008069  1               Initialize_WRAM:
008069  1  A2 66        		ldx #(Initialize_WRAM-WRAM_DefaultState)
00806B  1               InitMoreWRAM:
00806B  1  BD 02 80     		lda WRAM_DefaultState - 1, x
00806E  1  9D FE 63     		sta WRAM_LostStart - 1, x
008071  1  CA           		dex
008072  1  D0 F7        		bne InitMoreWRAM
008074  1  60           		rts
008075  1               
008075  1               Start:
008075  1  A9 00        		lda #0
008077  1  8D 01 20     		sta PPU_CTRL_REG2
00807A  1               		; lda FdsLastWrite4025
00807A  1               		; and #$F7
00807A  1               		; sta FDS_CONTROL
00807A  1  AD 5F 07     		lda WorldNumber
00807D  1  48           		pha
00807E  1               
00807E  1  20 40 FE     		jsr Enter_PracticeInit
008081  1  A9 03        		lda #CHR_LOST_SPR
008083  1  A2 04        		ldx #CHR_LOST_BG
008085  1  AC 06 60     		ldy WRAM_CharSet
008088  1  C0 01                cpy #1
00808A  1  D0 02                bne @not_org
00808C  1  A2 05                ldx #CHR_LOST_BG_ALTFONT
00808E  1               @not_org:
00808E  1  20 16 FF     		jsr SetChrBanksFromAX
008091  1  20 69 80     		jsr Initialize_WRAM
008094  1               
008094  1  A0 FE        		ldy #$FE
008096  1  20 5A 8F     		jsr InitializeMemory
008099  1               
008099  1  8D 11 40     		sta SND_DELTA_REG+1
00809C  1  8D 70 07     		sta OperMode
00809F  1  8D FC 07     		sta FdsOperTask
0080A2  1  68           		pla
0080A3  1  8D 5F 07     		sta WorldNumber
0080A6  1  A9 A5        		lda #$A5
0080A8  1  8D A7 07     		sta PseudoRandomBitReg
0080AB  1  A9 0F        		lda #$F
0080AD  1  8D 15 40     		sta SND_MASTERCTRL_REG
0080B0  1  A9 06        		lda #6
0080B2  1  8D 01 20     		sta PPU_CTRL_REG2
0080B5  1  20 4B 83     		jsr MoveAllSpritesOffscreen
0080B8  1  20 11 8D     		jsr InitializeNameTables
0080BB  1  EE 74 07     		inc DisableScreenFlag
0080BE  1  A9 C0        		lda #$C0
0080C0  1  8D 01 01     		sta FdsBiosIrqAction
0080C3  1               		; CLI
0080C3  1  AD 78 07     		lda Mirror_PPU_CTRL_REG1
0080C6  1  09 80        		ora #$80
0080C8  1  20 AF 8D     		jsr WritePPUReg1
0080CB  1               EndlessLoop:
0080CB  1  A5 00        		lda TMP_0
0080CD  1  4C CB 80     		jmp EndlessLoop
0080D0  1               
0080D0  1               VRAM_AddrTable_DW_NEW:
0080D0  1  01 03        		.word $301
0080D2  1  3A 8C        		.word WaterPalette_MAYBE
0080D4  1  5E 8C        		.word UndergroundPalette_MAYBE
0080D6  1  82 8C        		.word GroundPaletteData
0080D8  1  A6 8C        		.word CastlePalette_MAYBE
0080DA  1  D9 E0        		.word TitleScreenData
0080DC  1  41 03        		.word VRAM_Buffer2
0080DE  1  41 03        		.word VRAM_Buffer2
0080E0  1  E2 8C        		.word SomePalette_0
0080E2  1  CA 8C        		.word SomePalette_1
0080E4  1  D2 8C        		.word SomePalette_2
0080E6  1  DA 8C        		.word SomePalette_3
0080E8  1  EA 8C        		.word ThankYouMario
0080EA  1  FB 8C        		.word ButOurPrincess
0080EC  1  2A E3        		.word StaticFrame_0E ; SWAPDATA_C876
0080EE  1  33 E3        		.word SomePalette_0F ; SWAPDATA_C87F
0080F0  1  47 E3        		.word StaticFrame_10 ; SWAPDATA_C893
0080F2  1  5F E3        		.word StaticFrame_11 ; SWAPDATA_C8AB
0080F4  1  75 E3        		.word StaticFrame_12 ; SWAPDATA_C8C1
0080F6  1  8B E3        		.word StaticFrame_13 ; SWAPDATA_C8D7
0080F8  1  9F E3        		.word StaticFrame_14 ; SWAPDATA_C8EB
0080FA  1  B0 E3        		.word StaticFrame_15 ; SWAPDATA_C8FC
0080FC  1  C7 E3        		.word StaticFrame_16 ; SWAPDATA_C913
0080FE  1  DF E3        		.word StaticFrame_17 ; SWAPDATA_C92B
008100  1  F7 E3        		.word StaticFrame_18 ; SWAPDATA_C943
008102  1  00 00        		.word 0 ; Removed? byte_C149
008104  1  41 E0        		.word byte_C10B
008106  1  10 E4        		.word StaticFrame_1B ; SWAPDATA_C95C
008108  1  4B 64        		.word WRAM_MushroomSelection
00810A  1  31 E4        		.word WePresentFantasyWorld ; SWAPDATA_C97D
00810C  1  74 E4        		.word YouAreSuperPlayer ; SWAPDATA_C9C0
00810E  1               VRAM_Buffer_Offset:
00810E  1  00           		.byte 0
00810F  1  40           		.byte $40
008110  1               
008110  1  AD 79 07 8D  MACRO_ThrowFrameImpl
008114  1  01 20 AD 78  
008118  1  07 29 FC 8D  
0081BB  1               
0081BB  1               NonMaskableInterrupt:
0081BB  1  AD 78 07        lda Mirror_PPU_CTRL_REG1       ;alter name table address to be $2800
0081BE  1  29 7E           and #%01111110            ;(essentially $2000) and disable another NMI
0081C0  1  8D 78 07        sta Mirror_PPU_CTRL_REG1       ;from interrupting this one
0081C3  1  8D 00 20        sta PPU_CTRL_REG1
0081C6  1  78              sei
0081C7  1  AC 74 07        ldy DisableScreenFlag
0081CA  1  D0 0D           bne SkipIRQ
0081CC  1  A9 1F           lda #$1F                  ;set interrupt scanline
0081CE  1  8D 03 52        sta MMC5_SLCompare
0081D1  1  EE 7B 07        inc IRQAckFlag            ;reset flag to wait for next IRQ
0081D4  1  A9 80           lda #$80
0081D6  1  8D 04 52        sta MMC5_SLIRQ            ;reset IRQ
0081D9  1               SkipIRQ:
0081D9  1  AD 79 07        lda Mirror_PPU_CTRL_REG2
0081DC  1  29 E6           and #%11100110            ;disable OAM and background display by default
0081DE  1  AC 74 07        ldy DisableScreenFlag     ;if screen disabled, skip this
0081E1  1  D0 05           bne ScrnSwch
0081E3  1  AD 79 07        lda Mirror_PPU_CTRL_REG2       ;otherwise reenable bits and save them
0081E6  1  09 1E           ora #%00011110
0081E8  1               ScrnSwch:
0081E8  1  8D 79 07        sta Mirror_PPU_CTRL_REG2
0081EB  1  29 E7           and #%11100111            ;turn screen off regardless of mirror reg
0081ED  1  8D 01 20        sta PPU_CTRL_REG2
0081F0  1  AE 02 20        ldx PPU_STATUS
0081F3  1  A9 00           lda #$00
0081F5  1  20 A8 8D        jsr InitScroll
0081F8  1               
0081F8  1  CE 13 60 30     MACRO_RunSlowMo 4
0081FC  1  1D AD 74 07  
008200  1  D0 18 AD 76  
008220  1               
008220  1  A9 00           lda #0
008222  1  8D 03 20        sta PPU_SPR_ADDR
008225  1  A9 02           lda #$02                  ;dump OAM data to PPU's sprite RAM
008227  1  8D 14 40        sta SPR_DMA
00822A  1               
00822A  1  AD 73 07        lda VRAM_Buffer_AddrCtrl
00822D  1  0A              asl
00822E  1  AA              tax
00822F  1  BD D0 80        lda VRAM_AddrTable_DW_NEW,x      ;get pointer to VRAM data
008232  1  85 00           sta $00
008234  1  E8              inx
008235  1  BD D0 80        lda VRAM_AddrTable_DW_NEW,x
008238  1  85 01           sta $01
00823A  1  20 9F 8D        jsr UpdateScreen          ;now update the screen with it
00823D  1  A0 00           ldy #$00
00823F  1  AE 73 07        ldx VRAM_Buffer_AddrCtrl
008242  1  E0 06           cpx #$06                  ;if pointer number was set to 6 (for
008244  1  D0 01           bne InitVRAMVars          ;second VRAM buffer), increment Y to get
008246  1  C8              iny                       ;offset for second VRAM buffer
008247  1               InitVRAMVars:
008247  1  BE 0E 81        ldx VRAM_Buffer_Offset,y  ;get pointer to correct buffer offset
00824A  1  A9 00           lda #$00                  ;erase the VRAM buffer offset, init first VRAM buffer
00824C  1  9D 00 03        sta VRAM_Buffer1_Offset,x ;by writing end terminator at the first byte, and
00824F  1  9D 01 03        sta VRAM_Buffer1,x        ;init address control to point at first VRAM buffer
008252  1  8D 73 07        sta VRAM_Buffer_AddrCtrl
008255  1  AD 79 07        lda Mirror_PPU_CTRL_REG2
008258  1  8D 01 20        sta PPU_CTRL_REG2              ;dump PPU control register 2
00825B  1  AD 74 07        lda DisableScreenFlag
00825E  1  D0 00           bne :+
008260  1  58           :  cli
008261  1               
008261  1  20 50 FE        jsr Enter_PracticeOnFrame
008264  1               
008264  1  AD 76 07        lda GamePauseStatus       ;check for pause status
008267  1  29 03           and #3
008269  1  D0 49           bne PauseSkip
00826B  1  AD 47 07        lda TimerControl          ;if master timer control not set, branch
00826E  1  F0 05           beq CheckIntervalTC       ;to decrement frame and interval timers
008270  1  CE 47 07        dec TimerControl          ;otherwise count this timer down
008273  1  D0 20           bne IncFrameCntr
008275  1               CheckIntervalTC:
008275  1  A2 14           ldx #$14                  ;set offset to decrement only frame timers
008277  1  CE 7F 07        dec IntervalTimerControl  ;if interval timer control not expired, branch
00827A  1  10 07           bpl DecrTheTimers         ;to skip and thus decrement only frame timers
00827C  1  A9 14           lda #$14
00827E  1  8D 7F 07        sta IntervalTimerControl  ;otherwise reset interval timer control to 20 frames
008281  1  A2 23           ldx #$23                  ;and load offset to decrement frame and interval timers
008283  1               DecrTheTimers:
008283  1  BD 80 07        lda Timers,x              ;if current timer is already expired, skip it
008286  1  F0 03           beq DTTLoop               ;otherwise decrement it
008288  1  DE 80 07        dec Timers,x
00828B  1               DTTLoop:
00828B  1  CA              dex                       ;loop until all timers that need to be counted down are
00828C  1  10 F5           bpl DecrTheTimers
00828E  1  AD 7F 07        lda IntervalTimerControl
008291  1  C9 14           cmp #$14
008293  1  D0 00           bne IncFrameCntr
008295  1               IncFrameCntr:
008295  1  E6 09           inc FrameCounter
008297  1               SeedLFSR:
008297  1  A2 00           ldx #$00
008299  1  A0 07           ldy #$07
00829B  1  AD A7 07        lda PseudoRandomBitReg    ;get d1 of first byte
00829E  1  29 02           and #$02
0082A0  1  85 00           sta $00
0082A2  1  AD A8 07        lda PseudoRandomBitReg+1  ;get d1 of second byte, XOR it with the first byte
0082A5  1  29 02           and #$02
0082A7  1  45 00           eor $00
0082A9  1  18              clc
0082AA  1  F0 01           beq RotateLFSR            ;prepare to rotate the result in
0082AC  1  38              sec
0082AD  1               RotateLFSR:
0082AD  1  7E A7 07        ror PseudoRandomBitReg,x  ;basically, rotate the operation result into d7
0082B0  1  E8              inx                       ;then rotate the entire LFSR
0082B1  1  88              dey
0082B2  1  D0 F9           bne RotateLFSR
0082B4  1               PauseSkip:
0082B4  1  AD 76 07        lda GamePauseStatus
0082B7  1  29 02           and #$02
0082B9  1  D0 12           bne ExecutionTree
0082BB  1  AD 22 07        lda IRQUpdateFlag
0082BE  1  F0 0D           beq ExecutionTree
0082C0  1  AD 76 07        lda GamePauseStatus
0082C3  1  29 03           and #3
0082C5  1  D0 06           bne ExecutionTree
0082C7  1  20 4E 83        jsr MoveSpritesOffscreen
0082CA  1  20 F3 82        jsr SpriteShuffler
0082CD  1               ExecutionTree:
0082CD  1  AD 76 07        lda GamePauseStatus
0082D0  1  29 03           and #3
0082D2  1  D0 03           bne WaitForIRQ
0082D4  1  20 3F 83        jsr OperModeExecutionTree ;run one of the program's four modes
0082D7  1               WaitForIRQ:
0082D7  1  AD 7B 07        lda IRQAckFlag            ;wait for IRQ
0082DA  1  D0 FB           bne WaitForIRQ
0082DC  1  AD 02 20        lda PPU_STATUS
0082DF  1  AD 78 07        lda Mirror_PPU_CTRL_REG1  ;reenable NMIs
0082E2  1  09 80           ora #$80
0082E4  1  8D 78 07        sta Mirror_PPU_CTRL_REG1  ;then park it at endless loop until next NMI
0082E7  1  8D 00 20        sta PPU_CTRL_REG1
0082EA  1  AD 76 07        lda GamePauseStatus
0082ED  1  29 FD           and #%11111101
0082EF  1  8D 76 07        sta GamePauseStatus
0082F2  1  40              rti
0082F3  1               
0082F3  1               SpriteShuffler:
0082F3  1  AC 4E 07     		ldy AreaType
0082F6  1  A9 28        		lda #$28
0082F8  1  85 00        		sta TMP_0
0082FA  1  A2 0E        		ldx #$E
0082FC  1               loc_6236:
0082FC  1               
0082FC  1  BD E4 06     		lda Player_SprDataOffset,x
0082FF  1  C5 00        		cmp TMP_0
008301  1  90 0F        		bcc loc_624C
008303  1  AC E0 06     		ldy SprShuffleAmtOffset
008306  1  18           		clc
008307  1  79 E1 06     		adc SprShuffleAmt,y
00830A  1  90 03        		bcc loc_6249
00830C  1  18           		clc
00830D  1  65 00        		adc TMP_0
00830F  1               loc_6249:
00830F  1               
00830F  1  9D E4 06     		sta Player_SprDataOffset,x
008312  1               loc_624C:
008312  1               
008312  1  CA           		dex
008313  1  10 E7        		bpl loc_6236
008315  1  AE E0 06     		ldx SprShuffleAmtOffset
008318  1  E8           		inx
008319  1  E0 03        		cpx #3
00831B  1  D0 02        		bne loc_6259
00831D  1  A2 00        		ldx #0
00831F  1               loc_6259:
00831F  1               
00831F  1  8E E0 06     		stx SprShuffleAmtOffset
008322  1  A2 08        		ldx #8
008324  1  A0 02        		ldy #2
008326  1               loc_6260:
008326  1               
008326  1  B9 E9 06     		lda unk_6E9,y
008329  1  9D F1 06     		sta FBall_SprDataOffset,x
00832C  1  18           		clc
00832D  1  69 08        		adc #8
00832F  1  9D F2 06     		sta unk_6F2,x
008332  1  18           		clc
008333  1  69 08        		adc #8
008335  1  9D F3 06     		sta Misc_SprDataOffset,x
008338  1  CA           		dex
008339  1  CA           		dex
00833A  1  CA           		dex
00833B  1  88           		dey
00833C  1  10 E8        		bpl loc_6260
00833E  1  60           		rts
00833F  1               
00833F  1               OperModeExecutionTree:
00833F  1  AD 70 07     		lda OperMode
008342  1  20 FC 8C     		jsr JumpEngine
008345  1  58 DF        		.word TitleScreenMode
008347  1  31 9A        		.word GameMode
008349  1  5C 83        		.word VictoryMode
00834B  1               		; .word GameOverMode
00834B  1               
00834B  1               MoveAllSpritesOffscreen:
00834B  1  A0 00        		ldy #0
00834D  1  2C           		.byte $2c
00834E  1               
00834E  1               MoveSpritesOffscreen:
00834E  1  A0 04        		ldy #4
008350  1  A9 F8        		lda #$F8
008352  1               SprInitLoop:
008352  1               
008352  1  99 00 02     		sta Sprite_Y_Position,y
008355  1  C8           		iny
008356  1  C8           		iny
008357  1  C8           		iny
008358  1  C8           		iny
008359  1  D0 F7        		bne SprInitLoop
00835B  1               locret_6297:
00835B  1               
00835B  1  60           		rts
00835C  1               VictoryMode:
00835C  1               
00835C  1  20 80 83     		jsr VictoryModeSubroutines
00835F  1  AD 72 07     		lda OperMode_Task
008362  1  F0 16        		beq AutoPlayer
008364  1  AE 5F 07     		ldx WorldNumber
008367  1  E0 07        		cpx #7
008369  1  D0 08        		bne loc_62AF
00836B  1  C9 05        		cmp #5
00836D  1  F0 EC        		beq locret_6297
00836F  1  C9 0D        		cmp #$D
008371  1  F0 E8        		beq locret_6297
008373  1               loc_62AF:
008373  1               
008373  1  A2 00        		ldx #0
008375  1  86 08        		stx ObjectOffset
008377  1  20 27 AC     		jsr EnemiesAndLoopsCore
00837A  1               AutoPlayer:
00837A  1               
00837A  1  20 B7 DD     		jsr RelativePlayerPosition
00837D  1  4C 6C DB     		jmp PlayerGfxHandler
008380  1               
008380  1               VictoryModeSubroutines:
008380  1  AD 5F 07     		lda WorldNumber
008383  1  C9 07        		cmp #7
008385  1  F0 12        		beq VictoryOnWorld8_NEW
008387  1  AD 72 07     		lda OperMode_Task
00838A  1  20 FC 8C     		jsr JumpEngine
00838D  1  2D BC        		.word BridgeCollapse
00838F  1  C3 83        		.word SetupVictoryMode
008391  1  F8 83        		.word PlayerVictoryWalk
008393  1  31 84        		.word PrintVictoryMessages
008395  1  73 84        		.word PlayerEndWorld_MAYBE_NEW
008397  1  96 84        		.word PlayerEndWorld_2_MAYBE_NEW
008399  1               
008399  1               VictoryOnWorld8_NEW:
008399  1  AD 72 07     		lda OperMode_Task
00839C  1  20 FC 8C     		jsr JumpEngine
00839F  1  2D BC        		.word BridgeCollapse
0083A1  1  C3 83        		.word SetupVictoryMode
0083A3  1  F8 83        		.word PlayerVictoryWalk
0083A5  1  1B E0        		.word InitializeWorldEndTimer
0083A7  1  22 E0        		.word CheckWorldEndTimer
0083A9  1  28 E0        		.word FdsLoadFile_SM2DATA3
0083AB  1  FA E4        		.word AlternateInitScreen
0083AD  1  31 E5        		.word AlternatePrintVictoryMessages
0083AF  1  73 84        		.word PlayerEndWorld_MAYBE_NEW
0083B1  1  75 E5        		.word AlternatePlayerEndWorld
0083B3  1  9E E5        		.word UNK_C6CA
0083B5  1  E4 E5        		.word XXX_CopySomethingAndReset
0083B7  1  FB E5        		.word XXX_SomethingOrOther
0083B9  1  0C E6        		.word FdsWriteFile_SM2SAVE
0083BB  1               
0083BB  1               ConvertIndexToBit:
0083BB  1  01           	.byte   1
0083BC  1  02           	.byte   2
0083BD  1  04           	.byte   4
0083BE  1  08           	.byte   8
0083BF  1  10           	.byte $10
0083C0  1  20           	.byte $20
0083C1  1  40           	.byte $40
0083C2  1  80           	.byte $80
0083C3  1               
0083C3  1               SetupVictoryMode:
0083C3  1  AE 1B 07     		ldx ScreenRight_PageLoc
0083C6  1  E8           		inx
0083C7  1  86 34        		stx FirebarSpinDirection
0083C9  1  AC 5F 07     		ldy WorldNumber
0083CC  1  B9 BB 83     		lda ConvertIndexToBit,Y
0083CF  1  0D F7 07     		ora WorldsCompleted
0083D2  1  8D F7 07     		sta WorldsCompleted
0083D5  1  AD FB 07     		lda IsPlayingExtendedWorlds
0083D8  1  F0 0C        		beq loc_6322
0083DA  1  AD 5F 07     		lda WorldNumber
0083DD  1  C9 03        		cmp #3
0083DF  1  90 05        		bcc loc_6322
0083E1  1  A9 07        		lda #7
0083E3  1  8D 5F 07     		sta WorldNumber
0083E6  1               loc_6322:
0083E6  1  A9 08        		lda #8
0083E8  1  85 FC        		sta EventMusicQueue
0083EA  1               Next_OperMode_Task:
0083EA  1  EE 72 07     		inc OperMode_Task
0083ED  1  60           		rts
0083EE  1               
0083EE  1               DrawTitleScreen:
0083EE  1  AD 70 07     		lda OperMode
0083F1  1  D0 F7        		bne Next_OperMode_Task
0083F3  1  A9 05        		lda #5
0083F5  1  4C 65 86     		jmp loc_65A1
0083F8  1               
0083F8  1               PlayerVictoryWalk:
0083F8  1  A0 00        		ldy #0
0083FA  1  84 35        		sty VictoryWalkControl
0083FC  1  A5 6D        		lda Player_PageLoc
0083FE  1  C5 34        		cmp FirebarSpinDirection
008400  1  D0 06        		bne loc_6344
008402  1  A5 86        		lda Player_X_Position
008404  1  C9 60        		cmp #$60
008406  1  B0 03        		bcs loc_6347
008408  1               loc_6344:
008408  1  E6 35        		inc VictoryWalkControl
00840A  1  C8           		iny
00840B  1               loc_6347:
00840B  1  98           		tya
00840C  1  20 33 9C     		jsr AutoControlPlayer
00840F  1  AD 1A 07     		lda ScreenLeft_PageLoc
008412  1  C5 34        		cmp FirebarSpinDirection
008414  1  F0 16        		beq loc_6368
008416  1  AD 68 07     		lda ScrollFractional
008419  1  18           		clc
00841A  1  69 80        		adc #$80
00841C  1  8D 68 07     		sta ScrollFractional
00841F  1  A9 01        		lda #1
008421  1  69 00        		adc #0
008423  1  A8           		tay
008424  1  20 15 9B     		jsr loc_7B20
008427  1  20 C0 9A     		jsr sub_7ACB
00842A  1  E6 35        		inc VictoryWalkControl
00842C  1               loc_6368:
00842C  1  A5 35        		lda VictoryWalkControl
00842E  1  F0 3F        		beq loc_63AB
008430  1  60           		rts
008431  1               
008431  1               PrintVictoryMessages:
008431  1  AD 49 07     		lda SecondaryMsgCounter
008434  1  D0 1F        		bne loc_6391
008436  1  AD 19 07     		lda PrimaryMsgCounter
008439  1  F0 08        		beq loc_637F
00843B  1  C9 08        		cmp #8
00843D  1  B0 16        		bcs loc_6391
00843F  1  C9 01        		cmp #1
008441  1  90 12        		bcc loc_6391
008443  1               loc_637F:
008443  1  A8           		tay
008444  1  F0 08        		beq loc_638A
008446  1  C0 03        		cpy #3
008448  1  B0 1E        		bcs loc_63A4
00844A  1  C0 02        		cpy #2
00844C  1  B0 07        		bcs loc_6391
00844E  1               loc_638A:
00844E  1  98           		tya
00844F  1  18           		clc
008450  1  69 0C        		adc #$C
008452  1  8D 73 07     		sta VRAM_Buffer_AddrCtrl
008455  1               loc_6391:
008455  1  AD 49 07     		lda SecondaryMsgCounter
008458  1  18           		clc
008459  1  69 04        		adc #4
00845B  1  8D 49 07     		sta SecondaryMsgCounter
00845E  1  AD 19 07     		lda PrimaryMsgCounter
008461  1  69 00        		adc #0
008463  1  8D 19 07     		sta PrimaryMsgCounter
008466  1  C9 06        		cmp #6
008468  1               loc_63A4:
008468  1  90 08        		bcc locret_63AE
00846A  1  A9 08        		lda #8
00846C  1  8D A1 07     		sta WorldEndTimer
00846F  1               loc_63AB:
00846F  1  EE 72 07     		inc OperMode_Task
008472  1               locret_63AE:
008472  1  60           		rts
008473  1               
008473  1               PlayerEndWorld_MAYBE_NEW:
008473  1  AD A1 07     		lda WorldEndTimer
008476  1  C9 06        		cmp #6
008478  1  B0 1B        		bcs locret_63D1
00847A  1  20 47 BF     		jsr AwardTimerCastle
00847D  1  AD F8 07     		lda GameTimerDisplay
008480  1  0D F9 07     		ora GameTimerDisplay+1
008483  1  0D FA 07     		ora GameTimerDisplay+2
008486  1  D0 0D        		bne locret_63D1
008488  1  A9 30        		lda #$30
00848A  1  8D 80 07     		sta SelectTimer
00848D  1  A9 06        		lda #6
00848F  1  8D A1 07     		sta WorldEndTimer
008492  1  EE 72 07     		inc OperMode_Task
008495  1               locret_63D1:
008495  1  60           		rts
008496  1               
008496  1               PlayerEndWorld_2_MAYBE_NEW:
008496  1  AD A1 07     		lda WorldEndTimer
008499  1  D0 2D        		bne EndExit
00849B  1               PlayerEndWorld_Force:
00849B  1  AD 05 60 29  		PF_SetToLevelEnd_A
00849F  1  EF 8D 05 60  
0084A3  1  A9 00        		lda #0
0084A5  1  8D 60 07     		sta AreaNumber
0084A8  1  8D 5C 07     		sta LevelNumber
0084AB  1  8D 72 07     		sta OperMode_Task
0084AE  1  AD 5F 07     		lda WorldNumber
0084B1  1  18           		clc
0084B2  1  69 01        		adc #1
0084B4  1  C9 08        		cmp #8
0084B6  1  90 02        		bcc loc_63EE
0084B8  1  A9 08        		lda #8
0084BA  1               loc_63EE:
0084BA  1               
0084BA  1  8D 5F 07     		sta WorldNumber
0084BD  1  20 B0 FE     		jsr Enter_LL_LoadAreaPointer
0084C0  1  EE 57 07     		inc FetchNewGameTimerFlag
0084C3  1  A9 01        		lda #1
0084C5  1  8D 70 07     		sta OperMode
0084C8  1               EndExit:
0084C8  1               
0084C8  1  60           		rts
0084C9  1               FloateyNumTileData:
0084C9  1  FF FF              .byte $ff, $ff ;dummy
0084CB  1  F6 FB              .byte $f6, $fb ; "100"
0084CD  1  F7 FB              .byte $f7, $fb ; "200"
0084CF  1  F8 FB              .byte $f8, $fb ; "400"
0084D1  1  F9 FB              .byte $f9, $fb ; "500"
0084D3  1  FA FB              .byte $fa, $fb ; "800"
0084D5  1  F6 50              .byte $f6, $50 ; "1000"
0084D7  1  F7 50              .byte $f7, $50 ; "2000"
0084D9  1  F8 50              .byte $f8, $50 ; "4000"
0084DB  1  F9 50              .byte $f9, $50 ; "5000"
0084DD  1  FA 50              .byte $fa, $50 ; "8000"
0084DF  1  FD FE              .byte $fd, $fe ; "1-UP"
0084E1  1               
0084E1  1               ;high nybble is digit number, low nybble is number to
0084E1  1               ;add to the digit of the player's score
0084E1  1               ScoreUpdateData:
0084E1  1  FF                 .byte $ff ;dummy
0084E2  1  41 42 44 45        .byte $41, $42, $44, $45, $48
0084E6  1  48           
0084E7  1  31 32 34 35        .byte $31, $32, $34, $35, $38, $00
0084EB  1  38 00        
0084ED  1               
0084ED  1               FloateyNumbersRoutine:
0084ED  1  BD 10 01                   lda FloateyNum_Control,x     ;load control for floatey number
0084F0  1  F0 D6                      beq EndExit                  ;if zero, branch to leave
0084F2  1  C9 0B                      cmp #$0b                     ;if less than $0b, branch
0084F4  1  90 05                      bcc ChkNumTimer
0084F6  1  A9 0B                      lda #$0b                     ;otherwise set to $0b, thus keeping
0084F8  1  9D 10 01                   sta FloateyNum_Control,x     ;it in range
0084FB  1  A8           ChkNumTimer:  tay                          ;use as Y
0084FC  1  BD 2C 01                   lda FloateyNum_Timer,x       ;check value here
0084FF  1  D0 04                      bne DecNumTimer              ;if nonzero, branch ahead
008501  1  9D 10 01                   sta FloateyNum_Control,x     ;initialize floatey number control and leave
008504  1  60                         rts
008505  1  DE 2C 01     DecNumTimer:  dec FloateyNum_Timer,x       ;decrement value here
008508  1  C9 2B                      cmp #$2b                     ;if not reached a certain point, branch
00850A  1  D0 1B                      bne ChkTallEnemy
00850C  1  C0 0B                      cpy #$0b                     ;check offset for $0b
00850E  1  D0 04                      bne LoadNumTiles             ;branch ahead if not found
008510  1  A9 40                      lda #Sfx_ExtraLife
008512  1  85 FE                      sta Square2SoundQueue        ;and play the 1-up sound
008514  1  B9 E1 84     LoadNumTiles: lda ScoreUpdateData,y        ;load point value here
008517  1  4A                         lsr                          ;move high nybble to low
008518  1  4A                         lsr
008519  1  4A                         lsr
00851A  1  4A                         lsr
00851B  1  AA                         tax                          ;use as X offset, essentially the digit
00851C  1  B9 E1 84                   lda ScoreUpdateData,y        ;load again and this time
00851F  1  29 0F                      and #%00001111               ;mask out the high nybble
008521  1  9D 34 01                   sta DigitModifier,x          ;store as amount to add to the digit
008524  1  20 EC A7                   jsr AddToScore               ;update the score accordingly
008527  1               ChkTallEnemy:
008527  1  BC E5 06     		ldy Enemy_SprDataOffset,x
00852A  1  B5 16        		lda Enemy_ID,x
00852C  1  C9 12        		cmp #$12
00852E  1  F0 22        		beq loc_6489
008530  1  C9 0D        		cmp #$D
008532  1  F0 1E        		beq loc_6489
008534  1  C9 05        		cmp #5
008536  1  F0 12        		beq loc_6481
008538  1  C9 0A        		cmp #$A
00853A  1  F0 16        		beq loc_6489
00853C  1  C9 0B        		cmp #$B
00853E  1  F0 12        		beq loc_6489
008540  1  C9 09        		cmp #9
008542  1  B0 06        		bcs loc_6481
008544  1  B5 1E        		lda $1E,x
008546  1  C9 02        		cmp #2
008548  1  B0 08        		bcs loc_6489
00854A  1               loc_6481:
00854A  1               
00854A  1  AE EE 03     		ldx SprDataOffset_Ctrl
00854D  1  BC EC 06     		ldy Alt_SprDataOffset,x
008550  1  A6 08        		ldx ObjectOffset
008552  1               loc_6489:
008552  1               
008552  1  BD 1E 01     		lda FloateyNum_Y_Pos,x
008555  1  C9 18        		cmp #$18
008557  1  90 05        		bcc loc_6495
008559  1  E9 01        		sbc #1
00855B  1  9D 1E 01     		sta FloateyNum_Y_Pos,x
00855E  1               loc_6495:
00855E  1               
00855E  1  BD 1E 01     		lda FloateyNum_Y_Pos,x
008561  1  E9 08        		sbc #8
008563  1  20 2A D2     		jsr DumpTwoSpr
008566  1  BD 17 01     		lda FloateyNum_X_Pos,x
008569  1  99 03 02     		sta Sprite_X_Position,y
00856C  1  18           		clc
00856D  1  69 08        		adc #8
00856F  1  99 07 02     		sta $207,y
008572  1  A9 02        		lda #2
008574  1  99 02 02     		sta Sprite_Attributes,y
008577  1  99 06 02     		sta $206,y
00857A  1  BD 10 01     		lda FloateyNum_Control,x
00857D  1  0A           		asl
00857E  1  AA           		tax
00857F  1  BD C9 84     		lda FloateyNumTileData,x
008582  1  99 01 02     		sta $201,y
008585  1  BD CA 84     		lda FloateyNumTileData+1,x
008588  1  99 05 02     		sta $205,y
00858B  1  A6 08        		ldx ObjectOffset
00858D  1  60           		rts
00858E  1               
00858E  1               ScreenRoutines:
00858E  1  AD 3C 07     		lda ScreenRoutineTask
008591  1  20 FC 8C     		jsr JumpEngine
008594  1  B4 85        		.word InitScreen
008596  1  C4 85        		.word SetupIntermediate
008598  1  6B 86        		.word WriteTopStatusLine
00859A  1  73 86        		.word WriteBottomStatusLine
00859C  1  BC 86        		.word DisplayTimeUp
00859E  1  27 88        		.word ResetSpritesAndScreenTimer
0085A0  1  DB 86        		.word DisplayIntermediate
0085A2  1  CA E4        		.word PrepareInitScreen ; PrepareInitializeArea ; Unused?
0085A4  1  27 88        		.word ResetSpritesAndScreenTimer
0085A6  1  20 87        		.word AreaParserTaskControl
0085A8  1  EB 85        		.word GetAreaPalette
0085AA  1  03 86        		.word GetBackgroundColor
0085AC  1  5C 86        		.word GetAlternatePalette1
0085AE  1  EE 83        		.word DrawTitleScreen
0085B0  1  81 E0        		.word ClearBuffersDrawIcon
0085B2  1  8A E0        		.word WriteTopScore
0085B4  1               
0085B4  1               InitScreen:
0085B4  1  20 4B 83     		jsr MoveAllSpritesOffscreen
0085B7  1  20 11 8D     		jsr InitializeNameTables
0085BA  1  AD 70 07     		lda OperMode
0085BD  1  F0 35        		beq loc_6528
0085BF  1               InitializeScreeNoSpritesNoNt:
0085BF  1               
0085BF  1  A2 03        		ldx #3
0085C1  1  4C F1 85     		jmp loc_6525
0085C4  1               SetupIntermediate:
0085C4  1               
0085C4  1  AD 44 07     		lda BackgroundColorCtrl
0085C7  1  48           		pha
0085C8  1  AD 56 07     		lda PlayerStatus
0085CB  1  48           		pha
0085CC  1  A9 00        		lda #0
0085CE  1  8D 7A 07     		sta UseNtBase2400
0085D1  1  8D 56 07     		sta PlayerStatus
0085D4  1  A9 02        		lda #2
0085D6  1  8D 44 07     		sta BackgroundColorCtrl
0085D9  1  20 11 86     		jsr GetPlayerColors_RW
0085DC  1  68           		pla
0085DD  1  8D 56 07     		sta PlayerStatus
0085E0  1  68           		pla
0085E1  1  8D 44 07     		sta BackgroundColorCtrl
0085E4  1  4C D7 86     		jmp IncSubtask
0085E7  1               AreaPalette:
0085E7  1  01           		.byte 1
0085E8  1  02           		.byte 2
0085E9  1  03           		.byte 3
0085EA  1  04           		.byte 4
0085EB  1               
0085EB  1               GetAreaPalette:
0085EB  1  AC 4E 07     		ldy AreaType
0085EE  1  BE E7 85     		ldx AreaPalette,y
0085F1  1               loc_6525:
0085F1  1               
0085F1  1  8E 73 07     		stx VRAM_Buffer_AddrCtrl
0085F4  1               loc_6528:
0085F4  1               
0085F4  1  4C D7 86     		jmp IncSubtask
0085F7  1               BGColorCtrl_Addr:
0085F7  1  00 09 0A 04  		.byte $00, $09, $0A, $04
0085FB  1               BackgroundColors:
0085FB  1  22 22 0F 0F  		.byte $22, $22, $0F, $0F
0085FF  1  0F 22 0F 0F  		.byte $0F, $22, $0F, $0F
008603  1               
008603  1               GetBackgroundColor:
008603  1  AC 44 07     		ldy BackgroundColorCtrl
008606  1  F0 06        		beq loc_654A
008608  1  B9 F3 85     		lda BGColorCtrl_Addr-4,y
00860B  1  8D 73 07     		sta VRAM_Buffer_AddrCtrl
00860E  1               loc_654A:
00860E  1  EE 3C 07     		inc ScreenRoutineTask
008611  1               
008611  1               GetPlayerColors_RW:
008611  1  AE 00 03     		ldx VRAM_Buffer1_Offset
008614  1  A0 00        		ldy #0
008616  1  AD 56 07     		lda PlayerStatus
008619  1  C9 02        		cmp #2
00861B  1  D0 02        		bne StartClrGet
00861D  1  A0 04        		ldy #4
00861F  1               StartClrGet:
00861F  1  A9 03        		lda #3
008621  1  85 00        		sta TMP_0
008623  1               ClrGetLoop:
008623  1  B9 17 64     		lda WRAM_PlayerColors,y
008626  1  9D 04 03     		sta VRAM_Buffer1+3,x
008629  1  C8           		iny
00862A  1  E8           		inx
00862B  1  C6 00        		dec TMP_0
00862D  1  10 F4        		bpl ClrGetLoop
00862F  1  AE 00 03     		ldx VRAM_Buffer1_Offset
008632  1  AC 44 07     		ldy BackgroundColorCtrl
008635  1  D0 03        		bne SetBGColor
008637  1  AC 4E 07     		ldy AreaType
00863A  1               SetBGColor:
00863A  1  B9 FB 85     		lda BackgroundColors,y
00863D  1  9D 04 03     		sta VRAM_Buffer1+3,x
008640  1  A9 3F        		lda #$3F
008642  1  9D 01 03     		sta VRAM_Buffer1,x
008645  1  A9 10        		lda #$10
008647  1  9D 02 03     		sta VRAM_Buffer1+1,x
00864A  1  A9 04        		lda #4
00864C  1  9D 03 03     		sta VRAM_Buffer1+2,x
00864F  1  A9 00        		lda #0
008651  1  9D 08 03     		sta VRAM_Buffer1+7,x
008654  1  8A           		txa
008655  1  18           		clc
008656  1  69 07        		adc #7
008658  1               SetVRAMOffset:
008658  1  8D 00 03     		sta VRAM_Buffer1_Offset
00865B  1  60           		rts
00865C  1               
00865C  1               GetAlternatePalette1:
00865C  1  AD 33 07     		lda AreaStyle
00865F  1  C9 01        		cmp #1
008661  1  D0 05        		bne NoAltPal
008663  1  A9 0B        		lda #$B
008665  1               loc_65A1:
008665  1  8D 73 07     		sta VRAM_Buffer_AddrCtrl
008668  1               NoAltPal:
008668  1  4C D7 86     		jmp IncSubtask
00866B  1               
00866B  1               WriteTopStatusLine:
00866B  1  A9 00              lda #$00          ;select main status bar
00866D  1  20 C3 87           jsr WriteGameText ;output it
008670  1  4C D7 86           jmp IncSubtask    ;onto the next task
008673  1               
008673  1               WriteBottomStatusLine:
008673  1  20 F1 A7           jsr WriteScoreAndCoinTally ;write player's score and coin tally to screen
008676  1  AE 00 03           ldx VRAM_Buffer1_Offset
008679  1  A9 20              lda #$20                   ;write address for world-area number on screen
00867B  1  9D 01 03           sta VRAM_Buffer1,x
00867E  1  A9 73              lda #$73
008680  1  9D 02 03           sta VRAM_Buffer1+1,x
008683  1  A9 03              lda #$03                   ;write length for it
008685  1  9D 03 03           sta VRAM_Buffer1+2,x
008688  1  20 AA 86           jsr GetWorldNumber  ;first the world number
00868B  1  9D 04 03           sta VRAM_Buffer1+3,x
00868E  1  A9 28              lda #$28                   ;next the dash
008690  1  9D 05 03           sta VRAM_Buffer1+4,x
008693  1  AC 5C 07           ldy LevelNumber            ;next the level number
008696  1  C8                 iny                        ;increment for proper number display
008697  1  98                 tya
008698  1  9D 06 03           sta VRAM_Buffer1+5,x
00869B  1  A9 00              lda #$00                   ;put null terminator at the end
00869D  1  9D 07 03           sta VRAM_Buffer1+6,x
0086A0  1  8A                 txa                        ;move the buffer offset up by 6 bytes
0086A1  1  18                 clc
0086A2  1  69 06              adc #$06
0086A4  1  8D 00 03           sta VRAM_Buffer1_Offset
0086A7  1  4C D7 86           jmp IncSubtask
0086AA  1               
0086AA  1               GetWorldNumber:
0086AA  1  AC 5F 07     		ldy WorldNumber
0086AD  1  AD FB 07     		lda IsPlayingExtendedWorlds
0086B0  1  F0 07        		beq loc_65F5
0086B2  1  98           		tya
0086B3  1  29 03        		and #3
0086B5  1  18           		clc
0086B6  1  69 09        		adc #9
0086B8  1  A8           		tay
0086B9  1               loc_65F5:
0086B9  1  C8           		iny
0086BA  1  98           		tya
0086BB  1  60           		rts
0086BC  1               
0086BC  1               DisplayTimeUp:
0086BC  1  AD 59 07     		lda GameTimerExpiredFlag
0086BF  1  F0 13        		beq NoTimeUp
0086C1  1  A9 00        		lda #0
0086C3  1  8D 59 07     		sta GameTimerExpiredFlag
0086C6  1  A9 02        		lda #2
0086C8  1               WriteTextAndResetTimers:
0086C8  1  20 C3 87     		jsr WriteGameText
0086CB  1  20 2F 88     		jsr ResetScreenTimer
0086CE  1  A9 00        		lda #0
0086D0  1  8D 74 07     		sta DisableScreenFlag
0086D3  1  60           		rts
0086D4  1               NoTimeUp:
0086D4  1  EE 3C 07     		inc ScreenRoutineTask
0086D7  1               IncSubtask:
0086D7  1  EE 3C 07     		inc ScreenRoutineTask
0086DA  1  60           		rts
0086DB  1               
0086DB  1               DisplayIntermediate:
0086DB  1  AD 70 07     		lda OperMode
0086DE  1  F0 3A        		beq @no_intermediate
0086E0  1  C9 03        		cmp #3
0086E2  1  F0 27        		beq @gameoverinter
0086E4  1  AD 52 07     		lda AltEntranceControl
0086E7  1  D0 31        		bne @no_intermediate
0086E9  1  AC 4E 07     		ldy AreaType
0086EC  1  C0 03        		cpy #3
0086EE  1  F0 05        		beq @playerinter
0086F0  1  AD 69 07     		lda DisableIntermediate
0086F3  1  D0 25        		bne @no_intermediate
0086F5  1               @playerinter:
0086F5  1  20 27 DC     		jsr DrawPlayer_Intermediate
0086F8  1  A9 01        		lda #1
0086FA  1  20 C8 86     		jsr WriteTextAndResetTimers
0086FD  1  20 08 FE     		jsr Enter_RenderIntermediateTime
008700  1  AD 5F 07     		lda WorldNumber
008703  1  C9 08        		cmp #8
008705  1  D0 D0        		bne IncSubtask
008707  1  EE 74 07     		inc DisableScreenFlag
00870A  1  60           		rts
00870B  1               @gameoverinter:
00870B  1  A9 03        		lda #3
00870D  1  20 C3 87     		jsr WriteGameText
008710  1  AD 5F 07     		lda WorldNumber
008713  1  C9 08        		cmp #8
008715  1  F0 C0        		beq IncSubtask
008717  1  4C EA 83     		jmp Next_OperMode_Task
00871A  1               @no_intermediate:
00871A  1  A9 09        		lda #9
00871C  1  8D 3C 07     		sta ScreenRoutineTask
00871F  1  60           		rts
008720  1               
008720  1               AreaParserTaskControl:
008720  1  EE 74 07     		inc DisableScreenFlag
008723  1               loc_665C:
008723  1  20 BB 90     		jsr AreaParserTaskHandler
008726  1  AD 1F 07     		lda AreaParserTaskNum
008729  1  D0 F8        		bne loc_665C
00872B  1  CE 1E 07     		dec ColumnSets
00872E  1  10 03        		bpl loc_666C
008730  1  EE 3C 07     		inc ScreenRoutineTask
008733  1               loc_666C:
008733  1  A9 06        		lda #6
008735  1  8D 73 07     		sta VRAM_Buffer_AddrCtrl
008738  1  60           		rts
008739  1               
008739  1               GameText:
008739  1               TopStatusBarLine:
008739  1  20 43 05 16    .byte $20, $43, $05, $16, $0a, $1b, $12, $18 ;"MARIO"
00873D  1  0A 1B 12 18  
008741  1  20 52 0B 20    .byte $20, $52, $0b, $20, $18, $1b, $15, $0d ;"WORLD  TIME"
008745  1  18 1B 15 0D  
008749  1  24 24 1D 12    .byte $24, $24, $1d, $12, $16, $0e
00874D  1  16 0E        
00874F  1  20 68 05 00    .byte $20, $68, $05, $00, $24, $24, $2e, $29 ;score trailing digit and coin display
008753  1  24 24 2E 29  
008757  1  23 C0 7F AA    .byte $23, $c0, $7f, $aa ;attribute table data, clears name table 0 to palette 2
00875B  1  23 C2 01 EA    .byte $23, $c2, $01, $ea ;attribute table data, used for coin icon in status bar
00875F  1  FF             .byte $ff ;end of data block
008760  1               WorldLivesDisplay:
008760  1               		;
008760  1               		; Display lifes left and mario screen
008760  1               		;
008760  1  21 CD 07 24  		.byte $21, $CD, $07, $24, $24
008764  1  24           
008765  1  29 24 24 24  		.byte $29, $24, $24, $24, $24
008769  1  24           
00876A  1  21 4B 09 20  		.byte $21, $4B, $09, $20, $18
00876E  1  18           
00876F  1  1B 15 0D 24  		.byte $1B, $15, $0D, $24, $24, $28, $24
008773  1  24 28 24     
008776  1  22 0C 47 24  		.byte $22, $0C, $47, $24
00877A  1  23 DC 01 BA  		.byte $23, $DC, $01, $BA
00877E  1  FF           		.byte $FF
00877F  1               OnePlayerTimeUp:
00877F  1  22 0C 07 1D  		.byte $22, $0C, $07, $1D, $12, $16, $0E, $24, $1E, $19
008783  1  12 16 0E 24  
008787  1  1E 19        
008789  1  FF           		.byte $FF
00878A  1               WarpZoneWelcome:
00878A  1  25 84 15       .byte $25, $84, $15
00878D  1  20 0E 15 0C    .byte $20, $0e, $15, $0c, $18, $16, $0e, $24, $1d, $18 ; "WELCOME TO WARP ZONE!"
008791  1  18 16 0E 24  
008795  1  1D 18        
008797  1  24 20 0A 1B    .byte $24, $20, $0a, $1b, $19, $24, $23, $18, $17, $0e
00879B  1  19 24 23 18  
00879F  1  17 0E        
0087A1  1  2B             .byte $2b
0087A2  1  26 2D 01 24    .byte $26, $2d, $01, $24 ;blank filler for world number
0087A6  1  27 D9 46 AA    .byte $27, $d9, $46, $aa ;attribute data
0087AA  1  27 E1 45 AA    .byte $27, $e1, $45, $aa
0087AE  1  00             .byte $00
0087AF  1               
0087AF  1               LuigiName:
0087AF  1  15 1E 12 10    .byte $15, $1e, $12, $10, $12 ; "LUIGI", no address or length
0087B3  1  12           
0087B4  1               
0087B4  1               WarpZoneNumbers:
0087B4  1  02           		.byte 2
0087B5  1  03           		.byte 3
0087B6  1  04           		.byte 4
0087B7  1  01           		.byte 1
0087B8  1  06           		.byte 6
0087B9  1  07           		.byte 7
0087BA  1  08           		.byte 8
0087BB  1  05           		.byte 5
0087BC  1  0B           		.byte $B
0087BD  1  0C           		.byte $C
0087BE  1  0D           		.byte $D
0087BF  1               
0087BF  1               GameTextOffsets:
0087BF  1  00           		.byte TopStatusBarLine-GameText
0087C0  1  27           		.byte WorldLivesDisplay-GameText
0087C1  1  46           		.byte OnePlayerTimeUp-GameText
0087C2  1  00           		.byte 0 ;??
0087C3  1               
0087C3  1               WriteGameText:
0087C3  1  48           		pha
0087C4  1  A8           		tay
0087C5  1  BE BF 87     		ldx GameTextOffsets,y
0087C8  1  A0 00        		ldy #0
0087CA  1               loc_6722:
0087CA  1  BD 39 87     		lda GameText,x
0087CD  1  C9 FF        		cmp #$FF
0087CF  1  F0 07        		beq loc_6730
0087D1  1  99 01 03     		sta $301,y
0087D4  1  E8           		inx
0087D5  1  C8           		iny
0087D6  1  D0 F2        		bne loc_6722
0087D8  1               loc_6730:
0087D8  1  A9 00        		lda #0
0087DA  1  99 01 03     		sta $301,y
0087DD  1  8C 00 03     		sty VRAM_Buffer1_Offset
0087E0  1  68           		pla
0087E1  1  F0 17        		beq CheckPlayerName
0087E3  1  AA           		tax
0087E4  1  CA           		dex
0087E5  1  D0 12        		bne EndOfWriteGameText
0087E7  1  A9 CE        		lda #$CE
0087E9  1  8D 09 03     		sta byte_309
0087EC  1  20 AA 86     		jsr GetWorldNumber
0087EF  1  8D 14 03     		sta byte_314
0087F2  1  AC 5C 07     		ldy LevelNumber
0087F5  1  C8           		iny
0087F6  1  8C 16 03     		sty byte_316
0087F9  1               EndOfWriteGameText:
0087F9  1  60           		rts
0087FA  1               
0087FA  1               CheckPlayerName:
0087FA  1  AD 53 07                  lda $0753     ;check selected player
0087FD  1  F0 0B                     beq ExitChkName        ;if mario, leave
0087FF  1  A0 04                     ldy #$04
008801  1  B9 AF 87     NameLoop:    lda LuigiName,y        ;otherwise, replace "MARIO" with "LUIGI"
008804  1  99 04 03                  sta VRAM_Buffer1+3,y
008807  1  88                        dey
008808  1  10 F7                     bpl NameLoop           ;do this until each letter is replaced
00880A  1  60           ExitChkName: rts
00880B  1               
00880B  1               sub_675E:
00880B  1  48           		pha
00880C  1  A0 FF        		ldy #$FF
00880E  1               loc_6761:
00880E  1  C8           		iny
00880F  1  B9 8A 87     		lda WarpZoneWelcome,y
008812  1  99 01 03     		sta $301,y
008815  1  D0 F7        		bne loc_6761
008817  1  68           		pla
008818  1  38           		sec
008819  1  E9 80        		sbc #$80
00881B  1  AA           		tax
00881C  1  BD B4 87     		lda WarpZoneNumbers,x
00881F  1  8D 1C 03     		sta byte_31C
008822  1  A9 24        		lda #$24
008824  1  4C 58 86     		jmp SetVRAMOffset
008827  1               ResetSpritesAndScreenTimer:
008827  1               
008827  1  AD A0 07     		lda ScreenTimer
00882A  1  D0 0B        		bne NoReset
00882C  1  20 4B 83     		jsr MoveAllSpritesOffscreen
00882F  1               ResetScreenTimer:
00882F  1               
00882F  1  A9 07        		lda #7
008831  1  8D A0 07     		sta ScreenTimer
008834  1  EE 3C 07     		inc ScreenRoutineTask
008837  1               NoReset:
008837  1               
008837  1  60           		rts
008838  1               RenderAreaGraphics:
008838  1               
008838  1  AD 26 07     		lda CurrentColumnPos
00883B  1  29 01        		and #1
00883D  1  85 05        		sta byte_5
00883F  1  AC 40 03     		ldy VRAM_Buffer2_Offset
008842  1  84 00        		sty TMP_0
008844  1  AD 21 07     		lda CurrentNTAddr_Low
008847  1  99 42 03     		sta $342,y
00884A  1  AD 20 07     		lda CurrentNTAddr_High
00884D  1  99 41 03     		sta $341,y
008850  1  A9 9A        		lda #$9A
008852  1  99 43 03     		sta $343,y
008855  1  A9 00        		lda #0
008857  1  85 04        		sta byte_4
008859  1  AA           		tax
00885A  1               loc_67AD:
00885A  1               
00885A  1  86 01        		stx TMP_1
00885C  1  BD A1 06     		lda $6A1,x
00885F  1  29 C0        		and #$C0
008861  1  85 03        		sta byte_3
008863  1  0A           		asl
008864  1  2A           		rol
008865  1  2A           		rol
008866  1  A8           		tay
008867  1  B9 92 8A     		lda MetatileGraphics_Low_RELOC,y
00886A  1  85 06        		sta byte_6
00886C  1  B9 96 8A     		lda MetatileGraphics_High_RELOC,y
00886F  1  85 07        		sta unk_7
008871  1  BD A1 06     		lda $6A1,x
008874  1  0A           		asl
008875  1  0A           		asl
008876  1  85 02        		sta byte_2
008878  1  AD 1F 07     		lda AreaParserTaskNum
00887B  1  29 01        		and #1
00887D  1  49 01        		eor #1
00887F  1  0A           		asl
008880  1  65 02        		adc byte_2
008882  1  A8           		tay
008883  1  A6 00        		ldx TMP_0
008885  1  B1 06        		lda (6),y
008887  1  9D 44 03     		sta $344,x
00888A  1  C8           		iny
00888B  1  B1 06        		lda (6),y
00888D  1  9D 45 03     		sta $345,x
008890  1  A4 04        		ldy byte_4
008892  1  A5 05        		lda byte_5
008894  1  D0 0E        		bne loc_67F7
008896  1  A5 01        		lda TMP_1
008898  1  4A           		lsr
008899  1  B0 19        		bcs loc_6807
00889B  1  26 03        		rol byte_3
00889D  1  26 03        		rol byte_3
00889F  1  26 03        		rol byte_3
0088A1  1  4C BA 88     		jmp loc_680D
0088A4  1               loc_67F7:
0088A4  1               
0088A4  1  A5 01        		lda TMP_1
0088A6  1  4A           		lsr
0088A7  1  B0 0F        		bcs loc_680B
0088A9  1  46 03        		lsr byte_3
0088AB  1  46 03        		lsr byte_3
0088AD  1  46 03        		lsr byte_3
0088AF  1  46 03        		lsr byte_3
0088B1  1  4C BA 88     		jmp loc_680D
0088B4  1               loc_6807:
0088B4  1               
0088B4  1  46 03        		lsr byte_3
0088B6  1  46 03        		lsr byte_3
0088B8  1               loc_680B:
0088B8  1               
0088B8  1  E6 04        		inc byte_4
0088BA  1               loc_680D:
0088BA  1               
0088BA  1  B9 F9 03     		lda $3F9,y
0088BD  1  05 03        		ora byte_3
0088BF  1  99 F9 03     		sta $3F9,y
0088C2  1  E6 00        		inc TMP_0
0088C4  1  E6 00        		inc TMP_0
0088C6  1  A6 01        		ldx TMP_1
0088C8  1  E8           		inx
0088C9  1  E0 0D        		cpx #$D
0088CB  1  90 8D        		bcc loc_67AD
0088CD  1  A4 00        		ldy TMP_0
0088CF  1  C8           		iny
0088D0  1  C8           		iny
0088D1  1  C8           		iny
0088D2  1  A9 00        		lda #0
0088D4  1  99 41 03     		sta $341,y
0088D7  1  8C 40 03     		sty VRAM_Buffer2_Offset
0088DA  1  EE 21 07     		inc CurrentNTAddr_Low
0088DD  1  AD 21 07     		lda CurrentNTAddr_Low
0088E0  1  29 1F        		and #$1F
0088E2  1  D0 0D        		bne loc_6844
0088E4  1  A9 80        		lda #$80
0088E6  1  8D 21 07     		sta CurrentNTAddr_Low
0088E9  1  AD 20 07     		lda CurrentNTAddr_High
0088EC  1  49 04        		eor #4
0088EE  1  8D 20 07     		sta CurrentNTAddr_High
0088F1  1               loc_6844:
0088F1  1               
0088F1  1  4C 47 89     		jmp loc_689A
0088F4  1               RenderAttributeTables:
0088F4  1               
0088F4  1  AD 21 07     		lda CurrentNTAddr_Low
0088F7  1  29 1F        		and #$1F
0088F9  1  38           		sec
0088FA  1  E9 04        		sbc #4
0088FC  1  29 1F        		and #$1F
0088FE  1  85 01        		sta TMP_1
008900  1  AD 20 07     		lda CurrentNTAddr_High
008903  1  B0 02        		bcs loc_685A
008905  1  49 04        		eor #4
008907  1               loc_685A:
008907  1               
008907  1  29 04        		and #4
008909  1  09 23        		ora #$23
00890B  1  85 00        		sta TMP_0
00890D  1  A5 01        		lda TMP_1
00890F  1  4A           		lsr
008910  1  4A           		lsr
008911  1  69 C0        		adc #$C0
008913  1  85 01        		sta TMP_1
008915  1  A2 00        		ldx #0
008917  1  AC 40 03     		ldy VRAM_Buffer2_Offset
00891A  1               loc_686D:
00891A  1               
00891A  1  A5 00        		lda TMP_0
00891C  1  99 41 03     		sta $341,y
00891F  1  A5 01        		lda TMP_1
008921  1  18           		clc
008922  1  69 08        		adc #8
008924  1  99 42 03     		sta $342,y
008927  1  85 01        		sta TMP_1
008929  1  BD F9 03     		lda $3F9,x
00892C  1  99 44 03     		sta $344,y
00892F  1  A9 01        		lda #1
008931  1  99 43 03     		sta $343,y
008934  1  4A           		lsr
008935  1  9D F9 03     		sta $3F9,x
008938  1  C8           		iny
008939  1  C8           		iny
00893A  1  C8           		iny
00893B  1  C8           		iny
00893C  1  E8           		inx
00893D  1  E0 07        		cpx #7
00893F  1  90 D9        		bcc loc_686D
008941  1  99 41 03     		sta $341,y
008944  1  8C 40 03     		sty VRAM_Buffer2_Offset
008947  1               loc_689A:
008947  1               
008947  1  A9 06        		lda #6
008949  1  8D 73 07     		sta VRAM_Buffer_AddrCtrl
00894C  1  60           		rts
00894D  1               ColorRotatePalette:
00894D  1  27           		.byte $27
00894E  1  27           		.byte $27
00894F  1  27           		.byte $27
008950  1  17           		.byte $17
008951  1  07           		.byte 7
008952  1  17           		.byte $17
008953  1               BlankPalette:
008953  1  3F           		.byte $3F
008954  1  0C           		.byte $C
008955  1  04           		.byte 4
008956  1  FF           		.byte $FF
008957  1  FF           		.byte $FF
008958  1  FF           		.byte $FF
008959  1  FF           		.byte $FF
00895A  1  00           		.byte 0
00895B  1               Palette3Data:
00895B  1  0F           		.byte $F
00895C  1  07           		.byte 7
00895D  1  12           		.byte $12
00895E  1  0F           		.byte $F
00895F  1  0F           		.byte $F
008960  1  07           		.byte 7
008961  1  17           		.byte $17
008962  1  0F           		.byte $F
008963  1  0F           		.byte $F
008964  1  07           		.byte 7
008965  1  17           		.byte $17
008966  1  1C           		.byte $1C
008967  1  0F           		.byte $F
008968  1  07           		.byte 7
008969  1  17           		.byte $17
00896A  1  00           		.byte 0
00896B  1               ColorRotation:
00896B  1               
00896B  1  A5 09        		lda FrameCounter
00896D  1  29 07        		and #7
00896F  1  D0 51        		bne locret_6915
008971  1  AE 00 03     		ldx VRAM_Buffer1_Offset
008974  1  E0 31        		cpx #$31
008976  1  B0 4A        		bcs locret_6915
008978  1  A8           		tay
008979  1               loc_68CC:
008979  1               
008979  1  B9 53 89     		lda BlankPalette,y
00897C  1  9D 01 03     		sta $301,x
00897F  1  E8           		inx
008980  1  C8           		iny
008981  1  C0 08        		cpy #8
008983  1  90 F4        		bcc loc_68CC
008985  1  AE 00 03     		ldx VRAM_Buffer1_Offset
008988  1  A9 03        		lda #3
00898A  1  85 00        		sta TMP_0
00898C  1  AD 4E 07     		lda AreaType
00898F  1  0A           		asl
008990  1  0A           		asl
008991  1  A8           		tay
008992  1               loc_68E5:
008992  1               
008992  1  B9 5B 89     		lda Palette3Data,y
008995  1  9D 04 03     		sta $304,x
008998  1  C8           		iny
008999  1  E8           		inx
00899A  1  C6 00        		dec TMP_0
00899C  1  10 F4        		bpl loc_68E5
00899E  1  AE 00 03     		ldx VRAM_Buffer1_Offset
0089A1  1  AC D4 06     		ldy ColorRotateOffset
0089A4  1  B9 4D 89     		lda ColorRotatePalette,y
0089A7  1  9D 05 03     		sta $305,x
0089AA  1  AD 00 03     		lda VRAM_Buffer1_Offset
0089AD  1  18           		clc
0089AE  1  69 07        		adc #7
0089B0  1  8D 00 03     		sta VRAM_Buffer1_Offset
0089B3  1  EE D4 06     		inc ColorRotateOffset
0089B6  1  AD D4 06     		lda ColorRotateOffset
0089B9  1  C9 06        		cmp #6
0089BB  1  90 05        		bcc locret_6915
0089BD  1  A9 00        		lda #0
0089BF  1  8D D4 06     		sta ColorRotateOffset
0089C2  1               locret_6915:
0089C2  1               
0089C2  1  60           		rts
0089C3  1               BlockGfxData:
0089C3  1  45           		.byte $45
0089C4  1  45           		.byte $45
0089C5  1  47           		.byte $47
0089C6  1  47           		.byte $47
0089C7  1  47           		.byte $47
0089C8  1  47           		.byte $47
0089C9  1  47           		.byte $47
0089CA  1  47           		.byte $47
0089CB  1  57           		.byte $57
0089CC  1  58           		.byte $58
0089CD  1  59           		.byte $59
0089CE  1  5A           		.byte $5A
0089CF  1  24           		.byte $24
0089D0  1  24           		.byte $24
0089D1  1  24           		.byte $24
0089D2  1  24           		.byte $24
0089D3  1  26           		.byte $26
0089D4  1  26           		.byte $26
0089D5  1  26           		.byte $26
0089D6  1  26           		.byte $26
0089D7  1               
0089D7  1               RemoveCoin_Axe:
0089D7  1  A0 41        		ldy #$41
0089D9  1  A9 03        		lda #3
0089DB  1  AE 4E 07     		ldx AreaType
0089DE  1  D0 02        		bne WriteBlankMT
0089E0  1  A9 04        		lda #4
0089E2  1               WriteBlankMT:
0089E2  1  20 21 8A     		jsr PutBlockMetatile
0089E5  1  A9 06        		lda #6
0089E7  1  8D 73 07     		sta VRAM_Buffer_AddrCtrl
0089EA  1  60           		rts
0089EB  1               
0089EB  1               ReplaceBlockMetatile:
0089EB  1  20 F7 89     		jsr WriteBlockMetatile
0089EE  1  EE F0 03     		inc Block_ResidualCounter
0089F1  1  DE EC 03     		dec Block_RepFlag,x
0089F4  1  60           		rts
0089F5  1               
0089F5  1               DestroyBlockMetatile:
0089F5  1  A9 00        		lda #0
0089F7  1               WriteBlockMetatile:
0089F7  1  A0 03        		ldy #3
0089F9  1  C9 00        		cmp #0
0089FB  1  F0 14        		beq loc_6964
0089FD  1  A0 00        		ldy #0
0089FF  1  C9 56        		cmp #$56
008A01  1  F0 0E        		beq loc_6964
008A03  1  C9 4F        		cmp #$4F
008A05  1  F0 0A        		beq loc_6964
008A07  1  C8           		iny
008A08  1  C9 5C        		cmp #$5C
008A0A  1  F0 05        		beq loc_6964
008A0C  1  C9 50        		cmp #$50
008A0E  1  F0 01        		beq loc_6964
008A10  1  C8           		iny
008A11  1               loc_6964:
008A11  1  98           		tya
008A12  1  AC 00 03     		ldy VRAM_Buffer1_Offset
008A15  1  C8           		iny
008A16  1  20 21 8A     		jsr PutBlockMetatile
008A19  1               loc_696C:
008A19  1  88           		dey
008A1A  1  98           		tya
008A1B  1  18           		clc
008A1C  1  69 0A        		adc #$A
008A1E  1  4C 58 86     		jmp SetVRAMOffset
008A21  1               
008A21  1               PutBlockMetatile:
008A21  1  86 00        		stx TMP_0
008A23  1  84 01        		sty TMP_1
008A25  1  0A           		asl
008A26  1  0A           		asl
008A27  1  AA           		tax
008A28  1  A0 20        		ldy #$20
008A2A  1  A5 06        		lda byte_6
008A2C  1  C9 D0        		cmp #$D0
008A2E  1  90 02        		bcc loc_6985
008A30  1  A0 24        		ldy #$24
008A32  1               loc_6985:
008A32  1  84 03        		sty byte_3
008A34  1  29 0F        		and #$F
008A36  1  0A           		asl
008A37  1  85 04        		sta byte_4
008A39  1  A9 00        		lda #0
008A3B  1  85 05        		sta byte_5
008A3D  1  A5 02        		lda byte_2
008A3F  1  18           		clc
008A40  1  69 20        		adc #$20
008A42  1  0A           		asl
008A43  1  26 05        		rol byte_5
008A45  1  0A           		asl
008A46  1  26 05        		rol byte_5
008A48  1  65 04        		adc byte_4
008A4A  1  85 04        		sta byte_4
008A4C  1  A5 05        		lda byte_5
008A4E  1  69 00        		adc #0
008A50  1  18           		clc
008A51  1  65 03        		adc byte_3
008A53  1  85 05        		sta byte_5
008A55  1  A4 01        		ldy TMP_1
008A57  1               loc_69AA:
008A57  1  BD C3 89     		lda BlockGfxData,x
008A5A  1  99 03 03     		sta $303,y
008A5D  1  BD C4 89     		lda BlockGfxData+1,x
008A60  1  99 04 03     		sta $304,y
008A63  1  BD C5 89     		lda BlockGfxData+2,x
008A66  1  99 08 03     		sta $308,y
008A69  1  BD C6 89     		lda BlockGfxData+3,x
008A6C  1  99 09 03     		sta $309,y
008A6F  1  A5 04        		lda byte_4
008A71  1  99 01 03     		sta $301,y
008A74  1  18           		clc
008A75  1  69 20        		adc #$20
008A77  1  99 06 03     		sta $306,y
008A7A  1  A5 05        		lda byte_5
008A7C  1  99 00 03     		sta $300,y
008A7F  1  99 05 03     		sta $305,y
008A82  1  A9 02        		lda #2
008A84  1  99 02 03     		sta $302,y
008A87  1  99 07 03     		sta $307,y
008A8A  1  A9 00        		lda #0
008A8C  1  99 0A 03     		sta $30A,y
008A8F  1  A6 00        		ldx TMP_0
008A91  1  60           		rts
008A92  1               
008A92  1               MetatileGraphics_Low_RELOC:
008A92  1  9A           		.byte <Palette0_MTiles
008A93  1  2A           		.byte <Palette1_MTiles
008A94  1  EA           		.byte <Palette2_MTiles
008A95  1  1E           		.byte <Palette3_MTiles
008A96  1               MetatileGraphics_High_RELOC:
008A96  1  8A           		.byte >Palette0_MTiles
008A97  1  8B           		.byte >Palette1_MTiles
008A98  1  8B           		.byte >Palette2_MTiles
008A99  1  8C           		.byte >Palette3_MTiles
008A9A  1               Palette0_MTiles:
008A9A  1  24           		.byte $24
008A9B  1  24           		.byte $24
008A9C  1  24           		.byte $24
008A9D  1  24           		.byte $24
008A9E  1  27           		.byte $27
008A9F  1  27           		.byte $27
008AA0  1  27           		.byte $27
008AA1  1  27           		.byte $27
008AA2  1  24           		.byte $24
008AA3  1  24           		.byte $24
008AA4  1  24           		.byte $24
008AA5  1  35           		.byte $35
008AA6  1  36           		.byte $36
008AA7  1  25           		.byte $25
008AA8  1  37           		.byte $37
008AA9  1  25           		.byte $25
008AAA  1  24           		.byte $24
008AAB  1  38           		.byte $38
008AAC  1  24           		.byte $24
008AAD  1  24           		.byte $24
008AAE  1  24           		.byte $24
008AAF  1  30           		.byte $30
008AB0  1  30           		.byte $30
008AB1  1  26           		.byte $26
008AB2  1  26           		.byte $26
008AB3  1  26           		.byte $26
008AB4  1  34           		.byte $34
008AB5  1  26           		.byte $26
008AB6  1  24           		.byte $24
008AB7  1  31           		.byte $31
008AB8  1  24           		.byte $24
008AB9  1  32           		.byte $32
008ABA  1  33           		.byte $33
008ABB  1  26           		.byte $26
008ABC  1  24           		.byte $24
008ABD  1  33           		.byte $33
008ABE  1  34           		.byte $34
008ABF  1  26           		.byte $26
008AC0  1  26           		.byte $26
008AC1  1  26           		.byte $26
008AC2  1  26           		.byte $26
008AC3  1  26           		.byte $26
008AC4  1  26           		.byte $26
008AC5  1  26           		.byte $26
008AC6  1  24           		.byte $24
008AC7  1  C0           		.byte $C0
008AC8  1  24           		.byte $24
008AC9  1  C0           		.byte $C0
008ACA  1  24           		.byte $24
008ACB  1  7F           		.byte $7F
008ACC  1  7F           		.byte $7F
008ACD  1  24           		.byte $24
008ACE  1  B8           		.byte $B8
008ACF  1  BA           		.byte $BA
008AD0  1  B9           		.byte $B9
008AD1  1  BB           		.byte $BB
008AD2  1  B8           		.byte $B8
008AD3  1  BC           		.byte $BC
008AD4  1  B9           		.byte $B9
008AD5  1  BD           		.byte $BD
008AD6  1  BA           		.byte $BA
008AD7  1  BC           		.byte $BC
008AD8  1  BB           		.byte $BB
008AD9  1  BD           		.byte $BD
008ADA  1  60           		.byte $60
008ADB  1  64           		.byte $64
008ADC  1  61           		.byte $61
008ADD  1  65           		.byte $65
008ADE  1  62           		.byte $62
008ADF  1  66           		.byte $66
008AE0  1  63           		.byte $63
008AE1  1  67           		.byte $67
008AE2  1  60           		.byte $60
008AE3  1  64           		.byte $64
008AE4  1  61           		.byte $61
008AE5  1  65           		.byte $65
008AE6  1  62           		.byte $62
008AE7  1  66           		.byte $66
008AE8  1  63           		.byte $63
008AE9  1  67           		.byte $67
008AEA  1  68           		.byte $68
008AEB  1  68           		.byte $68
008AEC  1  69           		.byte $69
008AED  1  69           		.byte $69
008AEE  1  26           		.byte $26
008AEF  1  26           		.byte $26
008AF0  1  6A           		.byte $6A
008AF1  1  6A           		.byte $6A
008AF2  1  4B           		.byte $4B
008AF3  1  4C           		.byte $4C
008AF4  1  4D           		.byte $4D
008AF5  1  4E           		.byte $4E
008AF6  1  4D           		.byte $4D
008AF7  1  4F           		.byte $4F
008AF8  1  4D           		.byte $4D
008AF9  1  4F           		.byte $4F
008AFA  1  4D           		.byte $4D
008AFB  1  4E           		.byte $4E
008AFC  1  50           		.byte $50
008AFD  1  51           		.byte $51
008AFE  1  86           		.byte $86
008AFF  1  8A           		.byte $8A
008B00  1  87           		.byte $87
008B01  1  8B           		.byte $8B
008B02  1  88           		.byte $88
008B03  1  8C           		.byte $8C
008B04  1  88           		.byte $88
008B05  1  8C           		.byte $8C
008B06  1  89           		.byte $89
008B07  1  8D           		.byte $8D
008B08  1  69           		.byte $69
008B09  1  69           		.byte $69
008B0A  1  8E           		.byte $8E
008B0B  1  91           		.byte $91
008B0C  1  8F           		.byte $8F
008B0D  1  92           		.byte $92
008B0E  1  26           		.byte $26
008B0F  1  93           		.byte $93
008B10  1  26           		.byte $26
008B11  1  93           		.byte $93
008B12  1  90           		.byte $90
008B13  1  94           		.byte $94
008B14  1  69           		.byte $69
008B15  1  69           		.byte $69
008B16  1  A4           		.byte $A4
008B17  1  E9           		.byte $E9
008B18  1  EA           		.byte $EA
008B19  1  EB           		.byte $EB
008B1A  1  24           		.byte $24
008B1B  1  24           		.byte $24
008B1C  1  24           		.byte $24
008B1D  1  24           		.byte $24
008B1E  1  24           		.byte $24
008B1F  1  2F           		.byte $2F
008B20  1  24           		.byte $24
008B21  1  3D           		.byte $3D
008B22  1  A2           		.byte $A2
008B23  1  A2           		.byte $A2
008B24  1  A3           		.byte $A3
008B25  1  A3           		.byte $A3
008B26  1  24           		.byte $24
008B27  1  24           		.byte $24
008B28  1  24           		.byte $24
008B29  1  24           		.byte $24
008B2A  1               Palette1_MTiles:
008B2A  1  A2           		.byte $A2
008B2B  1  A2           		.byte $A2
008B2C  1  A3           		.byte $A3
008B2D  1  A3           		.byte $A3
008B2E  1  99           		.byte $99
008B2F  1  24           		.byte $24
008B30  1  99           		.byte $99
008B31  1  24           		.byte $24
008B32  1  24           		.byte $24
008B33  1  A2           		.byte $A2
008B34  1  3E           		.byte $3E
008B35  1  3F           		.byte $3F
008B36  1  5B           		.byte $5B
008B37  1  5C           		.byte $5C
008B38  1  24           		.byte $24
008B39  1  A3           		.byte $A3
008B3A  1  24           		.byte $24
008B3B  1  24           		.byte $24
008B3C  1  24           		.byte $24
008B3D  1  24           		.byte $24
008B3E  1  9D           		.byte $9D
008B3F  1  47           		.byte $47
008B40  1  9E           		.byte $9E
008B41  1  47           		.byte $47
008B42  1  47           		.byte $47
008B43  1  47           		.byte $47
008B44  1  27           		.byte $27
008B45  1  27           		.byte $27
008B46  1  47           		.byte $47
008B47  1  47           		.byte $47
008B48  1  47           		.byte $47
008B49  1  47           		.byte $47
008B4A  1  27           		.byte $27
008B4B  1  27           		.byte $27
008B4C  1  47           		.byte $47
008B4D  1  47           		.byte $47
008B4E  1  A9           		.byte $A9
008B4F  1  47           		.byte $47
008B50  1  AA           		.byte $AA
008B51  1  47           		.byte $47
008B52  1  9B           		.byte $9B
008B53  1  27           		.byte $27
008B54  1  9C           		.byte $9C
008B55  1  27           		.byte $27
008B56  1  27           		.byte $27
008B57  1  27           		.byte $27
008B58  1  27           		.byte $27
008B59  1  27           		.byte $27
008B5A  1  52           		.byte $52
008B5B  1  52           		.byte $52
008B5C  1  52           		.byte $52
008B5D  1  52           		.byte $52
008B5E  1  80           		.byte $80
008B5F  1  A0           		.byte $A0
008B60  1  81           		.byte $81
008B61  1  A1           		.byte $A1
008B62  1  BE           		.byte $BE
008B63  1  BE           		.byte $BE
008B64  1  BF           		.byte $BF
008B65  1  BF           		.byte $BF
008B66  1  45           		.byte $45
008B67  1  47           		.byte $47
008B68  1  45           		.byte $45
008B69  1  47           		.byte $47
008B6A  1  47           		.byte $47
008B6B  1  47           		.byte $47
008B6C  1  47           		.byte $47
008B6D  1  47           		.byte $47
008B6E  1  45           		.byte $45
008B6F  1  47           		.byte $47
008B70  1  45           		.byte $45
008B71  1  47           		.byte $47
008B72  1  45           		.byte $45
008B73  1  47           		.byte $47
008B74  1  45           		.byte $45
008B75  1  47           		.byte $47
008B76  1  45           		.byte $45
008B77  1  47           		.byte $47
008B78  1  45           		.byte $45
008B79  1  47           		.byte $47
008B7A  1  45           		.byte $45
008B7B  1  47           		.byte $47
008B7C  1  45           		.byte $45
008B7D  1  47           		.byte $47
008B7E  1  45           		.byte $45
008B7F  1  47           		.byte $47
008B80  1  45           		.byte $45
008B81  1  47           		.byte $47
008B82  1  45           		.byte $45
008B83  1  47           		.byte $47
008B84  1  45           		.byte $45
008B85  1  47           		.byte $47
008B86  1  45           		.byte $45
008B87  1  47           		.byte $47
008B88  1  45           		.byte $45
008B89  1  47           		.byte $47
008B8A  1  47           		.byte $47
008B8B  1  47           		.byte $47
008B8C  1  47           		.byte $47
008B8D  1  47           		.byte $47
008B8E  1  47           		.byte $47
008B8F  1  47           		.byte $47
008B90  1  47           		.byte $47
008B91  1  47           		.byte $47
008B92  1  47           		.byte $47
008B93  1  47           		.byte $47
008B94  1  47           		.byte $47
008B95  1  47           		.byte $47
008B96  1  47           		.byte $47
008B97  1  47           		.byte $47
008B98  1  47           		.byte $47
008B99  1  47           		.byte $47
008B9A  1  47           		.byte $47
008B9B  1  47           		.byte $47
008B9C  1  47           		.byte $47
008B9D  1  47           		.byte $47
008B9E  1  47           		.byte $47
008B9F  1  47           		.byte $47
008BA0  1  47           		.byte $47
008BA1  1  47           		.byte $47
008BA2  1  24           		.byte $24
008BA3  1  24           		.byte $24
008BA4  1  24           		.byte $24
008BA5  1  24           		.byte $24
008BA6  1  24           		.byte $24
008BA7  1  24           		.byte $24
008BA8  1  24           		.byte $24
008BA9  1  24           		.byte $24
008BAA  1  24           		.byte $24
008BAB  1  24           		.byte $24
008BAC  1  24           		.byte $24
008BAD  1  24           		.byte $24
008BAE  1  24           		.byte $24
008BAF  1  24           		.byte $24
008BB0  1  24           		.byte $24
008BB1  1  24           		.byte $24
008BB2  1  AB           		.byte $AB
008BB3  1  AC           		.byte $AC
008BB4  1  AD           		.byte $AD
008BB5  1  AE           		.byte $AE
008BB6  1  5D           		.byte $5D
008BB7  1  5E           		.byte $5E
008BB8  1  5D           		.byte $5D
008BB9  1  5E           		.byte $5E
008BBA  1  C1           		.byte $C1
008BBB  1  24           		.byte $24
008BBC  1  C1           		.byte $C1
008BBD  1  24           		.byte $24
008BBE  1  C6           		.byte $C6
008BBF  1  C8           		.byte $C8
008BC0  1  C7           		.byte $C7
008BC1  1  C9           		.byte $C9
008BC2  1  CA           		.byte $CA
008BC3  1  CC           		.byte $CC
008BC4  1  CB           		.byte $CB
008BC5  1  CD           		.byte $CD
008BC6  1  2A           		.byte $2A
008BC7  1  2A           		.byte $2A
008BC8  1  40           		.byte $40
008BC9  1  40           		.byte $40
008BCA  1  24           		.byte $24
008BCB  1  24           		.byte $24
008BCC  1  24           		.byte $24
008BCD  1  24           		.byte $24
008BCE  1  24           		.byte $24
008BCF  1  47           		.byte $47
008BD0  1  24           		.byte $24
008BD1  1  47           		.byte $47
008BD2  1  82           		.byte $82
008BD3  1  83           		.byte $83
008BD4  1  84           		.byte $84
008BD5  1  85           		.byte $85
008BD6  1  B4           		.byte $B4
008BD7  1  B6           		.byte $B6
008BD8  1  B5           		.byte $B5
008BD9  1  B7           		.byte $B7
008BDA  1  24           		.byte $24
008BDB  1  47           		.byte $47
008BDC  1  24           		.byte $24
008BDD  1  47           		.byte $47
008BDE  1  86           		.byte $86
008BDF  1  8A           		.byte $8A
008BE0  1  87           		.byte $87
008BE1  1  8B           		.byte $8B
008BE2  1  8E           		.byte $8E
008BE3  1  91           		.byte $91
008BE4  1  8F           		.byte $8F
008BE5  1  92           		.byte $92
008BE6  1  24           		.byte $24
008BE7  1  2F           		.byte $2F
008BE8  1  24           		.byte $24
008BE9  1  3D           		.byte $3D
008BEA  1               Palette2_MTiles:
008BEA  1  24           		.byte $24
008BEB  1  24           		.byte $24
008BEC  1  24           		.byte $24
008BED  1  35           		.byte $35
008BEE  1  36           		.byte $36
008BEF  1  25           		.byte $25
008BF0  1  37           		.byte $37
008BF1  1  25           		.byte $25
008BF2  1  24           		.byte $24
008BF3  1  38           		.byte $38
008BF4  1  24           		.byte $24
008BF5  1  24           		.byte $24
008BF6  1  24           		.byte $24
008BF7  1  24           		.byte $24
008BF8  1  39           		.byte $39
008BF9  1  24           		.byte $24
008BFA  1  3A           		.byte $3A
008BFB  1  24           		.byte $24
008BFC  1  3B           		.byte $3B
008BFD  1  24           		.byte $24
008BFE  1  3C           		.byte $3C
008BFF  1  24           		.byte $24
008C00  1  24           		.byte $24
008C01  1  24           		.byte $24
008C02  1  41           		.byte $41
008C03  1  26           		.byte $26
008C04  1  41           		.byte $41
008C05  1  26           		.byte $26
008C06  1  26           		.byte $26
008C07  1  26           		.byte $26
008C08  1  26           		.byte $26
008C09  1  26           		.byte $26
008C0A  1  B0           		.byte $B0
008C0B  1  B1           		.byte $B1
008C0C  1  B2           		.byte $B2
008C0D  1  B3           		.byte $B3
008C0E  1  77           		.byte $77
008C0F  1  79           		.byte $79
008C10  1  77           		.byte $77
008C11  1  79           		.byte $79
008C12  1  6B           		.byte $6B
008C13  1  70           		.byte $70
008C14  1  2C           		.byte $2C
008C15  1  2D           		.byte $2D
008C16  1  6C           		.byte $6C
008C17  1  71           		.byte $71
008C18  1  6D           		.byte $6D
008C19  1  72           		.byte $72
008C1A  1  6E           		.byte $6E
008C1B  1  73           		.byte $73
008C1C  1  6F           		.byte $6F
008C1D  1  74           		.byte $74
008C1E  1               Palette3_MTiles:
008C1E  1  53           		.byte $53
008C1F  1  55           		.byte $55
008C20  1  54           		.byte $54
008C21  1  56           		.byte $56
008C22  1  53           		.byte $53
008C23  1  55           		.byte $55
008C24  1  54           		.byte $54
008C25  1  56           		.byte $56
008C26  1  53           		.byte $53
008C27  1  55           		.byte $55
008C28  1  54           		.byte $54
008C29  1  56           		.byte $56
008C2A  1  A5           		.byte $A5
008C2B  1  A7           		.byte $A7
008C2C  1  A6           		.byte $A6
008C2D  1  A8           		.byte $A8
008C2E  1  C2           		.byte $C2
008C2F  1  C4           		.byte $C4
008C30  1  C3           		.byte $C3
008C31  1  C5           		.byte $C5
008C32  1  57           		.byte $57
008C33  1  59           		.byte $59
008C34  1  58           		.byte $58
008C35  1  5A           		.byte $5A
008C36  1  7B           		.byte $7B
008C37  1  7D           		.byte $7D
008C38  1  7C           		.byte $7C
008C39  1  7E           		.byte $7E
008C3A  1               WaterPalette_MAYBE:
008C3A  1  3F           		.byte $3F
008C3B  1  00           		.byte 0
008C3C  1  20           		.byte $20
008C3D  1  0F           		.byte $F
008C3E  1  15           		.byte $15
008C3F  1  12           		.byte $12
008C40  1  25           		.byte $25
008C41  1  0F           		.byte $F
008C42  1  3A           		.byte $3A
008C43  1  1A           		.byte $1A
008C44  1  0F           		.byte $F
008C45  1  0F           		.byte $F
008C46  1  30           		.byte $30
008C47  1  12           		.byte $12
008C48  1  0F           		.byte $F
008C49  1  0F           		.byte $F
008C4A  1  27           		.byte $27
008C4B  1  12           		.byte $12
008C4C  1  0F           		.byte $F
008C4D  1  22           		.byte $22
008C4E  1  16           		.byte $16
008C4F  1  27           		.byte $27
008C50  1  18           		.byte $18
008C51  1  0F           		.byte $F
008C52  1  10           		.byte $10
008C53  1  30           		.byte $30
008C54  1  27           		.byte $27
008C55  1  0F           		.byte $F
008C56  1  16           		.byte $16
008C57  1  30           		.byte $30
008C58  1  27           		.byte $27
008C59  1  0F           		.byte $F
008C5A  1  0F           		.byte $F
008C5B  1  30           		.byte $30
008C5C  1  10           		.byte $10
008C5D  1  00           		.byte 0
008C5E  1               UndergroundPalette_MAYBE:
008C5E  1  3F           		.byte $3F
008C5F  1  00           		.byte 0
008C60  1  20           		.byte $20
008C61  1  0F           		.byte $F
008C62  1  29           		.byte $29
008C63  1  1A           		.byte $1A
008C64  1  0F           		.byte $F
008C65  1  0F           		.byte $F
008C66  1  36           		.byte $36
008C67  1  17           		.byte $17
008C68  1  0F           		.byte $F
008C69  1  0F           		.byte $F
008C6A  1  30           		.byte $30
008C6B  1  21           		.byte $21
008C6C  1  0F           		.byte $F
008C6D  1  0F           		.byte $F
008C6E  1  27           		.byte $27
008C6F  1  17           		.byte $17
008C70  1  0F           		.byte $F
008C71  1  0F           		.byte $F
008C72  1  16           		.byte $16
008C73  1  27           		.byte $27
008C74  1  18           		.byte $18
008C75  1  0F           		.byte $F
008C76  1  1A           		.byte $1A
008C77  1  30           		.byte $30
008C78  1  27           		.byte $27
008C79  1  0F           		.byte $F
008C7A  1  16           		.byte $16
008C7B  1  30           		.byte $30
008C7C  1  27           		.byte $27
008C7D  1  0F           		.byte $F
008C7E  1  0F           		.byte $F
008C7F  1  36           		.byte $36
008C80  1  17           		.byte $17
008C81  1  00           		.byte 0
008C82  1               GroundPaletteData:
008C82  1  3F           		.byte $3F
008C83  1  00           		.byte 0
008C84  1  20           		.byte $20
008C85  1  0F           		.byte $F
008C86  1  29           		.byte $29
008C87  1  1A           		.byte $1A
008C88  1  09           		.byte 9
008C89  1  0F           		.byte $F
008C8A  1  3C           		.byte $3C
008C8B  1  1C           		.byte $1C
008C8C  1  0F           		.byte $F
008C8D  1  0F           		.byte $F
008C8E  1  30           		.byte $30
008C8F  1  21           		.byte $21
008C90  1  1C           		.byte $1C
008C91  1  0F           		.byte $F
008C92  1  27           		.byte $27
008C93  1  17           		.byte $17
008C94  1  1C           		.byte $1C
008C95  1  0F           		.byte $F
008C96  1  16           		.byte $16
008C97  1  27           		.byte $27
008C98  1  18           		.byte $18
008C99  1  0F           		.byte $F
008C9A  1  1C           		.byte $1C
008C9B  1  36           		.byte $36
008C9C  1  17           		.byte $17
008C9D  1  0F           		.byte $F
008C9E  1  16           		.byte $16
008C9F  1  30           		.byte $30
008CA0  1  27           		.byte $27
008CA1  1  0F           		.byte $F
008CA2  1  0C           		.byte $C
008CA3  1  3C           		.byte $3C
008CA4  1  1C           		.byte $1C
008CA5  1  00           		.byte 0
008CA6  1               CastlePalette_MAYBE:
008CA6  1  3F           		.byte $3F
008CA7  1  00           		.byte 0
008CA8  1  20           		.byte $20
008CA9  1  0F           		.byte $F
008CAA  1  30           		.byte $30
008CAB  1  10           		.byte $10
008CAC  1  00           		.byte 0
008CAD  1  0F           		.byte $F
008CAE  1  30           		.byte $30
008CAF  1  10           		.byte $10
008CB0  1  00           		.byte 0
008CB1  1  0F           		.byte $F
008CB2  1  30           		.byte $30
008CB3  1  16           		.byte $16
008CB4  1  00           		.byte 0
008CB5  1  0F           		.byte $F
008CB6  1  27           		.byte $27
008CB7  1  17           		.byte $17
008CB8  1  00           		.byte 0
008CB9  1  0F           		.byte $F
008CBA  1  16           		.byte $16
008CBB  1  27           		.byte $27
008CBC  1  18           		.byte $18
008CBD  1  0F           		.byte $F
008CBE  1  1C           		.byte $1C
008CBF  1  36           		.byte $36
008CC0  1  17           		.byte $17
008CC1  1  0F           		.byte $F
008CC2  1  16           		.byte $16
008CC3  1  30           		.byte $30
008CC4  1  27           		.byte $27
008CC5  1  0F           		.byte $F
008CC6  1  00           		.byte 0
008CC7  1  30           		.byte $30
008CC8  1  10           		.byte $10
008CC9  1  00           		.byte 0
008CCA  1               SomePalette_1:
008CCA  1  3F 00        		.word $3F
008CCC  1  04           		.byte 4
008CCD  1               byte_6C20:
008CCD  1  22           		.byte $22
008CCE  1  30           		.byte $30
008CCF  1  00           		.byte 0
008CD0  1  10           		.byte $10
008CD1  1  00           		.byte 0
008CD2  1               SomePalette_2:
008CD2  1  3F           		.byte $3F
008CD3  1  00           		.byte 0
008CD4  1  04           		.byte 4
008CD5  1  0F           		.byte $F
008CD6  1  30           		.byte $30
008CD7  1  00           		.byte 0
008CD8  1  10           		.byte $10
008CD9  1  00           		.byte 0
008CDA  1               SomePalette_3:
008CDA  1  3F           		.byte $3F
008CDB  1  00           		.byte 0
008CDC  1  04           		.byte 4
008CDD  1  22           		.byte $22
008CDE  1  27           		.byte $27
008CDF  1  16           		.byte $16
008CE0  1  0F           		.byte $F
008CE1  1  00           		.byte 0
008CE2  1               SomePalette_0:
008CE2  1  3F           		.byte $3F
008CE3  1  14           		.byte $14
008CE4  1  04           		.byte 4
008CE5  1  0F           		.byte $F
008CE6  1  1A           		.byte $1A
008CE7  1  30           		.byte $30
008CE8  1  27           		.byte $27
008CE9  1  00           		.byte 0
008CEA  1               
008CEA  1               ThankYouMario:
008CEA  1  25 48 0D 1C  		text_block $2548, "SORRY NOTHING"
008CEE  1  18 1B 1B 22  
008CF2  1  24 17 18 1D  
008CFA  1  00           		.byte 0
008CFB  1               
008CFB  1               ButOurPrincess:
008CFB  1               		;text_block $25C5, ""
008CFB  1               		;text_block $2605, ""
008CFB  1  00           		.byte 0
008CFC  1               
008CFC  1               JumpEngine:
008CFC  1  0A           		asl
008CFD  1  A8           		tay
008CFE  1  68           		pla
008CFF  1  85 04        		sta byte_4
008D01  1  68           		pla
008D02  1  85 05        		sta byte_5
008D04  1  C8           		iny
008D05  1  B1 04        		lda (4),y
008D07  1  85 06        		sta byte_6
008D09  1  C8           		iny
008D0A  1  B1 04        		lda (4),y
008D0C  1  85 07        		sta unk_7
008D0E  1  6C 06 00     		jmp (byte_6)
008D11  1               InitializeNameTables:
008D11  1               
008D11  1  AD 02 20     		lda PPU_STATUS
008D14  1  AD 78 07     		lda Mirror_PPU_CTRL_REG1
008D17  1  09 10        		ora #$10
008D19  1  29 F0        		and #$F0
008D1B  1  20 AF 8D     		jsr WritePPUReg1
008D1E  1  A9 24        		lda #$24
008D20  1  20 25 8D     		jsr sub_6CA6
008D23  1  A9 20        		lda #$20
008D25  1               sub_6CA6:
008D25  1               
008D25  1  8D 06 20     		sta PPU_ADDRESS
008D28  1  A9 00        		lda #0
008D2A  1  8D 06 20     		sta PPU_ADDRESS
008D2D  1  A2 04        		ldx #4
008D2F  1  A0 C0        		ldy #$C0
008D31  1  A9 24        		lda #$24
008D33  1               loc_6CB4:
008D33  1               
008D33  1  8D 07 20     		sta PPU_DATA
008D36  1  88           		dey
008D37  1  D0 FA        		bne loc_6CB4
008D39  1  CA           		dex
008D3A  1  D0 F7        		bne loc_6CB4
008D3C  1  A0 40        		ldy #$40
008D3E  1  8A           		txa
008D3F  1  8D 00 03     		sta VRAM_Buffer1_Offset
008D42  1  8D 01 03     		sta VRAM_Buffer1
008D45  1               loc_6CC6:
008D45  1               
008D45  1  8D 07 20     		sta PPU_DATA
008D48  1  88           		dey
008D49  1  D0 FA        		bne loc_6CC6
008D4B  1  8D 3F 07     		sta HorizontalScroll
008D4E  1  8D 40 07     		sta VerticalScroll
008D51  1  4C A8 8D     		jmp InitScroll
008D54  1               
008D54  1               WriteBufferToScreen:
008D54  1  8D 06 20     		sta PPU_ADDRESS
008D57  1  C8           		iny
008D58  1  B1 00        		lda (0),y
008D5A  1  8D 06 20     		sta PPU_ADDRESS
008D5D  1  C8           		iny
008D5E  1  B1 00        		lda (0),y
008D60  1  0A           		asl
008D61  1  48           		pha
008D62  1  AD 78 07     		lda Mirror_PPU_CTRL_REG1
008D65  1  09 04        		ora #4
008D67  1  B0 02        		bcs loc_6D22
008D69  1  29 FB        		and #$FB
008D6B  1               loc_6D22:
008D6B  1  20 AF 8D     		jsr WritePPUReg1
008D6E  1  68           		pla
008D6F  1  0A           		asl
008D70  1  90 03        		bcc loc_6D2C
008D72  1  09 02        		ora #2
008D74  1  C8           		iny
008D75  1               loc_6D2C:
008D75  1  4A           		lsr
008D76  1  4A           		lsr
008D77  1  AA           		tax
008D78  1               loc_6D2F:
008D78  1  B0 01        		bcs loc_6D32
008D7A  1  C8           		iny
008D7B  1               loc_6D32:
008D7B  1  B1 00        		lda (0),y
008D7D  1  8D 07 20     		sta PPU_DATA
008D80  1  CA           		dex
008D81  1  D0 F5        		bne loc_6D2F
008D83  1  38           		sec
008D84  1  98           		tya
008D85  1  65 00        		adc TMP_0
008D87  1  85 00        		sta TMP_0
008D89  1  A9 00        		lda #0
008D8B  1  65 01        		adc TMP_1
008D8D  1  85 01        		sta TMP_1
008D8F  1  A9 3F        		lda #$3F
008D91  1  8D 06 20     		sta PPU_ADDRESS
008D94  1  A9 00        		lda #0
008D96  1  8D 06 20     		sta PPU_ADDRESS
008D99  1  8D 06 20     		sta PPU_ADDRESS
008D9C  1  8D 06 20     		sta PPU_ADDRESS
008D9F  1               UpdateScreen:
008D9F  1  AE 02 20     		ldx PPU_STATUS
008DA2  1  A0 00        		ldy #0
008DA4  1  B1 00        		lda (0),y
008DA6  1  D0 AC        		bne WriteBufferToScreen
008DA8  1               InitScroll:
008DA8  1  8D 05 20     		sta PPU_SCROLL_REG
008DAB  1  8D 05 20     		sta PPU_SCROLL_REG
008DAE  1  60           		rts
008DAF  1               WritePPUReg1:
008DAF  1  8D 00 20     		sta PPU_CTRL_REG1
008DB2  1  8D 78 07     		sta Mirror_PPU_CTRL_REG1
008DB5  1  60           		rts
008DB6  1               
008DB6  1               ;------------------------------------------------------------------------------------
008DB6  1               ;$00 - used to store status bar nybbles
008DB6  1               ;$02 - used as temp vram offset
008DB6  1               ;$03 - used to store length of status bar number
008DB6  1               
008DB6  1               ;status bar name table offset and length data
008DB6  1               StatusBarData:
008DB6  1  EF 06              .byte $ef, $06 ; top score display on title screen
008DB8  1  62 06              .byte $62, $06 ; player score
008DBA  1  6D 02              .byte $6d, $02 ; coin tally
008DBC  1  7A 03              .byte $7a, $03 ; game timer
008DBE  1               
008DBE  1               StatusBarOffset:
008DBE  1  06 0C 12 24        .byte $06, $0c, $12, $24
008DC2  1               
008DC2  1               PrintStatusBarNumbers:
008DC2  1  85 00              sta $00            ;store player-specific offset
008DC4  1  20 CD 8D           jsr OutputNumbers  ;use first nybble to print the coin display
008DC7  1  A5 00              lda $00            ;move high nybble to low
008DC9  1  4A                 lsr                ;and print the score display
008DCA  1  4A                 lsr
008DCB  1  4A                 lsr
008DCC  1  4A                 lsr
008DCD  1               
008DCD  1               OutputNumbers:
008DCD  1  18                        clc                      ;add 1 to low nybble
008DCE  1  69 01                     adc #$01
008DD0  1  29 0F                     and #%00001111           ;mask out high nybble
008DD2  1  C9 06                     cmp #$06
008DD4  1  B0 44                     bcs ExitOutputN
008DD6  1  48                        pha                      ;save incremented value to stack for now and
008DD7  1  0A                        asl                      ;multiply by 2 to use as offset
008DD8  1  A8                        tay
008DD9  1  AE 00 03                  ldx VRAM_Buffer1_Offset  ;get current buffer pointer
008DDC  1  A9 20                     lda #$20                 ;put at top of screen by default
008DDE  1  C0 00                     cpy #$00                 ;are we writing top score on title screen?
008DE0  1  D0 02                     bne SetupNums
008DE2  1  A9 22                     lda #$22                 ;if so, put further down on the screen
008DE4  1  9D 01 03     SetupNums:   sta VRAM_Buffer1,x
008DE7  1  B9 B6 8D                  lda StatusBarData,y      ;write vram address low and length of thing
008DEA  1  9D 02 03                  sta VRAM_Buffer1+1,x     ;we're printing to the buffer
008DED  1  B9 B7 8D                  lda StatusBarData+1,y
008DF0  1  9D 03 03                  sta VRAM_Buffer1+2,x
008DF3  1  85 03                     sta $03                  ;save length byte in counter
008DF5  1  86 02                     stx $02                  ;and buffer pointer elsewhere for now
008DF7  1  68                        pla                      ;pull original incremented value from stack
008DF8  1  AA                        tax
008DF9  1  BD BE 8D                  lda StatusBarOffset,x    ;load offset to value we want to write
008DFC  1  38                        sec
008DFD  1  F9 B7 8D                  sbc StatusBarData+1,y    ;subtract from length byte we read before
008E00  1  A8                        tay                      ;use value as offset to display digits
008E01  1  A6 02                     ldx $02
008E03  1  B9 D7 07     DigitPLoop:  lda DisplayDigits,y      ;write digits to the buffer
008E06  1  9D 04 03                  sta VRAM_Buffer1+3,x
008E09  1  E8                        inx
008E0A  1  C8                        iny
008E0B  1  C6 03                     dec $03                  ;do this until all the digits are written
008E0D  1  D0 F4                     bne DigitPLoop
008E0F  1  A9 00                     lda #$00                 ;put null terminator at end
008E11  1  9D 04 03                  sta VRAM_Buffer1+3,x
008E14  1  E8                        inx                      ;increment buffer pointer by 3
008E15  1  E8                        inx
008E16  1  E8                        inx
008E17  1  8E 00 03                  stx VRAM_Buffer1_Offset  ;store it in case we want to use it again
008E1A  1  60           ExitOutputN: rts
008E1B  1               
008E1B  1               DigitsMathRoutine:
008E1B  1  AD 70 07                 lda OperMode              ;check mode of operation
008E1E  1  C9 00                    cmp #TitleScreenModeValue
008E20  1  F0 16                    beq EraseDMods            ;if in title screen mode, branch to lock score
008E22  1  A2 05                    ldx #$05
008E24  1  BD 34 01     AddModLoop: lda DigitModifier,x       ;load digit amount to increment
008E27  1  18                       clc
008E28  1  79 D7 07                 adc DisplayDigits,y       ;add to current digit
008E2B  1  30 16                    bmi BorrowOne             ;if result is a negative number, branch to subtract
008E2D  1  C9 0A                    cmp #10
008E2F  1  B0 19                    bcs CarryOne              ;if digit greater than $09, branch to add
008E31  1  99 D7 07     StoreNewD:  sta DisplayDigits,y       ;store as new score or game timer digit
008E34  1  88                       dey                       ;move onto next digits in score or game timer
008E35  1  CA                       dex                       ;and digit amounts to increment
008E36  1  10 EC                    bpl AddModLoop            ;loop back if we're not done yet
008E38  1  A9 00        EraseDMods: lda #$00                  ;store zero here
008E3A  1  A2 06                    ldx #$06                  ;start with the last digit
008E3C  1  9D 33 01     EraseMLoop: sta DigitModifier-1,x     ;initialize the digit amounts to increment
008E3F  1  CA                       dex
008E40  1  10 FA                    bpl EraseMLoop            ;do this until they're all reset, then leave
008E42  1  60                       rts
008E43  1  DE 33 01     BorrowOne:  dec DigitModifier-1,x     ;decrement the previous digit, then put $09 in
008E46  1  A9 09                    lda #$09                  ;the game timer digit we're currently on to "borrow
008E48  1  D0 E7                    bne StoreNewD             ;the one", then do an unconditional branch back
008E4A  1  38           CarryOne:   sec                       ;subtract ten from our digit to make it a
008E4B  1  E9 0A                    sbc #10                   ;proper BCD number, then increment the digit
008E4D  1  FE 33 01                 inc DigitModifier-1,x     ;preceding current digit to "carry the one" properly
008E50  1  4C 31 8E                 jmp StoreNewD             ;go back to just after we branched here
008E53  1               
008E53  1               UpdateTopScore:
008E53  1  A2 05                      ldx #$05                 ;start with the lowest digit
008E55  1  A0 05                      ldy #$05
008E57  1  38                         sec
008E58  1  BD DD 07     GetScoreDiff: lda PlayerScoreDisplay,x ;subtract the regular score digit from each high score digit
008E5B  1  F9 D7 07                   sbc TopScoreDisplay,y    ;from lowest to highest, if any top score digit exceeds
008E5E  1  CA                         dex                      ;the player score digit, borrow will be set until a subsequent
008E5F  1  88                         dey                      ;subtraction clears it (player digit is higher than top)
008E60  1  10 F6                      bpl GetScoreDiff
008E62  1  90 0E                      bcc NoTopSc              ;check to see if borrow is still set, if so, no new high score
008E64  1  E8                         inx                      ;increment X and Y once to the start of the score
008E65  1  C8                         iny
008E66  1  BD DD 07     CopyScore:    lda PlayerScoreDisplay,x ;store player's score digits into high score memory area
008E69  1  99 D7 07                   sta TopScoreDisplay,y
008E6C  1  E8                         inx
008E6D  1  C8                         iny
008E6E  1  C0 06                      cpy #$06                 ;do this until we have stored them all
008E70  1  90 F4                      bcc CopyScore
008E72  1  60           NoTopSc:      rts
008E73  1               
008E73  1               ;-------------------------------------------------------------------------------------
008E73  1               
008E73  1  FF           		.byte $FF
008E74  1  FF           		.byte $FF
008E75  1               unk_6E2A:
008E75  1  04           		.byte 4
008E76  1  30           		.byte $30
008E77  1  48           		.byte $48
008E78  1  60           		.byte $60
008E79  1  78           		.byte $78
008E7A  1  90           		.byte $90
008E7B  1  A8           		.byte $A8
008E7C  1  C0           		.byte $C0
008E7D  1  D8           		.byte $D8
008E7E  1  E8           		.byte $E8
008E7F  1  24           		.byte $24
008E80  1  F8           		.byte $F8
008E81  1  FC           		.byte $FC
008E82  1  28           		.byte $28
008E83  1  2C           		.byte $2C
008E84  1               
008E84  1               InitializeArea:
008E84  1  A0 4B        		ldy #$4B
008E86  1  20 5A 8F     		jsr InitializeMemory
008E89  1  A2 21        		ldx #$21
008E8B  1  A9 00        		lda #0
008E8D  1               loc_6E42:
008E8D  1               
008E8D  1  9D 80 07     		sta SelectTimer,x
008E90  1  CA           		dex
008E91  1  10 FA        		bpl loc_6E42
008E93  1  AD 5B 07     		lda HalfwayPage
008E96  1  AC 52 07     		ldy AltEntranceControl
008E99  1  F0 03        		beq loc_6E53
008E9B  1  AD 51 07     		lda EntrancePage
008E9E  1               loc_6E53:
008E9E  1               
008E9E  1  8D 1A 07     		sta ScreenLeft_PageLoc
008EA1  1  8D 25 07     		sta CurrentPageLoc
008EA4  1  8D 28 07     		sta BackloadingFlag
008EA7  1  20 85 9B     		jsr sub_7B90
008EAA  1  A0 20        		ldy #$20
008EAC  1  29 01        		and #1
008EAE  1  F0 02        		beq loc_6E67
008EB0  1  A0 24        		ldy #$24
008EB2  1               loc_6E67:
008EB2  1  8C 20 07     		sty CurrentNTAddr_High
008EB5  1  A0 80        		ldy #$80
008EB7  1  8C 21 07     		sty CurrentNTAddr_Low
008EBA  1  0A           		asl
008EBB  1  0A           		asl
008EBC  1  0A           		asl
008EBD  1  0A           		asl
008EBE  1  8D A0 06     		sta BlockBufferColumnPos
008EC1  1  CE 30 07     		dec AreaObjectLength
008EC4  1  CE 31 07     		dec byte_731
008EC7  1  CE 32 07     		dec byte_732
008ECA  1  A9 0B        		lda #$B
008ECC  1  8D 1E 07     		sta ColumnSets
008ECF  1  20 A8 FE     		jsr Enter_LL_GetAreaDataAddrs
008ED2  1  AD FB 07     		lda IsPlayingExtendedWorlds
008ED5  1  D0 10        		bne loc_6E9C
008ED7  1  AD 5F 07     		lda WorldNumber
008EDA  1  C9 03        		cmp #3
008EDC  1  90 0C        		bcc loc_6E9F
008EDE  1  D0 07        		bne loc_6E9C
008EE0  1  AD 5C 07     		lda LevelNumber
008EE3  1  C9 03        		cmp #3
008EE5  1  90 03        		bcc loc_6E9F
008EE7  1               loc_6E9C:
008EE7  1  EE CC 06     		inc SecondaryHardMode
008EEA  1               loc_6E9F:
008EEA  1  AD 5B 07     		lda HalfwayPage
008EED  1  F0 05        		beq loc_6EA9
008EEF  1  A9 02        		lda #2
008EF1  1  8D 10 07     		sta PlayerEntranceCtrl
008EF4  1               loc_6EA9:
008EF4  1  A9 80        		lda #$80
008EF6  1  85 FB        		sta AreaMusicQueue
008EF8  1  A9 01        		lda #1
008EFA  1  8D 74 07     		sta DisableScreenFlag
008EFD  1  20 90 FE     		jsr Enter_LoadPhysicsData
008F00  1  EE 72 07     		inc OperMode_Task
008F03  1  60           		rts
008F04  1               
008F04  1               SecondaryGameSetup:
008F04  1  20 88 FE     		jsr Enter_ProcessLevelLoad
008F07  1  A9 00        		lda #0
008F09  1  8D 74 07     		sta DisableScreenFlag
008F0C  1  8D EC 07     		sta IsWindy
008F0F  1  8D F6 07     		sta byte_7F6
008F12  1  A8           		tay
008F13  1               loc_6EC5:
008F13  1  99 00 03     		sta $300,y
008F16  1  C8           		iny
008F17  1  D0 FA        		bne loc_6EC5
008F19  1  8D 59 07     		sta GameTimerExpiredFlag
008F1C  1  8D 69 07     		sta DisableIntermediate
008F1F  1  8D 28 07     		sta BackloadingFlag
008F22  1  A9 FF        		lda #$FF
008F24  1  8D A0 03     		sta BalPlatformAlignment
008F27  1  AD 1A 07     		lda ScreenLeft_PageLoc
008F2A  1  29 01        		and #1
008F2C  1  8D 7A 07     		sta UseNtBase2400
008F2F  1  20 7F 8F     		jsr sub_6F2D
008F32  1  A9 38        		lda #$38
008F34  1  8D E3 06     		sta byte_6E3
008F37  1  A9 48        		lda #$48
008F39  1  8D E2 06     		sta byte_6E2
008F3C  1  A9 58        		lda #$58
008F3E  1  8D E1 06     		sta SprShuffleAmt
008F41  1  A2 0E        		ldx #$E
008F43  1               loc_6EF5:
008F43  1  BD 75 8E     		lda unk_6E2A,x
008F46  1  9D E4 06     		sta $6E4,x
008F49  1  CA           		dex
008F4A  1  10 F7        		bpl loc_6EF5
008F4C  1               
008F4C  1  20 B5 90     		jsr sub_70BB
008F4F  1  EE 22 07     		inc IRQUpdateFlag
008F52  1  EE 72 07     		inc OperMode_Task
008F55  1  60           		rts
008F56  1               
008F56  1               Sprite0Data:
008F56  1  18 EE 23 58  		.byte $18, $EE, $23, $58
008F5A  1               
008F5A  1               InitializeMemory:
008F5A  1  A2 07        		ldx #7
008F5C  1  A9 00        		lda #0
008F5E  1  85 06        		sta byte_6
008F60  1               loc_6F0E:
008F60  1               
008F60  1  86 07        		stx unk_7
008F62  1               loc_6F10:
008F62  1               
008F62  1  E0 01        		cpx #1
008F64  1  D0 08        		bne loc_6F1C
008F66  1  C0 60        		cpy #$60
008F68  1  B0 06        		bcs loc_6F1E
008F6A  1  C0 09        		cpy #9
008F6C  1  90 02        		bcc loc_6F1E
008F6E  1               loc_6F1C:
008F6E  1               
008F6E  1  91 06        		sta (6),y
008F70  1               loc_6F1E:
008F70  1               
008F70  1  88           		dey
008F71  1  C0 FF        		cpy #$FF
008F73  1  D0 ED        		bne loc_6F10
008F75  1  CA           		dex
008F76  1  10 E8        		bpl loc_6F0E
008F78  1  60           		rts
008F79  1               byte_6F27:
008F79  1  02           		.byte 2
008F7A  1  01           		.byte 1
008F7B  1  04           		.byte 4
008F7C  1  08           		.byte 8
008F7D  1  10           		.byte $10
008F7E  1  20           		.byte $20
008F7F  1               sub_6F2D:
008F7F  1               
008F7F  1  AD 70 07     		lda OperMode
008F82  1  F0 23        		beq locret_6F55
008F84  1  AD 52 07     		lda AltEntranceControl
008F87  1  C9 02        		cmp #2
008F89  1  F0 0D        		beq loc_6F46
008F8B  1  A0 05        		ldy #5
008F8D  1  AD 10 07     		lda PlayerEntranceCtrl
008F90  1  C9 06        		cmp #6
008F92  1  F0 0E        		beq loc_6F50
008F94  1  C9 07        		cmp #7
008F96  1  F0 0A        		beq loc_6F50
008F98  1               loc_6F46:
008F98  1               
008F98  1  AC 4E 07     		ldy AreaType
008F9B  1  AD 43 07     		lda CloudTypeOverride
008F9E  1  F0 02        		beq loc_6F50
008FA0  1  A0 04        		ldy #4
008FA2  1               loc_6F50:
008FA2  1               
008FA2  1  B9 79 8F     		lda byte_6F27,y
008FA5  1  85 FB        		sta AreaMusicQueue
008FA7  1               locret_6F55:
008FA7  1               
008FA7  1  60           		rts
008FA8  1               byte_6F56:
008FA8  1  28           		.byte $28
008FA9  1  18           		.byte $18
008FAA  1               byte_6F58:
008FAA  1  38           		.byte $38
008FAB  1  28           		.byte $28
008FAC  1  08           		.byte 8
008FAD  1  00           		.byte 0
008FAE  1               byte_6F5C:
008FAE  1  00           		.byte 0
008FAF  1  20           		.byte $20
008FB0  1  B0           		.byte $B0
008FB1  1  50           		.byte $50
008FB2  1  00           		.byte 0
008FB3  1  00           		.byte 0
008FB4  1  B0           		.byte $B0
008FB5  1  B0           		.byte $B0
008FB6  1  F0           		.byte $F0
008FB7  1               unk_6F65:
008FB7  1  00           		.byte 0
008FB8  1  20           		.byte $20
008FB9  1  00           		.byte 0
008FBA  1  00           		.byte 0
008FBB  1  00           		.byte 0
008FBC  1  00           		.byte 0
008FBD  1  00           		.byte 0
008FBE  1  00           		.byte 0
008FBF  1               unk_6F6D:
008FBF  1  20           		.byte $20
008FC0  1  04           		.byte 4
008FC1  1  03           		.byte 3
008FC2  1  02           		.byte 2
008FC3  1               
008FC3  1               Entrance_GameTimerSetup:
008FC3  1  AD 1A 07     		lda ScreenLeft_PageLoc
008FC6  1  85 6D        		sta Player_PageLoc
008FC8  1  A9 28        		lda #$28
008FCA  1  8D 0A 07     		sta VerticalForceDown
008FCD  1  A9 01        		lda #1
008FCF  1  85 33        		sta PlayerFacingDir
008FD1  1  85 B5        		sta Player_Y_HighPos
008FD3  1  A9 00        		lda #0
008FD5  1  85 1D        		sta Player_State
008FD7  1  CE 90 04     		dec Player_CollisionBits
008FDA  1  A0 00        		ldy #0
008FDC  1  8C 5B 07     		sty HalfwayPage
008FDF  1  AD 4E 07     		lda AreaType
008FE2  1  D0 01        		bne loc_6F93
008FE4  1  C8           		iny
008FE5  1               loc_6F93:
008FE5  1  8C 04 07     		sty SwimmingFlag
008FE8  1  AE 10 07     		ldx PlayerEntranceCtrl
008FEB  1  AC 52 07     		ldy AltEntranceControl
008FEE  1  F0 07        		beq loc_6FA5
008FF0  1  C0 01        		cpy #1
008FF2  1  F0 03        		beq loc_6FA5
008FF4  1  BE AA 8F     		ldx byte_6F58,y
008FF7  1               loc_6FA5:
008FF7  1  B9 A8 8F     		lda byte_6F56,y
008FFA  1  85 86        		sta Player_X_Position
008FFC  1  BD AE 8F     		lda byte_6F5C,x
008FFF  1  85 CE        		sta SprObject_Y_Position
009001  1  BD B7 8F     		lda unk_6F65,x
009004  1  8D C4 03     		sta Player_SprAttrib
009007  1  20 11 86     		jsr GetPlayerColors_RW
00900A  1  AC 15 07     		ldy GameTimerSetting
00900D  1  F0 1A        		beq loc_6FD7
00900F  1  AD 57 07     		lda FetchNewGameTimerFlag
009012  1  F0 15        		beq loc_6FD7
009014  1  B9 BF 8F     		lda unk_6F6D,y
009017  1  8D F8 07     		sta GameTimerDisplay
00901A  1  A9 01        		lda #1
00901C  1  8D FA 07     		sta GameTimerDisplay+2
00901F  1  4A           		lsr
009020  1  8D F9 07     		sta GameTimerDisplay+1
009023  1  8D 57 07     		sta FetchNewGameTimerFlag
009026  1  8D 9F 07     		sta StarInvincibleTimer
009029  1               loc_6FD7:
009029  1  AC 58 07     		ldy JoypadOverride
00902C  1  F0 14        		beq loc_6FF0
00902E  1  A9 03        		lda #3
009030  1  85 1D        		sta Player_State
009032  1  A2 00        		ldx #0
009034  1  20 49 A9     		jsr sub_8945
009037  1  A9 F0        		lda #$F0
009039  1  85 D7        		sta Block_Y_Position
00903B  1  A2 05        		ldx #5
00903D  1  A0 00        		ldy #0
00903F  1  20 B1 A4     		jsr Setup_Vine
009042  1               loc_6FF0:
009042  1  AC 4E 07     		ldy AreaType
009045  1  D0 03        		bne loc_6FF8
009047  1  20 8D A2     		jsr SetupBubble
00904A  1               loc_6FF8:
00904A  1  A9 07        		lda #7
00904C  1  85 0E        		sta GameEngineSubroutine
00904E  1               		;jsr Enter_RedrawFrameNumbers
00904E  1  60           		rts
00904F  1               
00904F  1               
00904F  1               PlayerLoseLife:
00904F  1  EE 74 07     		inc DisableScreenFlag
009052  1  A9 00        		lda #0
009054  1  8D 22 07     		sta IRQUpdateFlag
009057  1  A9 80        		lda #$80
009059  1  85 FC        		sta EventMusicQueue
00905B  1               StillInGame:
00905B  1  AD 5F 07     		lda WorldNumber
00905E  1  0A           		asl
00905F  1  AA           		tax
009060  1  AD 5C 07     		lda LevelNumber
009063  1  29 02        		and #2
009065  1  F0 01        		beq loc_7038
009067  1  E8           		inx
009068  1               loc_7038:
009068  1  BC 53 64     		ldy WRAM_HalfwayPageNybbles,x
00906B  1  AD 5C 07     		lda LevelNumber
00906E  1  4A           		lsr
00906F  1  98           		tya
009070  1  B0 04        		bcs loc_7046
009072  1  4A           		lsr
009073  1  4A           		lsr
009074  1  4A           		lsr
009075  1  4A           		lsr
009076  1               loc_7046:
009076  1               
009076  1  29 0F        		and #$F
009078  1  CD 1A 07     		cmp ScreenLeft_PageLoc
00907B  1  F0 04        		beq loc_7051
00907D  1  90 02        		bcc loc_7051
00907F  1  A9 00        		lda #0
009081  1               loc_7051:
009081  1               
009081  1  8D 5B 07     		sta HalfwayPage
009084  1  4C 97 90     		jmp loc_709D
009087  1               
009087  1               TerminateGame:
009087  1  A9 80        		lda #$80
009089  1  85 FC        		sta EventMusicQueue
00908B  1  A9 00        		lda #0
00908D  1  8D 72 07     		sta OperMode_Task
009090  1  8D A0 07     		sta ScreenTimer
009093  1  8D 70 07     		sta OperMode
009096  1  60           		rts
009097  1               
009097  1               loc_709D:
009097  1  20 B0 FE     		jsr Enter_LL_LoadAreaPointer
00909A  1  A9 01        		lda #1
00909C  1  8D 54 07     		sta PlayerSize
00909F  1  EE 57 07     		inc FetchNewGameTimerFlag
0090A2  1  A9 00        		lda #0
0090A4  1  8D 47 07     		sta TimerControl
0090A7  1               sub_70AD:
0090A7  1               
0090A7  1  8D 56 07     		sta PlayerStatus
0090AA  1  85 0E        		sta GameEngineSubroutine
0090AC  1  8D 72 07     		sta OperMode_Task
0090AF  1  A9 01        		lda #1
0090B1  1  8D 70 07     		sta OperMode
0090B4  1  60           		rts
0090B5  1               sub_70BB:
0090B5  1               
0090B5  1  A9 FF        		lda #$FF
0090B7  1  8D C9 06     		sta byte_6C9
0090BA  1  60           		rts
0090BB  1               AreaParserTaskHandler:
0090BB  1               
0090BB  1  AC 1F 07     		ldy AreaParserTaskNum
0090BE  1  D0 05        		bne loc_70CB
0090C0  1  A0 08        		ldy #8
0090C2  1  8C 1F 07     		sty AreaParserTaskNum
0090C5  1               loc_70CB:
0090C5  1               
0090C5  1  88           		dey
0090C6  1  98           		tya
0090C7  1  20 D3 90     		jsr AreaParserTasks
0090CA  1  CE 1F 07     		dec AreaParserTaskNum
0090CD  1  D0 03        		bne locret_70D8
0090CF  1  20 F4 88     		jsr RenderAttributeTables
0090D2  1               locret_70D8:
0090D2  1               
0090D2  1  60           		rts
0090D3  1               AreaParserTasks:
0090D3  1               
0090D3  1  20 FC 8C     		jsr JumpEngine
0090D6  1  E6 90        		.word IncrementColumnPos
0090D8  1  38 88        		.word RenderAreaGraphics
0090DA  1  38 88        		.word RenderAreaGraphics
0090DC  1  07 92        		.word AreaParserCore
0090DE  1  E6 90        		.word IncrementColumnPos
0090E0  1  38 88        		.word RenderAreaGraphics
0090E2  1  38 88        		.word RenderAreaGraphics
0090E4  1  07 92        		.word AreaParserCore
0090E6  1               IncrementColumnPos:
0090E6  1               
0090E6  1  EE 26 07     		inc CurrentColumnPos
0090E9  1  AD 26 07     		lda CurrentColumnPos
0090EC  1  29 0F        		and #$F
0090EE  1  D0 06        		bne NoColWrap
0090F0  1  8D 26 07     		sta CurrentColumnPos
0090F3  1  EE 25 07     		inc CurrentPageLoc
0090F6  1               NoColWrap:
0090F6  1               
0090F6  1  EE A0 06     		inc BlockBufferColumnPos
0090F9  1  AD A0 06     		lda BlockBufferColumnPos
0090FC  1  29 1F        		and #$1F
0090FE  1  8D A0 06     		sta BlockBufferColumnPos
009101  1               locret_7107:
009101  1               
009101  1  60           		rts
009102  1  00           		.byte 0
009103  1  30           		.byte $30
009104  1  60           		.byte $60
009105  1               unk_710B:
009105  1  93           		.byte $93
009106  1  00           		.byte 0
009107  1  00           		.byte 0
009108  1  11           		.byte $11
009109  1  12           		.byte $12
00910A  1  12           		.byte $12
00910B  1  13           		.byte $13
00910C  1  00           		.byte 0
00910D  1  00           		.byte 0
00910E  1  51           		.byte $51
00910F  1  52           		.byte $52
009110  1  53           		.byte $53
009111  1  00           		.byte 0
009112  1  00           		.byte 0
009113  1  00           		.byte 0
009114  1  00           		.byte 0
009115  1  00           		.byte 0
009116  1  00           		.byte 0
009117  1  01           		.byte 1
009118  1  02           		.byte 2
009119  1  02           		.byte 2
00911A  1  03           		.byte 3
00911B  1  00           		.byte 0
00911C  1  00           		.byte 0
00911D  1  00           		.byte 0
00911E  1  00           		.byte 0
00911F  1  00           		.byte 0
009120  1  00           		.byte 0
009121  1  91           		.byte $91
009122  1  92           		.byte $92
009123  1  93           		.byte $93
009124  1  00           		.byte 0
009125  1  00           		.byte 0
009126  1  00           		.byte 0
009127  1  00           		.byte 0
009128  1  51           		.byte $51
009129  1  52           		.byte $52
00912A  1  53           		.byte $53
00912B  1  41           		.byte $41
00912C  1  42           		.byte $42
00912D  1  43           		.byte $43
00912E  1  00           		.byte 0
00912F  1  00           		.byte 0
009130  1  00           		.byte 0
009131  1  00           		.byte 0
009132  1  00           		.byte 0
009133  1  91           		.byte $91
009134  1  92           		.byte $92
009135  1  97           		.byte $97
009136  1  87           		.byte $87
009137  1  88           		.byte $88
009138  1  89           		.byte $89
009139  1  99           		.byte $99
00913A  1  00           		.byte 0
00913B  1  00           		.byte 0
00913C  1  00           		.byte 0
00913D  1  11           		.byte $11
00913E  1  12           		.byte $12
00913F  1  13           		.byte $13
009140  1  A4           		.byte $A4
009141  1  A5           		.byte $A5
009142  1  A5           		.byte $A5
009143  1  A5           		.byte $A5
009144  1  A6           		.byte $A6
009145  1  97           		.byte $97
009146  1  98           		.byte $98
009147  1  99           		.byte $99
009148  1  01           		.byte 1
009149  1  02           		.byte 2
00914A  1  03           		.byte 3
00914B  1  00           		.byte 0
00914C  1  A4           		.byte $A4
00914D  1  A5           		.byte $A5
00914E  1  A6           		.byte $A6
00914F  1  00           		.byte 0
009150  1  11           		.byte $11
009151  1  12           		.byte $12
009152  1  12           		.byte $12
009153  1  12           		.byte $12
009154  1  13           		.byte $13
009155  1  00           		.byte 0
009156  1  00           		.byte 0
009157  1  00           		.byte 0
009158  1  00           		.byte 0
009159  1  01           		.byte 1
00915A  1  02           		.byte 2
00915B  1  02           		.byte 2
00915C  1  03           		.byte 3
00915D  1  00           		.byte 0
00915E  1  A4           		.byte $A4
00915F  1  A5           		.byte $A5
009160  1  A5           		.byte $A5
009161  1  A6           		.byte $A6
009162  1  00           		.byte 0
009163  1  00           		.byte 0
009164  1  00           		.byte 0
009165  1  11           		.byte $11
009166  1  12           		.byte $12
009167  1  12           		.byte $12
009168  1  13           		.byte $13
009169  1  00           		.byte 0
00916A  1  00           		.byte 0
00916B  1  00           		.byte 0
00916C  1  00           		.byte 0
00916D  1  00           		.byte 0
00916E  1  00           		.byte 0
00916F  1  00           		.byte 0
009170  1  9C           		.byte $9C
009171  1  00           		.byte 0
009172  1  8B           		.byte $8B
009173  1  AA           		.byte $AA
009174  1  AA           		.byte $AA
009175  1  AA           		.byte $AA
009176  1  AA           		.byte $AA
009177  1  11           		.byte $11
009178  1  12           		.byte $12
009179  1  13           		.byte $13
00917A  1  8B           		.byte $8B
00917B  1  00           		.byte 0
00917C  1  9C           		.byte $9C
00917D  1  9C           		.byte $9C
00917E  1  00           		.byte 0
00917F  1  00           		.byte 0
009180  1  01           		.byte 1
009181  1  02           		.byte 2
009182  1  03           		.byte 3
009183  1  11           		.byte $11
009184  1  12           		.byte $12
009185  1  12           		.byte $12
009186  1  13           		.byte $13
009187  1  00           		.byte 0
009188  1  00           		.byte 0
009189  1  00           		.byte 0
00918A  1  00           		.byte 0
00918B  1  AA           		.byte $AA
00918C  1  AA           		.byte $AA
00918D  1  9C           		.byte $9C
00918E  1  AA           		.byte $AA
00918F  1  00           		.byte 0
009190  1  8B           		.byte $8B
009191  1  00           		.byte 0
009192  1  01           		.byte 1
009193  1  02           		.byte 2
009194  1  03           		.byte 3
009195  1               unk_719B:
009195  1  80           		.byte $80
009196  1  83           		.byte $83
009197  1  00           		.byte 0
009198  1  81           		.byte $81
009199  1  84           		.byte $84
00919A  1  00           		.byte 0
00919B  1  82           		.byte $82
00919C  1  85           		.byte $85
00919D  1  00           		.byte 0
00919E  1  02           		.byte 2
00919F  1  00           		.byte 0
0091A0  1  00           		.byte 0
0091A1  1  03           		.byte 3
0091A2  1  00           		.byte 0
0091A3  1  00           		.byte 0
0091A4  1  04           		.byte 4
0091A5  1  00           		.byte 0
0091A6  1  00           		.byte 0
0091A7  1  00           		.byte 0
0091A8  1  05           		.byte 5
0091A9  1  06           		.byte 6
0091AA  1  07           		.byte 7
0091AB  1  06           		.byte 6
0091AC  1  0A           		.byte $A
0091AD  1  00           		.byte 0
0091AE  1  08           		.byte 8
0091AF  1  09           		.byte 9
0091B0  1  4D           		.byte $4D
0091B1  1  00           		.byte 0
0091B2  1  00           		.byte 0
0091B3  1  0D           		.byte $D
0091B4  1  0F           		.byte $F
0091B5  1  4E           		.byte $4E
0091B6  1  0E           		.byte $E
0091B7  1  4E           		.byte $4E
0091B8  1               unk_71BE:
0091B8  1  4E           		.byte $4E
0091B9  1  00           		.byte 0
0091BA  1  0D           		.byte $D
0091BB  1  1A           		.byte $1A
0091BC  1               unk_71C2:
0091BC  1  86           		.byte $86
0091BD  1  87           		.byte $87
0091BE  1  87           		.byte $87
0091BF  1  87           		.byte $87
0091C0  1  87           		.byte $87
0091C1  1  87           		.byte $87
0091C2  1  87           		.byte $87
0091C3  1  87           		.byte $87
0091C4  1  87           		.byte $87
0091C5  1  87           		.byte $87
0091C6  1  87           		.byte $87
0091C7  1  6A           		.byte $6A
0091C8  1  6A           		.byte $6A
0091C9  1  00           		.byte 0
0091CA  1  00           		.byte 0
0091CB  1  00           		.byte 0
0091CC  1  00           		.byte 0
0091CD  1  00           		.byte 0
0091CE  1  45           		.byte $45
0091CF  1  47           		.byte $47
0091D0  1  47           		.byte $47
0091D1  1  47           		.byte $47
0091D2  1  47           		.byte $47
0091D3  1  47           		.byte $47
0091D4  1  00           		.byte 0
0091D5  1  00           		.byte 0
0091D6  1  00           		.byte 0
0091D7  1  00           		.byte 0
0091D8  1  00           		.byte 0
0091D9  1  00           		.byte 0
0091DA  1  00           		.byte 0
0091DB  1  00           		.byte 0
0091DC  1  00           		.byte 0
0091DD  1  00           		.byte 0
0091DE  1  00           		.byte 0
0091DF  1  00           		.byte 0
0091E0  1  00           		.byte 0
0091E1  1  86           		.byte $86
0091E2  1  87           		.byte $87
0091E3  1               unk_71E9:
0091E3  1  6A           		.byte $6A
0091E4  1  6B           		.byte $6B
0091E5  1  50           		.byte $50
0091E6  1  63           		.byte $63
0091E7  1               unk_71ED:
0091E7  1  00           		.byte 0
0091E8  1  00           		.byte 0
0091E9  1  00           		.byte 0
0091EA  1  18           		.byte $18
0091EB  1  01           		.byte 1
0091EC  1  18           		.byte $18
0091ED  1  07           		.byte 7
0091EE  1  18           		.byte $18
0091EF  1  0F           		.byte $F
0091F0  1  18           		.byte $18
0091F1  1  FF           		.byte $FF
0091F2  1  18           		.byte $18
0091F3  1  01           		.byte 1
0091F4  1  1F           		.byte $1F
0091F5  1  07           		.byte 7
0091F6  1  1F           		.byte $1F
0091F7  1  0F           		.byte $F
0091F8  1  1F           		.byte $1F
0091F9  1  81           		.byte $81
0091FA  1  1F           		.byte $1F
0091FB  1  01           		.byte 1
0091FC  1  00           		.byte 0
0091FD  1  8F           		.byte $8F
0091FE  1  1F           		.byte $1F
0091FF  1  F1           		.byte $F1
009200  1  1F           		.byte $1F
009201  1  F9           		.byte $F9
009202  1  18           		.byte $18
009203  1  F1           		.byte $F1
009204  1  18           		.byte $18
009205  1  FF           		.byte $FF
009206  1  1F           		.byte $1F
009207  1               AreaParserCore:
009207  1  AD 28 07     		lda BackloadingFlag
00920A  1  F0 03        		beq RenderSceneryTerrain
00920C  1  20 13 93     		jsr ProcessAreaData
00920F  1               RenderSceneryTerrain:
00920F  1  A2 0C        		ldx #$C
009211  1  A9 00        		lda #0
009213  1               loc_7219:
009213  1               
009213  1  9D A1 06     		sta $6A1,x
009216  1  CA           		dex
009217  1  10 FA        		bpl loc_7219
009219  1  AC 42 07     		ldy BackgroundScenery
00921C  1  F0 42        		beq loc_7266
00921E  1  AD 25 07     		lda CurrentPageLoc
009221  1               loc_7227:
009221  1               
009221  1  C9 03        		cmp #3
009223  1  30 05        		bmi loc_7230
009225  1  38           		sec
009226  1  E9 03        		sbc #3
009228  1  10 F7        		bpl loc_7227
00922A  1               loc_7230:
00922A  1               
00922A  1  0A           		asl
00922B  1  0A           		asl
00922C  1  0A           		asl
00922D  1  0A           		asl
00922E  1  79 01 91     		adc locret_7107,y
009231  1  6D 26 07     		adc CurrentColumnPos
009234  1  AA           		tax
009235  1  BD 05 91     		lda unk_710B,x
009238  1  F0 26        		beq loc_7266
00923A  1  48           		pha
00923B  1  29 0F        		and #$F
00923D  1  38           		sec
00923E  1  E9 01        		sbc #1
009240  1  85 00        		sta TMP_0
009242  1  0A           		asl
009243  1  65 00        		adc TMP_0
009245  1  AA           		tax
009246  1  68           		pla
009247  1  4A           		lsr
009248  1  4A           		lsr
009249  1  4A           		lsr
00924A  1  4A           		lsr
00924B  1  A8           		tay
00924C  1  A9 03        		lda #3
00924E  1  85 00        		sta TMP_0
009250  1               loc_7256:
009250  1               
009250  1  BD 95 91     		lda unk_719B,x
009253  1  99 A1 06     		sta $6A1,y
009256  1  E8           		inx
009257  1  C8           		iny
009258  1  C0 0B        		cpy #$B
00925A  1  F0 04        		beq loc_7266
00925C  1  C6 00        		dec TMP_0
00925E  1  D0 F0        		bne loc_7256
009260  1               loc_7266:
009260  1               
009260  1  AE 41 07     		ldx ForegroundScenery
009263  1  F0 13        		beq loc_727E
009265  1  BC B8 91     		ldy unk_71BE,x
009268  1  A2 00        		ldx #0
00926A  1               loc_7270:
00926A  1               
00926A  1  B9 BC 91     		lda unk_71C2,y
00926D  1  F0 03        		beq loc_7278
00926F  1  9D A1 06     		sta $6A1,x
009272  1               loc_7278:
009272  1               
009272  1  C8           		iny
009273  1  E8           		inx
009274  1  E0 0D        		cpx #$D
009276  1  D0 F2        		bne loc_7270
009278  1               loc_727E:
009278  1               
009278  1  AC 4E 07     		ldy AreaType
00927B  1  D0 0C        		bne loc_728F
00927D  1  AD 5F 07     		lda WorldNumber
009280  1  C9 07        		cmp #7
009282  1  D0 05        		bne loc_728F
009284  1  A9 63        		lda #$63
009286  1  4C 93 92     		jmp loc_7299
009289  1               loc_728F:
009289  1               
009289  1  B9 E3 91     		lda unk_71E9,y
00928C  1  AC 43 07     		ldy CloudTypeOverride
00928F  1  F0 02        		beq loc_7299
009291  1  A9 88        		lda #$88
009293  1               loc_7299:
009293  1               
009293  1  85 07        		sta unk_7
009295  1  A2 00        		ldx #0
009297  1  AD 27 07     		lda TerrainControl
00929A  1  0A           		asl
00929B  1  A8           		tay
00929C  1               loc_72A2:
00929C  1               
00929C  1  B9 E7 91     		lda unk_71ED,y
00929F  1  85 00        		sta TMP_0
0092A1  1  C8           		iny
0092A2  1  84 01        		sty TMP_1
0092A4  1  AD 43 07     		lda CloudTypeOverride
0092A7  1  F0 0A        		beq loc_72B9
0092A9  1  E0 00        		cpx #0
0092AB  1  F0 06        		beq loc_72B9
0092AD  1  A5 00        		lda TMP_0
0092AF  1  29 08        		and #8
0092B1  1  85 00        		sta TMP_0
0092B3  1               loc_72B9:
0092B3  1               
0092B3  1  A0 00        		ldy #0
0092B5  1               loc_72BB:
0092B5  1               
0092B5  1  B9 A7 B2     		lda Bitmasks,y
0092B8  1  24 00        		bit TMP_0
0092BA  1  F0 05        		beq loc_72C7
0092BC  1  A5 07        		lda unk_7
0092BE  1  9D A1 06     		sta $6A1,x
0092C1  1               loc_72C7:
0092C1  1               
0092C1  1  E8           		inx
0092C2  1  E0 0D        		cpx #$D
0092C4  1  F0 18        		beq loc_72E4
0092C6  1  AD 4E 07     		lda AreaType
0092C9  1  C9 02        		cmp #2
0092CB  1  D0 08        		bne loc_72DB
0092CD  1  E0 0B        		cpx #$B
0092CF  1  D0 04        		bne loc_72DB
0092D1  1  A9 6B        		lda #$6B
0092D3  1  85 07        		sta unk_7
0092D5  1               loc_72DB:
0092D5  1               
0092D5  1  C8           		iny
0092D6  1  C0 08        		cpy #8
0092D8  1  D0 DB        		bne loc_72BB
0092DA  1  A4 01        		ldy TMP_1
0092DC  1  D0 BE        		bne loc_72A2
0092DE  1               loc_72E4:
0092DE  1               
0092DE  1  20 13 93     		jsr ProcessAreaData
0092E1  1  AD A0 06     		lda BlockBufferColumnPos
0092E4  1  20 1C 9A     		jsr GetBlockBufferAddr
0092E7  1  A2 00        		ldx #0
0092E9  1  A0 00        		ldy #0
0092EB  1               loc_72F1:
0092EB  1               
0092EB  1  84 00        		sty TMP_0
0092ED  1  BD A1 06     		lda $6A1,x
0092F0  1  29 C0        		and #$C0
0092F2  1  0A           		asl
0092F3  1  2A           		rol
0092F4  1  2A           		rol
0092F5  1  A8           		tay
0092F6  1  BD A1 06     		lda $6A1,x
0092F9  1  D9 0F 93     		cmp unk_7315,y
0092FC  1  B0 02        		bcs loc_7306
0092FE  1  A9 00        		lda #0
009300  1               loc_7306:
009300  1               
009300  1  A4 00        		ldy TMP_0
009302  1  91 06        		sta (6),y
009304  1  98           		tya
009305  1  18           		clc
009306  1  69 10        		adc #$10
009308  1  A8           		tay
009309  1  E8           		inx
00930A  1  E0 0D        		cpx #$D
00930C  1  90 DD        		bcc loc_72F1
00930E  1  60           		rts
00930F  1               unk_7315:
00930F  1  10           		.byte $10
009310  1  4F           		.byte $4F
009311  1  88           		.byte $88
009312  1  C0           		.byte $C0
009313  1               ProcessAreaData:
009313  1               
009313  1  A2 02        		ldx #2
009315  1               loc_731B:
009315  1               
009315  1  86 08        		stx ObjectOffset
009317  1  A9 00        		lda #0
009319  1  8D 29 07     		sta BehindAreaParserFlag
00931C  1  AC 2C 07     		ldy AreaDataOffset
00931F  1  B1 E7        		lda ($E7),y
009321  1  C9 FD        		cmp #$FD
009323  1  F0 4B        		beq loc_7376
009325  1  BD 30 07     		lda $730,x
009328  1  10 46        		bpl loc_7376
00932A  1  C8           		iny
00932B  1  B1 E7        		lda ($E7),y
00932D  1  0A           		asl
00932E  1  90 0B        		bcc loc_7341
009330  1  AD 2B 07     		lda AreaObjectPageSel
009333  1  D0 06        		bne loc_7341
009335  1  EE 2B 07     		inc AreaObjectPageSel
009338  1  EE 2A 07     		inc AreaObjectPageLoc
00933B  1               loc_7341:
00933B  1               
00933B  1  88           		dey
00933C  1  B1 E7        		lda ($E7),y
00933E  1  29 0F        		and #$F
009340  1  C9 0D        		cmp #$D
009342  1  D0 1B        		bne loc_7365
009344  1  C8           		iny
009345  1  B1 E7        		lda ($E7),y
009347  1  88           		dey
009348  1  29 40        		and #$40
00934A  1  D0 1C        		bne loc_736E
00934C  1  AD 2B 07     		lda AreaObjectPageSel
00934F  1  D0 17        		bne loc_736E
009351  1  C8           		iny
009352  1  B1 E7        		lda ($E7),y
009354  1  29 1F        		and #$1F
009356  1  8D 2A 07     		sta AreaObjectPageLoc
009359  1  EE 2B 07     		inc AreaObjectPageSel
00935C  1  4C 79 93     		jmp loc_737F
00935F  1               loc_7365:
00935F  1               
00935F  1  C9 0E        		cmp #$E
009361  1  D0 05        		bne loc_736E
009363  1  AD 28 07     		lda BackloadingFlag
009366  1  D0 08        		bne loc_7376
009368  1               loc_736E:
009368  1               
009368  1  AD 2A 07     		lda AreaObjectPageLoc
00936B  1  CD 25 07     		cmp CurrentPageLoc
00936E  1  90 06        		bcc loc_737C
009370  1               loc_7376:
009370  1               
009370  1  20 A0 93     		jsr DecodeAreaData
009373  1  4C 7C 93     		jmp loc_7382
009376  1               loc_737C:
009376  1               
009376  1  EE 29 07     		inc BehindAreaParserFlag
009379  1               loc_737F:
009379  1               
009379  1  20 94 93     		jsr IncAreaObjOffset
00937C  1               loc_7382:
00937C  1               
00937C  1  A6 08        		ldx ObjectOffset
00937E  1  BD 30 07     		lda AreaObjectLength,x
009381  1  30 03        		bmi loc_738C
009383  1  DE 30 07     		dec AreaObjectLength,x
009386  1               loc_738C:
009386  1               
009386  1  CA           		dex
009387  1  10 8C        		bpl loc_731B
009389  1  AD 29 07     		lda BehindAreaParserFlag
00938C  1  D0 85        		bne ProcessAreaData
00938E  1  AD 28 07     		lda BackloadingFlag
009391  1  D0 80        		bne ProcessAreaData
009393  1               locret_7399:
009393  1               
009393  1  60           		rts
009394  1               IncAreaObjOffset:
009394  1               
009394  1  EE 2C 07     		inc AreaDataOffset
009397  1  EE 2C 07     		inc AreaDataOffset
00939A  1  A9 00        		lda #0
00939C  1  8D 2B 07     		sta AreaObjectPageSel
00939F  1  60           		rts
0093A0  1               DecodeAreaData:
0093A0  1               
0093A0  1  BD 30 07     		lda AreaObjectLength,x
0093A3  1  30 03        		bmi loc_73AE
0093A5  1  BC 2D 07     		ldy AreaObjOffsetBuffer,x
0093A8  1               loc_73AE:
0093A8  1               
0093A8  1  A2 10        		ldx #$10
0093AA  1  B1 E7        		lda (AreaDataLow),y
0093AC  1  C9 FD        		cmp #$FD
0093AE  1  F0 E3        		beq locret_7399
0093B0  1  29 0F        		and #$F
0093B2  1  C9 0F        		cmp #$F
0093B4  1  F0 08        		beq loc_73C4
0093B6  1  A2 08        		ldx #8
0093B8  1  C9 0C        		cmp #$C
0093BA  1  F0 02        		beq loc_73C4
0093BC  1  A2 00        		ldx #0
0093BE  1               loc_73C4:
0093BE  1               
0093BE  1  86 07        		stx unk_7
0093C0  1  A6 08        		ldx ObjectOffset
0093C2  1  C9 0E        		cmp #$E
0093C4  1  D0 08        		bne loc_73D4
0093C6  1  A9 00        		lda #0
0093C8  1  85 07        		sta unk_7
0093CA  1  A9 36        		lda #$36
0093CC  1  D0 53        		bne loc_7427
0093CE  1               loc_73D4:
0093CE  1               
0093CE  1  C9 0D        		cmp #$D
0093D0  1  D0 1B        		bne loc_73F3
0093D2  1  A9 28        		lda #$28
0093D4  1  85 07        		sta unk_7
0093D6  1  C8           		iny
0093D7  1  B1 E7        		lda (AreaDataLow),y
0093D9  1  29 40        		and #$40
0093DB  1  F0 63        		beq locret_7446
0093DD  1  B1 E7        		lda (AreaDataLow),y
0093DF  1  29 7F        		and #$7F
0093E1  1  C9 4B        		cmp #$4B
0093E3  1  D0 03        		bne loc_73EE
0093E5  1  EE 45 07     		inc LoopCommand
0093E8  1               loc_73EE:
0093E8  1               
0093E8  1  29 3F        		and #$3F
0093EA  1  4C 21 94     		jmp loc_7427
0093ED  1               loc_73F3:
0093ED  1               
0093ED  1  C9 0C        		cmp #$C
0093EF  1  B0 27        		bcs loc_741E
0093F1  1  C8           		iny
0093F2  1  B1 E7        		lda ($E7),y
0093F4  1  29 70        		and #$70
0093F6  1  D0 0B        		bne loc_7409
0093F8  1  A9 18        		lda #$18
0093FA  1  85 07        		sta unk_7
0093FC  1  B1 E7        		lda ($E7),y
0093FE  1  29 0F        		and #$F
009400  1  4C 21 94     		jmp loc_7427
009403  1               loc_7409:
009403  1               
009403  1  85 00        		sta TMP_0
009405  1  C9 70        		cmp #$70
009407  1  D0 0A        		bne loc_7419
009409  1  B1 E7        		lda ($E7),y
00940B  1  29 08        		and #8
00940D  1  F0 04        		beq loc_7419
00940F  1  A9 00        		lda #0
009411  1  85 00        		sta TMP_0
009413  1               loc_7419:
009413  1               
009413  1  A5 00        		lda TMP_0
009415  1  4C 1D 94     		jmp loc_7423
009418  1               loc_741E:
009418  1               
009418  1  C8           		iny
009419  1  B1 E7        		lda ($E7),y
00941B  1  29 70        		and #$70
00941D  1               loc_7423:
00941D  1               
00941D  1  4A           		lsr
00941E  1  4A           		lsr
00941F  1  4A           		lsr
009420  1  4A           		lsr
009421  1               loc_7427:
009421  1               
009421  1  85 00        		sta TMP_0
009423  1  BD 30 07     		lda $730,x
009426  1  10 42        		bpl loc_7470
009428  1  AD 2A 07     		lda AreaObjectPageLoc
00942B  1  CD 25 07     		cmp CurrentPageLoc
00942E  1  F0 11        		beq loc_7447
009430  1  AC 2C 07     		ldy AreaDataOffset
009433  1  B1 E7        		lda ($E7),y
009435  1  29 0F        		and #$F
009437  1  C9 0E        		cmp #$E
009439  1  D0 05        		bne locret_7446
00943B  1  AD 28 07     		lda BackloadingFlag
00943E  1  D0 21        		bne loc_7467
009440  1               locret_7446:
009440  1               
009440  1  60           		rts
009441  1               loc_7447:
009441  1               
009441  1  AD 28 07     		lda BackloadingFlag
009444  1  F0 0B        		beq loc_7457
009446  1  A9 00        		lda #0
009448  1  8D 28 07     		sta BackloadingFlag
00944B  1  8D 29 07     		sta BehindAreaParserFlag
00944E  1  85 08        		sta ObjectOffset
009450  1               LoopCmdE:
009450  1               
009450  1  60           		rts
009451  1               loc_7457:
009451  1               
009451  1  AC 2C 07     		ldy AreaDataOffset
009454  1  B1 E7        		lda ($E7),y
009456  1  29 F0        		and #$F0
009458  1  4A           		lsr
009459  1  4A           		lsr
00945A  1  4A           		lsr
00945B  1  4A           		lsr
00945C  1  CD 26 07     		cmp CurrentColumnPos
00945F  1  D0 DF        		bne locret_7446
009461  1               loc_7467:
009461  1               
009461  1  AD 2C 07     		lda AreaDataOffset
009464  1  9D 2D 07     		sta AreaObjOffsetBuffer,x
009467  1  20 94 93     		jsr IncAreaObjOffset
00946A  1               loc_7470:
00946A  1               
00946A  1  A5 00        		lda TMP_0
00946C  1  18           		clc
00946D  1  65 07        		adc unk_7
00946F  1  20 FC 8C     		jsr JumpEngine
009472  1  2B 97        		.word VerticalPipe
009474  1  91 95        		.word AreaStyleObject
009476  1  6F 98        		.word RowOfBricks
009478  1  7F 98        		.word RowOfSolidBlocks
00947A  1  33 98        		.word RowOfCoins
00947C  1  91 98        		.word ColumnOfBricks
00947E  1  9A 98        		.word ColumnOfSolidBlocks
009480  1  2B 97        		.word VerticalPipe
009482  1  84 99        		.word Hole_Empty
009484  1  00 96        		.word PulleyRopeObject
009486  1  BA 97        		.word Bridge_High
009488  1  BD 97        		.word Bridge_Middle_NODIRECT+1
00948A  1  C0 97        		.word Bridge_Low_NODIRECT+1
00948C  1  98 97        		.word Hole_Water
00948E  1  A9 97        		.word QuestionBlockRow_High
009490  1  AC 97        		.word QuestionBlockRow_Low_NODIRECT+1
009492  1  11 98        		.word EndlessRope
009494  1  18 98        		.word BalancePlatRope
009496  1  4C 96        		.word CastleObject
009498  1  F8 98        		.word StaircaseObject
00949A  1  F1 96        		.word ExitPipe
00949C  1  D5 97        		.word FlagBalls_Residual
00949E  1  19 E2        		.word VerticalPipeUpsideDown
0094A0  1  1E E2        		.word VerticalPipeUpsideDown_4
0094A2  1  51 99        		.word QuestionBlock
0094A4  1  51 99        		.word QuestionBlock
0094A6  1  51 99        		.word QuestionBlock
0094A8  1  51 99        		.word QuestionBlock
0094AA  1  44 99        		.word Hidden1UpBlock
0094AC  1  51 99        		.word QuestionBlock
0094AE  1  51 99        		.word QuestionBlock
0094B0  1  5C 99        		.word BrickWithItem
0094B2  1  5C 99        		.word BrickWithItem
0094B4  1  5C 99        		.word BrickWithItem
0094B6  1  5C 99        		.word BrickWithItem
0094B8  1  57 99        		.word BrickWithCoins
0094BA  1  5C 99        		.word BrickWithItem
0094BC  1  B5 96        		.word WaterPipe
0094BE  1  5A 98        		.word EmptyBlock
0094C0  1  14 99        		.word Jumpspring
0094C2  1  C8 96        		.word IntroPipe
0094C4  1  DF 97        		.word FlagpoleObject
0094C6  1  4A 98        		.word AxeObj
0094C8  1  4F 98        		.word ChainObj
0094CA  1  42 98        		.word CastleBridgeObj
0094CC  1  0D 95        		.word XXX_ScrollLockObject_Warp_RW_POSS
0094CE  1  5E 95        		.word ScrollLockObject
0094D0  1  5E 95        		.word ScrollLockObject
0094D2  1  7C 95        		.word AreaFrenzy
0094D4  1  7C 95        		.word AreaFrenzy
0094D6  1  7C 95        		.word AreaFrenzy
0094D8  1  50 94        		.word LoopCmdE
0094DA  1  B2 E2        		.word MakeItWindy
0094DC  1  B6 E2        		.word MakeItNotWindy
0094DE  1  E0 94        		.word AlterAreaAttributes
0094E0  1               
0094E0  1               AlterAreaAttributes:
0094E0  1               
0094E0  1  BC 2D 07     		ldy AreaObjOffsetBuffer,x
0094E3  1  C8           		iny
0094E4  1  B1 E7        		lda ($E7),y
0094E6  1  48           		pha
0094E7  1  29 40        		and #$40
0094E9  1  D0 12        		bne loc_7503
0094EB  1  68           		pla
0094EC  1  48           		pha
0094ED  1  29 0F        		and #$F
0094EF  1  8D 27 07     		sta TerrainControl
0094F2  1  68           		pla
0094F3  1  29 30        		and #$30
0094F5  1  4A           		lsr
0094F6  1  4A           		lsr
0094F7  1  4A           		lsr
0094F8  1  4A           		lsr
0094F9  1  8D 42 07     		sta BackgroundScenery
0094FC  1  60           		rts
0094FD  1               loc_7503:
0094FD  1               
0094FD  1  68           		pla
0094FE  1  29 07        		and #7
009500  1  C9 04        		cmp #4
009502  1  90 05        		bcc loc_750F
009504  1  8D 44 07     		sta BackgroundColorCtrl
009507  1  A9 00        		lda #0
009509  1               loc_750F:
009509  1               
009509  1  8D 41 07     		sta ForegroundScenery
00950C  1  60           		rts
00950D  1               XXX_ScrollLockObject_Warp_RW_POSS:
00950D  1               
00950D  1  A2 80        		ldx #$80
00950F  1  AD FB 07     		lda IsPlayingExtendedWorlds
009512  1  D0 15        		bne loc_752F
009514  1  AD 5F 07     		lda WorldNumber
009517  1  D0 18        		bne loc_7537
009519  1  AC 4E 07     		ldy AreaType
00951C  1  88           		dey
00951D  1  F0 06        		beq loc_752B
00951F  1  AD 4F 07     		lda AreaAddrsLOffset
009522  1  F0 02        		beq loc_752C
009524  1  E8           		inx
009525  1               loc_752B:
009525  1               
009525  1  E8           		inx
009526  1               loc_752C:
009526  1               
009526  1  4C 52 95     		jmp loc_7558
009529  1               loc_752F:
009529  1               
009529  1  A9 87        		lda #$87
00952B  1  18           		clc
00952C  1  6D 5C 07     		adc LevelNumber
00952F  1  D0 22        		bne loc_7559
009531  1               loc_7537:
009531  1               
009531  1  A2 83        		ldx #$83
009533  1  AD 5F 07     		lda WorldNumber
009536  1  C9 02        		cmp #2
009538  1  F0 18        		beq loc_7558
00953A  1  E8           		inx
00953B  1  C9 04        		cmp #4
00953D  1  D0 10        		bne loc_7555
00953F  1  AD 4F 07     		lda AreaAddrsLOffset
009542  1  C9 0B        		cmp #$B
009544  1  F0 0C        		beq loc_7558
009546  1  AC 4E 07     		ldy AreaType
009549  1  88           		dey
00954A  1  F0 04        		beq loc_7556
00954C  1  4C 51 95     		jmp loc_7557
00954F  1               loc_7555:
00954F  1               
00954F  1  E8           		inx
009550  1               loc_7556:
009550  1               
009550  1  E8           		inx
009551  1               loc_7557:
009551  1               
009551  1  E8           		inx
009552  1               loc_7558:
009552  1               
009552  1  8A           		txa
009553  1               loc_7559:
009553  1               
009553  1  8D D6 06     		sta WarpZoneControl
009556  1  20 0B 88     		jsr sub_675E
009559  1  A9 0D        		lda #$D
00955B  1  20 67 95     		jsr sub_756D
00955E  1               ScrollLockObject:
00955E  1               
00955E  1  AD 23 07     		lda ScrollLock
009561  1  49 01        		eor #1
009563  1  8D 23 07     		sta ScrollLock
009566  1  60           		rts
009567  1               sub_756D:
009567  1               
009567  1  85 00        		sta TMP_0
009569  1  A9 00        		lda #0
00956B  1  A2 04        		ldx #4
00956D  1               loc_7573:
00956D  1               
00956D  1  B4 16        		ldy $16,x
00956F  1  C4 00        		cpy TMP_0
009571  1  D0 02        		bne loc_757B
009573  1  95 0F        		sta $F,x
009575  1               loc_757B:
009575  1               
009575  1  CA           		dex
009576  1  10 F5        		bpl loc_7573
009578  1  60           		rts
009579  1               FrenzyIDData:
009579  1  14           		.byte $14
00957A  1  17           		.byte $17
00957B  1  18           		.byte $18
00957C  1               AreaFrenzy:
00957C  1               
00957C  1  A6 00        		ldx TMP_0
00957E  1  BD 71 95     		lda FrenzyIDData-8,x
009581  1  A0 05        		ldy #5
009583  1               loc_7589:
009583  1               
009583  1  88           		dey
009584  1  30 07        		bmi loc_7593
009586  1  D9 16 00     		cmp Enemy_ID,y
009589  1  D0 F8        		bne loc_7589
00958B  1  A9 00        		lda #0
00958D  1               loc_7593:
00958D  1               
00958D  1  8D CD 06     		sta EnemyFrenzyQueue
009590  1  60           		rts
009591  1               AreaStyleObject:
009591  1               
009591  1  AD 33 07     		lda AreaStyle
009594  1  20 FC 8C     		jsr JumpEngine
009597  1  9D 95        		.word TreeLedge
009599  1  C9 95        		.word MushroomLedge
00959B  1  AA 98        		.word BulletBillCannon
00959D  1               TreeLedge:
00959D  1               
00959D  1  20 F6 99     		jsr GetLrgObjAttrib
0095A0  1  BD 30 07     		lda $730,x
0095A3  1  F0 1F        		beq loc_75CA
0095A5  1  10 11        		bpl loc_75BE
0095A7  1  98           		tya
0095A8  1  9D 30 07     		sta $730,x
0095AB  1  AD 25 07     		lda CurrentPageLoc
0095AE  1  0D 26 07     		ora CurrentColumnPos
0095B1  1  F0 05        		beq loc_75BE
0095B3  1  A9 16        		lda #$16
0095B5  1  4C F6 95     		jmp loc_75FC
0095B8  1               loc_75BE:
0095B8  1               
0095B8  1  A6 07        		ldx unk_7
0095BA  1  A9 17        		lda #$17
0095BC  1  9D A1 06     		sta $6A1,x
0095BF  1  A9 4C        		lda #$4C
0095C1  1  4C F0 95     		jmp loc_75F6
0095C4  1               loc_75CA:
0095C4  1               
0095C4  1  A9 18        		lda #$18
0095C6  1  4C F6 95     		jmp loc_75FC
0095C9  1               MushroomLedge:
0095C9  1               
0095C9  1  20 E7 99     		jsr ChkLrgObjLength
0095CC  1  84 06        		sty byte_6
0095CE  1  90 0C        		bcc loc_75E2
0095D0  1  BD 30 07     		lda AreaObjectLength,x
0095D3  1  4A           		lsr
0095D4  1  9D 36 07     		sta MushroomLedgeHalfLen,x
0095D7  1  A9 8A        		lda #$8A
0095D9  1  4C F6 95     		jmp loc_75FC
0095DC  1               loc_75E2:
0095DC  1               
0095DC  1  A9 8C        		lda #$8C
0095DE  1  BC 30 07     		ldy AreaObjectLength,x
0095E1  1  F0 13        		beq loc_75FC
0095E3  1  BD 36 07     		lda MushroomLedgeHalfLen,x
0095E6  1  85 06        		sta byte_6
0095E8  1  A6 07        		ldx unk_7
0095EA  1  A9 8B        		lda #$8B
0095EC  1  9D A1 06     		sta MetatileBuffer,x
0095EF  1  60           		rts
0095F0  1               loc_75F6:
0095F0  1               
0095F0  1  E8           		inx
0095F1  1  A0 0F        		ldy #$F
0095F3  1  4C C0 99     		jmp RenderUnderPart
0095F6  1               loc_75FC:
0095F6  1               
0095F6  1  A6 07        		ldx unk_7
0095F8  1  A0 00        		ldy #0
0095FA  1  4C C0 99     		jmp RenderUnderPart
0095FD  1               unk_7603:
0095FD  1  42           		.byte $42
0095FE  1  41           		.byte $41
0095FF  1  43           		.byte $43
009600  1               PulleyRopeObject:
009600  1               
009600  1  20 E7 99     		jsr ChkLrgObjLength
009603  1  A0 00        		ldy #0
009605  1  B0 07        		bcs loc_7614
009607  1  C8           		iny
009608  1  BD 30 07     		lda AreaObjectLength,x
00960B  1  D0 01        		bne loc_7614
00960D  1  C8           		iny
00960E  1               loc_7614:
00960E  1               
00960E  1  B9 FD 95     		lda unk_7603,y
009611  1  8D A1 06     		sta MetatileBuffer
009614  1  60           		rts
009615  1               unk_761B:
009615  1  00           		.byte 0
009616  1  45           		.byte $45
009617  1  45           		.byte $45
009618  1  45           		.byte $45
009619  1  00           		.byte 0
00961A  1  00           		.byte 0
00961B  1  48           		.byte $48
00961C  1  47           		.byte $47
00961D  1  46           		.byte $46
00961E  1  00           		.byte 0
00961F  1  45           		.byte $45
009620  1  49           		.byte $49
009621  1  49           		.byte $49
009622  1  49           		.byte $49
009623  1  45           		.byte $45
009624  1  47           		.byte $47
009625  1  47           		.byte $47
009626  1  4A           		.byte $4A
009627  1  47           		.byte $47
009628  1  47           		.byte $47
009629  1  47           		.byte $47
00962A  1  47           		.byte $47
00962B  1  4B           		.byte $4B
00962C  1  47           		.byte $47
00962D  1  47           		.byte $47
00962E  1  49           		.byte $49
00962F  1  49           		.byte $49
009630  1  49           		.byte $49
009631  1  49           		.byte $49
009632  1  49           		.byte $49
009633  1  47           		.byte $47
009634  1  4A           		.byte $4A
009635  1  47           		.byte $47
009636  1  4A           		.byte $4A
009637  1  47           		.byte $47
009638  1  47           		.byte $47
009639  1  4B           		.byte $4B
00963A  1  47           		.byte $47
00963B  1  4B           		.byte $4B
00963C  1  47           		.byte $47
00963D  1  47           		.byte $47
00963E  1  47           		.byte $47
00963F  1  47           		.byte $47
009640  1  47           		.byte $47
009641  1  47           		.byte $47
009642  1  4A           		.byte $4A
009643  1  47           		.byte $47
009644  1  4A           		.byte $4A
009645  1  47           		.byte $47
009646  1  4A           		.byte $4A
009647  1  4B           		.byte $4B
009648  1  47           		.byte $47
009649  1  4B           		.byte $4B
00964A  1  47           		.byte $47
00964B  1  4B           		.byte $4B
00964C  1               CastleObject:
00964C  1               
00964C  1  20 F6 99     		jsr GetLrgObjAttrib
00964F  1  84 07        		sty unk_7
009651  1  A0 04        		ldy #4
009653  1  20 EA 99     		jsr ChkLrgObjFixedLength
009656  1  8A           		txa
009657  1  48           		pha
009658  1  BC 30 07     		ldy AreaObjectLength,x
00965B  1  A6 07        		ldx unk_7
00965D  1  A9 0B        		lda #$B
00965F  1  85 06        		sta byte_6
009661  1               loc_7667:
009661  1               
009661  1  B9 15 96     		lda unk_761B,y
009664  1  9D A1 06     		sta MetatileBuffer,x
009667  1  E8           		inx
009668  1  A5 06        		lda byte_6
00966A  1  F0 07        		beq loc_7679
00966C  1  C8           		iny
00966D  1  C8           		iny
00966E  1  C8           		iny
00966F  1  C8           		iny
009670  1  C8           		iny
009671  1  C6 06        		dec byte_6
009673  1               loc_7679:
009673  1               
009673  1  E0 0B        		cpx #$B
009675  1  D0 EA        		bne loc_7667
009677  1  68           		pla
009678  1  AA           		tax
009679  1  AD 25 07     		lda CurrentPageLoc
00967C  1  F0 36        		beq locret_76BA
00967E  1  BD 30 07     		lda AreaObjectLength,x
009681  1  C9 01        		cmp #1
009683  1  F0 2A        		beq loc_76B5
009685  1  A4 07        		ldy unk_7
009687  1  D0 04        		bne loc_7693
009689  1  C9 03        		cmp #3
00968B  1  F0 22        		beq loc_76B5
00968D  1               loc_7693:
00968D  1               
00968D  1  C9 02        		cmp #2
00968F  1  D0 23        		bne locret_76BA
009691  1  20 06 9A     		jsr GetAreaObjXPosition
009694  1  48           		pha
009695  1  20 8B 97     		jsr FindEmptyEnemySlot
009698  1  68           		pla
009699  1  95 87        		sta $87,x
00969B  1  AD 25 07     		lda CurrentPageLoc
00969E  1  95 6E        		sta $6E,x
0096A0  1  A9 01        		lda #1
0096A2  1  95 B6        		sta $B6,x
0096A4  1  95 0F        		sta $F,x
0096A6  1  A9 90        		lda #$90
0096A8  1  95 CF        		sta $CF,x
0096AA  1  A9 31        		lda #$31
0096AC  1  95 16        		sta $16,x
0096AE  1  60           		rts
0096AF  1               loc_76B5:
0096AF  1               
0096AF  1  A0 50        		ldy #$50
0096B1  1  8C AB 06     		sty byte_6AB
0096B4  1               locret_76BA:
0096B4  1               
0096B4  1  60           		rts
0096B5  1               WaterPipe:
0096B5  1               
0096B5  1  20 F6 99     		jsr GetLrgObjAttrib
0096B8  1  BC 30 07     		ldy AreaObjectLength,x
0096BB  1  A6 07        		ldx unk_7
0096BD  1  A9 6D        		lda #$6D
0096BF  1  9D A1 06     		sta MetatileBuffer,x
0096C2  1  A9 6E        		lda #$6E
0096C4  1  9D A2 06     		sta unk_6A2,x
0096C7  1  60           		rts
0096C8  1               IntroPipe:
0096C8  1               
0096C8  1  A0 03        		ldy #3
0096CA  1  20 EA 99     		jsr ChkLrgObjFixedLength
0096CD  1  A0 0A        		ldy #$A
0096CF  1  20 F9 96     		jsr RenderSidewaysPipe
0096D2  1  B0 10        		bcs locret_76EA
0096D4  1  A2 06        		ldx #6
0096D6  1               loc_76DC:
0096D6  1               
0096D6  1  A9 00        		lda #0
0096D8  1  9D A1 06     		sta MetatileBuffer,x
0096DB  1  CA           		dex
0096DC  1  10 F8        		bpl loc_76DC
0096DE  1  B9 23 97     		lda VerticalPipeData,y
0096E1  1  8D A8 06     		sta byte_6A8
0096E4  1               locret_76EA:
0096E4  1               
0096E4  1  60           		rts
0096E5  1               SidePipeShaftData:
0096E5  1  15           		.byte $15
0096E6  1  14           		.byte $14
0096E7  1  00           		.byte 0
0096E8  1  00           		.byte 0
0096E9  1               SidePipeTopPart:
0096E9  1  15           		.byte $15
0096EA  1  1B           		.byte $1B
0096EB  1  1A           		.byte $1A
0096EC  1  19           		.byte $19
0096ED  1               SidePipeBottomPart:
0096ED  1  15           		.byte $15
0096EE  1  1E           		.byte $1E
0096EF  1  1D           		.byte $1D
0096F0  1  1C           		.byte $1C
0096F1  1               ExitPipe:
0096F1  1               
0096F1  1  A0 03        		ldy #3
0096F3  1  20 EA 99     		jsr ChkLrgObjFixedLength
0096F6  1  20 F6 99     		jsr GetLrgObjAttrib
0096F9  1               RenderSidewaysPipe:
0096F9  1               
0096F9  1  88           		dey
0096FA  1  88           		dey
0096FB  1  84 05        		sty byte_5
0096FD  1  BC 30 07     		ldy $730,x
009700  1  84 06        		sty byte_6
009702  1  A6 05        		ldx byte_5
009704  1  E8           		inx
009705  1  B9 E5 96     		lda SidePipeShaftData,y
009708  1  C9 00        		cmp #0
00970A  1  F0 08        		beq loc_771A
00970C  1  A2 00        		ldx #0
00970E  1  A4 05        		ldy byte_5
009710  1  20 C0 99     		jsr RenderUnderPart
009713  1  18           		clc
009714  1               loc_771A:
009714  1               
009714  1  A4 06        		ldy byte_6
009716  1  B9 E9 96     		lda SidePipeTopPart,y
009719  1  9D A1 06     		sta $6A1,x
00971C  1  B9 ED 96     		lda SidePipeBottomPart,y
00971F  1  9D A2 06     		sta $6A2,x
009722  1  60           		rts
009723  1               VerticalPipeData:
009723  1  11           		.byte $11
009724  1  10           		.byte $10
009725  1               VerticalPipeDataOff2:
009725  1  15           		.byte $15
009726  1  14           		.byte $14
009727  1  13           		.byte $13
009728  1  12           		.byte $12
009729  1  15           		.byte $15
00972A  1  14           		.byte $14
00972B  1               VerticalPipe:
00972B  1               
00972B  1  20 5B 97     		jsr GetPipeHeight
00972E  1  A5 00        		lda TMP_0
009730  1  F0 04        		beq loc_773C
009732  1  C8           		iny
009733  1  C8           		iny
009734  1  C8           		iny
009735  1  C8           		iny
009736  1               loc_773C:
009736  1               
009736  1  98           		tya
009737  1  48           		pha
009738  1  BC 30 07     		ldy AreaObjectLength,x
00973B  1  F0 0A        		beq loc_774D
00973D  1  20 8B 97     		jsr FindEmptyEnemySlot
009740  1  B0 05        		bcs loc_774D
009742  1  A9 0D        		lda #$D
009744  1  20 6C 97     		jsr InitPiranhaPlant
009747  1               loc_774D:
009747  1               
009747  1  68           		pla
009748  1  A8           		tay
009749  1  A6 07        		ldx unk_7
00974B  1  B9 23 97     		lda VerticalPipeData,y
00974E  1  9D A1 06     		sta $6A1,x
009751  1  E8           		inx
009752  1  B9 25 97     		lda VerticalPipeDataOff2,y
009755  1  A4 06        		ldy byte_6
009757  1  88           		dey
009758  1  4C C0 99     		jmp RenderUnderPart
00975B  1               GetPipeHeight:
00975B  1               
00975B  1  A0 01        		ldy #1
00975D  1  20 EA 99     		jsr ChkLrgObjFixedLength
009760  1  20 F6 99     		jsr GetLrgObjAttrib
009763  1  98           		tya
009764  1  29 07        		and #7
009766  1  85 06        		sta byte_6
009768  1  BC 30 07     		ldy $730,x
00976B  1  60           		rts
00976C  1               InitPiranhaPlant:
00976C  1               
00976C  1  95 16        		sta Enemy_ID,x
00976E  1  20 06 9A     		jsr GetAreaObjXPosition
009771  1  18           		clc
009772  1  69 08        		adc #8
009774  1  95 87        		sta Enemy_X_Position,x
009776  1  AD 25 07     		lda CurrentPageLoc
009779  1  69 00        		adc #0
00977B  1  95 6E        		sta Enemy_PageLoc,x
00977D  1  A9 01        		lda #1
00977F  1  95 B6        		sta Enemy_Y_HighPos,x
009781  1  95 0F        		sta $F,x
009783  1  20 0E 9A     		jsr GetAreaObjYPosition
009786  1  95 CF        		sta Enemy_Y_Position,x
009788  1  4C A4 B3     		jmp loc_9398
00978B  1               FindEmptyEnemySlot:
00978B  1               
00978B  1  A2 00        		ldx #0
00978D  1               loc_7793:
00978D  1               
00978D  1  18           		clc
00978E  1  B5 0F        		lda Enemy_Flag,x
009790  1  F0 05        		beq locret_779D
009792  1  E8           		inx
009793  1  E0 05        		cpx #5
009795  1  D0 F6        		bne loc_7793
009797  1               locret_779D:
009797  1               
009797  1  60           		rts
009798  1               Hole_Water:
009798  1               
009798  1  20 E7 99     		jsr ChkLrgObjLength
00979B  1  A9 86        		lda #$86
00979D  1  8D AB 06     		sta byte_6AB
0097A0  1  A2 0B        		ldx #$B
0097A2  1  A0 01        		ldy #1
0097A4  1  A9 87        		lda #$87
0097A6  1  4C C0 99     		jmp RenderUnderPart
0097A9  1               QuestionBlockRow_High:
0097A9  1               
0097A9  1  A9 03        		lda #3
0097AB  1               QuestionBlockRow_Low_NODIRECT:
0097AB  1               
0097AB  1  2C A9 07     		bit byte_7A9
0097AE  1  48           		pha
0097AF  1  20 E7 99     		jsr ChkLrgObjLength
0097B2  1  68           		pla
0097B3  1  AA           		tax
0097B4  1  A9 C0        		lda #$C0
0097B6  1  9D A1 06     		sta $6A1,x
0097B9  1  60           		rts
0097BA  1               Bridge_High:
0097BA  1               
0097BA  1  A9 06        		lda #6
0097BC  1               Bridge_Middle_NODIRECT:
0097BC  1               
0097BC  1  2C A9 07     		bit byte_7A9
0097BF  1               Bridge_Low_NODIRECT:
0097BF  1               
0097BF  1  2C A9 09     		bit $9A9
0097C2  1  48           		pha
0097C3  1  20 E7 99     		jsr ChkLrgObjLength
0097C6  1  68           		pla
0097C7  1  AA           		tax
0097C8  1  A9 0B        		lda #$B
0097CA  1  9D A1 06     		sta MetatileBuffer,x
0097CD  1  E8           		inx
0097CE  1  A0 00        		ldy #0
0097D0  1  A9 64        		lda #$64
0097D2  1  4C C0 99     		jmp RenderUnderPart
0097D5  1               FlagBalls_Residual:
0097D5  1               
0097D5  1  20 F6 99     		jsr GetLrgObjAttrib
0097D8  1  A2 02        		ldx #2
0097DA  1  A9 6F        		lda #$6F
0097DC  1  4C C0 99     		jmp RenderUnderPart
0097DF  1               FlagpoleObject:
0097DF  1               
0097DF  1  A9 21        		lda #$21
0097E1  1  8D A1 06     		sta MetatileBuffer
0097E4  1  A2 01        		ldx #1
0097E6  1  A0 08        		ldy #8
0097E8  1  A9 22        		lda #$22
0097EA  1  20 C0 99     		jsr RenderUnderPart
0097ED  1  A9 62        		lda #$62
0097EF  1  8D AB 06     		sta byte_6AB
0097F2  1  20 06 9A     		jsr GetAreaObjXPosition
0097F5  1  38           		sec
0097F6  1  E9 08        		sbc #8
0097F8  1  85 8C        		sta byte_8C
0097FA  1  AD 25 07     		lda CurrentPageLoc
0097FD  1  E9 00        		sbc #0
0097FF  1  85 73        		sta byte_73
009801  1  A9 30        		lda #$30
009803  1  85 D4        		sta byte_D4
009805  1  A9 B0        		lda #$B0
009807  1  8D 0D 01     		sta FlagpoleFNum_Y_Pos
00980A  1  A9 30        		lda #$30
00980C  1  85 1B        		sta byte_1B
00980E  1  E6 14        		inc byte_14
009810  1  60           		rts
009811  1               EndlessRope:
009811  1               
009811  1  A2 00        		ldx #0
009813  1  A0 0F        		ldy #$F
009815  1  4C 2A 98     		jmp DrawRope
009818  1               BalancePlatRope:
009818  1               
009818  1  8A           		txa
009819  1  48           		pha
00981A  1  A2 01        		ldx #1
00981C  1  A0 0F        		ldy #$F
00981E  1  A9 44        		lda #$44
009820  1  20 C0 99     		jsr RenderUnderPart
009823  1  68           		pla
009824  1  AA           		tax
009825  1  20 F6 99     		jsr GetLrgObjAttrib
009828  1  A2 01        		ldx #1
00982A  1               DrawRope:
00982A  1               
00982A  1  A9 40        		lda #$40
00982C  1  4C C0 99     		jmp RenderUnderPart
00982F  1               unk_7835:
00982F  1  C4           		.byte $C4
009830  1  C3           		.byte $C3
009831  1  C3           		.byte $C3
009832  1  C3           		.byte $C3
009833  1               RowOfCoins:
009833  1               
009833  1  AC 4E 07     		ldy AreaType
009836  1  B9 2F 98     		lda unk_7835,y
009839  1               loc_783F:
009839  1               
009839  1  4C 85 98     		jmp GetRow
00983C  1               C_ObjectRow:
00983C  1  06           		.byte 6
00983D  1  07           		.byte 7
00983E  1  08           		.byte 8
00983F  1               C_ObjectMetatile:
00983F  1  C6           		.byte $C6
009840  1  0C           		.byte $C
009841  1  89           		.byte $89
009842  1               CastleBridgeObj:
009842  1               
009842  1  A0 0C        		ldy #$C
009844  1  20 EA 99     		jsr ChkLrgObjFixedLength
009847  1  4C 4F 98     		jmp ChainObj
00984A  1               AxeObj:
00984A  1               
00984A  1  A9 08        		lda #8
00984C  1  8D 73 07     		sta VRAM_Buffer_AddrCtrl
00984F  1               ChainObj:
00984F  1               
00984F  1  A4 00        		ldy TMP_0
009851  1  BE 3A 98     		ldx C_ObjectRow-2,y
009854  1  B9 3D 98     		lda C_ObjectMetatile-2,y
009857  1  4C 61 98     		jmp ColObj
00985A  1               EmptyBlock:
00985A  1               
00985A  1  20 F6 99     		jsr GetLrgObjAttrib
00985D  1  A6 07        		ldx unk_7
00985F  1  A9 C5        		lda #$C5
009861  1               ColObj:
009861  1               
009861  1  A0 00        		ldy #0
009863  1  4C C0 99     		jmp RenderUnderPart
009866  1               SolidBlockMetatiles:
009866  1  6A           		.byte $6A
009867  1  62           		.byte $62
009868  1  62           		.byte $62
009869  1  63           		.byte $63
00986A  1               BrickMetatiles:
00986A  1  1F           		.byte $1F
00986B  1  4F           		.byte $4F
00986C  1  50           		.byte $50
00986D  1  50           		.byte $50
00986E  1  88           		.byte $88
00986F  1               RowOfBricks:
00986F  1               
00986F  1  AC 4E 07     		ldy AreaType
009872  1  AD 43 07     		lda CloudTypeOverride
009875  1  F0 02        		beq loc_787F
009877  1  A0 04        		ldy #4
009879  1               loc_787F:
009879  1               
009879  1  B9 6A 98     		lda BrickMetatiles,y
00987C  1  4C 85 98     		jmp GetRow
00987F  1               RowOfSolidBlocks:
00987F  1               
00987F  1  AC 4E 07     		ldy AreaType
009882  1  B9 66 98     		lda SolidBlockMetatiles,y
009885  1               GetRow:
009885  1               
009885  1  48           		pha
009886  1  20 E7 99     		jsr ChkLrgObjLength
009889  1               DrawRow:
009889  1               
009889  1  A6 07        		ldx unk_7
00988B  1  A0 00        		ldy #0
00988D  1  68           		pla
00988E  1  4C C0 99     		jmp RenderUnderPart
009891  1               ColumnOfBricks:
009891  1               
009891  1  AC 4E 07     		ldy AreaType
009894  1  B9 6A 98     		lda BrickMetatiles,y
009897  1  4C A0 98     		jmp GetRow2
00989A  1               ColumnOfSolidBlocks:
00989A  1               
00989A  1  AC 4E 07     		ldy AreaType
00989D  1  B9 66 98     		lda SolidBlockMetatiles,y
0098A0  1               GetRow2:
0098A0  1               
0098A0  1  48           		pha
0098A1  1  20 F6 99     		jsr GetLrgObjAttrib
0098A4  1  68           		pla
0098A5  1  A6 07        		ldx unk_7
0098A7  1  4C C0 99     		jmp RenderUnderPart
0098AA  1               BulletBillCannon:
0098AA  1               
0098AA  1  20 F6 99     		jsr GetLrgObjAttrib
0098AD  1  A6 07        		ldx unk_7
0098AF  1  A9 65        		lda #$65
0098B1  1  9D A1 06     		sta $6A1,x
0098B4  1  E8           		inx
0098B5  1  88           		dey
0098B6  1  30 0E        		bmi loc_78CC
0098B8  1  A9 66        		lda #$66
0098BA  1  9D A1 06     		sta $6A1,x
0098BD  1  E8           		inx
0098BE  1  88           		dey
0098BF  1  30 05        		bmi loc_78CC
0098C1  1  A9 67        		lda #$67
0098C3  1  20 C0 99     		jsr RenderUnderPart
0098C6  1               loc_78CC:
0098C6  1               
0098C6  1  AE 6A 04     		ldx Whirlpool_Offset
0098C9  1  20 0E 9A     		jsr GetAreaObjYPosition
0098CC  1  9D 77 04     		sta $477,x
0098CF  1  AD 25 07     		lda CurrentPageLoc
0098D2  1  9D 6B 04     		sta $46B,x
0098D5  1  20 06 9A     		jsr GetAreaObjXPosition
0098D8  1  9D 71 04     		sta $471,x
0098DB  1  E8           		inx
0098DC  1  E0 06        		cpx #6
0098DE  1  90 02        		bcc loc_78E8
0098E0  1  A2 00        		ldx #0
0098E2  1               loc_78E8:
0098E2  1               
0098E2  1  8E 6A 04     		stx Whirlpool_Offset
0098E5  1  60           		rts
0098E6  1               unk_78EC:
0098E6  1  07           		.byte 7
0098E7  1  07           		.byte 7
0098E8  1  06           		.byte 6
0098E9  1  05           		.byte 5
0098EA  1  04           		.byte 4
0098EB  1  03           		.byte 3
0098EC  1  02           		.byte 2
0098ED  1  01           		.byte 1
0098EE  1  00           		.byte 0
0098EF  1               unk_78F5:
0098EF  1  03           		.byte 3
0098F0  1  03           		.byte 3
0098F1  1  04           		.byte 4
0098F2  1  05           		.byte 5
0098F3  1  06           		.byte 6
0098F4  1  07           		.byte 7
0098F5  1  08           		.byte 8
0098F6  1  09           		.byte 9
0098F7  1  0A           		.byte $A
0098F8  1               StaircaseObject:
0098F8  1               
0098F8  1  20 E7 99     		jsr ChkLrgObjLength
0098FB  1  90 05        		bcc loc_7908
0098FD  1  A9 09        		lda #9
0098FF  1  8D 34 07     		sta StaircaseControl
009902  1               loc_7908:
009902  1               
009902  1  CE 34 07     		dec StaircaseControl
009905  1  AC 34 07     		ldy StaircaseControl
009908  1  BE EF 98     		ldx unk_78F5,y
00990B  1  B9 E6 98     		lda unk_78EC,y
00990E  1  A8           		tay
00990F  1  A9 62        		lda #$62
009911  1  4C C0 99     		jmp RenderUnderPart
009914  1               Jumpspring:
009914  1               
009914  1  20 F6 99     		jsr GetLrgObjAttrib
009917  1  20 8B 97     		jsr FindEmptyEnemySlot
00991A  1  B0 27        		bcs locret_7949
00991C  1  20 06 9A     		jsr GetAreaObjXPosition
00991F  1  95 87        		sta Enemy_X_Position,x
009921  1  AD 25 07     		lda CurrentPageLoc
009924  1  95 6E        		sta $6E,x
009926  1  20 0E 9A     		jsr GetAreaObjYPosition
009929  1  95 CF        		sta $CF,x
00992B  1  95 58        		sta $58,x
00992D  1  A9 32        		lda #$32
00992F  1  95 16        		sta $16,x
009931  1  A0 01        		ldy #1
009933  1  94 B6        		sty $B6,x
009935  1  F6 0F        		inc $F,x
009937  1  A6 07        		ldx unk_7
009939  1  A9 68        		lda #$68
00993B  1  9D A1 06     		sta $6A1,x
00993E  1  A9 69        		lda #$69
009940  1  9D A2 06     		sta $6A2,x
009943  1               locret_7949:
009943  1               
009943  1  60           		rts
009944  1               Hidden1UpBlock:
009944  1               
009944  1  AD 5D 07     		lda Hidden1UpFlag
009947  1  F0 36        		beq locret_7985
009949  1  A9 00        		lda #0
00994B  1  8D 5D 07     		sta Hidden1UpFlag
00994E  1  4C 5C 99     		jmp BrickWithItem
009951  1               QuestionBlock:
009951  1               
009951  1  20 79 99     		jsr GetAreaObjectID
009954  1  4C 6F 99     		jmp DrawQBlk
009957  1               BrickWithCoins:
009957  1               
009957  1  A9 00        		lda #0
009959  1  8D BC 06     		sta BrickCoinTimerFlag
00995C  1               BrickWithItem:
00995C  1               
00995C  1  20 79 99     		jsr GetAreaObjectID
00995F  1  84 07        		sty unk_7
009961  1  A9 00        		lda #0
009963  1  AC 4E 07     		ldy AreaType
009966  1  88           		dey
009967  1  F0 02        		beq loc_7971
009969  1  A9 06        		lda #6
00996B  1               loc_7971:
00996B  1               
00996B  1  18           		clc
00996C  1  65 07        		adc unk_7
00996E  1  A8           		tay
00996F  1               DrawQBlk:
00996F  1               
00996F  1  B9 B8 A9     		lda BrickQBlockMetatiles,y
009972  1  48           		pha
009973  1  20 F6 99     		jsr GetLrgObjAttrib
009976  1  4C 89 98     		jmp DrawRow
009979  1               GetAreaObjectID:
009979  1               
009979  1  A5 00        		lda TMP_0
00997B  1  38           		sec
00997C  1  E9 00        		sbc #0
00997E  1  A8           		tay
00997F  1               locret_7985:
00997F  1               
00997F  1  60           		rts
009980  1               unk_7986:
009980  1  87           		.byte $87
009981  1  00           		.byte 0
009982  1  00           		.byte 0
009983  1  00           		.byte 0
009984  1               Hole_Empty:
009984  1               
009984  1  20 E7 99     		jsr ChkLrgObjLength
009987  1  90 2D        		bcc loc_79BC
009989  1  AD 4E 07     		lda AreaType
00998C  1  D0 28        		bne loc_79BC
00998E  1  AE 6A 04     		ldx Whirlpool_Offset
009991  1  20 06 9A     		jsr GetAreaObjXPosition
009994  1  38           		sec
009995  1  E9 10        		sbc #$10
009997  1  9D 71 04     		sta Whirlpool_LeftExtent,x
00999A  1  AD 25 07     		lda CurrentPageLoc
00999D  1  E9 00        		sbc #0
00999F  1  9D 6B 04     		sta Whirlpool_PageLoc,x
0099A2  1  C8           		iny
0099A3  1  C8           		iny
0099A4  1  98           		tya
0099A5  1  0A           		asl
0099A6  1  0A           		asl
0099A7  1  0A           		asl
0099A8  1  0A           		asl
0099A9  1  9D 77 04     		sta Whirlpool_Length,x
0099AC  1  E8           		inx
0099AD  1  E0 05        		cpx #5
0099AF  1  90 02        		bcc loc_79B9
0099B1  1  A2 00        		ldx #0
0099B3  1               loc_79B9:
0099B3  1               
0099B3  1  8E 6A 04     		stx Whirlpool_Offset
0099B6  1               loc_79BC:
0099B6  1               
0099B6  1  AE 4E 07     		ldx AreaType
0099B9  1  BD 80 99     		lda unk_7986,x
0099BC  1  A2 08        		ldx #8
0099BE  1  A0 0F        		ldy #$F
0099C0  1               RenderUnderPart:
0099C0  1               
0099C0  1  8C 35 07     		sty AreaObjectHeight
0099C3  1  BC A1 06     		ldy MetatileBuffer,x
0099C6  1  F0 10        		beq loc_79DE
0099C8  1  C0 17        		cpy #$17
0099CA  1  F0 0F        		beq loc_79E1
0099CC  1  C0 8B        		cpy #$8B
0099CE  1  F0 0B        		beq loc_79E1
0099D0  1  C0 C0        		cpy #$C0
0099D2  1  F0 04        		beq loc_79DE
0099D4  1  C0 C0        		cpy #$C0
0099D6  1  B0 03        		bcs loc_79E1
0099D8  1               loc_79DE:
0099D8  1               
0099D8  1  9D A1 06     		sta MetatileBuffer,x
0099DB  1               loc_79E1:
0099DB  1               
0099DB  1  E8           		inx
0099DC  1  E0 0D        		cpx #$D
0099DE  1  B0 06        		bcs locret_79EC
0099E0  1  AC 35 07     		ldy AreaObjectHeight
0099E3  1  88           		dey
0099E4  1  10 DA        		bpl RenderUnderPart
0099E6  1               locret_79EC:
0099E6  1               
0099E6  1  60           		rts
0099E7  1               ChkLrgObjLength:
0099E7  1               
0099E7  1  20 F6 99     		jsr GetLrgObjAttrib
0099EA  1               ChkLrgObjFixedLength:
0099EA  1               
0099EA  1  BD 30 07     		lda AreaObjectLength,x
0099ED  1  18           		clc
0099EE  1  10 05        		bpl locret_79FB
0099F0  1  98           		tya
0099F1  1  9D 30 07     		sta AreaObjectLength,x
0099F4  1  38           		sec
0099F5  1               locret_79FB:
0099F5  1               
0099F5  1  60           		rts
0099F6  1               GetLrgObjAttrib:
0099F6  1               
0099F6  1  BC 2D 07     		ldy AreaObjOffsetBuffer,x
0099F9  1  B1 E7        		lda ($E7),y
0099FB  1  29 0F        		and #$F
0099FD  1  85 07        		sta unk_7
0099FF  1  C8           		iny
009A00  1  B1 E7        		lda ($E7),y
009A02  1  29 0F        		and #$F
009A04  1  A8           		tay
009A05  1  60           		rts
009A06  1               GetAreaObjXPosition:
009A06  1               
009A06  1  AD 26 07     		lda CurrentColumnPos
009A09  1  0A           		asl
009A0A  1  0A           		asl
009A0B  1  0A           		asl
009A0C  1  0A           		asl
009A0D  1  60           		rts
009A0E  1               GetAreaObjYPosition:
009A0E  1               
009A0E  1  A5 07        		lda unk_7
009A10  1  0A           		asl
009A11  1  0A           		asl
009A12  1  0A           		asl
009A13  1  0A           		asl
009A14  1  18           		clc
009A15  1  69 20        		adc #$20
009A17  1  60           		rts
009A18  1               BlockBufferAddr:
009A18  1  00           		.byte <Block_Buffer_1
009A19  1  D0           		.byte <Block_Buffer_2
009A1A  1  05           		.byte >Block_Buffer_1
009A1B  1  05           		.byte >Block_Buffer_2
009A1C  1               GetBlockBufferAddr:
009A1C  1               
009A1C  1  48           		pha
009A1D  1  4A           		lsr
009A1E  1  4A           		lsr
009A1F  1  4A           		lsr
009A20  1  4A           		lsr
009A21  1  A8           		tay
009A22  1  B9 1A 9A     		lda BlockBufferAddr+2,y
009A25  1  85 07        		sta unk_7
009A27  1  68           		pla
009A28  1  29 0F        		and #$F
009A2A  1  18           		clc
009A2B  1  79 18 9A     		adc BlockBufferAddr,y
009A2E  1  85 06        		sta byte_6
009A30  1  60           		rts
009A31  1               GameMode:
009A31  1               
009A31  1  AD 72 07     		lda OperMode_Task
009A34  1  20 FC 8C     		jsr JumpEngine
009A37  1  02 E0        		.word LoadCorrectData
009A39  1  84 8E        		.word InitializeArea
009A3B  1  8E 85        		.word ScreenRoutines
009A3D  1  04 8F        		.word SecondaryGameSetup
009A3F  1  41 9A        		.word GameCoreRoutine_RW
009A41  1               GameCoreRoutine_RW:
009A41  1  20 97 9B     		jsr GameRoutines
009A44  1  AD 72 07     		lda OperMode_Task
009A47  1  C9 04        		cmp #4
009A49  1  B0 01        		bcs GameEngine
009A4B  1  60           		rts
009A4C  1               
009A4C  1               GameEngine:
009A4C  1  20 A6 A1     		jsr ProcFireball_Bubble
009A4F  1  A2 00        		ldx #0
009A51  1               ProcELoop:
009A51  1               
009A51  1  86 08        		stx ObjectOffset
009A53  1  20 27 AC     		jsr EnemiesAndLoopsCore
009A56  1  20 ED 84     		jsr FloateyNumbersRoutine
009A59  1  E8           		inx
009A5A  1  E0 06        		cpx #6
009A5C  1  D0 F3        		bne ProcELoop
009A5E  1  20 0D DE     		jsr GetPlayerOffscreenBits
009A61  1  20 B7 DD     		jsr RelativePlayerPosition
009A64  1  20 6C DB     		jsr PlayerGfxHandler
009A67  1  20 A9 AA     		jsr BlockObjMT_Updater
009A6A  1  A2 01        		ldx #1
009A6C  1  86 08        		stx ObjectOffset
009A6E  1  20 45 AA     		jsr BlockObjectsCore
009A71  1  CA           		dex
009A72  1  86 08        		stx ObjectOffset
009A74  1  20 45 AA     		jsr BlockObjectsCore
009A77  1  20 68 A7     		jsr MiscObjectsCore
009A7A  1  20 8E A5     		jsr ProcessCannons
009A7D  1  20 2B A3     		jsr ProcessWhirlpools
009A80  1  20 C8 A3     		jsr FlagpoleRoutine
009A83  1  20 D1 A2     		jsr RunGameTimer
009A86  1  20 6B 89     		jsr ColorRotation
009A89  1               		;
009A89  1               		; TODO XXX ONLY IF >= world 5
009A89  1               		;
009A89  1  20 BC E2     		jsr RunWindStuff
009A8C  1  A5 B5        		lda Player_Y_HighPos
009A8E  1  C9 02        		cmp #2
009A90  1  10 11        		bpl loc_7AAE
009A92  1  AD 9F 07     		lda StarInvincibleTimer
009A95  1  F0 1E        		beq loc_7AC0
009A97  1  C9 04        		cmp #4
009A99  1  D0 08        		bne loc_7AAE
009A9B  1  AD 7F 07     		lda IntervalTimerControl
009A9E  1  D0 03        		bne loc_7AAE
009AA0  1  20 7F 8F     		jsr sub_6F2D
009AA3  1               loc_7AAE:
009AA3  1               
009AA3  1  AC 9F 07     		ldy StarInvincibleTimer
009AA6  1  A5 09        		lda FrameCounter
009AA8  1  C0 08        		cpy #8
009AAA  1  B0 02        		bcs loc_7AB9
009AAC  1  4A           		lsr
009AAD  1  4A           		lsr
009AAE  1               loc_7AB9:
009AAE  1               
009AAE  1  4A           		lsr
009AAF  1  20 D5 9D     		jsr CyclePlayerPalette
009AB2  1  4C B8 9A     		jmp loc_7AC3
009AB5  1               loc_7AC0:
009AB5  1               
009AB5  1  20 E7 9D     		jsr sub_7DF2
009AB8  1               loc_7AC3:
009AB8  1               
009AB8  1  A5 0A        		lda A_B_Buttons
009ABA  1  85 0D        		sta PreviousA_B_Buttons
009ABC  1  A9 00        		lda #0
009ABE  1  85 0C        		sta Left_Right_Buttons
009AC0  1               sub_7ACB:
009AC0  1               
009AC0  1  AD 73 07     		lda VRAM_Buffer_AddrCtrl
009AC3  1  C9 06        		cmp #6
009AC5  1  F0 1C        		beq locret_7AEE
009AC7  1  AD 1F 07     		lda AreaParserTaskNum
009ACA  1  D0 14        		bne loc_7AEB
009ACC  1  AD 3D 07     		lda ScrollThirtyTwo
009ACF  1  C9 20        		cmp #$20
009AD1  1  30 10        		bmi locret_7AEE
009AD3  1  AD 3D 07     		lda ScrollThirtyTwo
009AD6  1  E9 20        		sbc #$20
009AD8  1  8D 3D 07     		sta ScrollThirtyTwo
009ADB  1  A9 00        		lda #0
009ADD  1  8D 40 03     		sta VRAM_Buffer2_Offset
009AE0  1               loc_7AEB:
009AE0  1               
009AE0  1  20 BB 90     		jsr AreaParserTaskHandler
009AE3  1               locret_7AEE:
009AE3  1               
009AE3  1  60           		rts
009AE4  1               ScrollHandler:
009AE4  1  AD FF 06     		lda Player_X_Scroll
009AE7  1  18           		clc
009AE8  1  6D A1 03     		adc Platform_X_Scroll
009AEB  1  8D FF 06     		sta Player_X_Scroll
009AEE  1  AD 23 07     		lda ScrollLock
009AF1  1  D0 55        		bne InitScrlAmt
009AF3  1  AD 55 07     		lda Player_Pos_ForScroll
009AF6  1  C9 50        		cmp #$50
009AF8  1  90 4E        		bcc InitScrlAmt
009AFA  1  AD 85 07     		lda SideCollisionTimer
009AFD  1  D0 49        		bne InitScrlAmt
009AFF  1  AC FF 06     		ldy Player_X_Scroll
009B02  1  88           		dey
009B03  1  30 43        		bmi InitScrlAmt
009B05  1  C8           		iny
009B06  1  C0 02        		cpy #2
009B08  1  90 01        		bcc loc_7B16
009B0A  1  88           		dey
009B0B  1               loc_7B16:
009B0B  1               
009B0B  1  AD 55 07     		lda Player_Pos_ForScroll
009B0E  1  C9 70        		cmp #$70
009B10  1  90 03        		bcc loc_7B20
009B12  1  AC FF 06     		ldy Player_X_Scroll
009B15  1               loc_7B20:
009B15  1  AD 7B 07             lda IRQAckFlag
009B18  1  D0 FB                bne loc_7B20           ;loop if IRQ has not yet happened
009B1A  1  98           		tya
009B1B  1  8D 75 07     		sta ScrollAmount
009B1E  1  18           		clc
009B1F  1  6D 3D 07     		adc ScrollThirtyTwo
009B22  1  8D 3D 07     		sta ScrollThirtyTwo
009B25  1  98           		tya
009B26  1  18           		clc
009B27  1  6D 1C 07     		adc ScreenLeft_X_Pos
009B2A  1  8D 1C 07     		sta ScreenLeft_X_Pos
009B2D  1  8D 3F 07     		sta HorizontalScroll
009B30  1  AD 1A 07     		lda ScreenLeft_PageLoc
009B33  1  69 00        		adc #0
009B35  1  8D 1A 07     		sta ScreenLeft_PageLoc
009B38  1  29 01        		and #1
009B3A  1  8D 7A 07     		sta UseNtBase2400
009B3D  1  20 85 9B     		jsr sub_7B90
009B40  1  A9 08        		lda #8
009B42  1  8D 95 07     		sta ScrollIntervalTimer
009B45  1  4C 4D 9B     		jmp ChkPOffscr
009B48  1               InitScrlAmt:
009B48  1               
009B48  1  A9 00        		lda #0
009B4A  1  8D 75 07     		sta ScrollAmount
009B4D  1               ChkPOffscr:
009B4D  1               
009B4D  1  A2 00        		ldx #0
009B4F  1  20 83 DE     		jsr GetXOffscreenBits
009B52  1  85 00        		sta TMP_0
009B54  1  A0 00        		ldy #0
009B56  1  0A           		asl
009B57  1  B0 07        		bcs KeepOnscr
009B59  1  C8           		iny
009B5A  1  A5 00        		lda TMP_0
009B5C  1  29 20        		and #$20
009B5E  1  F0 1B        		beq InitPlatScrl
009B60  1               KeepOnscr:
009B60  1               
009B60  1  B9 1C 07     		lda $71C,y
009B63  1  38           		sec
009B64  1  F9 81 9B     		sbc X_SubtracterData,y
009B67  1  85 86        		sta Player_X_Position
009B69  1  B9 1A 07     		lda $71A,y
009B6C  1  E9 00        		sbc #0
009B6E  1  85 6D        		sta Player_PageLoc
009B70  1  A5 0C        		lda Left_Right_Buttons
009B72  1  D9 83 9B     		cmp OffscrJoypadBitsData,y
009B75  1  F0 04        		beq InitPlatScrl
009B77  1  A9 00        		lda #0
009B79  1  85 57        		sta Player_X_Speed
009B7B  1               InitPlatScrl:
009B7B  1               
009B7B  1  A9 00        		lda #0
009B7D  1  8D A1 03     		sta Platform_X_Scroll
009B80  1  60           		rts
009B81  1               X_SubtracterData:
009B81  1  00           		.byte 0
009B82  1  10           		.byte $10
009B83  1               OffscrJoypadBitsData:
009B83  1  01           		.byte 1
009B84  1  02           		.byte 2
009B85  1               sub_7B90:
009B85  1               
009B85  1  AD 1C 07     		lda ScreenLeft_X_Pos
009B88  1  18           		clc
009B89  1  69 FF        		adc #$FF
009B8B  1  8D 1D 07     		sta ScreenRight_X_Pos
009B8E  1  AD 1A 07     		lda ScreenLeft_PageLoc
009B91  1  69 00        		adc #0
009B93  1  8D 1B 07     		sta ScreenRight_PageLoc
009B96  1  60           		rts
009B97  1               GameRoutines:
009B97  1               
009B97  1  A5 0E        		lda GameEngineSubroutine
009B99  1  20 FC 8C     		jsr JumpEngine
009B9C  1  C3 8F        		.word Entrance_GameTimerSetup
009B9E  1  14 9D        		.word Vine_AutoClimb
009BA0  1  53 9D        		.word SideExitPipeEntry
009BA2  1  32 9D        		.word VerticalPipeEntry
009BA4  1  F0 9D        		.word FlagpoleSlide
009BA6  1  0E 9E        		.word PlayerEndLevel
009BA8  1  4F 90        		.word PlayerLoseLife
009BAA  1  B6 9B        		.word PlayerEntrance
009BAC  1  36 9C        		.word PlayerCtrlRoutine
009BAE  1  80 9D        		.word PlayerChangeSize
009BB0  1  92 9D        		.word PlayerInjuryBlink
009BB2  1  B6 9D        		.word PlayerDeath
009BB4  1  CA 9D        		.word PlayerFireFlower
009BB6  1               PlayerEntrance:
009BB6  1               
009BB6  1  AD 52 07     		lda AltEntranceControl
009BB9  1  C9 02        		cmp #2
009BBB  1  F0 2B        		beq loc_7BF3
009BBD  1  A9 00        		lda #0
009BBF  1  A4 CE        		ldy SprObject_Y_Position
009BC1  1               loc_7BCC:
009BC1  1               
009BC1  1  C0 30        		cpy #$30
009BC3  1  90 6E        		bcc AutoControlPlayer
009BC5  1  AD 10 07     		lda PlayerEntranceCtrl
009BC8  1  C9 06        		cmp #6
009BCA  1  F0 04        		beq loc_7BDB
009BCC  1  C9 07        		cmp #7
009BCE  1  D0 50        		bne loc_7C2B
009BD0  1               loc_7BDB:
009BD0  1               
009BD0  1  AD C4 03     		lda Player_SprAttrib
009BD3  1  D0 05        		bne loc_7BE5
009BD5  1  A9 01        		lda #1
009BD7  1  4C 33 9C     		jmp AutoControlPlayer
009BDA  1               loc_7BE5:
009BDA  1               
009BDA  1  20 6C 9D     		jsr EnterSidePipe
009BDD  1  CE DE 06     		dec ChangeAreaTimer
009BE0  1  D0 50        		bne locret_7C3D
009BE2  1  EE 69 07     		inc DisableIntermediate
009BE5  1  4C 5B 9E     		jmp loc_7E66
009BE8  1               loc_7BF3:
009BE8  1               
009BE8  1  AD 58 07     		lda JoypadOverride
009BEB  1  D0 0C        		bne loc_7C04
009BED  1  A9 FF        		lda #$FF
009BEF  1  20 4D 9D     		jsr MovePlayerYAxis
009BF2  1  A5 CE        		lda SprObject_Y_Position
009BF4  1  C9 91        		cmp #$91
009BF6  1  90 28        		bcc loc_7C2B
009BF8  1  60           		rts
009BF9  1               loc_7C04:
009BF9  1               
009BF9  1  AD 99 03     		lda VineHeight
009BFC  1  C9 60        		cmp #$60
009BFE  1  D0 32        		bne locret_7C3D
009C00  1  A5 CE        		lda SprObject_Y_Position
009C02  1  C9 99        		cmp #$99
009C04  1  A0 00        		ldy #0
009C06  1  A9 01        		lda #1
009C08  1  90 0A        		bcc loc_7C1F
009C0A  1  A9 03        		lda #3
009C0C  1  85 1D        		sta Player_State
009C0E  1  C8           		iny
009C0F  1  A9 08        		lda #8
009C11  1  8D B4 05     		sta byte_5B4
009C14  1               loc_7C1F:
009C14  1               
009C14  1  8C 16 07     		sty DisableCollisionDet
009C17  1  20 33 9C     		jsr AutoControlPlayer
009C1A  1  A5 86        		lda Player_X_Position
009C1C  1  C9 48        		cmp #$48
009C1E  1  90 12        		bcc locret_7C3D
009C20  1               loc_7C2B:
009C20  1               
009C20  1  A9 08        		lda #8
009C22  1  85 0E        		sta GameEngineSubroutine
009C24  1  A9 01        		lda #1
009C26  1  85 33        		sta PlayerFacingDir
009C28  1  4A           		lsr
009C29  1  8D 52 07     		sta AltEntranceControl
009C2C  1  8D 16 07     		sta DisableCollisionDet
009C2F  1  8D 58 07     		sta JoypadOverride
009C32  1               locret_7C3D:
009C32  1               
009C32  1  60           		rts
009C33  1               AutoControlPlayer:
009C33  1               
009C33  1  8D FC 06     		sta SavedJoypad1Bits
009C36  1               PlayerCtrlRoutine:
009C36  1               
009C36  1  A5 0E        		lda GameEngineSubroutine
009C38  1  C9 0B        		cmp #$B
009C3A  1  F0 3C        		beq loc_7C83
009C3C  1  AD 4E 07     		lda AreaType
009C3F  1  D0 10        		bne loc_7C5C
009C41  1  A4 B5        		ldy Player_Y_HighPos
009C43  1  88           		dey
009C44  1  D0 06        		bne loc_7C57
009C46  1  A5 CE        		lda SprObject_Y_Position
009C48  1  C9 D0        		cmp #$D0
009C4A  1  90 05        		bcc loc_7C5C
009C4C  1               loc_7C57:
009C4C  1               
009C4C  1  A9 00        		lda #0
009C4E  1  8D FC 06     		sta SavedJoypad1Bits
009C51  1               loc_7C5C:
009C51  1               
009C51  1  AD FC 06     		lda SavedJoypad1Bits
009C54  1  29 C0        		and #$C0
009C56  1  85 0A        		sta A_B_Buttons
009C58  1  AD FC 06     		lda SavedJoypad1Bits
009C5B  1  29 03        		and #3
009C5D  1  85 0C        		sta Left_Right_Buttons
009C5F  1  AD FC 06     		lda SavedJoypad1Bits
009C62  1  29 0C        		and #$C
009C64  1  85 0B        		sta Up_Down_Buttons
009C66  1  29 04        		and #4
009C68  1  F0 0E        		beq loc_7C83
009C6A  1  A5 1D        		lda Player_State
009C6C  1  D0 0A        		bne loc_7C83
009C6E  1  A4 0C        		ldy Left_Right_Buttons
009C70  1  F0 06        		beq loc_7C83
009C72  1  A9 00        		lda #0
009C74  1  85 0C        		sta Left_Right_Buttons
009C76  1  85 0B        		sta Up_Down_Buttons
009C78  1               loc_7C83:
009C78  1               
009C78  1  20 8D 9E     		jsr PlayerMovementSubs
009C7B  1  A0 01        		ldy #1
009C7D  1  AD 54 07     		lda PlayerSize
009C80  1  D0 09        		bne loc_7C96
009C82  1  A0 00        		ldy #0
009C84  1  AD 14 07     		lda CrouchingFlag
009C87  1  F0 02        		beq loc_7C96
009C89  1  A0 02        		ldy #2
009C8B  1               loc_7C96:
009C8B  1               
009C8B  1  8C 99 04     		sty Player_BoundBoxCtrl
009C8E  1  A9 01        		lda #1
009C90  1  A4 57        		ldy Player_X_Speed
009C92  1  F0 05        		beq loc_7CA4
009C94  1  10 01        		bpl loc_7CA2
009C96  1  0A           		asl
009C97  1               loc_7CA2:
009C97  1               
009C97  1  85 45        		sta Player_MovingDir
009C99  1               loc_7CA4:
009C99  1               
009C99  1  20 E4 9A     		jsr ScrollHandler
009C9C  1  20 0D DE     		jsr GetPlayerOffscreenBits
009C9F  1  20 B7 DD     		jsr RelativePlayerPosition
009CA2  1  A2 00        		ldx #0
009CA4  1  20 FD CE     		jsr BoundingBoxCore
009CA7  1  20 C3 C8     		jsr sub_A8D2
009CAA  1  A5 CE        		lda SprObject_Y_Position
009CAC  1  C9 40        		cmp #$40
009CAE  1  90 16        		bcc loc_7CD1
009CB0  1  A5 0E        		lda GameEngineSubroutine
009CB2  1  C9 05        		cmp #5
009CB4  1  F0 10        		beq loc_7CD1
009CB6  1  C9 07        		cmp #7
009CB8  1  F0 0C        		beq loc_7CD1
009CBA  1  C9 04        		cmp #4
009CBC  1  90 08        		bcc loc_7CD1
009CBE  1  AD C4 03     		lda Player_SprAttrib
009CC1  1  29 DF        		and #$DF
009CC3  1  8D C4 03     		sta Player_SprAttrib
009CC6  1               loc_7CD1:
009CC6  1               
009CC6  1  A5 B5        		lda Player_Y_HighPos
009CC8  1  C9 02        		cmp #2
009CCA  1  30 3B        		bmi locret_7D12
009CCC  1  A2 01        		ldx #1
009CCE  1  8E 23 07     		stx ScrollLock
009CD1  1  A0 04        		ldy #4
009CD3  1  84 07        		sty unk_7
009CD5  1  A2 00        		ldx #0
009CD7  1  AC 59 07     		ldy GameTimerExpiredFlag
009CDA  1  D0 05        		bne loc_7CEC
009CDC  1  AC 43 07     		ldy CloudTypeOverride
009CDF  1  D0 16        		bne loc_7D02
009CE1  1               loc_7CEC:
009CE1  1               
009CE1  1  E8           		inx
009CE2  1  A4 0E        		ldy GameEngineSubroutine
009CE4  1  C0 0B        		cpy #$B
009CE6  1  F0 0F        		beq loc_7D02
009CE8  1  AC 12 07     		ldy DeathMusicLoaded
009CEB  1  D0 06        		bne loc_7CFE
009CED  1  C8           		iny
009CEE  1  84 FC        		sty EventMusicQueue
009CF0  1  8C 12 07     		sty DeathMusicLoaded
009CF3  1               loc_7CFE:
009CF3  1               
009CF3  1  A0 06        		ldy #6
009CF5  1  84 07        		sty unk_7
009CF7  1               loc_7D02:
009CF7  1               
009CF7  1  C5 07        		cmp unk_7
009CF9  1  30 0C        		bmi locret_7D12
009CFB  1  CA           		dex
009CFC  1  30 0A        		bmi loc_7D13
009CFE  1  AC B1 07     		ldy EventMusicBuffer
009D01  1  D0 04        		bne locret_7D12
009D03  1  A9 06        		lda #6
009D05  1  85 0E        		sta GameEngineSubroutine
009D07  1               locret_7D12:
009D07  1               
009D07  1  60           		rts
009D08  1               loc_7D13:
009D08  1               
009D08  1  A9 00        		lda #0
009D0A  1  8D 58 07     		sta JoypadOverride
009D0D  1  20 2A 9D     		jsr SetEntr
009D10  1  EE 52 07     		inc AltEntranceControl
009D13  1  60           		rts
009D14  1               Vine_AutoClimb:
009D14  1               
009D14  1  A5 B5        		lda Player_Y_HighPos
009D16  1  D0 06        		bne AutoClimb
009D18  1  A5 CE        		lda SprObject_Y_Position
009D1A  1  C9 E4        		cmp #$E4
009D1C  1  90 0C        		bcc SetEntr
009D1E  1               AutoClimb:
009D1E  1               
009D1E  1  A9 08        		lda #8
009D20  1  8D 58 07     		sta JoypadOverride
009D23  1  A0 03        		ldy #3
009D25  1  84 1D        		sty Player_State
009D27  1  4C 33 9C     		jmp AutoControlPlayer
009D2A  1               SetEntr:
009D2A  1               
009D2A  1  A9 02        		lda #2
009D2C  1  8D 52 07     		sta AltEntranceControl
009D2F  1  4C 60 9D     		jmp sub_7D6B
009D32  1               VerticalPipeEntry:
009D32  1               
009D32  1  A9 01        		lda #1
009D34  1  20 4D 9D     		jsr MovePlayerYAxis
009D37  1  20 E4 9A     		jsr ScrollHandler
009D3A  1  A0 00        		ldy #0
009D3C  1  AD D6 06     		lda WarpZoneControl
009D3F  1  D0 17        		bne ChgAreaPipe
009D41  1  C8           		iny
009D42  1  AD 4E 07     		lda AreaType
009D45  1  C9 03        		cmp #3
009D47  1  D0 0F        		bne ChgAreaPipe
009D49  1  C8           		iny
009D4A  1  4C 58 9D     		jmp ChgAreaPipe
009D4D  1               MovePlayerYAxis:
009D4D  1               
009D4D  1  18           		clc
009D4E  1  65 CE        		adc SprObject_Y_Position
009D50  1  85 CE        		sta SprObject_Y_Position
009D52  1  60           		rts
009D53  1               SideExitPipeEntry:
009D53  1               
009D53  1  20 6C 9D     		jsr EnterSidePipe
009D56  1  A0 02        		ldy #2
009D58  1               ChgAreaPipe:
009D58  1               
009D58  1  CE DE 06     		dec ChangeAreaTimer
009D5B  1  D0 0E        		bne locret_7D76
009D5D  1  8C 52 07     		sty AltEntranceControl
009D60  1               sub_7D6B:
009D60  1               
009D60  1  EE 74 07     		inc DisableScreenFlag
009D63  1  A9 00        		lda #0
009D65  1  8D 72 07     		sta OperMode_Task
009D68  1  8D 22 07     		sta IRQUpdateFlag
009D6B  1               locret_7D76:
009D6B  1               
009D6B  1  60           		rts
009D6C  1               EnterSidePipe:
009D6C  1               
009D6C  1  A9 08        		lda #8
009D6E  1  85 57        		sta Player_X_Speed
009D70  1  A0 01        		ldy #1
009D72  1  A5 86        		lda Player_X_Position
009D74  1  29 0F        		and #$F
009D76  1  D0 03        		bne loc_7D86
009D78  1  85 57        		sta Player_X_Speed
009D7A  1  A8           		tay
009D7B  1               loc_7D86:
009D7B  1               
009D7B  1  98           		tya
009D7C  1  20 33 9C     		jsr AutoControlPlayer
009D7F  1  60           		rts
009D80  1               PlayerChangeSize:
009D80  1               
009D80  1  AD 47 07     		lda TimerControl
009D83  1  C9 F8        		cmp #$F8
009D85  1  D0 03        		bne EndChgSize
009D87  1  4C A2 9D     		jmp InitChangeSize
009D8A  1               EndChgSize:
009D8A  1               
009D8A  1  C9 C4        		cmp #$C4
009D8C  1  D0 03        		bne locret_7D9C
009D8E  1  20 C0 9D     		jsr DonePlayerTask
009D91  1               locret_7D9C:
009D91  1               
009D91  1  60           		rts
009D92  1               PlayerInjuryBlink:
009D92  1               
009D92  1  AD 47 07     		lda TimerControl
009D95  1  C9 F0        		cmp #$F0
009D97  1  B0 07        		bcs loc_7DAB
009D99  1  C9 C8        		cmp #$C8
009D9B  1  F0 23        		beq DonePlayerTask
009D9D  1  4C 36 9C     		jmp PlayerCtrlRoutine
009DA0  1               loc_7DAB:
009DA0  1               
009DA0  1  D0 13        		bne locret_7DC0
009DA2  1               InitChangeSize:
009DA2  1               
009DA2  1  AC 0B 07     		ldy PlayerChangeSizeFlag
009DA5  1  D0 0E        		bne locret_7DC0
009DA7  1  8C 0D 07     		sty PlayerAnimCtrl
009DAA  1  EE 0B 07     		inc PlayerChangeSizeFlag
009DAD  1  AD 54 07     		lda PlayerSize
009DB0  1  49 01        		eor #1
009DB2  1  8D 54 07     		sta PlayerSize
009DB5  1               locret_7DC0:
009DB5  1               
009DB5  1  60           		rts
009DB6  1               PlayerDeath:
009DB6  1               
009DB6  1  AD 47 07     		lda TimerControl
009DB9  1  C9 F0        		cmp #$F0
009DBB  1  B0 32        		bcs ExitDeath
009DBD  1  4C 36 9C     		jmp PlayerCtrlRoutine
009DC0  1               DonePlayerTask:
009DC0  1               
009DC0  1  A9 00        		lda #0
009DC2  1  8D 47 07     		sta TimerControl
009DC5  1  A9 08        		lda #8
009DC7  1  85 0E        		sta GameEngineSubroutine
009DC9  1  60           		rts
009DCA  1               PlayerFireFlower:
009DCA  1               
009DCA  1  AD 47 07     		lda TimerControl
009DCD  1  C9 C0        		cmp #$C0
009DCF  1  F0 13        		beq ResetPalFireFlower
009DD1  1  A5 09        		lda FrameCounter
009DD3  1  4A           		lsr
009DD4  1  4A           		lsr
009DD5  1               CyclePlayerPalette:
009DD5  1               
009DD5  1  29 03        		and #3
009DD7  1  85 00        		sta TMP_0
009DD9  1  AD C4 03     		lda Player_SprAttrib
009DDC  1  29 FC        		and #$FC
009DDE  1  05 00        		ora TMP_0
009DE0  1  8D C4 03     		sta Player_SprAttrib
009DE3  1  60           		rts
009DE4  1               ResetPalFireFlower:
009DE4  1               
009DE4  1  20 C0 9D     		jsr DonePlayerTask
009DE7  1               sub_7DF2:
009DE7  1               
009DE7  1  AD C4 03     		lda Player_SprAttrib
009DEA  1  29 FC        		and #$FC
009DEC  1  8D C4 03     		sta Player_SprAttrib
009DEF  1               ExitDeath:
009DEF  1               
009DEF  1  60           		rts
009DF0  1               FlagpoleSlide:
009DF0  1               
009DF0  1  A5 1B        		lda byte_1B
009DF2  1  C9 30        		cmp #$30
009DF4  1  D0 15        		bne NoFPObj
009DF6  1  AD 13 07     		lda FlagpoleSoundQueue
009DF9  1  85 FF        		sta Square1SoundQueue
009DFB  1  A9 00        		lda #0
009DFD  1  8D 13 07     		sta FlagpoleSoundQueue
009E00  1  A4 CE        		ldy SprObject_Y_Position
009E02  1  C0 9E        		cpy #$9E
009E04  1  B0 02        		bcs SlidePlayer
009E06  1  A9 04        		lda #4
009E08  1               SlidePlayer:
009E08  1  4C 33 9C     		jmp AutoControlPlayer
009E0B  1               NoFPObj:
009E0B  1  E6 0E        		inc GameEngineSubroutine
009E0D  1  60           		rts
009E0E  1               
009E0E  1               PlayerEndLevel:
009E0E  1               		; jsr Enter_EndLevel
009E0E  1  A9 01        		lda #1
009E10  1  20 33 9C     		jsr AutoControlPlayer
009E13  1  A5 CE        		lda SprObject_Y_Position
009E15  1  C9 AE        		cmp #$AE
009E17  1  90 11        		bcc loc_7E35
009E19  1  A9 00        		lda #0
009E1B  1  8D 23 07     		sta ScrollLock
009E1E  1  AD F6 07     		lda byte_7F6
009E21  1  D0 07        		bne loc_7E35
009E23  1  A9 20        		lda #$20
009E25  1  85 FC        		sta EventMusicQueue
009E27  1  EE F6 07     		inc byte_7F6
009E2A  1               loc_7E35:
009E2A  1  AD 90 04     		lda Player_CollisionBits
009E2D  1  4A           		lsr
009E2E  1  B0 0D        		bcs loc_7E48
009E30  1  AD 46 07     		lda StarFlagTaskControl
009E33  1  D0 03        		bne loc_7E43
009E35  1  EE 46 07     		inc StarFlagTaskControl
009E38  1               loc_7E43:
009E38  1               
009E38  1  A9 20        		lda #$20
009E3A  1  8D C4 03     		sta Player_SprAttrib
009E3D  1               loc_7E48:
009E3D  1               
009E3D  1  AD 46 07     		lda StarFlagTaskControl
009E40  1  C9 05        		cmp #5
009E42  1  D0 48        		bne locret_7E8F
009E44  1  EE 5C 07     		inc LevelNumber
009E47  1  AD 5C 07     		lda LevelNumber
009E4A  1  C9 03        		cmp #3
009E4C  1  D0 0D        		bne loc_7E66
009E4E  1  AC 5F 07     		ldy WorldNumber
009E51  1  AD 48 07     		lda CoinTallyFor1Ups
009E54  1  C9 0A        		cmp #$A
009E56  1  90 03        		bcc loc_7E66
009E58  1  EE 5D 07     		inc Hidden1UpFlag
009E5B  1               loc_7E66:
009E5B  1               
009E5B  1  EE 60 07     		inc AreaNumber
009E5E  1  AD 5F 07     		lda WorldNumber
009E61  1  C9 08        		cmp #8
009E63  1  D0 0F        		bne loc_7E7F
009E65  1  AD 5C 07     		lda LevelNumber
009E68  1  C9 04        		cmp #4
009E6A  1  D0 08        		bne loc_7E7F
009E6C  1  A9 00        		lda #0
009E6E  1  8D 5C 07     		sta LevelNumber
009E71  1  8D 60 07     		sta AreaNumber
009E74  1               loc_7E7F:
009E74  1               
009E74  1  20 B0 FE     		jsr Enter_LL_LoadAreaPointer
009E77  1  EE 57 07     		inc FetchNewGameTimerFlag
009E7A  1  20 60 9D     		jsr sub_7D6B
009E7D  1  8D 5B 07     		sta HalfwayPage
009E80  1  AD 05 60 29  		PF_SetToLevelEnd_A
009E84  1  EF 8D 05 60  
009E88  1  A9 80        		lda #$80
009E8A  1  85 FC        		sta EventMusicQueue
009E8C  1               locret_7E8F:
009E8C  1  60           		rts
009E8D  1               
009E8D  1               PlayerMovementSubs:
009E8D  1               
009E8D  1  A9 00        		lda #0
009E8F  1  AC 54 07     		ldy PlayerSize
009E92  1  D0 08        		bne SetCrouch
009E94  1  A5 1D        		lda Player_State
009E96  1  D0 07        		bne ProcMove
009E98  1  A5 0B        		lda Up_Down_Buttons
009E9A  1  29 04        		and #4
009E9C  1               SetCrouch:
009E9C  1               
009E9C  1  8D 14 07     		sta CrouchingFlag
009E9F  1               ProcMove:
009E9F  1               
009E9F  1  20 CD 9F     		jsr PlayerPhysicsSub
009EA2  1  AD 0B 07     		lda PlayerChangeSizeFlag
009EA5  1  D0 16        		bne NoMoveSub
009EA7  1  A5 1D        		lda Player_State
009EA9  1  C9 03        		cmp #3
009EAB  1  F0 05        		beq MoveSubs
009EAD  1  A0 18        		ldy #$18
009EAF  1  8C 89 07     		sty ClimbSideTimer
009EB2  1               MoveSubs:
009EB2  1               
009EB2  1  20 FC 8C     		jsr JumpEngine
009EB5  1  BE 9E        		.word OnGroundStateSub
009EB7  1  07 9F        		.word JumpSwimSub
009EB9  1  FE 9E        		.word FallingSub
009EBB  1  5D 9F        		.word ClimbingSub
009EBD  1               
009EBD  1               NoMoveSub:
009EBD  1  60           		rts
009EBE  1               
009EBE  1               OnGroundStateSub:
009EBE  1  20 11 A1     		jsr GetPlayerAnimSpeed
009EC1  1  A5 0C        		lda Left_Right_Buttons
009EC3  1  F0 02        		beq loc_7ECA
009EC5  1  85 33        		sta PlayerFacingDir
009EC7  1               loc_7ECA:
009EC7  1  20 4E A1     		jsr ImposeFriction
009ECA  1               sub_7ECD:
009ECA  1  20 DE AA     		jsr MovePlayerHorizontally
009ECD  1  8D FF 06     		sta Player_X_Scroll
009ED0  1               
009ED0  1  AD EC 07     		lda IsWindy
009ED3  1  F0 28        		beq @no_wind
009ED5  1  AD 4E 07     		lda AreaType
009ED8  1  C9 01        		cmp #1
009EDA  1  D0 21        		bne @no_wind
009EDC  1  A0 01        		ldy #1
009EDE  1  A5 09        		lda FrameCounter
009EE0  1  0A           		asl
009EE1  1  B0 02        		bcs @lowprob
009EE3  1  A0 03        		ldy #3
009EE5  1               @lowprob:
009EE5  1  84 00        		sty $00
009EE7  1  A5 09        		lda FrameCounter
009EE9  1  25 00        		and $00
009EEB  1  D0 10        		bne @no_wind
009EED  1  A5 86        		lda Player_X_Position
009EEF  1  18           		clc
009EF0  1  69 01        		adc #1
009EF2  1  85 86        		sta Player_X_Position
009EF4  1  A5 6D        		lda Player_PageLoc
009EF6  1  69 00        		adc #0
009EF8  1  85 6D        		sta Player_PageLoc
009EFA  1  EE FF 06     		inc Player_X_Scroll
009EFD  1               @no_wind:
009EFD  1  60           		rts
009EFE  1               
009EFE  1               FallingSub:
009EFE  1  AD 0A 07     		lda VerticalForceDown
009F01  1  8D 09 07     		sta VerticalForce
009F04  1  4C 3D 9F     		jmp LRAir
009F07  1               
009F07  1               JumpSwimSub:
009F07  1  A4 9F        		ldy Player_Y_Speed
009F09  1  10 13        		bpl loc_7EFC
009F0B  1  A5 0A        		lda A_B_Buttons
009F0D  1  29 80        		and #$80
009F0F  1  25 0D        		and PreviousA_B_Buttons
009F11  1  D0 11        		bne loc_7F02
009F13  1  AD 08 07     		lda JumpOrigin_Y_Position
009F16  1  38           		sec
009F17  1  E5 CE        		sbc SprObject_Y_Position
009F19  1  CD 06 07     		cmp DiffToHaltJump
009F1C  1  90 06        		bcc loc_7F02
009F1E  1               loc_7EFC:
009F1E  1               
009F1E  1  AD 0A 07     		lda VerticalForceDown
009F21  1  8D 09 07     		sta VerticalForce
009F24  1               loc_7F02:
009F24  1               
009F24  1  AD 04 07     		lda SwimmingFlag
009F27  1  F0 14        		beq LRAir
009F29  1  20 11 A1     		jsr GetPlayerAnimSpeed
009F2C  1  A5 CE        		lda SprObject_Y_Position
009F2E  1  C9 14        		cmp #$14
009F30  1  B0 05        		bcs loc_7F15
009F32  1  A9 18        		lda #$18
009F34  1  8D 09 07     		sta VerticalForce
009F37  1               loc_7F15:
009F37  1               
009F37  1  A5 0C        		lda Left_Right_Buttons
009F39  1  F0 02        		beq LRAir
009F3B  1  85 33        		sta PlayerFacingDir
009F3D  1               LRAir:
009F3D  1               
009F3D  1  A5 0C        		lda Left_Right_Buttons
009F3F  1  F0 03        		beq loc_7F22
009F41  1  20 4E A1     		jsr ImposeFriction
009F44  1               loc_7F22:
009F44  1               
009F44  1  20 CA 9E     		jsr sub_7ECD
009F47  1  A5 0E        		lda GameEngineSubroutine
009F49  1  C9 0B        		cmp #$B
009F4B  1  D0 05        		bne loc_7F30
009F4D  1  A9 28        		lda #$28
009F4F  1  8D 09 07     		sta VerticalForce
009F52  1               loc_7F30:
009F52  1               
009F52  1  4C 22 AB     		jmp loc_8B1E
009F55  1               ClimbAdderLow:
009F55  1  0E           		.byte $E
009F56  1  04           		.byte 4
009F57  1  FC           		.byte $FC
009F58  1  F2           		.byte $F2
009F59  1               ClimbAdderHigh:
009F59  1  00           		.byte 0
009F5A  1  00           		.byte 0
009F5B  1  FF           		.byte $FF
009F5C  1  FF           		.byte $FF
009F5D  1               ClimbingSub:
009F5D  1               
009F5D  1  AD 16 04     		lda Player_YMF_Dummy
009F60  1  18           		clc
009F61  1  6D 33 04     		adc Player_Y_MoveForce
009F64  1  8D 16 04     		sta Player_YMF_Dummy
009F67  1  A0 00        		ldy #0
009F69  1  A5 9F        		lda Player_Y_Speed
009F6B  1  10 01        		bpl loc_7F4C
009F6D  1  88           		dey
009F6E  1               loc_7F4C:
009F6E  1               
009F6E  1  84 00        		sty TMP_0
009F70  1  65 CE        		adc SprObject_Y_Position
009F72  1  85 CE        		sta SprObject_Y_Position
009F74  1  A5 B5        		lda Player_Y_HighPos
009F76  1  65 00        		adc TMP_0
009F78  1  85 B5        		sta Player_Y_HighPos
009F7A  1  A5 0C        		lda Left_Right_Buttons
009F7C  1  2D 90 04     		and Player_CollisionBits
009F7F  1  F0 2D        		beq InitCSTimer
009F81  1  AC 89 07     		ldy ClimbSideTimer
009F84  1  D0 27        		bne ExitCSub
009F86  1  A0 18        		ldy #$18
009F88  1  8C 89 07     		sty ClimbSideTimer
009F8B  1  A2 00        		ldx #0
009F8D  1  A4 33        		ldy PlayerFacingDir
009F8F  1  4A           		lsr
009F90  1  B0 02        		bcs ClimbFD
009F92  1  E8           		inx
009F93  1  E8           		inx
009F94  1               ClimbFD:
009F94  1               
009F94  1  88           		dey
009F95  1  F0 01        		beq CSetFDir
009F97  1  E8           		inx
009F98  1               CSetFDir:
009F98  1               
009F98  1  A5 86        		lda Player_X_Position
009F9A  1  18           		clc
009F9B  1  7D 55 9F     		adc ClimbAdderLow,x
009F9E  1  85 86        		sta Player_X_Position
009FA0  1  A5 6D        		lda Player_PageLoc
009FA2  1  7D 59 9F     		adc ClimbAdderHigh,x
009FA5  1  85 6D        		sta Player_PageLoc
009FA7  1  A5 0C        		lda Left_Right_Buttons
009FA9  1  49 03        		eor #3
009FAB  1  85 33        		sta PlayerFacingDir
009FAD  1               ExitCSub:
009FAD  1               
009FAD  1  60           		rts
009FAE  1               InitCSTimer:
009FAE  1               
009FAE  1  8D 89 07     		sta ClimbSideTimer
009FB1  1  60           		rts
009FB2  1               
009FB2  1               PlayerYSpdData:
009FB2  1  FC           		.byte $FC
009FB3  1  FC           		.byte $FC
009FB4  1  FC           		.byte $FC
009FB5  1  FB           		.byte $FB
009FB6  1  FB           		.byte $FB
009FB7  1  FE           		.byte $FE
009FB8  1  FF           		.byte $FF
009FB9  1               InitMForceData:
009FB9  1  00           		.byte 0
009FBA  1  00           		.byte 0
009FBB  1  00           		.byte 0
009FBC  1  00           		.byte 0
009FBD  1  00           		.byte 0
009FBE  1  80           		.byte $80
009FBF  1  00           		.byte 0
009FC0  1               MaxLeftXSpdData:
009FC0  1  D8           		.byte $D8
009FC1  1  E8           		.byte $E8
009FC2  1  F0           		.byte $F0
009FC3  1               MaxRightXSpdData:
009FC3  1  28           		.byte $28
009FC4  1  18           		.byte $18
009FC5  1  10           		.byte $10
009FC6  1  0C           		.byte $C
009FC7  1               Climb_Y_SpeedData:
009FC7  1  00           		.byte 0
009FC8  1  FF           		.byte $FF
009FC9  1  01           		.byte 1
009FCA  1               Climb_Y_MForceData:
009FCA  1  00           		.byte 0
009FCB  1  20           		.byte $20
009FCC  1  FF           		.byte $FF
009FCD  1               
009FCD  1               PlayerPhysicsSub:
009FCD  1  A5 1D        		lda Player_State
009FCF  1  C9 03        		cmp #3
009FD1  1  D0 23        		bne CheckForJumping
009FD3  1  A0 00        		ldy #0
009FD5  1  A5 0B        		lda Up_Down_Buttons
009FD7  1  2D 90 04     		and Player_CollisionBits
009FDA  1  F0 06        		beq loc_7FD1
009FDC  1  C8           		iny
009FDD  1  29 08        		and #8
009FDF  1  D0 01        		bne loc_7FD1
009FE1  1  C8           		iny
009FE2  1               loc_7FD1:
009FE2  1               
009FE2  1  BE CA 9F     		ldx Climb_Y_MForceData,y
009FE5  1  8E 33 04     		stx Player_Y_MoveForce
009FE8  1  A9 08        		lda #8
009FEA  1  BE C7 9F     		ldx Climb_Y_SpeedData,y
009FED  1  86 9F        		stx Player_Y_Speed
009FEF  1  30 01        		bmi loc_7FE1
009FF1  1  4A           		lsr
009FF2  1               loc_7FE1:
009FF2  1               
009FF2  1  8D 0C 07     		sta PlayerAnimTimerSet
009FF5  1  60           		rts
009FF6  1               CheckForJumping:
009FF6  1  AD 0E 07     		lda JumpspringAnimCtrl
009FF9  1  D0 0A        		bne NoJump
009FFB  1  A5 0A        		lda A_B_Buttons
009FFD  1  29 80        		and #$80
009FFF  1  F0 04        		beq NoJump
00A001  1  25 0D        		and PreviousA_B_Buttons
00A003  1  F0 03        		beq ProcJumping
00A005  1               NoJump:
00A005  1  4C 99 A0     		jmp loc_8088
00A008  1               
00A008  1               ProcJumping:
00A008  1  A5 1D        		lda Player_State
00A00A  1  F0 11        		beq InitJS
00A00C  1  AD 04 07     		lda SwimmingFlag
00A00F  1  F0 F4        		beq NoJump
00A011  1  AD 82 07     		lda JumpSwimTimer
00A014  1  D0 07        		bne InitJS
00A016  1  A5 9F        		lda Player_Y_Speed
00A018  1  10 03        		bpl InitJS
00A01A  1  4C 99 A0     		jmp loc_8088
00A01D  1               InitJS:
00A01D  1               		;jsr Enter_RedrawFrameNumbers
00A01D  1  A9 20        		lda #$20
00A01F  1  8D 82 07     		sta JumpSwimTimer
00A022  1  A0 00        		ldy #0
00A024  1  8C 16 04     		sty Player_YMF_Dummy
00A027  1  8C 33 04     		sty Player_Y_MoveForce
00A02A  1  A5 B5        		lda Player_Y_HighPos
00A02C  1  8D 07 07     		sta JumpOrigin_Y_HighPos
00A02F  1  A5 CE        		lda SprObject_Y_Position
00A031  1  8D 08 07     		sta JumpOrigin_Y_Position
00A034  1  A9 01        		lda #1
00A036  1  85 1D        		sta Player_State
00A038  1  AD 00 07     		lda Player_XSpeedAbsolute
00A03B  1  C9 09        		cmp #9
00A03D  1  90 10        		bcc ChkWtr
00A03F  1  C8           		iny
00A040  1  C9 10        		cmp #$10
00A042  1  90 0B        		bcc ChkWtr
00A044  1  C8           		iny
00A045  1  C9 19        		cmp #$19
00A047  1  90 06        		bcc ChkWtr
00A049  1  C8           		iny
00A04A  1  C9 1C        		cmp #$1C
00A04C  1  90 01        		bcc ChkWtr
00A04E  1  C8           		iny
00A04F  1               ChkWtr:
00A04F  1               
00A04F  1  A9 01        		lda #1
00A051  1  8D 06 07     		sta DiffToHaltJump
00A054  1  AD 04 07     		lda SwimmingFlag
00A057  1  F0 08        		beq GetYPhy
00A059  1  A0 05        		ldy #5
00A05B  1  AD 7D 04     		lda Whirlpool_Flag
00A05E  1  F0 01        		beq GetYPhy
00A060  1  C8           		iny
00A061  1               GetYPhy:
00A061  1               
00A061  1  B9 1F 64     		lda WRAM_JumpMForceData,y
00A064  1  8D 09 07     		sta VerticalForce
00A067  1  B9 26 64     		lda WRAM_FallMForceData,y
00A06A  1  8D 0A 07     		sta VerticalForceDown
00A06D  1  B9 B9 9F     		lda InitMForceData,y
00A070  1  8D 33 04     		sta Player_Y_MoveForce
00A073  1  B9 B2 9F     		lda PlayerYSpdData,y
00A076  1  85 9F        		sta Player_Y_Speed
00A078  1  AD 04 07     		lda SwimmingFlag
00A07B  1  F0 11        		beq PJumpSnd
00A07D  1  A9 04        		lda #4
00A07F  1  85 FF        		sta Square1SoundQueue
00A081  1  A5 CE        		lda SprObject_Y_Position
00A083  1  C9 14        		cmp #$14
00A085  1  B0 12        		bcs loc_8088
00A087  1  A9 00        		lda #0
00A089  1  85 9F        		sta Player_Y_Speed
00A08B  1  4C 99 A0     		jmp loc_8088
00A08E  1               PJumpSnd:
00A08E  1               
00A08E  1  A9 01        		lda #1
00A090  1  AC 54 07     		ldy PlayerSize
00A093  1  F0 02        		beq loc_8086
00A095  1  A9 80        		lda #$80
00A097  1               loc_8086:
00A097  1               
00A097  1  85 FF        		sta Square1SoundQueue
00A099  1               loc_8088:
00A099  1               
00A099  1  A0 00        		ldy #0
00A09B  1  84 00        		sty TMP_0
00A09D  1  A5 1D        		lda Player_State
00A09F  1  F0 09        		beq loc_8099
00A0A1  1  AD 00 07     		lda Player_XSpeedAbsolute
00A0A4  1  C9 19        		cmp #$19
00A0A6  1  B0 33        		bcs GetXPhy
00A0A8  1  90 18        		bcc loc_80B1
00A0AA  1               loc_8099:
00A0AA  1               
00A0AA  1  C8           		iny
00A0AB  1  AD 4E 07     		lda AreaType
00A0AE  1  F0 12        		beq loc_80B1
00A0B0  1  88           		dey
00A0B1  1  A5 0C        		lda Left_Right_Buttons
00A0B3  1  C5 45        		cmp Player_MovingDir
00A0B5  1  D0 0B        		bne loc_80B1
00A0B7  1  A5 0A        		lda A_B_Buttons
00A0B9  1  29 40        		and #$40
00A0BB  1  D0 19        		bne loc_80C5
00A0BD  1  AD 83 07     		lda RunningTimer
00A0C0  1  D0 19        		bne GetXPhy
00A0C2  1               loc_80B1:
00A0C2  1               
00A0C2  1  C8           		iny
00A0C3  1  E6 00        		inc TMP_0
00A0C5  1  AD 03 07     		lda RunningSpeed
00A0C8  1  D0 07        		bne loc_80C0
00A0CA  1  AD 00 07     		lda Player_XSpeedAbsolute
00A0CD  1  C9 21        		cmp #$21
00A0CF  1  90 0A        		bcc GetXPhy
00A0D1  1               loc_80C0:
00A0D1  1               
00A0D1  1  E6 00        		inc TMP_0
00A0D3  1  4C DB A0     		jmp GetXPhy
00A0D6  1               loc_80C5:
00A0D6  1               
00A0D6  1  A9 0A        		lda #$A
00A0D8  1  8D 83 07     		sta RunningTimer
00A0DB  1               GetXPhy:
00A0DB  1               
00A0DB  1  B9 C0 9F     		lda MaxLeftXSpdData,y
00A0DE  1  8D 50 04     		sta MaximumLeftSpeed
00A0E1  1  A5 0E        		lda GameEngineSubroutine
00A0E3  1  C9 07        		cmp #7
00A0E5  1  D0 02        		bne GetXPhy2
00A0E7  1  A0 03        		ldy #3
00A0E9  1               GetXPhy2:
00A0E9  1               
00A0E9  1  B9 C3 9F     		lda MaxRightXSpdData,y
00A0EC  1  8D 56 04     		sta MaximumRightSpeed
00A0EF  1  A4 00        		ldy TMP_0
00A0F1  1  B9 2D 64     		lda WRAM_FrictionData,y
00A0F4  1  8D 02 07     		sta FrictionAdderLow
00A0F7  1  A9 00        		lda #0
00A0F9  1  8D 01 07     		sta FrictionAdderHigh
00A0FC  1  A5 33        		lda PlayerFacingDir
00A0FE  1  C5 45        		cmp Player_MovingDir
00A100  1  F0 0B        		beq DoneWithFriction
00A102  1               ;VOLDST_PatchMovementFriction:
00A102  1               ;
00A102  1               ; XXX Reimplemented.
00A102  1               ;     Original SMB2J patches asl for retn if Luigi
00A102  1               ;
00A102  1  AD 53 07     		lda IsPlayingLuigi
00A105  1  D0 06        		bne DoneWithFriction
00A107  1               
00A107  1  0E 02 07     		asl FrictionAdderLow
00A10A  1  2E 01 07     		rol FrictionAdderHigh
00A10D  1               DoneWithFriction:
00A10D  1  60           		rts
00A10E  1               
00A10E  1               PlayerAnimTmrData:
00A10E  1  02 04 07     		.byte 2, 4, 7
00A111  1               GetPlayerAnimSpeed:
00A111  1               
00A111  1  A0 00        		ldy #0
00A113  1  AD 00 07     		lda Player_XSpeedAbsolute
00A116  1  C9 1C        		cmp #$1C
00A118  1  B0 15        		bcs loc_8119
00A11A  1  C8           		iny
00A11B  1  C9 0E        		cmp #$E
00A11D  1  B0 01        		bcs loc_810A
00A11F  1  C8           		iny
00A120  1               loc_810A:
00A120  1               
00A120  1  AD FC 06     		lda SavedJoypad1Bits
00A123  1  29 7F        		and #$7F
00A125  1  F0 20        		beq SetAnimSpd
00A127  1  29 03        		and #3
00A129  1  C5 45        		cmp Player_MovingDir
00A12B  1  D0 08        		bne loc_811F
00A12D  1  A9 00        		lda #0
00A12F  1               loc_8119:
00A12F  1               
00A12F  1  8D 03 07     		sta RunningSpeed
00A132  1  4C 47 A1     		jmp SetAnimSpd
00A135  1               loc_811F:
00A135  1               
00A135  1  AD 00 07     		lda Player_XSpeedAbsolute
00A138  1  C9 0B        		cmp #$B
00A13A  1  B0 0B        		bcs SetAnimSpd
00A13C  1  A5 33        		lda PlayerFacingDir
00A13E  1  85 45        		sta Player_MovingDir
00A140  1  A9 00        		lda #0
00A142  1  85 57        		sta Player_X_Speed
00A144  1  8D 05 07     		sta Player_X_MoveForce
00A147  1               SetAnimSpd:
00A147  1               
00A147  1  B9 0E A1     		lda PlayerAnimTmrData,y
00A14A  1  8D 0C 07     		sta PlayerAnimTimerSet
00A14D  1  60           		rts
00A14E  1               ImposeFriction:
00A14E  1               
00A14E  1  2D 90 04     		and Player_CollisionBits
00A151  1  C9 00        		cmp #0
00A153  1  D0 08        		bne loc_8147
00A155  1  A5 57        		lda Player_X_Speed
00A157  1  F0 49        		beq loc_818C
00A159  1  10 23        		bpl loc_8168
00A15B  1  30 03        		bmi loc_814A
00A15D  1               loc_8147:
00A15D  1               
00A15D  1  4A           		lsr
00A15E  1  90 1E        		bcc loc_8168
00A160  1               loc_814A:
00A160  1               
00A160  1  AD 05 07     		lda Player_X_MoveForce
00A163  1  18           		clc
00A164  1  6D 02 07     		adc FrictionAdderLow
00A167  1  8D 05 07     		sta Player_X_MoveForce
00A16A  1  A5 57        		lda Player_X_Speed
00A16C  1  6D 01 07     		adc FrictionAdderHigh
00A16F  1  85 57        		sta Player_X_Speed
00A171  1  CD 56 04     		cmp MaximumRightSpeed
00A174  1  30 23        		bmi loc_8183
00A176  1  AD 56 04     		lda MaximumRightSpeed
00A179  1  85 57        		sta Player_X_Speed
00A17B  1  4C A2 A1     		jmp loc_818C
00A17E  1               loc_8168:
00A17E  1               
00A17E  1  AD 05 07     		lda Player_X_MoveForce
00A181  1  38           		sec
00A182  1  ED 02 07     		sbc FrictionAdderLow
00A185  1  8D 05 07     		sta Player_X_MoveForce
00A188  1  A5 57        		lda Player_X_Speed
00A18A  1  ED 01 07     		sbc FrictionAdderHigh
00A18D  1  85 57        		sta Player_X_Speed
00A18F  1  CD 50 04     		cmp MaximumLeftSpeed
00A192  1  10 05        		bpl loc_8183
00A194  1  AD 50 04     		lda MaximumLeftSpeed
00A197  1  85 57        		sta Player_X_Speed
00A199  1               loc_8183:
00A199  1               
00A199  1  C9 00        		cmp #0
00A19B  1  10 05        		bpl loc_818C
00A19D  1  49 FF        		eor #$FF
00A19F  1  18           		clc
00A1A0  1  69 01        		adc #1
00A1A2  1               loc_818C:
00A1A2  1               
00A1A2  1  8D 00 07     		sta Player_XSpeedAbsolute
00A1A5  1  60           		rts
00A1A6  1               ProcFireball_Bubble:
00A1A6  1               
00A1A6  1  AD 56 07     		lda PlayerStatus
00A1A9  1  C9 02        		cmp #2
00A1AB  1  90 43        		bcc loc_81DA
00A1AD  1  A5 0A        		lda A_B_Buttons
00A1AF  1  29 40        		and #$40
00A1B1  1  F0 33        		beq loc_81D0
00A1B3  1  25 0D        		and PreviousA_B_Buttons
00A1B5  1  D0 2F        		bne loc_81D0
00A1B7  1  AD CE 06     		lda FireballCounter
00A1BA  1  29 01        		and #1
00A1BC  1  AA           		tax
00A1BD  1  B5 24        		lda $24,x
00A1BF  1  D0 25        		bne loc_81D0
00A1C1  1  A4 B5        		ldy Player_Y_HighPos
00A1C3  1  88           		dey
00A1C4  1  D0 20        		bne loc_81D0
00A1C6  1  AD 14 07     		lda CrouchingFlag
00A1C9  1  D0 1B        		bne loc_81D0
00A1CB  1  A5 1D        		lda Player_State
00A1CD  1  C9 03        		cmp #3
00A1CF  1  F0 15        		beq loc_81D0
00A1D1  1  A9 20        		lda #$20
00A1D3  1  85 FF        		sta Square1SoundQueue
00A1D5  1  A9 02        		lda #2
00A1D7  1  95 24        		sta $24,x
00A1D9  1  AC 0C 07     		ldy PlayerAnimTimerSet
00A1DC  1  8C 11 07     		sty FireballThrowingTimer
00A1DF  1  88           		dey
00A1E0  1  8C 81 07     		sty PlayerAnimTimer
00A1E3  1  EE CE 06     		inc FireballCounter
00A1E6  1               loc_81D0:
00A1E6  1               
00A1E6  1  A2 00        		ldx #0
00A1E8  1  20 0B A2     		jsr FireballObjCore
00A1EB  1  A2 01        		ldx #1
00A1ED  1  20 0B A2     		jsr FireballObjCore
00A1F0  1               loc_81DA:
00A1F0  1               
00A1F0  1  AD 4E 07     		lda AreaType
00A1F3  1  D0 13        		bne locret_81F2
00A1F5  1  A2 02        		ldx #2
00A1F7  1               loc_81E1:
00A1F7  1               
00A1F7  1  86 08        		stx ObjectOffset
00A1F9  1  20 7B A2     		jsr sub_8265
00A1FC  1  20 BE DD     		jsr loc_BE16
00A1FF  1  20 1E DE     		jsr sub_BE76
00A202  1  20 64 DA     		jsr sub_BABC
00A205  1  CA           		dex
00A206  1  10 EF        		bpl loc_81E1
00A208  1               locret_81F2:
00A208  1               
00A208  1  60           		rts
00A209  1               FireballXSpdData:
00A209  1  40           		.byte $40
00A20A  1  C0           		.byte $C0
00A20B  1               FireballObjCore:
00A20B  1               
00A20B  1  86 08        		stx ObjectOffset
00A20D  1  B5 24        		lda Fireball_State,x
00A20F  1  0A           		asl
00A210  1  B0 63        		bcs loc_825F
00A212  1  B4 24        		ldy Fireball_State,x
00A214  1  F0 5E        		beq locret_825E
00A216  1  88           		dey
00A217  1  F0 27        		beq loc_822A
00A219  1  A5 86        		lda Player_X_Position
00A21B  1  69 04        		adc #4
00A21D  1  95 8D        		sta $8D,x
00A21F  1  A5 6D        		lda Player_PageLoc
00A221  1  69 00        		adc #0
00A223  1  95 74        		sta $74,x
00A225  1  A5 CE        		lda SprObject_Y_Position
00A227  1  95 D5        		sta $D5,x
00A229  1  A9 01        		lda #1
00A22B  1  95 BC        		sta $BC,x
00A22D  1  A4 33        		ldy PlayerFacingDir
00A22F  1  88           		dey
00A230  1  B9 09 A2     		lda FireballXSpdData,y
00A233  1  95 5E        		sta $5E,x
00A235  1  A9 04        		lda #4
00A237  1  95 A6        		sta $A6,x
00A239  1  A9 07        		lda #7
00A23B  1  9D A0 04     		sta $4A0,x
00A23E  1  D6 24        		dec $24,x
00A240  1               loc_822A:
00A240  1               
00A240  1  8A           		txa
00A241  1  18           		clc
00A242  1  69 07        		adc #7
00A244  1  AA           		tax
00A245  1  A9 50        		lda #$50
00A247  1  85 00        		sta TMP_0
00A249  1  A9 03        		lda #3
00A24B  1  85 02        		sta byte_2
00A24D  1  A9 00        		lda #0
00A24F  1  20 AC AB     		jsr ImposeGravity
00A252  1  20 E4 AA     		jsr MoveObjectHorizontally
00A255  1  A6 08        		ldx ObjectOffset
00A257  1  20 C8 DD     		jsr RelativeFireballPosition
00A25A  1  20 14 DE     		jsr GetFireballOffscreenBits
00A25D  1  20 8E CE     		jsr GetFireballBoundBox
00A260  1  20 29 CE     		jsr FireballBGCollision
00A263  1  AD D2 03     		lda FBall_OffscreenBits
00A266  1  29 CC        		and #$CC
00A268  1  D0 06        		bne loc_825A
00A26A  1  20 0A C3     		jsr sub_A319
00A26D  1  4C 61 D9     		jmp loc_B9B9
00A270  1               loc_825A:
00A270  1               
00A270  1  A9 00        		lda #0
00A272  1  95 24        		sta $24,x
00A274  1               locret_825E:
00A274  1               
00A274  1  60           		rts
00A275  1               loc_825F:
00A275  1               
00A275  1  20 C8 DD     		jsr RelativeFireballPosition
00A278  1  4C 8C D9     		jmp DrawExplosion_Fireball
00A27B  1               sub_8265:
00A27B  1               
00A27B  1  BD A8 07     		lda $7A8,x
00A27E  1  29 01        		and #1
00A280  1  85 07        		sta unk_7
00A282  1  B5 E4        		lda $E4,x
00A284  1  C9 F8        		cmp #$F8
00A286  1  D0 2C        		bne loc_829E
00A288  1  AD 92 07     		lda AirBubbleTimer
00A28B  1  D0 3F        		bne locret_82B6
00A28D  1               SetupBubble:
00A28D  1               
00A28D  1  A0 00        		ldy #0
00A28F  1  A5 33        		lda PlayerFacingDir
00A291  1  4A           		lsr
00A292  1  90 02        		bcc loc_8280
00A294  1  A0 08        		ldy #8
00A296  1               loc_8280:
00A296  1               
00A296  1  98           		tya
00A297  1  65 86        		adc Player_X_Position
00A299  1  95 9C        		sta Bubble_X_Position,x
00A29B  1  A5 6D        		lda Player_PageLoc
00A29D  1  69 00        		adc #0
00A29F  1  95 83        		sta Bubble_PageLoc,x
00A2A1  1  A5 CE        		lda SprObject_Y_Position
00A2A3  1  18           		clc
00A2A4  1  69 08        		adc #8
00A2A6  1  95 E4        		sta Bubble_Y_Position,x
00A2A8  1  A9 01        		lda #1
00A2AA  1  95 CB        		sta Bubble_Y_HighPos,x
00A2AC  1  A4 07        		ldy unk_7
00A2AE  1  B9 CF A2     		lda BubbleTimerData,y
00A2B1  1  8D 92 07     		sta AirBubbleTimer
00A2B4  1               loc_829E:
00A2B4  1               
00A2B4  1  A4 07        		ldy unk_7
00A2B6  1  BD 2C 04     		lda Bubble_YMF_Dummy,x
00A2B9  1  38           		sec
00A2BA  1  F9 CD A2     		sbc Bubble_MForceData,y
00A2BD  1  9D 2C 04     		sta Bubble_YMF_Dummy,x
00A2C0  1  B5 E4        		lda Bubble_Y_Position,x
00A2C2  1  E9 00        		sbc #0
00A2C4  1  C9 20        		cmp #$20
00A2C6  1  B0 02        		bcs loc_82B4
00A2C8  1  A9 F8        		lda #$F8
00A2CA  1               loc_82B4:
00A2CA  1               
00A2CA  1  95 E4        		sta Bubble_Y_Position,x
00A2CC  1               locret_82B6:
00A2CC  1               
00A2CC  1  60           		rts
00A2CD  1               Bubble_MForceData:
00A2CD  1  FF           		.byte $FF
00A2CE  1  50           		.byte $50
00A2CF  1               BubbleTimerData:
00A2CF  1  40           		.byte $40
00A2D0  1  20           		.byte $20
00A2D1  1               
00A2D1  1               RunGameTimer:
00A2D1  1  AD 70 07     		lda OperMode
00A2D4  1  F0 43        		beq locret_830F
00A2D6  1  A5 0E        		lda GameEngineSubroutine
00A2D8  1  C9 08        		cmp #8
00A2DA  1  90 3D        		bcc locret_830F
00A2DC  1  C9 0B        		cmp #$B
00A2DE  1  F0 39        		beq locret_830F
00A2E0  1  A5 B5        		lda Player_Y_HighPos
00A2E2  1  C9 02        		cmp #2
00A2E4  1  10 33        		bpl locret_830F
00A2E6  1  AD 87 07     		lda GameTimerCtrlTimer
00A2E9  1  D0 2E        		bne locret_830F
00A2EB  1  AD F8 07     		lda GameTimerDisplay
00A2EE  1  0D F9 07     		ora GameTimerDisplay+1
00A2F1  1  0D FA 07     		ora GameTimerDisplay+2
00A2F4  1  F0 1A        		beq loc_8306
00A2F6  1  AC F8 07     		ldy GameTimerDisplay
00A2F9  1  88           		dey
00A2FA  1  D0 0C        		bne loc_82F2
00A2FC  1  AD F9 07     		lda GameTimerDisplay+1
00A2FF  1  0D FA 07     		ora GameTimerDisplay+2
00A302  1  D0 04        		bne loc_82F2
00A304  1  A9 40        		lda #$40
00A306  1  85 FC        		sta EventMusicQueue
00A308  1               loc_82F2:
00A308  1  A9 18        		lda #$18
00A30A  1  8D 87 07     		sta GameTimerCtrlTimer
00A30D  1  4C 18 FE     		jmp Enter_UpdateGameTimer
00A310  1               loc_8306:
00A310  1  8D 56 07     		sta PlayerStatus
00A313  1  20 80 C5     		jsr loc_A58F
00A316  1  EE 59 07     		inc GameTimerExpiredFlag
00A319  1               locret_830F:
00A319  1  60           		rts
00A31A  1               
00A31A  1               WarpZoneObject:
00A31A  1  AD 23 07     		lda ScrollLock
00A31D  1  F0 FA        		beq locret_830F
00A31F  1  A5 CE        		lda SprObject_Y_Position
00A321  1  25 B5        		and Player_Y_HighPos
00A323  1  D0 F4        		bne locret_830F
00A325  1  8D 23 07     		sta ScrollLock
00A328  1  4C D9 B5     		jmp EraseEnemyObject
00A32B  1               ProcessWhirlpools:
00A32B  1               
00A32B  1  AD 4E 07     		lda AreaType
00A32E  1  D0 37        		bne locret_835D
00A330  1  8D 7D 04     		sta Whirlpool_Flag
00A333  1  AD 47 07     		lda TimerControl
00A336  1  D0 2F        		bne locret_835D
00A338  1  A0 04        		ldy #4
00A33A  1               loc_8330:
00A33A  1               
00A33A  1  B9 71 04     		lda $471,y
00A33D  1  18           		clc
00A33E  1  79 77 04     		adc $477,y
00A341  1  85 02        		sta byte_2
00A343  1  B9 6B 04     		lda $46B,y
00A346  1  F0 1C        		beq loc_835A
00A348  1  69 00        		adc #0
00A34A  1  85 01        		sta TMP_1
00A34C  1  A5 86        		lda Player_X_Position
00A34E  1  38           		sec
00A34F  1  F9 71 04     		sbc $471,y
00A352  1  A5 6D        		lda Player_PageLoc
00A354  1  F9 6B 04     		sbc $46B,y
00A357  1  30 0B        		bmi loc_835A
00A359  1  A5 02        		lda byte_2
00A35B  1  38           		sec
00A35C  1  E5 86        		sbc Player_X_Position
00A35E  1  A5 01        		lda TMP_1
00A360  1  E5 6D        		sbc Player_PageLoc
00A362  1  10 04        		bpl loc_835E
00A364  1               loc_835A:
00A364  1               
00A364  1  88           		dey
00A365  1  10 D3        		bpl loc_8330
00A367  1               locret_835D:
00A367  1               
00A367  1  60           		rts
00A368  1               loc_835E:
00A368  1               
00A368  1  B9 77 04     		lda $477,y
00A36B  1  4A           		lsr
00A36C  1  85 00        		sta TMP_0
00A36E  1  B9 71 04     		lda $471,y
00A371  1  18           		clc
00A372  1  65 00        		adc TMP_0
00A374  1  85 01        		sta TMP_1
00A376  1  B9 6B 04     		lda $46B,y
00A379  1  69 00        		adc #0
00A37B  1  85 00        		sta TMP_0
00A37D  1  A5 09        		lda FrameCounter
00A37F  1  4A           		lsr
00A380  1  90 2C        		bcc loc_83A4
00A382  1  A5 01        		lda TMP_1
00A384  1  38           		sec
00A385  1  E5 86        		sbc Player_X_Position
00A387  1  A5 00        		lda TMP_0
00A389  1  E5 6D        		sbc Player_PageLoc
00A38B  1  10 0E        		bpl loc_8391
00A38D  1  A5 86        		lda Player_X_Position
00A38F  1  38           		sec
00A390  1  E9 01        		sbc #1
00A392  1  85 86        		sta Player_X_Position
00A394  1  A5 6D        		lda Player_PageLoc
00A396  1  E9 00        		sbc #0
00A398  1  4C AC A3     		jmp loc_83A2
00A39B  1               loc_8391:
00A39B  1               
00A39B  1  AD 90 04     		lda Player_CollisionBits
00A39E  1  4A           		lsr
00A39F  1  90 0D        		bcc loc_83A4
00A3A1  1  A5 86        		lda Player_X_Position
00A3A3  1  18           		clc
00A3A4  1  69 01        		adc #1
00A3A6  1  85 86        		sta Player_X_Position
00A3A8  1  A5 6D        		lda Player_PageLoc
00A3AA  1  69 00        		adc #0
00A3AC  1               loc_83A2:
00A3AC  1               
00A3AC  1  85 6D        		sta Player_PageLoc
00A3AE  1               loc_83A4:
00A3AE  1               
00A3AE  1  A9 10        		lda #$10
00A3B0  1  85 00        		sta TMP_0
00A3B2  1  A9 01        		lda #1
00A3B4  1  8D 7D 04     		sta Whirlpool_Flag
00A3B7  1  85 02        		sta byte_2
00A3B9  1  4A           		lsr
00A3BA  1  AA           		tax
00A3BB  1  4C AC AB     		jmp ImposeGravity
00A3BE  1               FlagpoleScoreMods:
00A3BE  1  05           		.byte 5
00A3BF  1  02           		.byte 2
00A3C0  1  08           		.byte 8
00A3C1  1  04           		.byte 4
00A3C2  1  01           		.byte 1
00A3C3  1               FlagpoleScoreDigits:
00A3C3  1  03           		.byte 3
00A3C4  1  03           		.byte 3
00A3C5  1  04           		.byte 4
00A3C6  1  04           		.byte 4
00A3C7  1  04           		.byte 4
00A3C8  1               FlagpoleRoutine:
00A3C8  1               
00A3C8  1  A2 05        		ldx #5
00A3CA  1  86 08        		stx ObjectOffset
00A3CC  1  B5 16        		lda $16,x
00A3CE  1  C9 30        		cmp #$30
00A3D0  1  D0 61        		bne ExitFlagP
00A3D2  1  A5 0E        		lda GameEngineSubroutine
00A3D4  1  C9 04        		cmp #4
00A3D6  1  D0 31        		bne SkipScore
00A3D8  1  A5 1D        		lda Player_State
00A3DA  1  C9 03        		cmp #3
00A3DC  1  D0 2B        		bne SkipScore
00A3DE  1  B5 CF        		lda $CF,x
00A3E0  1  C9 AA        		cmp #$AA
00A3E2  1  B0 28        		bcs GiveFPScr
00A3E4  1  A5 CE        		lda SprObject_Y_Position
00A3E6  1  C9 A2        		cmp #$A2
00A3E8  1  B0 22        		bcs GiveFPScr
00A3EA  1  BD 17 04     		lda $417,x
00A3ED  1  69 FF        		adc #$FF
00A3EF  1  9D 17 04     		sta $417,x
00A3F2  1  B5 CF        		lda $CF,x
00A3F4  1  69 01        		adc #1
00A3F6  1  95 CF        		sta $CF,x
00A3F8  1  AD 0E 01     		lda FlagpoleFNum_YMFDummy
00A3FB  1  38           		sec
00A3FC  1  E9 FF        		sbc #$FF
00A3FE  1  8D 0E 01     		sta FlagpoleFNum_YMFDummy
00A401  1  AD 0D 01     		lda FlagpoleFNum_Y_Pos
00A404  1  E9 01        		sbc #1
00A406  1  8D 0D 01     		sta FlagpoleFNum_Y_Pos
00A409  1  4C 2A A4     SkipScore: jmp FPGfx                 ;jump to skip ahead and draw flag and floatey number
00A40C  1  AC 0F 01     GiveFPScr: ldy FlagpoleScore         ;get score offset from earlier (when player touched flagpole)
00A40F  1  C0 05                   cpy #$05
00A411  1  D0 07                   bne NoEL4F                ;if set to give player an extra life, do so now
00A413  1  A9 40                   lda #$40
00A415  1  85 FE                   sta $fe
00A417  1  4C 26 A4                jmp NoSc4F
00A41A  1  B9 BE A3     NoEL4F:    lda FlagpoleScoreMods,y   ;get amount to award player points
00A41D  1  BE C3 A3                ldx FlagpoleScoreDigits,y ;get digit with which to award points
00A420  1  9D 34 01                sta DigitModifier,x       ;store in digit modifier
00A423  1  20 EC A7                jsr AddToScore            ;do sub to award player points depending on height of collision
00A426  1  A9 05        NoSc4F:    lda #$05
00A428  1  85 0E                   sta GameEngineSubroutine  ;set to run end-of-level subroutine on next frame
00A42A  1  20 3C DE     FPGfx:     jsr GetEnemyOffscreenBits ;get offscreen information
00A42D  1  20 DF DD                jsr RelativeEnemyPosition ;get relative coordinates
00A430  1  20 B4 D1                jsr FlagpoleGfxHandler    ;draw flagpole flag and floatey number
00A433  1               ExitFlagP:
00A433  1  60           		rts
00A434  1               
00A434  1               Jumpspring_Y_PosData:
00A434  1  08 10 08 00        .byte $08, $10, $08, $00
00A438  1               JumpspringHandler:
00A438  1               
00A438  1  20 3C DE     		jsr GetEnemyOffscreenBits
00A43B  1  AD 47 07     		lda TimerControl
00A43E  1  D0 55        		bne loc_848E
00A440  1  AD 0E 07     		lda JumpspringAnimCtrl
00A443  1  F0 50        		beq loc_848E
00A445  1  A8           		tay
00A446  1  88           		dey
00A447  1  98           		tya
00A448  1  29 02        		and #2
00A44A  1  D0 07        		bne loc_844C
00A44C  1  E6 CE        		inc SprObject_Y_Position
00A44E  1  E6 CE        		inc SprObject_Y_Position
00A450  1  4C 57 A4     		jmp loc_8450
00A453  1               loc_844C:
00A453  1               
00A453  1  C6 CE        		dec SprObject_Y_Position
00A455  1  C6 CE        		dec SprObject_Y_Position
00A457  1               loc_8450:
00A457  1               
00A457  1  B5 58        		lda $58,x
00A459  1  18           		clc
00A45A  1  79 34 A4     		adc Jumpspring_Y_PosData,y
00A45D  1  95 CF        		sta Enemy_Y_Position,x
00A45F  1  C0 01        		cpy #1
00A461  1  90 24        		bcc loc_8480
00A463  1  A5 0A        		lda A_B_Buttons
00A465  1  29 80        		and #$80
00A467  1  F0 1E        		beq loc_8480
00A469  1  25 0D        		and PreviousA_B_Buttons
00A46B  1  D0 1A        		bne loc_8480
00A46D  1  98           		tya
00A46E  1  48           		pha
00A46F  1  A9 F4        		lda #$F4
00A471  1  AC 5F 07     		ldy WorldNumber
00A474  1  C0 01        		cpy #1
00A476  1  F0 08        		beq loc_8479
00A478  1  C0 02        		cpy #2
00A47A  1  F0 04        		beq loc_8479
00A47C  1  C0 06        		cpy #6
00A47E  1  D0 02        		bne loc_847B
00A480  1               loc_8479:
00A480  1               
00A480  1  A9 E0        		lda #$E0
00A482  1               loc_847B:
00A482  1               
00A482  1  8D DB 06     		sta JumpspringForce
00A485  1  68           		pla
00A486  1  A8           		tay
00A487  1               loc_8480:
00A487  1               
00A487  1  C0 03        		cpy #3
00A489  1  D0 0A        		bne loc_848E
00A48B  1  AD DB 06     		lda JumpspringForce
00A48E  1  85 9F        		sta Player_Y_Speed
00A490  1  A9 00        		lda #0
00A492  1  8D 0E 07     		sta JumpspringAnimCtrl
00A495  1               loc_848E:
00A495  1               
00A495  1  20 DF DD     		jsr RelativeEnemyPosition
00A498  1  20 D4 D4     		jsr EnemyGfxHandler
00A49B  1  20 A5 C2     		jsr OffscreenBoundsCheck
00A49E  1  AD 0E 07     		lda JumpspringAnimCtrl
00A4A1  1  F0 0D        		beq locret_84A9
00A4A3  1  AD 86 07     		lda JumpspringTimer
00A4A6  1  D0 08        		bne locret_84A9
00A4A8  1  A9 04        		lda #4
00A4AA  1  8D 86 07     		sta JumpspringTimer
00A4AD  1  EE 0E 07     		inc JumpspringAnimCtrl
00A4B0  1               locret_84A9:
00A4B0  1               
00A4B0  1  60           		rts
00A4B1  1               Setup_Vine:
00A4B1  1               
00A4B1  1  A9 2F        		lda #$2F
00A4B3  1  95 16        		sta Enemy_ID,x
00A4B5  1  A9 01        		lda #1
00A4B7  1  95 0F        		sta $F,x
00A4B9  1  B9 76 00     		lda Block_PageLoc,y
00A4BC  1  95 6E        		sta Enemy_PageLoc,x
00A4BE  1  B9 8F 00     		lda Block_X_Position,y
00A4C1  1  95 87        		sta Enemy_X_Position,x
00A4C3  1  B9 D7 00     		lda Block_Y_Position,y
00A4C6  1  95 CF        		sta Enemy_Y_Position,x
00A4C8  1  AC 98 03     		ldy VineFlagOffset
00A4CB  1  D0 03        		bne loc_84C9
00A4CD  1  8D 9D 03     		sta VineStart_Y_Position
00A4D0  1               loc_84C9:
00A4D0  1               
00A4D0  1  8A           		txa
00A4D1  1  99 9A 03     		sta VineObjOffset,y
00A4D4  1  EE 98 03     		inc VineFlagOffset
00A4D7  1  A9 04        		lda #4
00A4D9  1  85 FE        		sta Square2SoundQueue
00A4DB  1  60           		rts
00A4DC  1               VineHeightData:
00A4DC  1  30           		.byte $30
00A4DD  1  60           		.byte $60
00A4DE  1               VineObjectHandler:
00A4DE  1               
00A4DE  1  E0 05        		cpx #5
00A4E0  1  F0 01        		beq loc_84DC
00A4E2  1  60           		rts
00A4E3  1               loc_84DC:
00A4E3  1               
00A4E3  1  AC 98 03     		ldy VineFlagOffset
00A4E6  1  88           		dey
00A4E7  1  AD 99 03     		lda VineHeight
00A4EA  1  D9 DC A4     		cmp VineHeightData,y
00A4ED  1  F0 0F        		beq loc_84F7
00A4EF  1  A5 09        		lda FrameCounter
00A4F1  1  4A           		lsr
00A4F2  1  4A           		lsr
00A4F3  1  90 09        		bcc loc_84F7
00A4F5  1  A5 D4        		lda byte_D4
00A4F7  1  E9 01        		sbc #1
00A4F9  1  85 D4        		sta byte_D4
00A4FB  1  EE 99 03     		inc VineHeight
00A4FE  1               loc_84F7:
00A4FE  1               
00A4FE  1  AD 99 03     		lda VineHeight
00A501  1  C9 08        		cmp #8
00A503  1  90 46        		bcc loc_8544
00A505  1  20 DF DD     		jsr RelativeEnemyPosition
00A508  1  20 3C DE     		jsr GetEnemyOffscreenBits
00A50B  1  A0 00        		ldy #0
00A50D  1               loc_8506:
00A50D  1               
00A50D  1  20 9C D0     		jsr DrawVine
00A510  1  C8           		iny
00A511  1  CC 98 03     		cpy VineFlagOffset
00A514  1  D0 F7        		bne loc_8506
00A516  1  AD D1 03     		lda Enemy_OffscreenBits
00A519  1  29 0C        		and #$C
00A51B  1  F0 10        		beq loc_8526
00A51D  1  88           		dey
00A51E  1               loc_8517:
00A51E  1               
00A51E  1  BE 9A 03     		ldx $39A,y
00A521  1  20 D9 B5     		jsr EraseEnemyObject
00A524  1  88           		dey
00A525  1  10 F7        		bpl loc_8517
00A527  1  8D 98 03     		sta VineFlagOffset
00A52A  1  8D 99 03     		sta VineHeight
00A52D  1               loc_8526:
00A52D  1               
00A52D  1  AD 99 03     		lda VineHeight
00A530  1  C9 20        		cmp #$20
00A532  1  90 17        		bcc loc_8544
00A534  1  A2 06        		ldx #6
00A536  1  A9 01        		lda #1
00A538  1  A0 1B        		ldy #$1B
00A53A  1  20 51 D0     		jsr BlockBufferCollision
00A53D  1  A4 02        		ldy byte_2
00A53F  1  C0 D0        		cpy #$D0
00A541  1  B0 08        		bcs loc_8544
00A543  1  B1 06        		lda (6),y
00A545  1  D0 04        		bne loc_8544
00A547  1  A9 23        		lda #$23
00A549  1  91 06        		sta (6),y
00A54B  1               loc_8544:
00A54B  1               
00A54B  1  A5 8C        		lda byte_8C
00A54D  1  38           		sec
00A54E  1  ED 1C 07     		sbc ScreenLeft_X_Pos
00A551  1  A8           		tay
00A552  1  A5 73        		lda byte_73
00A554  1  ED 1A 07     		sbc ScreenLeft_PageLoc
00A557  1  30 04        		bmi loc_8556
00A559  1  C0 09        		cpy #9
00A55B  1  B0 2C        		bcs loc_8582
00A55D  1               loc_8556:
00A55D  1               
00A55D  1  A9 00        		lda #0
00A55F  1  85 14        		sta byte_14
00A561  1  A5 73        		lda byte_73
00A563  1  29 01        		and #1
00A565  1  A8           		tay
00A566  1  B9 18 9A     		lda BlockBufferAddr,y
00A569  1  85 06        		sta byte_6
00A56B  1  B9 1A 9A     		lda BlockBufferAddr+2,y
00A56E  1  85 07        		sta unk_7
00A570  1  A5 8C        		lda byte_8C
00A572  1  4A           		lsr
00A573  1  4A           		lsr
00A574  1  4A           		lsr
00A575  1  4A           		lsr
00A576  1               loc_856F:
00A576  1               
00A576  1  A8           		tay
00A577  1  B1 06        		lda (6),y
00A579  1  C9 23        		cmp #$23
00A57B  1  D0 04        		bne byte_857A
00A57D  1  A9 00        		lda #0
00A57F  1  91 06        		sta (6),y
00A581  1               byte_857A:
00A581  1  98           		.byte $98
00A582  1  18           		clc
00A583  1  69 10        		adc #$10
00A585  1  C9 D0        		cmp #$D0
00A587  1  90 ED        		bcc loc_856F
00A589  1               loc_8582:
00A589  1               
00A589  1  A6 08        		ldx ObjectOffset
00A58B  1  60           		rts
00A58C  1               CannonBitmasks:
00A58C  1  0F           		.byte $F
00A58D  1  07           		.byte 7
00A58E  1               ProcessCannons:
00A58E  1               
00A58E  1  AD 4E 07     		lda AreaType
00A591  1  F0 6F        		beq locret_85FB
00A593  1  A2 02        		ldx #2
00A595  1               loc_858E:
00A595  1               
00A595  1  86 08        		stx ObjectOffset
00A597  1  B5 0F        		lda $F,x
00A599  1  D0 51        		bne loc_85E5
00A59B  1  BD A8 07     		lda PseudoRandomBitReg+1,x
00A59E  1  AC CC 06     		ldy SecondaryHardMode
00A5A1  1  39 8C A5     		and CannonBitmasks,y
00A5A4  1  C9 06        		cmp #6
00A5A6  1  B0 44        		bcs loc_85E5
00A5A8  1  A8           		tay
00A5A9  1  B9 6B 04     		lda $46B,y
00A5AC  1  F0 3E        		beq loc_85E5
00A5AE  1  B9 7D 04     		lda $47D,y
00A5B1  1  F0 08        		beq loc_85B4
00A5B3  1  E9 00        		sbc #0
00A5B5  1  99 7D 04     		sta $47D,y
00A5B8  1  4C EC A5     		jmp loc_85E5
00A5BB  1               loc_85B4:
00A5BB  1               
00A5BB  1  AD 47 07     		lda TimerControl
00A5BE  1  D0 2C        		bne loc_85E5
00A5C0  1  A9 0E        		lda #$E
00A5C2  1  99 7D 04     		sta $47D,y
00A5C5  1  B9 6B 04     		lda $46B,y
00A5C8  1  95 6E        		sta $6E,x
00A5CA  1  B9 71 04     		lda $471,y
00A5CD  1  95 87        		sta $87,x
00A5CF  1  B9 77 04     		lda $477,y
00A5D2  1  38           		sec
00A5D3  1  E9 08        		sbc #8
00A5D5  1  95 CF        		sta $CF,x
00A5D7  1  A9 01        		lda #1
00A5D9  1  95 B6        		sta $B6,x
00A5DB  1  95 0F        		sta $F,x
00A5DD  1  4A           		lsr
00A5DE  1  95 1E        		sta $1E,x
00A5E0  1  A9 09        		lda #9
00A5E2  1  9D 9A 04     		sta $49A,x
00A5E5  1  A9 33        		lda #$33
00A5E7  1  95 16        		sta $16,x
00A5E9  1  4C FF A5     		jmp loc_85F8
00A5EC  1               loc_85E5:
00A5EC  1               
00A5EC  1  B5 16        		lda $16,x
00A5EE  1  C9 33        		cmp #$33
00A5F0  1  D0 0D        		bne loc_85F8
00A5F2  1  20 A5 C2     		jsr OffscreenBoundsCheck
00A5F5  1  B5 0F        		lda $F,x
00A5F7  1  F0 06        		beq loc_85F8
00A5F9  1  20 3C DE     		jsr GetEnemyOffscreenBits
00A5FC  1  20 05 A6     		jsr BulletBillHandler
00A5FF  1               loc_85F8:
00A5FF  1               
00A5FF  1  CA           		dex
00A600  1  10 93        		bpl loc_858E
00A602  1               locret_85FB:
00A602  1               
00A602  1  60           		rts
00A603  1               BulletBillXSpdData:
00A603  1  18           		.byte $18
00A604  1  E8           		.byte $E8
00A605  1               BulletBillHandler:
00A605  1               
00A605  1  AD 47 07     		lda TimerControl
00A608  1  D0 3E        		bne loc_8641
00A60A  1  B5 1E        		lda Enemy_State,x
00A60C  1  D0 2E        		bne loc_8635
00A60E  1  AD D1 03     		lda Enemy_OffscreenBits
00A611  1  29 0C        		and #$C
00A613  1  C9 0C        		cmp #$C
00A615  1  F0 40        		beq loc_8650
00A617  1  A0 01        		ldy #1
00A619  1  20 9C CD     		jsr PlayerEnemyDiff
00A61C  1  30 01        		bmi loc_8618
00A61E  1  C8           		iny
00A61F  1               loc_8618:
00A61F  1               
00A61F  1  94 46        		sty $46,x
00A621  1  88           		dey
00A622  1  B9 03 A6     		lda BulletBillXSpdData,y
00A625  1  95 58        		sta $58,x
00A627  1  A5 00        		lda TMP_0
00A629  1  69 28        		adc #$28
00A62B  1  C9 50        		cmp #$50
00A62D  1  90 28        		bcc loc_8650
00A62F  1  A9 01        		lda #1
00A631  1  95 1E        		sta $1E,x
00A633  1  A9 0A        		lda #$A
00A635  1  9D 8A 07     		sta $78A,x
00A638  1  A9 08        		lda #8
00A63A  1  85 FE        		sta Square2SoundQueue
00A63C  1               loc_8635:
00A63C  1               
00A63C  1  B5 1E        		lda $1E,x
00A63E  1  29 20        		and #$20
00A640  1  F0 03        		beq loc_863E
00A642  1  20 38 AB     		jsr sub_8B34
00A645  1               loc_863E:
00A645  1               
00A645  1  20 D7 AA     		jsr MoveEnemyHorizontally
00A648  1               loc_8641:
00A648  1               
00A648  1  20 3C DE     		jsr GetEnemyOffscreenBits
00A64B  1  20 DF DD     		jsr RelativeEnemyPosition
00A64E  1  20 A4 CE     		jsr GetEnemyBoundBox
00A651  1  20 9C C4     		jsr PlayerEnemyCollision
00A654  1  4C D4 D4     		jmp EnemyGfxHandler
00A657  1               loc_8650:
00A657  1  20 D9 B5     		jsr EraseEnemyObject
00A65A  1  60           		rts
00A65B  1               
00A65B  1               HammerEnemyOfsData:
00A65B  1  04           		.byte 4
00A65C  1  04           		.byte 4
00A65D  1  04           		.byte 4
00A65E  1  05           		.byte 5
00A65F  1  05           		.byte 5
00A660  1  05           		.byte 5
00A661  1  06           		.byte 6
00A662  1  06           		.byte 6
00A663  1  06           		.byte 6
00A664  1               HammerXSpdData:
00A664  1  10           		.byte $10
00A665  1  F0           		.byte $F0
00A666  1               SpawnHammerObj:
00A666  1  AD A8 07     		lda PseudoRandomBitReg+1
00A669  1  29 07        		and #7
00A66B  1  D0 05        		bne SetMOfs
00A66D  1  AD A8 07     		lda PseudoRandomBitReg+1
00A670  1  29 08        		and #8
00A672  1               SetMOfs:
00A672  1  A8           		tay
00A673  1  B9 2A 00     		lda Misc_State,y
00A676  1  D0 19        		bne NoHammer
00A678  1  BE 5B A6     		ldx HammerEnemyOfsData,y
00A67B  1  B5 0F        		lda $F,x
00A67D  1  D0 12        		bne NoHammer
00A67F  1  A6 08        		ldx ObjectOffset
00A681  1  8A           		txa
00A682  1  99 AE 06     		sta $6AE,y
00A685  1  A9 90        		lda #$90
00A687  1  99 2A 00     		sta $2A,y
00A68A  1  A9 07        		lda #7
00A68C  1  99 A2 04     		sta Misc_BoundBoxCtrl,y
00A68F  1  38           		sec
00A690  1  60           		rts
00A691  1               NoHammer:
00A691  1  A6 08        		ldx ObjectOffset
00A693  1  18           		clc
00A694  1  60           		rts
00A695  1               
00A695  1               ProcHammerObj:
00A695  1  AD 47 07     		lda TimerControl
00A698  1  D0 63        		bne loc_86F6
00A69A  1  B5 2A        		lda Misc_State,x
00A69C  1  29 7F        		and #$7F
00A69E  1  BC AE 06     		ldy HammerEnemyOffset,x
00A6A1  1  C9 02        		cmp #2
00A6A3  1  F0 20        		beq loc_86BE
00A6A5  1  B0 34        		bcs loc_86D4
00A6A7  1  8A           		txa
00A6A8  1  18           		clc
00A6A9  1  69 0D        		adc #$D
00A6AB  1  AA           		tax
00A6AC  1  A9 10        		lda #$10
00A6AE  1  85 00        		sta TMP_0
00A6B0  1  A9 0F        		lda #$F
00A6B2  1  85 01        		sta TMP_1
00A6B4  1  A9 04        		lda #4
00A6B6  1  85 02        		sta byte_2
00A6B8  1  A9 00        		lda #0
00A6BA  1  20 AC AB     		jsr ImposeGravity
00A6BD  1  20 E4 AA     		jsr MoveObjectHorizontally
00A6C0  1  A6 08        		ldx ObjectOffset
00A6C2  1  4C FA A6     		jmp loc_86F3
00A6C5  1               loc_86BE:
00A6C5  1               
00A6C5  1  A9 FE        		lda #$FE
00A6C7  1  95 AC        		sta Misc_Y_Speed,x
00A6C9  1  B9 1E 00     		lda Enemy_State,y
00A6CC  1  29 F7        		and #$F7
00A6CE  1  99 1E 00     		sta Enemy_State,y
00A6D1  1  B6 46        		ldx Enemy_MovingDir,y
00A6D3  1  CA           		dex
00A6D4  1  BD 64 A6     		lda HammerXSpdData,x
00A6D7  1  A6 08        		ldx ObjectOffset
00A6D9  1  95 64        		sta Misc_X_Speed,x
00A6DB  1               loc_86D4:
00A6DB  1               
00A6DB  1  D6 2A        		dec Misc_State,x
00A6DD  1  B9 87 00     		lda Enemy_X_Position,y
00A6E0  1  18           		clc
00A6E1  1  69 02        		adc #2
00A6E3  1  95 93        		sta Misc_X_Position,x
00A6E5  1  B9 6E 00     		lda Enemy_PageLoc,y
00A6E8  1  69 00        		adc #0
00A6EA  1  95 7A        		sta Misc_PageLoc,x
00A6EC  1  B9 CF 00     		lda Enemy_Y_Position,y
00A6EF  1  38           		sec
00A6F0  1  E9 0A        		sbc #$A
00A6F2  1  95 DB        		sta Misc_Y_Position,x
00A6F4  1  A9 01        		lda #1
00A6F6  1  95 C2        		sta Misc_Y_HighPos,x
00A6F8  1  D0 03        		bne loc_86F6
00A6FA  1               loc_86F3:
00A6FA  1               
00A6FA  1  20 01 C4     		jsr PlayerHammerCollision
00A6FD  1               loc_86F6:
00A6FD  1               
00A6FD  1  20 28 DE     		jsr GetMiscOffscreenBits
00A700  1  20 D5 DD     		jsr RelativeMiscPosition
00A703  1  20 97 CE     		jsr GetMiscBoundBox
00A706  1  20 43 D1     		jsr DrawHammer
00A709  1  60           		rts
00A70A  1               CoinBlock:
00A70A  1               
00A70A  1  20 56 A7     		jsr sub_874F
00A70D  1  B5 76        		lda Block_PageLoc,x
00A70F  1  99 7A 00     		sta Misc_PageLoc,y
00A712  1  B5 8F        		lda Block_X_Position,x
00A714  1  09 05        		ora #5
00A716  1  99 93 00     		sta Misc_X_Position,y
00A719  1  B5 D7        		lda Block_Y_Position,x
00A71B  1  E9 10        		sbc #$10
00A71D  1  99 DB 00     		sta Misc_Y_Position,y
00A720  1  4C 3E A7     		jmp JCoinC
00A723  1               sub_871C:
00A723  1               
00A723  1  20 56 A7     		jsr sub_874F
00A726  1  BD EA 03     		lda $3EA,x
00A729  1  99 7A 00     		sta $7A,y
00A72C  1  A5 06        		lda byte_6
00A72E  1  0A           		asl
00A72F  1  0A           		asl
00A730  1  0A           		asl
00A731  1  0A           		asl
00A732  1  09 05        		ora #5
00A734  1  99 93 00     		sta $93,y
00A737  1  A5 02        		lda byte_2
00A739  1  69 20        		adc #$20
00A73B  1  99 DB 00     		sta $DB,y
00A73E  1               JCoinC:
00A73E  1               
00A73E  1  A9 FB        		lda #$FB
00A740  1  99 AC 00     		sta Misc_Y_Speed,y
00A743  1  A9 01        		lda #1
00A745  1  99 C2 00     		sta $C2,y
00A748  1  99 2A 00     		sta $2A,y
00A74B  1  85 FE        		sta Square2SoundQueue
00A74D  1  86 08        		stx ObjectOffset
00A74F  1  20 CA A7     		jsr GiveOneCoin
00A752  1  EE 48 07     		inc CoinTallyFor1Ups
00A755  1  60           		rts
00A756  1               sub_874F:
00A756  1               
00A756  1  A0 08        		ldy #8
00A758  1               loc_8751:
00A758  1               
00A758  1  B9 2A 00     		lda $2A,y
00A75B  1  F0 07        		beq loc_875D
00A75D  1  88           		dey
00A75E  1  C0 05        		cpy #5
00A760  1  D0 F6        		bne loc_8751
00A762  1  A0 08        		ldy #8
00A764  1               loc_875D:
00A764  1               
00A764  1  8C B7 06     		sty JumpCoinMiscOffset
00A767  1  60           		rts
00A768  1               MiscObjectsCore:
00A768  1               
00A768  1  A2 08        		ldx #8
00A76A  1               loc_8763:
00A76A  1               
00A76A  1  86 08        		stx ObjectOffset
00A76C  1  B5 2A        		lda $2A,x
00A76E  1  F0 56        		beq loc_87BF
00A770  1  0A           		asl
00A771  1  90 06        		bcc loc_8772
00A773  1  20 95 A6     		jsr ProcHammerObj
00A776  1  4C C6 A7     		jmp loc_87BF
00A779  1               loc_8772:
00A779  1               
00A779  1  B4 2A        		ldy $2A,x
00A77B  1  88           		dey
00A77C  1  F0 1D        		beq loc_8794
00A77E  1  F6 2A        		inc $2A,x
00A780  1  B5 93        		lda $93,x
00A782  1  18           		clc
00A783  1  6D 75 07     		adc ScrollAmount
00A786  1  95 93        		sta $93,x
00A788  1  B5 7A        		lda $7A,x
00A78A  1  69 00        		adc #0
00A78C  1  95 7A        		sta $7A,x
00A78E  1  B5 2A        		lda $2A,x
00A790  1  C9 30        		cmp #$30
00A792  1  D0 26        		bne loc_87B3
00A794  1  A9 00        		lda #0
00A796  1  95 2A        		sta $2A,x
00A798  1  4C C6 A7     		jmp loc_87BF
00A79B  1               loc_8794:
00A79B  1               
00A79B  1  8A           		txa
00A79C  1  18           		clc
00A79D  1  69 0D        		adc #$D
00A79F  1  AA           		tax
00A7A0  1  A9 50        		lda #$50
00A7A2  1  85 00        		sta TMP_0
00A7A4  1  A9 06        		lda #6
00A7A6  1  85 02        		sta byte_2
00A7A8  1  4A           		lsr
00A7A9  1  85 01        		sta TMP_1
00A7AB  1  A9 00        		lda #0
00A7AD  1  20 AC AB     		jsr ImposeGravity
00A7B0  1  A6 08        		ldx ObjectOffset
00A7B2  1  B5 AC        		lda $AC,x
00A7B4  1  C9 05        		cmp #5
00A7B6  1  D0 02        		bne loc_87B3
00A7B8  1  F6 2A        		inc $2A,x
00A7BA  1               loc_87B3:
00A7BA  1               
00A7BA  1  20 D5 DD     		jsr RelativeMiscPosition
00A7BD  1  20 28 DE     		jsr GetMiscOffscreenBits
00A7C0  1  20 97 CE     		jsr GetMiscBoundBox
00A7C3  1  20 EF D2     		jsr JCoinGfxHandler
00A7C6  1               loc_87BF:
00A7C6  1  CA           		dex
00A7C7  1  10 A1        		bpl loc_8763
00A7C9  1  60           		rts
00A7CA  1               
00A7CA  1               GiveOneCoin:
00A7CA  1  A9 01              lda #$01               ;set digit modifier to add 1 coin
00A7CC  1  8D 39 01           sta DigitModifier+5    ;to the current player's coin tally
00A7CF  1  A0 11              ldy #$11               ;set offset for coin tally
00A7D1  1  20 1B 8E           jsr DigitsMathRoutine  ;update the coin tally
00A7D4  1  EE 5E 07           inc CoinTally          ;increment onscreen player's coin amount
00A7D7  1  AD 5E 07           lda CoinTally
00A7DA  1  C9 64              cmp #100               ;does player have 100 coins yet?
00A7DC  1  D0 09              bne CoinPoints         ;if not, skip all of this
00A7DE  1  A9 00              lda #$00
00A7E0  1  8D 5E 07           sta CoinTally          ;otherwise, reinitialize coin amount
00A7E3  1  A9 40              lda #Sfx_ExtraLife
00A7E5  1  85 FE              sta Square2SoundQueue  ;play 1-up sound
00A7E7  1               
00A7E7  1               CoinPoints:
00A7E7  1  A9 02              lda #$02               ;set digit modifier to award
00A7E9  1  8D 38 01           sta DigitModifier+4    ;200 points to the player
00A7EC  1               
00A7EC  1               AddToScore:
00A7EC  1  A0 0B              ldy #$0b               ;get offset for player's score
00A7EE  1  20 1B 8E           jsr DigitsMathRoutine  ;update the score internally with value in digit modifier
00A7F1  1               
00A7F1  1               WriteScoreAndCoinTally:
00A7F1  1  A9 01                lda #$01
00A7F3  1               WriteDigits:
00A7F3  1  20 C2 8D             jsr PrintStatusBarNumbers ;print status bar numbers
00A7F6  1  AC 00 03             ldy VRAM_Buffer1_Offset
00A7F9  1  B9 FB 02             lda VRAM_Buffer1-6,y      ;check highest digit of score
00A7FC  1  D0 05                bne NoZSup                ;if zero, overwrite with space tile for zero suppression
00A7FE  1  A9 24                lda #$24
00A800  1  99 FB 02             sta VRAM_Buffer1-6,y
00A803  1  A6 08        NoZSup: ldx ObjectOffset          ;get enemy object buffer offset
00A805  1  60                   rts
00A806  1               
00A806  1               SetupPowerUp:
00A806  1  A9 2E        		lda #$2E
00A808  1  85 1B        		sta byte_1B
00A80A  1  B5 76        		lda $76,x
00A80C  1  85 73        		sta byte_73
00A80E  1  B5 8F        		lda $8F,x
00A810  1  85 8C        		sta byte_8C
00A812  1  A9 01        		lda #1
00A814  1  85 BB        		sta byte_BB
00A816  1  B5 D7        		lda $D7,x
00A818  1  38           		sec
00A819  1  E9 08        		sbc #8
00A81B  1  85 D4        		sta byte_D4
00A81D  1               PwrUpJmp:
00A81D  1               
00A81D  1  A9 01        		lda #1
00A81F  1  85 23        		sta byte_23
00A821  1  85 14        		sta byte_14
00A823  1  A9 03        		lda #3
00A825  1  8D 9F 04     		sta byte_49F
00A828  1  A5 39        		lda PowerUpType
00A82A  1  C9 02        		cmp #2
00A82C  1  B0 0A        		bcs loc_8834
00A82E  1  AD 56 07     		lda PlayerStatus
00A831  1  C9 02        		cmp #2
00A833  1  90 01        		bcc loc_8832
00A835  1  4A           		lsr
00A836  1               loc_8832:
00A836  1               
00A836  1  85 39        		sta PowerUpType
00A838  1               loc_8834:
00A838  1               
00A838  1  A9 20        		lda #$20
00A83A  1  8D CA 03     		sta byte_3CA
00A83D  1  A9 02        		lda #2
00A83F  1  85 FE        		sta Square2SoundQueue
00A841  1  60           		rts
00A842  1               PowerUpObjHandler:
00A842  1               
00A842  1  A2 05        		ldx #5
00A844  1  86 08        		stx ObjectOffset
00A846  1  A5 23        		lda byte_23
00A848  1  F0 65        		beq locret_88AB
00A84A  1  0A           		asl
00A84B  1  90 2B        		bcc GrowThePowerUp
00A84D  1  AD 47 07     		lda TimerControl
00A850  1  D0 4B        		bne RunPUSubs
00A852  1  A5 39        		lda PowerUpType
00A854  1  F0 19        		beq ShroomM
00A856  1  C9 03        		cmp #3
00A858  1  F0 15        		beq ShroomM
00A85A  1  C9 04        		cmp #4
00A85C  1  F0 11        		beq ShroomM
00A85E  1  C9 05        		cmp #5
00A860  1  F0 0D        		beq ShroomM
00A862  1  C9 02        		cmp #2
00A864  1  D0 37        		bne RunPUSubs
00A866  1  20 3A B7     		jsr MoveJumpingEnemy
00A869  1  20 BC CD     		jsr sub_ADF9
00A86C  1  4C 9D A8     		jmp RunPUSubs
00A86F  1               ShroomM:
00A86F  1  20 B8 B6     		jsr MoveNormalEnemy
00A872  1  20 0D CC     		jsr EnemyToBGCollisionDet
00A875  1  4C 9D A8     		jmp RunPUSubs
00A878  1               
00A878  1               GrowThePowerUp:
00A878  1  A5 09        		lda FrameCounter
00A87A  1  29 03        		and #3
00A87C  1  D0 19        		bne loc_8893
00A87E  1  C6 D4        		dec byte_D4
00A880  1  A5 23        		lda byte_23
00A882  1  E6 23        		inc byte_23
00A884  1  C9 11        		cmp #$11
00A886  1  90 0F        		bcc loc_8893
00A888  1  A9 10        		lda #$10
00A88A  1  95 58        		sta $58,x
00A88C  1  A9 80        		lda #$80
00A88E  1  85 23        		sta byte_23
00A890  1  0A           		asl
00A891  1  8D CA 03     		sta byte_3CA
00A894  1  2A           		rol
00A895  1  95 46        		sta $46,x
00A897  1               loc_8893:
00A897  1               
00A897  1  A5 23        		lda byte_23
00A899  1  C9 06        		cmp #6
00A89B  1  90 12        		bcc locret_88AB
00A89D  1               RunPUSubs:
00A89D  1               
00A89D  1  20 DF DD     		jsr RelativeEnemyPosition
00A8A0  1  20 3C DE     		jsr GetEnemyOffscreenBits
00A8A3  1  20 A4 CE     		jsr GetEnemyBoundBox
00A8A6  1  20 40 D3     		jsr sub_B37D
00A8A9  1  20 9C C4     		jsr PlayerEnemyCollision
00A8AC  1  20 A5 C2     		jsr OffscreenBoundsCheck
00A8AF  1               locret_88AB:
00A8AF  1               
00A8AF  1  60           		rts
00A8B0  1               BlockYPosAdderData:
00A8B0  1  04           		.byte 4
00A8B1  1  12           		.byte $12
00A8B2  1               sub_88AE:
00A8B2  1               
00A8B2  1  48           		pha
00A8B3  1  A9 11        		lda #$11
00A8B5  1  AE EE 03     		ldx SprDataOffset_Ctrl
00A8B8  1  AC 54 07     		ldy PlayerSize
00A8BB  1  D0 02        		bne loc_88BB
00A8BD  1  A9 12        		lda #$12
00A8BF  1               loc_88BB:
00A8BF  1               
00A8BF  1  95 26        		sta $26,x
00A8C1  1  20 F5 89     		jsr DestroyBlockMetatile
00A8C4  1  AE EE 03     		ldx SprDataOffset_Ctrl
00A8C7  1  A5 02        		lda byte_2
00A8C9  1  9D E4 03     		sta $3E4,x
00A8CC  1  A8           		tay
00A8CD  1  A5 06        		lda byte_6
00A8CF  1  9D E6 03     		sta Block_BBuf_Low,x
00A8D2  1  B1 06        		lda (6),y
00A8D4  1  20 CB A9     		jsr BlockBumpedChk
00A8D7  1  85 00        		sta TMP_0
00A8D9  1  AC 54 07     		ldy PlayerSize
00A8DC  1  D0 01        		bne loc_88DB
00A8DE  1  98           		tya
00A8DF  1               loc_88DB:
00A8DF  1               
00A8DF  1  90 25        		bcc loc_8902
00A8E1  1  A0 11        		ldy #$11
00A8E3  1  94 26        		sty $26,x
00A8E5  1  A9 C5        		lda #$C5
00A8E7  1  A4 00        		ldy TMP_0
00A8E9  1  C0 56        		cpy #$56
00A8EB  1  F0 04        		beq loc_88ED
00A8ED  1  C0 5C        		cpy #$5C
00A8EF  1  D0 15        		bne loc_8902
00A8F1  1               loc_88ED:
00A8F1  1               
00A8F1  1  AD BC 06     		lda BrickCoinTimerFlag
00A8F4  1  D0 08        		bne loc_88FA
00A8F6  1  A9 0B        		lda #$B
00A8F8  1  8D 9D 07     		sta BrickCoinTimer
00A8FB  1  EE BC 06     		inc BrickCoinTimerFlag
00A8FE  1               loc_88FA:
00A8FE  1               
00A8FE  1  AD 9D 07     		lda BrickCoinTimer
00A901  1  D0 02        		bne loc_8901
00A903  1  A0 C5        		ldy #$C5
00A905  1               loc_8901:
00A905  1               
00A905  1  98           		tya
00A906  1               loc_8902:
00A906  1               
00A906  1  9D E8 03     		sta $3E8,x
00A909  1  20 49 A9     		jsr sub_8945
00A90C  1  A4 02        		ldy byte_2
00A90E  1  A9 20        		lda #$20
00A910  1  91 06        		sta (6),y
00A912  1  A9 10        		lda #$10
00A914  1  8D 84 07     		sta BlockBounceTimer
00A917  1  68           		pla
00A918  1  85 05        		sta byte_5
00A91A  1  A0 00        		ldy #0
00A91C  1  AD 14 07     		lda CrouchingFlag
00A91F  1  D0 05        		bne loc_8922
00A921  1  AD 54 07     		lda PlayerSize
00A924  1  F0 01        		beq loc_8923
00A926  1               loc_8922:
00A926  1               
00A926  1  C8           		iny
00A927  1               loc_8923:
00A927  1               
00A927  1  A5 CE        		lda SprObject_Y_Position
00A929  1  18           		clc
00A92A  1  79 B0 A8     		adc BlockYPosAdderData,y
00A92D  1  29 F0        		and #$F0
00A92F  1  95 D7        		sta Block_Y_Position,x
00A931  1  B4 26        		ldy Block_State,x
00A933  1  C0 11        		cpy #$11
00A935  1  F0 06        		beq loc_8939
00A937  1  20 D7 A9     		jsr sub_89D3
00A93A  1  4C 40 A9     		jmp loc_893C
00A93D  1               loc_8939:
00A93D  1               
00A93D  1  20 60 A9     		jsr sub_895C
00A940  1               loc_893C:
00A940  1               
00A940  1  AD EE 03     		lda SprDataOffset_Ctrl
00A943  1  49 01        		eor #1
00A945  1  8D EE 03     		sta SprDataOffset_Ctrl
00A948  1  60           		rts
00A949  1               sub_8945:
00A949  1               
00A949  1  A5 86        		lda Player_X_Position
00A94B  1  18           		clc
00A94C  1  69 08        		adc #8
00A94E  1  29 F0        		and #$F0
00A950  1  95 8F        		sta $8F,x
00A952  1  A5 6D        		lda Player_PageLoc
00A954  1  69 00        		adc #0
00A956  1  95 76        		sta $76,x
00A958  1  9D EA 03     		sta $3EA,x
00A95B  1  A5 B5        		lda Player_Y_HighPos
00A95D  1  95 BE        		sta $BE,x
00A95F  1  60           		rts
00A960  1               sub_895C:
00A960  1               
00A960  1  20 F4 A9     		jsr CheckTopOfBlock
00A963  1  A9 02        		lda #2
00A965  1  85 FF        		sta Square1SoundQueue
00A967  1  A9 00        		lda #0
00A969  1  95 60        		sta Block_X_Speed,x
00A96B  1  9D 3C 04     		sta Block_Y_MoveForce,x
00A96E  1  85 9F        		sta Player_Y_Speed
00A970  1  A9 FE        		lda #$FE
00A972  1  95 A8        		sta Block_Y_Speed,x
00A974  1  A5 05        		lda byte_5
00A976  1  20 CB A9     		jsr BlockBumpedChk
00A979  1  90 3C        		bcc locret_89B3
00A97B  1  98           		tya
00A97C  1  C9 0D        		cmp #$D
00A97E  1  90 02        		bcc loc_897E
00A980  1  E9 06        		sbc #6
00A982  1               loc_897E:
00A982  1               
00A982  1  20 FC 8C     		jsr JumpEngine
00A985  1  9F A9        		.word MushFlowerBlock
00A987  1  A5 A9        		.word PoisonMushroom_MAYBE_NODIRECT+1
00A989  1  0A A7        		.word CoinBlock
00A98B  1  0A A7        		.word CoinBlock
00A98D  1  A8 A9        		.word ExtraLifeMushBlock_NODIRECT+1
00A98F  1  A5 A9        		.word PoisonMushroom_MAYBE_NODIRECT+1
00A991  1  9F A9        		.word MushFlowerBlock
00A993  1  9F A9        		.word MushFlowerBlock
00A995  1  A5 A9        		.word PoisonMushroom_MAYBE_NODIRECT+1
00A997  1  AF A9        		.word VineBlock
00A999  1  A2 A9        		.word StarBlock_NODIRECT+1
00A99B  1  0A A7        		.word CoinBlock
00A99D  1  A8 A9        		.word ExtraLifeMushBlock_NODIRECT+1
00A99F  1               MushFlowerBlock:
00A99F  1               
00A99F  1  A9 00        		lda #0
00A9A1  1               StarBlock_NODIRECT:
00A9A1  1               
00A9A1  1  2C A9 02     		bit byte_2A9
00A9A4  1               PoisonMushroom_MAYBE_NODIRECT:
00A9A4  1               
00A9A4  1  2C A9 04     		bit byte_4A9
00A9A7  1               ExtraLifeMushBlock_NODIRECT:
00A9A7  1               
00A9A7  1  2C A9 03     		bit byte_3A9
00A9AA  1  85 39        		sta PowerUpType
00A9AC  1  4C 06 A8     		jmp SetupPowerUp
00A9AF  1               VineBlock:
00A9AF  1               
00A9AF  1  A2 05        		ldx #5
00A9B1  1  AC EE 03     		ldy SprDataOffset_Ctrl
00A9B4  1  20 B1 A4     		jsr Setup_Vine
00A9B7  1               locret_89B3:
00A9B7  1               
00A9B7  1  60           		rts
00A9B8  1               BrickQBlockMetatiles:
00A9B8  1  C1           		.byte $C1
00A9B9  1  C2           		.byte $C2
00A9BA  1  C0 5E 5F 60  		.byte $C0, $5E,	$5F, $60, $61, $52, $53, $54, $55, $56
00A9BE  1  61 52 53 54  
00A9C2  1  55 56        
00A9C4  1  57 58 59 5A  		.byte $57, $58,	$59, $5A, $5B, $5C, $5D
00A9C8  1  5B 5C 5D     
00A9CB  1               BlockBumpedChk:
00A9CB  1               
00A9CB  1  A0 12        		ldy #$12
00A9CD  1               loc_89C9:
00A9CD  1               
00A9CD  1  D9 B8 A9     		cmp BrickQBlockMetatiles,y
00A9D0  1  F0 04        		beq locret_89D2
00A9D2  1  88           		dey
00A9D3  1  10 F8        		bpl loc_89C9
00A9D5  1  18           		clc
00A9D6  1               locret_89D2:
00A9D6  1               
00A9D6  1  60           		rts
00A9D7  1               sub_89D3:
00A9D7  1               
00A9D7  1  20 F4 A9     		jsr CheckTopOfBlock
00A9DA  1  A9 01        		lda #1
00A9DC  1  9D EC 03     		sta $3EC,x
00A9DF  1  85 FD        		sta NoiseSoundQueue
00A9E1  1  20 16 AA     		jsr sub_8A12
00A9E4  1  A9 FE        		lda #$FE
00A9E6  1  85 9F        		sta Player_Y_Speed
00A9E8  1  A9 05        		lda #5
00A9EA  1  8D 39 01     		sta byte_139
00A9ED  1  20 EC A7     		jsr AddToScore
00A9F0  1  AE EE 03     		ldx SprDataOffset_Ctrl
00A9F3  1  60           		rts
00A9F4  1               CheckTopOfBlock:
00A9F4  1               
00A9F4  1  AE EE 03     		ldx SprDataOffset_Ctrl
00A9F7  1  A4 02        		ldy byte_2
00A9F9  1  F0 1A        		beq locret_8A11
00A9FB  1  98           		tya
00A9FC  1  38           		sec
00A9FD  1  E9 10        		sbc #$10
00A9FF  1  85 02        		sta byte_2
00AA01  1  A8           		tay
00AA02  1  B1 06        		lda (6),y
00AA04  1  C9 C3        		cmp #$C3
00AA06  1  D0 0D        		bne locret_8A11
00AA08  1  A9 00        		lda #0
00AA0A  1  91 06        		sta (6),y
00AA0C  1  20 D7 89     		jsr RemoveCoin_Axe
00AA0F  1  AE EE 03     		ldx SprDataOffset_Ctrl
00AA12  1  20 23 A7     		jsr sub_871C
00AA15  1               locret_8A11:
00AA15  1               
00AA15  1  60           		rts
00AA16  1               sub_8A12:
00AA16  1               
00AA16  1  B5 8F        		lda $8F,x
00AA18  1  9D F1 03     		sta $3F1,x
00AA1B  1  A9 F0        		lda #$F0
00AA1D  1  95 60        		sta $60,x
00AA1F  1  95 62        		sta $62,x
00AA21  1  A9 FA        		lda #$FA
00AA23  1  95 A8        		sta $A8,x
00AA25  1  A9 FC        		lda #$FC
00AA27  1  95 AA        		sta $AA,x
00AA29  1  A9 00        		lda #0
00AA2B  1  9D 3C 04     		sta $43C,x
00AA2E  1  9D 3E 04     		sta $43E,x
00AA31  1  B5 76        		lda $76,x
00AA33  1  95 78        		sta $78,x
00AA35  1  B5 8F        		lda $8F,x
00AA37  1  95 91        		sta $91,x
00AA39  1  B5 D7        		lda $D7,x
00AA3B  1  18           		clc
00AA3C  1  69 08        		adc #8
00AA3E  1  95 D9        		sta $D9,x
00AA40  1  A9 FA        		lda #$FA
00AA42  1  95 A8        		sta $A8,x
00AA44  1  60           		rts
00AA45  1               BlockObjectsCore:
00AA45  1               
00AA45  1  B5 26        		lda Block_State,x
00AA47  1  F0 5D        		beq loc_8AA2
00AA49  1  29 0F        		and #$F
00AA4B  1  48           		pha
00AA4C  1  A8           		tay
00AA4D  1  8A           		txa
00AA4E  1  18           		clc
00AA4F  1  69 09        		adc #9
00AA51  1  AA           		tax
00AA52  1  88           		dey
00AA53  1  F0 33        		beq loc_8A84
00AA55  1  20 79 AB     		jsr ImposeGravityBlock
00AA58  1  20 E4 AA     		jsr MoveObjectHorizontally
00AA5B  1  8A           		txa
00AA5C  1  18           		clc
00AA5D  1  69 02        		adc #2
00AA5F  1  AA           		tax
00AA60  1  20 79 AB     		jsr ImposeGravityBlock
00AA63  1  20 E4 AA     		jsr MoveObjectHorizontally
00AA66  1  A6 08        		ldx ObjectOffset
00AA68  1  20 E6 DD     		jsr loc_BE3E
00AA6B  1  20 43 DE     		jsr loc_BE9B
00AA6E  1  20 D6 D8     		jsr sub_B92E
00AA71  1  68           		pla
00AA72  1  B4 BE        		ldy $BE,x
00AA74  1  F0 30        		beq loc_8AA2
00AA76  1  48           		pha
00AA77  1  A9 F0        		lda #$F0
00AA79  1  D5 D9        		cmp $D9,x
00AA7B  1  B0 02        		bcs loc_8A7B
00AA7D  1  95 D9        		sta $D9,x
00AA7F  1               loc_8A7B:
00AA7F  1               
00AA7F  1  B5 D7        		lda $D7,x
00AA81  1  C9 F0        		cmp #$F0
00AA83  1  68           		pla
00AA84  1  90 20        		bcc loc_8AA2
00AA86  1  B0 1C        		bcs loc_8AA0
00AA88  1               loc_8A84:
00AA88  1               
00AA88  1  20 79 AB     		jsr ImposeGravityBlock
00AA8B  1  A6 08        		ldx ObjectOffset
00AA8D  1  20 E6 DD     		jsr loc_BE3E
00AA90  1  20 43 DE     		jsr loc_BE9B
00AA93  1  20 54 D8     		jsr sub_B8AC
00AA96  1  B5 D7        		lda $D7,x
00AA98  1  29 0F        		and #$F
00AA9A  1  C9 05        		cmp #5
00AA9C  1  68           		pla
00AA9D  1  B0 07        		bcs loc_8AA2
00AA9F  1  A9 01        		lda #1
00AAA1  1  9D EC 03     		sta $3EC,x
00AAA4  1               loc_8AA0:
00AAA4  1               
00AAA4  1  A9 00        		lda #0
00AAA6  1               loc_8AA2:
00AAA6  1               
00AAA6  1  95 26        		sta $26,x
00AAA8  1  60           		rts
00AAA9  1               BlockObjMT_Updater:
00AAA9  1               
00AAA9  1  A2 01        		ldx #1
00AAAB  1               loc_8AA7:
00AAAB  1               
00AAAB  1  86 08        		stx ObjectOffset
00AAAD  1  AD 01 03     		lda VRAM_Buffer1
00AAB0  1  D0 21        		bne loc_8ACF
00AAB2  1  BD EC 03     		lda $3EC,x
00AAB5  1  F0 1C        		beq loc_8ACF
00AAB7  1  BD E6 03     		lda Block_BBuf_Low,x
00AABA  1  85 06        		sta byte_6
00AABC  1  A9 05        		lda #5
00AABE  1  85 07        		sta unk_7
00AAC0  1  BD E4 03     		lda $3E4,x
00AAC3  1  85 02        		sta byte_2
00AAC5  1  A8           		tay
00AAC6  1  BD E8 03     		lda $3E8,x
00AAC9  1  91 06        		sta (6),y
00AACB  1  20 EB 89     		jsr ReplaceBlockMetatile
00AACE  1  A9 00        		lda #0
00AAD0  1  9D EC 03     		sta $3EC,x
00AAD3  1               loc_8ACF:
00AAD3  1               
00AAD3  1  CA           		dex
00AAD4  1  10 D5        		bpl loc_8AA7
00AAD6  1  60           		rts
00AAD7  1               MoveEnemyHorizontally:
00AAD7  1               
00AAD7  1  E8           		inx
00AAD8  1  20 E4 AA     		jsr MoveObjectHorizontally
00AADB  1  A6 08        		ldx ObjectOffset
00AADD  1  60           		rts
00AADE  1               MovePlayerHorizontally:
00AADE  1               
00AADE  1  AD 0E 07     		lda JumpspringAnimCtrl
00AAE1  1  D0 3E        		bne locret_8B1D
00AAE3  1  AA           		tax
00AAE4  1               MoveObjectHorizontally:
00AAE4  1               
00AAE4  1  B5 57        		lda $57,x
00AAE6  1  0A           		asl
00AAE7  1  0A           		asl
00AAE8  1  0A           		asl
00AAE9  1  0A           		asl
00AAEA  1  85 01        		sta TMP_1
00AAEC  1  B5 57        		lda $57,x
00AAEE  1  4A           		lsr
00AAEF  1  4A           		lsr
00AAF0  1  4A           		lsr
00AAF1  1  4A           		lsr
00AAF2  1  C9 08        		cmp #8
00AAF4  1  90 02        		bcc loc_8AF4
00AAF6  1  09 F0        		ora #$F0
00AAF8  1               loc_8AF4:
00AAF8  1               
00AAF8  1  85 00        		sta TMP_0
00AAFA  1  A0 00        		ldy #0
00AAFC  1  C9 00        		cmp #0
00AAFE  1  10 01        		bpl loc_8AFD
00AB00  1  88           		dey
00AB01  1               loc_8AFD:
00AB01  1               
00AB01  1  84 02        		sty byte_2
00AB03  1  BD 00 04     		lda $400,x
00AB06  1  18           		clc
00AB07  1  65 01        		adc TMP_1
00AB09  1  9D 00 04     		sta $400,x
00AB0C  1  A9 00        		lda #0
00AB0E  1  2A           		rol
00AB0F  1  48           		pha
00AB10  1  6A           		ror
00AB11  1  B5 86        		lda $86,x
00AB13  1  65 00        		adc TMP_0
00AB15  1  95 86        		sta $86,x
00AB17  1  B5 6D        		lda $6D,x
00AB19  1  65 02        		adc byte_2
00AB1B  1  95 6D        		sta $6D,x
00AB1D  1  68           		pla
00AB1E  1  18           		clc
00AB1F  1  65 00        		adc TMP_0
00AB21  1               locret_8B1D:
00AB21  1               
00AB21  1  60           		rts
00AB22  1               loc_8B1E:
00AB22  1               
00AB22  1  A2 00        		ldx #0
00AB24  1  AD 47 07     		lda TimerControl
00AB27  1  D0 05        		bne loc_8B2A
00AB29  1  AD 0E 07     		lda JumpspringAnimCtrl
00AB2C  1  D0 F3        		bne locret_8B1D
00AB2E  1               loc_8B2A:
00AB2E  1               
00AB2E  1  AD 09 07     		lda VerticalForce
00AB31  1  85 00        		sta TMP_0
00AB33  1  A9 04        		lda #4
00AB35  1  4C 82 AB     		jmp ImposeGravitySprObj
00AB38  1               sub_8B34:
00AB38  1               
00AB38  1  A0 3D        		ldy #$3D
00AB3A  1  B5 1E        		lda $1E,x
00AB3C  1  C9 05        		cmp #5
00AB3E  1  D0 02        		bne loc_8B3E
00AB40  1               loc_8B3C:
00AB40  1               
00AB40  1  A0 20        		ldy #$20
00AB42  1               loc_8B3E:
00AB42  1               
00AB42  1  4C 69 AB     		jmp loc_8B65
00AB45  1               loc_8B41:
00AB45  1               
00AB45  1  A0 00        		ldy #0
00AB47  1  4C 4C AB     		jmp loc_8B48
00AB4A  1               loc_8B46:
00AB4A  1               
00AB4A  1  A0 01        		ldy #1
00AB4C  1               loc_8B48:
00AB4C  1               
00AB4C  1  E8           		inx
00AB4D  1  A9 03        		lda #3
00AB4F  1  85 00        		sta TMP_0
00AB51  1  A9 06        		lda #6
00AB53  1  85 01        		sta TMP_1
00AB55  1  A9 02        		lda #2
00AB57  1  85 02        		sta byte_2
00AB59  1  98           		tya
00AB5A  1  4C A6 AB     		jmp loc_8BA2
00AB5D  1               MoveDropPlatform:
00AB5D  1               
00AB5D  1  A0 7F        		ldy #$7F
00AB5F  1  D0 02        		bne loc_8B5F
00AB61  1               MoveEnemySlowVert:
00AB61  1               
00AB61  1  A0 0F        		ldy #$F
00AB63  1               loc_8B5F:
00AB63  1               
00AB63  1  A9 02        		lda #2
00AB65  1  D0 04        		bne loc_8B67
00AB67  1               MoveJ_EnemyVertically:
00AB67  1               
00AB67  1  A0 1C        		ldy #$1C
00AB69  1               loc_8B65:
00AB69  1               
00AB69  1  A9 03        		lda #3
00AB6B  1               loc_8B67:
00AB6B  1               
00AB6B  1  84 00        		sty TMP_0
00AB6D  1  E8           		inx
00AB6E  1  20 82 AB     		jsr ImposeGravitySprObj
00AB71  1  A6 08        		ldx ObjectOffset
00AB73  1  60           		rts
00AB74  1               MaxSpdBlockData:
00AB74  1  06           		.byte 6
00AB75  1  08           		.byte 8
00AB76  1               ResidualGravityCode:
00AB76  1               
00AB76  1  A0 00        		ldy #0
00AB78  1  2C           		.byte $2C
00AB79  1               ImposeGravityBlock:
00AB79  1               
00AB79  1  A0 01        		ldy #1
00AB7B  1  A9 50        		lda #$50
00AB7D  1  85 00        		sta TMP_0
00AB7F  1  B9 74 AB     		lda MaxSpdBlockData,y
00AB82  1               ImposeGravitySprObj:
00AB82  1               
00AB82  1  85 02        		sta byte_2
00AB84  1  A9 00        		lda #0
00AB86  1  4C AC AB     		jmp ImposeGravity
00AB89  1               sub_8B85:
00AB89  1               
00AB89  1  A9 00        		lda #0
00AB8B  1               loc_8B87:
00AB8B  1               
00AB8B  1  2C A9 01     		bit byte_1A9
00AB8E  1  48           		pha
00AB8F  1  B4 16        		ldy $16,x
00AB91  1  E8           		inx
00AB92  1  A9 05        		lda #5
00AB94  1  C0 29        		cpy #$29
00AB96  1  D0 02        		bne loc_8B96
00AB98  1  A9 09        		lda #9
00AB9A  1               loc_8B96:
00AB9A  1               
00AB9A  1  85 00        		sta TMP_0
00AB9C  1  A9 0A        		lda #$A
00AB9E  1  85 01        		sta TMP_1
00ABA0  1  A9 03        		lda #3
00ABA2  1  85 02        		sta byte_2
00ABA4  1  68           		pla
00ABA5  1  A8           		tay
00ABA6  1               loc_8BA2:
00ABA6  1               
00ABA6  1  20 AC AB     		jsr ImposeGravity
00ABA9  1  A6 08        		ldx ObjectOffset
00ABAB  1  60           		rts
00ABAC  1               ImposeGravity:
00ABAC  1               
00ABAC  1  48           		pha
00ABAD  1  BD 16 04     		lda $416,x
00ABB0  1  18           		clc
00ABB1  1  7D 33 04     		adc $433,x
00ABB4  1  9D 16 04     		sta $416,x
00ABB7  1  A0 00        		ldy #0
00ABB9  1  B5 9F        		lda $9F,x
00ABBB  1  10 01        		bpl loc_8BBA
00ABBD  1  88           		dey
00ABBE  1               loc_8BBA:
00ABBE  1               
00ABBE  1  84 07        		sty unk_7
00ABC0  1  75 CE        		adc $CE,x
00ABC2  1  95 CE        		sta $CE,x
00ABC4  1  B5 B5        		lda $B5,x
00ABC6  1  65 07        		adc unk_7
00ABC8  1  95 B5        		sta $B5,x
00ABCA  1  BD 33 04     		lda $433,x
00ABCD  1  18           		clc
00ABCE  1  65 00        		adc TMP_0
00ABD0  1  9D 33 04     		sta $433,x
00ABD3  1  B5 9F        		lda $9F,x
00ABD5  1  69 00        		adc #0
00ABD7  1  95 9F        		sta $9F,x
00ABD9  1  C5 02        		cmp byte_2
00ABDB  1  30 10        		bmi loc_8BE9
00ABDD  1  BD 33 04     		lda $433,x
00ABE0  1  C9 80        		cmp #$80
00ABE2  1  90 09        		bcc loc_8BE9
00ABE4  1  A5 02        		lda byte_2
00ABE6  1  95 9F        		sta $9F,x
00ABE8  1  A9 00        		lda #0
00ABEA  1  9D 33 04     		sta $433,x
00ABED  1               loc_8BE9:
00ABED  1               
00ABED  1  68           		pla
00ABEE  1  F0 2B        		beq locret_8C17
00ABF0  1  A5 02        		lda byte_2
00ABF2  1  49 FF        		eor #$FF
00ABF4  1  A8           		tay
00ABF5  1  C8           		iny
00ABF6  1  84 07        		sty unk_7
00ABF8  1  BD 33 04     		lda $433,x
00ABFB  1  38           		sec
00ABFC  1  E5 01        		sbc TMP_1
00ABFE  1  9D 33 04     		sta $433,x
00AC01  1  B5 9F        		lda $9F,x
00AC03  1  E9 00        		sbc #0
00AC05  1  95 9F        		sta $9F,x
00AC07  1  C5 07        		cmp unk_7
00AC09  1  10 10        		bpl locret_8C17
00AC0B  1  BD 33 04     		lda $433,x
00AC0E  1  C9 80        		cmp #$80
00AC10  1  B0 09        		bcs locret_8C17
00AC12  1  A5 07        		lda unk_7
00AC14  1  95 9F        		sta $9F,x
00AC16  1  A9 FF        		lda #$FF
00AC18  1  9D 33 04     		sta $433,x
00AC1B  1               locret_8C17:
00AC1B  1               
00AC1B  1  60           		rts
00AC1C  1  FF           		.byte $FF
00AC1D  1  FF           		.byte $FF
00AC1E  1  FF           		.byte $FF
00AC1F  1  FF           		.byte $FF
00AC20  1  FF           		.byte $FF
00AC21  1  FF           		.byte $FF
00AC22  1  FF           		.byte $FF
00AC23  1  FF           		.byte $FF
00AC24  1  FF           		.byte $FF
00AC25  1  FF           		.byte $FF
00AC26  1  FF           		.byte $FF
00AC27  1               EnemiesAndLoopsCore:
00AC27  1               
00AC27  1  B5 0F        		lda Enemy_Flag,x
00AC29  1  48           		pha
00AC2A  1  0A           		asl
00AC2B  1  B0 12        		bcs loc_8C3B
00AC2D  1  68           		pla
00AC2E  1  F0 03        		beq loc_8C2F
00AC30  1  4C C3 B4     		jmp RunEnemyObjectsCore
00AC33  1               loc_8C2F:
00AC33  1               
00AC33  1  AD 1F 07     		lda AreaParserTaskNum
00AC36  1  29 07        		and #7
00AC38  1  C9 07        		cmp #7
00AC3A  1  F0 0E        		beq locret_8C46
00AC3C  1  4C BB AC     		jmp ProcLoopCommand
00AC3F  1               loc_8C3B:
00AC3F  1               
00AC3F  1  68           		pla
00AC40  1  29 0F        		and #$F
00AC42  1  A8           		tay
00AC43  1  B9 0F 00     		lda Enemy_Flag,y
00AC46  1  D0 02        		bne locret_8C46
00AC48  1  95 0F        		sta Enemy_Flag,x
00AC4A  1               locret_8C46:
00AC4A  1               
00AC4A  1  60           		rts
00AC4B  1               LoopCmdWorldNumber:
00AC4B  1  02           		.byte 2
00AC4C  1  02           		.byte 2
00AC4D  1  02           		.byte 2
00AC4E  1  02           		.byte 2
00AC4F  1  05           		.byte 5
00AC50  1  05           		.byte 5
00AC51  1  05           		.byte 5
00AC52  1  05           		.byte 5
00AC53  1  06           		.byte 6
00AC54  1  07           		.byte 7
00AC55  1  07           		.byte 7
00AC56  1  04           		.byte 4
00AC57  1               LoopCmdPageNumber:
00AC57  1  03           		.byte 3
00AC58  1  05           		.byte 5
00AC59  1  08           		.byte 8
00AC5A  1  09           		.byte 9
00AC5B  1  03           		.byte 3
00AC5C  1  06           		.byte 6
00AC5D  1  07           		.byte 7
00AC5E  1  0A           		.byte $A
00AC5F  1  05           		.byte 5
00AC60  1  05           		.byte 5
00AC61  1  0B           		.byte $B
00AC62  1  05           		.byte 5
00AC63  1               LoopCmdYPosition:
00AC63  1  B0           		.byte $B0
00AC64  1  B0           		.byte $B0
00AC65  1  40           		.byte $40
00AC66  1  30           		.byte $30
00AC67  1  B0           		.byte $B0
00AC68  1  30           		.byte $30
00AC69  1  B0           		.byte $B0
00AC6A  1  B0           		.byte $B0
00AC6B  1  F0           		.byte $F0
00AC6C  1  F0           		.byte $F0
00AC6D  1  B0           		.byte $B0
00AC6E  1  F0           		.byte $F0
00AC6F  1               LoopCmdMultiLoopPassCntr:
00AC6F  1  02           		.byte 2
00AC70  1  02           		.byte 2
00AC71  1  02           		.byte 2
00AC72  1  02           		.byte 2
00AC73  1  02           		.byte 2
00AC74  1  02           		.byte 2
00AC75  1  02           		.byte 2
00AC76  1  02           		.byte 2
00AC77  1  01           		.byte 1
00AC78  1  01           		.byte 1
00AC79  1  01           		.byte 1
00AC7A  1  01           		.byte 1
00AC7B  1               sub_8C77:
00AC7B  1               
00AC7B  1  A5 6D        		lda Player_PageLoc
00AC7D  1  38           		sec
00AC7E  1  E9 04        		sbc #4
00AC80  1  85 6D        		sta Player_PageLoc
00AC82  1  AD 25 07     		lda CurrentPageLoc
00AC85  1  38           		sec
00AC86  1  E9 04        		sbc #4
00AC88  1  8D 25 07     		sta CurrentPageLoc
00AC8B  1  AD 1A 07     		lda ScreenLeft_PageLoc
00AC8E  1  38           		sec
00AC8F  1  E9 04        		sbc #4
00AC91  1  8D 1A 07     		sta ScreenLeft_PageLoc
00AC94  1  AD 1B 07     		lda ScreenRight_PageLoc
00AC97  1  38           		sec
00AC98  1  E9 04        		sbc #4
00AC9A  1  8D 1B 07     		sta ScreenRight_PageLoc
00AC9D  1  AD 2A 07     		lda AreaObjectPageLoc
00ACA0  1  38           		sec
00ACA1  1  E9 04        		sbc #4
00ACA3  1  8D 2A 07     		sta AreaObjectPageLoc
00ACA6  1  A9 00        		lda #0
00ACA8  1  8D 3B 07     		sta EnemyObjectPageSel
00ACAB  1  8D 2B 07     		sta AreaObjectPageSel
00ACAE  1  8D 39 07     		sta EnemyDataOffset
00ACB1  1  8D 3A 07     		sta EnemyObjectPageLoc
00ACB4  1  B9 6E E0     		lda SWAPDATA_AreaDataOfsLoopback,y
00ACB7  1  8D 2C 07     		sta AreaDataOffset
00ACBA  1  60           		rts
00ACBB  1               ProcLoopCommand:
00ACBB  1               
00ACBB  1  AD 45 07     		lda LoopCommand
00ACBE  1  F0 58        		beq loc_8D0C
00ACC0  1  AD 26 07     		lda CurrentColumnPos
00ACC3  1  D0 53        		bne loc_8D0C
00ACC5  1  A0 0C        		ldy #$C
00ACC7  1               FindLoop:
00ACC7  1               
00ACC7  1  88           		dey
00ACC8  1  30 4E        		bmi loc_8D0C
00ACCA  1  AD 5F 07     		lda WorldNumber
00ACCD  1  D9 4B AC     		cmp LoopCmdWorldNumber,y
00ACD0  1  D0 F5        		bne FindLoop
00ACD2  1  AD 25 07     		lda CurrentPageLoc
00ACD5  1  D9 57 AC     		cmp LoopCmdPageNumber,y
00ACD8  1  D0 ED        		bne FindLoop
00ACDA  1  A5 CE        		lda SprObject_Y_Position
00ACDC  1  D9 63 AC     		cmp LoopCmdYPosition,y
00ACDF  1  D0 0D        		bne loc_8CE6
00ACE1  1  A5 1D        		lda Player_State
00ACE3  1  C9 00        		cmp #0
00ACE5  1  D0 07        		bne loc_8CE6
00ACE7  1  A9 01        		lda #Sfx_CoinGrab
00ACE9  1  EE D9 06     		inc MultiLoopCorrectCntr
00ACEC  1  D0 02        		bne skipFailSound
00ACEE  1               loc_8CE6:
00ACEE  1  A9 10        		lda #Sfx_TimerTick
00ACF0  1               skipFailSound:
00ACF0  1  85 FE        		sta Square2SoundQueue
00ACF2  1  EE DA 06     		inc MultiLoopPassCntr
00ACF5  1  AD DA 06     		lda MultiLoopPassCntr
00ACF8  1  D9 6F AC     		cmp LoopCmdMultiLoopPassCntr,y
00ACFB  1  D0 16        		bne loc_8D07
00ACFD  1  AD D9 06     		lda MultiLoopCorrectCntr
00AD00  1  D9 6F AC     		cmp LoopCmdMultiLoopPassCntr,y
00AD03  1  F0 06        		beq loc_8CFF
00AD05  1  20 7B AC     		jsr sub_8C77
00AD08  1  20 B5 BC     		jsr sub_9CA6
00AD0B  1               loc_8CFF:
00AD0B  1               
00AD0B  1  A9 00        		lda #0
00AD0D  1  8D DA 06     		sta MultiLoopPassCntr
00AD10  1  8D D9 06     		sta MultiLoopCorrectCntr
00AD13  1               loc_8D07:
00AD13  1               
00AD13  1  A9 00        		lda #0
00AD15  1  8D 45 07     		sta LoopCommand
00AD18  1               loc_8D0C:
00AD18  1               
00AD18  1  AD CD 06     		lda EnemyFrenzyQueue
00AD1B  1  F0 10        		beq loc_8D21
00AD1D  1  95 16        		sta $16,x
00AD1F  1  A9 01        		lda #1
00AD21  1  95 0F        		sta $F,x
00AD23  1  A9 00        		lda #0
00AD25  1  95 1E        		sta $1E,x
00AD27  1  8D CD 06     		sta EnemyFrenzyQueue
00AD2A  1  4C 0F AE     		jmp sub_8E03
00AD2D  1               loc_8D21:
00AD2D  1               
00AD2D  1  AC 39 07     		ldy EnemyDataOffset
00AD30  1  B1 E9        		lda ($E9),y
00AD32  1  C9 FF        		cmp #$FF
00AD34  1  D0 03        		bne loc_8D2D
00AD36  1  4C FF AD     		jmp loc_8DF3
00AD39  1               loc_8D2D:
00AD39  1               
00AD39  1  29 0F        		and #$F
00AD3B  1  C9 0E        		cmp #$E
00AD3D  1  F0 0E        		beq loc_8D41
00AD3F  1  E0 05        		cpx #5
00AD41  1  90 0A        		bcc loc_8D41
00AD43  1  C8           		iny
00AD44  1  B1 E9        		lda ($E9),y
00AD46  1  29 3F        		and #$3F
00AD48  1  C9 2E        		cmp #$2E
00AD4A  1  F0 01        		beq loc_8D41
00AD4C  1  60           		rts
00AD4D  1               loc_8D41:
00AD4D  1               
00AD4D  1  AD 1D 07     		lda ScreenRight_X_Pos
00AD50  1  18           		clc
00AD51  1  69 30        		adc #$30
00AD53  1  29 F0        		and #$F0
00AD55  1  85 07        		sta unk_7
00AD57  1  AD 1B 07     		lda ScreenRight_PageLoc
00AD5A  1  69 00        		adc #0
00AD5C  1  85 06        		sta byte_6
00AD5E  1  AC 39 07     		ldy EnemyDataOffset
00AD61  1  C8           		iny
00AD62  1  B1 E9        		lda ($E9),y
00AD64  1  0A           		asl
00AD65  1  90 0B        		bcc loc_8D66
00AD67  1  AD 3B 07     		lda EnemyObjectPageSel
00AD6A  1  D0 06        		bne loc_8D66
00AD6C  1  EE 3B 07     		inc EnemyObjectPageSel
00AD6F  1  EE 3A 07     		inc EnemyObjectPageLoc
00AD72  1               loc_8D66:
00AD72  1               
00AD72  1  88           		dey
00AD73  1  B1 E9        		lda ($E9),y
00AD75  1  29 0F        		and #$F
00AD77  1  C9 0F        		cmp #$F
00AD79  1  D0 19        		bne loc_8D88
00AD7B  1  AD 3B 07     		lda EnemyObjectPageSel
00AD7E  1  D0 14        		bne loc_8D88
00AD80  1  C8           		iny
00AD81  1  B1 E9        		lda ($E9),y
00AD83  1  29 3F        		and #$3F
00AD85  1  8D 3A 07     		sta EnemyObjectPageLoc
00AD88  1  EE 39 07     		inc EnemyDataOffset
00AD8B  1  EE 39 07     		inc EnemyDataOffset
00AD8E  1  EE 3B 07     		inc EnemyObjectPageSel
00AD91  1  4C BB AC     		jmp ProcLoopCommand
00AD94  1               loc_8D88:
00AD94  1               
00AD94  1  AD 3A 07     		lda EnemyObjectPageLoc
00AD97  1  95 6E        		sta $6E,x
00AD99  1  B1 E9        		lda ($E9),y
00AD9B  1  29 F0        		and #$F0
00AD9D  1  95 87        		sta $87,x
00AD9F  1  CD 1D 07     		cmp ScreenRight_X_Pos
00ADA2  1  B5 6E        		lda $6E,x
00ADA4  1  ED 1B 07     		sbc ScreenRight_PageLoc
00ADA7  1  B0 0B        		bcs loc_8DA8
00ADA9  1  B1 E9        		lda ($E9),y
00ADAB  1  29 0F        		and #$F
00ADAD  1  C9 0E        		cmp #$E
00ADAF  1  F0 69        		beq loc_8E0E
00ADB1  1  4C 40 AE     		jmp loc_8E34
00ADB4  1               loc_8DA8:
00ADB4  1               
00ADB4  1  A5 07        		lda unk_7
00ADB6  1  D5 87        		cmp $87,x
00ADB8  1  A5 06        		lda byte_6
00ADBA  1  F5 6E        		sbc $6E,x
00ADBC  1  90 41        		bcc loc_8DF3
00ADBE  1  A9 01        		lda #1
00ADC0  1  95 B6        		sta $B6,x
00ADC2  1  B1 E9        		lda ($E9),y
00ADC4  1  0A           		asl
00ADC5  1  0A           		asl
00ADC6  1  0A           		asl
00ADC7  1  0A           		asl
00ADC8  1  95 CF        		sta $CF,x
00ADCA  1  C9 E0        		cmp #$E0
00ADCC  1  F0 4C        		beq loc_8E0E
00ADCE  1  C8           		iny
00ADCF  1  B1 E9        		lda ($E9),y
00ADD1  1  29 40        		and #$40
00ADD3  1  F0 05        		beq loc_8DCE
00ADD5  1  AD CC 06     		lda SecondaryHardMode
00ADD8  1  F0 74        		beq loc_8E42
00ADDA  1               loc_8DCE:
00ADDA  1               
00ADDA  1  B1 E9        		lda ($E9),y
00ADDC  1  29 3F        		and #$3F
00ADDE  1  C9 37        		cmp #$37
00ADE0  1  90 04        		bcc loc_8DDA
00ADE2  1  C9 3F        		cmp #$3F
00ADE4  1  90 31        		bcc loc_8E0B
00ADE6  1               loc_8DDA:
00ADE6  1               
00ADE6  1  C9 06        		cmp #6
00ADE8  1  D0 07        		bne loc_8DE5
00ADEA  1  AC 6A 07     		ldy PrimaryHardMode
00ADED  1  F0 02        		beq loc_8DE5
00ADEF  1  A9 02        		lda #2
00ADF1  1               loc_8DE5:
00ADF1  1               
00ADF1  1  95 16        		sta $16,x
00ADF3  1  A9 01        		lda #1
00ADF5  1  95 0F        		sta $F,x
00ADF7  1  20 0F AE     		jsr sub_8E03
00ADFA  1  B5 0F        		lda $F,x
00ADFC  1  D0 50        		bne loc_8E42
00ADFE  1  60           		rts
00ADFF  1               loc_8DF3:
00ADFF  1               
00ADFF  1  AD CB 06     		lda EnemyFrenzyBuffer
00AE02  1  D0 09        		bne loc_8E01
00AE04  1  AD 98 03     		lda VineFlagOffset
00AE07  1  C9 01        		cmp #1
00AE09  1  D0 0B        		bne locret_8E0A
00AE0B  1  A9 2F        		lda #$2F
00AE0D  1               loc_8E01:
00AE0D  1               
00AE0D  1  95 16        		sta $16,x
00AE0F  1               sub_8E03:
00AE0F  1               
00AE0F  1  A9 00        		lda #0
00AE11  1  95 1E        		sta $1E,x
00AE13  1  20 5C AE     		jsr CheckpointEnemyID
00AE16  1               locret_8E0A:
00AE16  1               
00AE16  1  60           		rts
00AE17  1               loc_8E0B:
00AE17  1               
00AE17  1  4C 38 B3     		jmp loc_932C
00AE1A  1               loc_8E0E:
00AE1A  1               
00AE1A  1  C8           		iny
00AE1B  1  C8           		iny
00AE1C  1  AD 5F 07     		lda WorldNumber
00AE1F  1  C9 08        		cmp #8
00AE21  1  F0 0C        		beq loc_8E23
00AE23  1  B1 E9        		lda ($E9),y
00AE25  1  4A           		lsr
00AE26  1  4A           		lsr
00AE27  1  4A           		lsr
00AE28  1  4A           		lsr
00AE29  1  4A           		lsr
00AE2A  1  CD 5F 07     		cmp WorldNumber
00AE2D  1  D0 0E        		bne loc_8E31
00AE2F  1               loc_8E23:
00AE2F  1               
00AE2F  1  88           		dey
00AE30  1  B1 E9        		lda ($E9),y
00AE32  1  8D 50 07     		sta AreaPointer
00AE35  1  C8           		iny
00AE36  1  B1 E9        		lda ($E9),y
00AE38  1  29 1F        		and #$1F
00AE3A  1  8D 51 07     		sta EntrancePage
00AE3D  1               loc_8E31:
00AE3D  1               
00AE3D  1  4C 4B AE     		jmp loc_8E3F
00AE40  1               loc_8E34:
00AE40  1               
00AE40  1  AC 39 07     		ldy EnemyDataOffset
00AE43  1  B1 E9        		lda ($E9),y
00AE45  1  29 0F        		and #$F
00AE47  1  C9 0E        		cmp #$E
00AE49  1  D0 03        		bne loc_8E42
00AE4B  1               loc_8E3F:
00AE4B  1               
00AE4B  1  EE 39 07     		inc EnemyDataOffset
00AE4E  1               loc_8E42:
00AE4E  1               
00AE4E  1  EE 39 07     		inc EnemyDataOffset
00AE51  1  EE 39 07     		inc EnemyDataOffset
00AE54  1  A9 00        		lda #0
00AE56  1  8D 3B 07     		sta EnemyObjectPageSel
00AE59  1  A6 08        		ldx ObjectOffset
00AE5B  1  60           		rts
00AE5C  1               CheckpointEnemyID:
00AE5C  1               
00AE5C  1  B5 16        		lda Enemy_ID,x
00AE5E  1  C9 15        		cmp #$15
00AE60  1  B0 0D        		bcs InitEnemyRoutines
00AE62  1  A8           		tay
00AE63  1  B5 CF        		lda Enemy_Y_Position,x
00AE65  1  69 08        		adc #8
00AE67  1  95 CF        		sta Enemy_Y_Position,x
00AE69  1  A9 01        		lda #1
00AE6B  1  9D D8 03     		sta EnemyOffscrBitsMasked,x
00AE6E  1  98           		tya
00AE6F  1               InitEnemyRoutines:
00AE6F  1               
00AE6F  1  20 FC 8C     		jsr JumpEngine
00AE72  1  FE AE        		.word InitNormalEnemy
00AE74  1  FE AE        		.word InitNormalEnemy
00AE76  1  FE AE        		.word InitNormalEnemy
00AE78  1  0E AF        		.word InitRedKoopa
00AE7A  1  A4 B3        		.word loc_9398
00AE7C  1  18 AF        		.word InitHammerBro
00AE7E  1  E1 AE        		.word InitGoomba
00AE80  1  39 AF        		.word InitBloober
00AE82  1  62 AF        		.word InitBulletBill
00AE84  1  E0 AE        		.word NoInitCode
00AE86  1  6C AF        		.word InitCheepCheep
00AE88  1  6C AF        		.word InitCheepCheep
00AE8A  1  E7 AE        		.word InitPodoboo
00AE8C  1  A4 B3        		.word loc_9398
00AE8E  1  12 B4        		.word InitJumpGPTroopa
00AE90  1  41 AF        		.word InitRedPTroopa
00AE92  1  34 AF        		.word InitHorizFlySwimEnemy
00AE94  1  7C AF        		.word InitLakitu
00AE96  1  E1 B3        		.word InitEnemyFrenzy
00AE98  1  E0 AE        		.word NoInitCode
00AE9A  1  E1 B3        		.word InitEnemyFrenzy
00AE9C  1  E1 B3        		.word InitEnemyFrenzy
00AE9E  1  E1 B3        		.word InitEnemyFrenzy
00AEA0  1  E1 B3        		.word InitEnemyFrenzy
00AEA2  1  F9 B3        		.word loc_93ED
00AEA4  1  E0 AE        		.word NoInitCode
00AEA6  1  E0 AE        		.word NoInitCode
00AEA8  1  61 B0        		.word InitShortFirebar
00AEAA  1  61 B0        		.word InitShortFirebar
00AEAC  1  61 B0        		.word InitShortFirebar
00AEAE  1  61 B0        		.word InitShortFirebar
00AEB0  1  5E B0        		.word InitLongFirebar
00AEB2  1  E0 AE        		.word NoInitCode
00AEB4  1  E0 AE        		.word NoInitCode
00AEB6  1  E0 AE        		.word NoInitCode
00AEB8  1  E0 AE        		.word NoInitCode
00AEBA  1  20 B4        		.word InitBalPlatform
00AEBC  1  53 B4        		.word InitVertPlatform
00AEBE  1  80 B4        		.word LargeLiftUp
00AEC0  1  86 B4        		.word LargeLiftDown
00AEC2  1  4C B4        		.word InitHoriPlatform
00AEC4  1  44 B4        		.word InitDropPlatform
00AEC6  1  4C B4        		.word InitHoriPlatform
00AEC8  1  8C B4        		.word PlatLiftUp
00AECA  1  98 B4        		.word PlatLiftDown
00AECC  1  4E B1        		.word InitBowser_NEW_MAYBE
00AECE  1  1D A8        		.word PwrUpJmp
00AED0  1  B1 A4        		.word Setup_Vine
00AED2  1  E0 AE        		.word NoInitCode
00AED4  1  E0 AE        		.word NoInitCode
00AED6  1  E0 AE        		.word NoInitCode
00AED8  1  E0 AE        		.word NoInitCode
00AEDA  1  E0 AE        		.word NoInitCode
00AEDC  1  F7 AE        		.word InitRetainerObj
00AEDE  1  C2 B4        		.word EndOfEnemyInitCode
00AEE0  1               NoInitCode:
00AEE0  1               
00AEE0  1  60           		rts
00AEE1  1               InitGoomba:
00AEE1  1               
00AEE1  1  20 FE AE     		jsr InitNormalEnemy
00AEE4  1  4C 3D AF     		jmp SmallBBox
00AEE7  1               InitPodoboo:
00AEE7  1               
00AEE7  1  A9 02        		lda #2
00AEE9  1  95 B6        		sta Enemy_Y_HighPos,x
00AEEB  1  95 CF        		sta Enemy_Y_Position,x
00AEED  1  4A           		lsr
00AEEE  1  9D 96 07     		sta EnemyIntervalTimer,x
00AEF1  1  4A           		lsr
00AEF2  1  95 1E        		sta Enemy_State,x
00AEF4  1  4C 3D AF     		jmp SmallBBox
00AEF7  1               InitRetainerObj:
00AEF7  1               
00AEF7  1  A9 B8        		lda #$B8
00AEF9  1  95 CF        		sta Enemy_Y_Position,x
00AEFB  1  60           		rts
00AEFC  1               NormalXSpdData:
00AEFC  1  F8           		.byte $F8
00AEFD  1  F4           		.byte $F4
00AEFE  1               InitNormalEnemy:
00AEFE  1               
00AEFE  1  A0 01        		ldy #1
00AF00  1  AD 6A 07     		lda PrimaryHardMode
00AF03  1  D0 01        		bne GetESpd
00AF05  1  88           		dey
00AF06  1               GetESpd:
00AF06  1               
00AF06  1  B9 FC AE     		lda NormalXSpdData,y
00AF09  1               SetESpd:
00AF09  1               
00AF09  1  95 58        		sta Enemy_X_Speed,x
00AF0B  1  4C 51 AF     		jmp TallBBox
00AF0E  1               InitRedKoopa:
00AF0E  1               
00AF0E  1  20 FE AE     		jsr InitNormalEnemy
00AF11  1  A9 01        		lda #1
00AF13  1  95 1E        		sta Enemy_State,x
00AF15  1  60           		rts
00AF16  1               HBroWalkingTimerData:
00AF16  1  80           		.byte $80
00AF17  1  50           		.byte $50
00AF18  1               InitHammerBro:
00AF18  1               
00AF18  1  A9 00        		lda #0
00AF1A  1  9D A2 03     		sta HammerThrowingTimer,x
00AF1D  1  95 58        		sta Enemy_X_Speed,x
00AF1F  1  AD 5F 07     		lda WorldNumber
00AF22  1  C9 06        		cmp #6
00AF24  1  B0 09        		bcs loc_8F23
00AF26  1  AC CC 06     		ldy SecondaryHardMode
00AF29  1  B9 16 AF     		lda HBroWalkingTimerData,y
00AF2C  1  9D 96 07     		sta EnemyIntervalTimer,x
00AF2F  1               loc_8F23:
00AF2F  1               
00AF2F  1  A9 0B        		lda #$B
00AF31  1  4C 53 AF     		jmp SetBBox
00AF34  1               InitHorizFlySwimEnemy:
00AF34  1               
00AF34  1  A9 00        		lda #0
00AF36  1  4C 09 AF     		jmp SetESpd
00AF39  1               InitBloober:
00AF39  1               
00AF39  1  A9 00        		lda #0
00AF3B  1  95 58        		sta Enemy_X_Speed,x
00AF3D  1               SmallBBox:
00AF3D  1               
00AF3D  1  A9 09        		lda #9
00AF3F  1  D0 12        		bne SetBBox
00AF41  1               InitRedPTroopa:
00AF41  1               
00AF41  1  A0 30        		ldy #$30
00AF43  1  B5 CF        		lda Enemy_Y_Position,x
00AF45  1  9D 01 04     		sta RedPTroopaOrigXPos,x
00AF48  1  10 02        		bpl loc_8F40
00AF4A  1  A0 E0        		ldy #$E0
00AF4C  1               loc_8F40:
00AF4C  1               
00AF4C  1  98           		tya
00AF4D  1  75 CF        		adc Enemy_Y_Position,x
00AF4F  1  95 58        		sta Enemy_X_Speed,x
00AF51  1               TallBBox:
00AF51  1               
00AF51  1  A9 03        		lda #3
00AF53  1               SetBBox:
00AF53  1               
00AF53  1  9D 9A 04     		sta Enemy_BoundBoxCtrl,x
00AF56  1  A9 02        		lda #2
00AF58  1  95 46        		sta Enemy_MovingDir,x
00AF5A  1               InitVStf:
00AF5A  1               
00AF5A  1  A9 00        		lda #0
00AF5C  1  95 A0        		sta ExplosionTimerCounter,x
00AF5E  1  9D 34 04     		sta PiranhaPlantDownYPos,x
00AF61  1  60           		rts
00AF62  1               InitBulletBill:
00AF62  1               
00AF62  1  A9 02        		lda #2
00AF64  1  95 46        		sta Enemy_MovingDir,x
00AF66  1  A9 09        		lda #9
00AF68  1  9D 9A 04     		sta Enemy_BoundBoxCtrl,x
00AF6B  1  60           		rts
00AF6C  1               InitCheepCheep:
00AF6C  1               
00AF6C  1  20 3D AF     		jsr SmallBBox
00AF6F  1  BD A7 07     		lda PseudoRandomBitReg,x
00AF72  1  29 10        		and #$10
00AF74  1  95 58        		sta Enemy_X_Speed,x
00AF76  1  B5 CF        		lda Enemy_Y_Position,x
00AF78  1  9D 34 04     		sta PiranhaPlantDownYPos,x
00AF7B  1  60           		rts
00AF7C  1               InitLakitu:
00AF7C  1               
00AF7C  1  AD CB 06     		lda EnemyFrenzyBuffer
00AF7F  1  D0 0B        		bne KillLakitu
00AF81  1               sub_8F75:
00AF81  1               
00AF81  1  A9 00        		lda #0
00AF83  1  8D D1 06     		sta LakituReappearTimer
00AF86  1  20 34 AF     		jsr InitHorizFlySwimEnemy
00AF89  1  4C 1A B4     		jmp TallBBox2
00AF8C  1               KillLakitu:
00AF8C  1               
00AF8C  1  4C D9 B5     		jmp EraseEnemyObject
00AF8F  1               PRDiffAdjustData:
00AF8F  1  26           		.byte $26
00AF90  1  2C           		.byte $2C
00AF91  1  32           		.byte $32
00AF92  1  38           		.byte $38
00AF93  1  20           		.byte $20
00AF94  1  22           		.byte $22
00AF95  1  24           		.byte $24
00AF96  1  26           		.byte $26
00AF97  1  13           		.byte $13
00AF98  1  14           		.byte $14
00AF99  1  15           		.byte $15
00AF9A  1  16           		.byte $16
00AF9B  1               LakituAndSpinyHandler:
00AF9B  1               
00AF9B  1  AD 8F 07     		lda FrenzyEnemyTimer
00AF9E  1  D0 4A        		bne locret_8FDE
00AFA0  1  E0 05        		cpx #5
00AFA2  1  B0 46        		bcs locret_8FDE
00AFA4  1  A9 80        		lda #$80
00AFA6  1  8D 8F 07     		sta FrenzyEnemyTimer
00AFA9  1  A0 04        		ldy #4
00AFAB  1               loc_8F9F:
00AFAB  1               
00AFAB  1  B9 16 00     		lda $16,y
00AFAE  1  C9 11        		cmp #$11
00AFB0  1  F0 39        		beq loc_8FDF
00AFB2  1  88           		dey
00AFB3  1  10 F6        		bpl loc_8F9F
00AFB5  1  EE D1 06     		inc LakituReappearTimer
00AFB8  1  AD D1 06     		lda LakituReappearTimer
00AFBB  1  C9 03        		cmp #3
00AFBD  1  90 2B        		bcc locret_8FDE
00AFBF  1  A2 04        		ldx #4
00AFC1  1               loc_8FB5:
00AFC1  1               
00AFC1  1  B5 0F        		lda $F,x
00AFC3  1  F0 05        		beq loc_8FBE
00AFC5  1  CA           		dex
00AFC6  1  10 F9        		bpl loc_8FB5
00AFC8  1  30 1E        		bmi loc_8FDC
00AFCA  1               loc_8FBE:
00AFCA  1               
00AFCA  1  A9 00        		lda #0
00AFCC  1  95 1E        		sta $1E,x
00AFCE  1  A9 11        		lda #$11
00AFD0  1  95 16        		sta $16,x
00AFD2  1  20 81 AF     		jsr sub_8F75
00AFD5  1  A9 20        		lda #$20
00AFD7  1  AC FB 07     		ldy IsPlayingExtendedWorlds
00AFDA  1  D0 07        		bne loc_8FD7
00AFDC  1  AC 5F 07     		ldy WorldNumber
00AFDF  1  C0 06        		cpy #6
00AFE1  1  90 02        		bcc loc_8FD9
00AFE3  1               loc_8FD7:
00AFE3  1               
00AFE3  1  A9 60        		lda #$60
00AFE5  1               loc_8FD9:
00AFE5  1               
00AFE5  1  20 F5 B1     		jsr sub_91E9
00AFE8  1               loc_8FDC:
00AFE8  1               
00AFE8  1  A6 08        		ldx ObjectOffset
00AFEA  1               locret_8FDE:
00AFEA  1               
00AFEA  1  60           		rts
00AFEB  1               loc_8FDF:
00AFEB  1               
00AFEB  1  A5 CE        		lda SprObject_Y_Position
00AFED  1  C9 2C        		cmp #$2C
00AFEF  1  90 F9        		bcc locret_8FDE
00AFF1  1  B9 1E 00     		lda $1E,y
00AFF4  1  D0 F4        		bne locret_8FDE
00AFF6  1  B9 6E 00     		lda $6E,y
00AFF9  1  95 6E        		sta $6E,x
00AFFB  1  B9 87 00     		lda $87,y
00AFFE  1  95 87        		sta $87,x
00B000  1  A9 01        		lda #1
00B002  1  95 B6        		sta $B6,x
00B004  1  B9 CF 00     		lda $CF,y
00B007  1  38           		sec
00B008  1  E9 08        		sbc #8
00B00A  1  95 CF        		sta $CF,x
00B00C  1  BD A7 07     		lda $7A7,x
00B00F  1  29 03        		and #3
00B011  1  A8           		tay
00B012  1  A2 02        		ldx #2
00B014  1               DifLoop:
00B014  1               
00B014  1  B9 8F AF     		lda PRDiffAdjustData,y
00B017  1  95 01        		sta 1,x
00B019  1  C8           		iny
00B01A  1  C8           		iny
00B01B  1  C8           		iny
00B01C  1  C8           		iny
00B01D  1  CA           		dex
00B01E  1  10 F4        		bpl DifLoop
00B020  1  A6 08        		ldx ObjectOffset
00B022  1  20 AD BB     		jsr PlayerLakituDiff
00B025  1  A4 57        		ldy Player_X_Speed
00B027  1  C0 08        		cpy #8
00B029  1  B0 0E        		bcs loc_902D
00B02B  1  A8           		tay
00B02C  1  BD A8 07     		lda $7A8,x
00B02F  1  29 03        		and #3
00B031  1  F0 05        		beq loc_902C
00B033  1  98           		tya
00B034  1  49 FF        		eor #$FF
00B036  1  A8           		tay
00B037  1  C8           		iny
00B038  1               loc_902C:
00B038  1               
00B038  1  98           		tya
00B039  1               loc_902D:
00B039  1               
00B039  1  20 3D AF     		jsr SmallBBox
00B03C  1  A0 02        		ldy #2
00B03E  1  95 58        		sta $58,x
00B040  1  C9 00        		cmp #0
00B042  1  30 01        		bmi loc_9039
00B044  1  88           		dey
00B045  1               loc_9039:
00B045  1               
00B045  1  94 46        		sty $46,x
00B047  1  A9 FD        		lda #$FD
00B049  1  95 A0        		sta $A0,x
00B04B  1  A9 01        		lda #1
00B04D  1  95 0F        		sta $F,x
00B04F  1  A9 05        		lda #5
00B051  1  95 1E        		sta $1E,x
00B053  1               locret_9047:
00B053  1               
00B053  1  60           		rts
00B054  1               FirebarSpinSpdData:
00B054  1  28           		.byte $28
00B055  1  38           		.byte $38
00B056  1  28           		.byte $28
00B057  1  38           		.byte $38
00B058  1  28           		.byte $28
00B059  1               FirebarSpinDirData:
00B059  1  00           		.byte 0
00B05A  1  00           		.byte 0
00B05B  1  10           		.byte $10
00B05C  1  10           		.byte $10
00B05D  1  00           		.byte 0
00B05E  1               InitLongFirebar:
00B05E  1               
00B05E  1  20 92 B1     		jsr DuplicateEnemyObj
00B061  1               InitShortFirebar:
00B061  1               
00B061  1  A9 00        		lda #0
00B063  1  95 58        		sta Enemy_X_Speed,x
00B065  1  B5 16        		lda Enemy_ID,x
00B067  1  38           		sec
00B068  1  E9 1B        		sbc #$1B
00B06A  1  A8           		tay
00B06B  1               loc_905F:
00B06B  1               
00B06B  1  B9 54 B0     		lda FirebarSpinSpdData,y
00B06E  1  9D 88 03     		sta FirebarSpinSpeed,x
00B071  1  B9 59 B0     		lda FirebarSpinDirData,y
00B074  1  95 34        		sta FirebarSpinDirection,x
00B076  1  B5 CF        		lda Enemy_Y_Position,x
00B078  1  18           		clc
00B079  1  69 04        		adc #4
00B07B  1  95 CF        		sta Enemy_Y_Position,x
00B07D  1  B5 87        		lda Enemy_X_Position,x
00B07F  1  18           		clc
00B080  1  69 04        		adc #4
00B082  1  95 87        		sta Enemy_X_Position,x
00B084  1  B5 6E        		lda Enemy_PageLoc,x
00B086  1  69 00        		adc #0
00B088  1  95 6E        		sta Enemy_PageLoc,x
00B08A  1  4C 1A B4     		jmp TallBBox2
00B08D  1               FlyCCXPositionData:
00B08D  1  80           		.byte $80
00B08E  1  30           		.byte $30
00B08F  1  40           		.byte $40
00B090  1  80           		.byte $80
00B091  1  30           		.byte $30
00B092  1  50           		.byte $50
00B093  1  50           		.byte $50
00B094  1  70           		.byte $70
00B095  1  20           		.byte $20
00B096  1  40           		.byte $40
00B097  1  80           		.byte $80
00B098  1  A0           		.byte $A0
00B099  1  70           		.byte $70
00B09A  1  40           		.byte $40
00B09B  1  90           		.byte $90
00B09C  1  68           		.byte $68
00B09D  1               FlyCCXSpeedData:
00B09D  1  0E           		.byte $E
00B09E  1  05           		.byte 5
00B09F  1  06           		.byte 6
00B0A0  1  0E           		.byte $E
00B0A1  1  1C           		.byte $1C
00B0A2  1  20           		.byte $20
00B0A3  1  10           		.byte $10
00B0A4  1  0C           		.byte $C
00B0A5  1  1E           		.byte $1E
00B0A6  1  22           		.byte $22
00B0A7  1  18           		.byte $18
00B0A8  1  14           		.byte $14
00B0A9  1               FlyCCTimerData:
00B0A9  1  10           		.byte $10
00B0AA  1  60           		.byte $60
00B0AB  1  20           		.byte $20
00B0AC  1  48           		.byte $48
00B0AD  1               InitFlyingCheepCheep:
00B0AD  1               
00B0AD  1  AD 8F 07     		lda FrenzyEnemyTimer
00B0B0  1  D0 A1        		bne locret_9047
00B0B2  1  20 3D AF     		jsr SmallBBox
00B0B5  1               loc_90A9:
00B0B5  1               
00B0B5  1  BD A8 07     		lda $7A8,x
00B0B8  1  29 03        		and #3
00B0BA  1  A8           		tay
00B0BB  1  B9 A9 B0     		lda FlyCCTimerData,y
00B0BE  1  8D 8F 07     		sta FrenzyEnemyTimer
00B0C1  1  A0 03        		ldy #3
00B0C3  1  AD CC 06     		lda SecondaryHardMode
00B0C6  1  F0 01        		beq loc_90BD
00B0C8  1  C8           		iny
00B0C9  1               loc_90BD:
00B0C9  1               
00B0C9  1  84 00        		sty TMP_0
00B0CB  1  E4 00        		cpx TMP_0
00B0CD  1  B0 84        		bcs locret_9047
00B0CF  1  BD A7 07     		lda $7A7,x
00B0D2  1  29 03        		and #3
00B0D4  1  85 00        		sta TMP_0
00B0D6  1  85 01        		sta TMP_1
00B0D8  1  A9 FB        		lda #$FB
00B0DA  1  95 A0        		sta $A0,x
00B0DC  1  A9 00        		lda #0
00B0DE  1  A4 57        		ldy Player_X_Speed
00B0E0  1  F0 07        		beq loc_90DD
00B0E2  1  A9 04        		lda #4
00B0E4  1  C0 19        		cpy #$19
00B0E6  1  90 01        		bcc loc_90DD
00B0E8  1  0A           		asl
00B0E9  1               loc_90DD:
00B0E9  1               
00B0E9  1  48           		pha
00B0EA  1  18           		clc
00B0EB  1  65 00        		adc TMP_0
00B0ED  1  85 00        		sta TMP_0
00B0EF  1  BD A8 07     		lda $7A8,x
00B0F2  1  29 03        		and #3
00B0F4  1  F0 07        		beq loc_90F1
00B0F6  1  BD A9 07     		lda $7A9,x
00B0F9  1  29 0F        		and #$F
00B0FB  1  85 00        		sta TMP_0
00B0FD  1               loc_90F1:
00B0FD  1               
00B0FD  1  68           		pla
00B0FE  1  18           		clc
00B0FF  1  65 01        		adc TMP_1
00B101  1  A8           		tay
00B102  1  B9 9D B0     		lda FlyCCXSpeedData,y
00B105  1  95 58        		sta Enemy_X_Speed,x
00B107  1  A9 01        		lda #1
00B109  1  95 46        		sta Enemy_MovingDir,x
00B10B  1  A5 57        		lda Player_X_Speed
00B10D  1  D0 12        		bne loc_9115
00B10F  1  A4 00        		ldy TMP_0
00B111  1  98           		tya
00B112  1  29 02        		and #2
00B114  1  F0 0B        		beq loc_9115
00B116  1  B5 58        		lda Enemy_X_Speed,x
00B118  1  49 FF        		eor #$FF
00B11A  1  18           		clc
00B11B  1  69 01        		adc #1
00B11D  1  95 58        		sta Enemy_X_Speed,x
00B11F  1  F6 46        		inc Enemy_MovingDir,x
00B121  1               loc_9115:
00B121  1               
00B121  1  98           		tya
00B122  1  29 02        		and #2
00B124  1  F0 0F        		beq loc_9129
00B126  1  A5 86        		lda Player_X_Position
00B128  1  18           		clc
00B129  1  79 8D B0     		adc FlyCCXPositionData,y
00B12C  1  95 87        		sta Enemy_X_Position,x
00B12E  1  A5 6D        		lda Player_PageLoc
00B130  1  69 00        		adc #0
00B132  1  4C 41 B1     		jmp loc_9135
00B135  1               loc_9129:
00B135  1               
00B135  1  A5 86        		lda Player_X_Position
00B137  1  38           		sec
00B138  1  F9 8D B0     		sbc FlyCCXPositionData,y
00B13B  1  95 87        		sta Enemy_X_Position,x
00B13D  1  A5 6D        		lda Player_PageLoc
00B13F  1  E9 00        		sbc #0
00B141  1               loc_9135:
00B141  1               
00B141  1  95 6E        		sta Enemy_PageLoc,x
00B143  1  A9 01        		lda #1
00B145  1  95 0F        		sta $F,x
00B147  1  95 B6        		sta Enemy_Y_HighPos,x
00B149  1  A9 F8        		lda #$F8
00B14B  1  95 CF        		sta Enemy_Y_Position,x
00B14D  1  60           		rts
00B14E  1               InitBowser_NEW_MAYBE:
00B14E  1               
00B14E  1  A0 04        		ldy #4
00B150  1               loc_9144:
00B150  1               
00B150  1  C4 08        		cpy ObjectOffset
00B152  1  F0 0F        		beq loc_9157
00B154  1  B9 16 00     		lda Enemy_ID,y
00B157  1  C9 2D        		cmp #$2D
00B159  1  D0 08        		bne loc_9157
00B15B  1  A9 00        		lda #0
00B15D  1  99 16 00     		sta Enemy_ID,y
00B160  1  99 0F 00     		sta Enemy_Flag,y
00B163  1               loc_9157:
00B163  1               
00B163  1  88           		dey
00B164  1  10 EA        		bpl loc_9144
00B166  1  20 92 B1     		jsr DuplicateEnemyObj
00B169  1  8E 68 03     		stx BowserFront_Offset
00B16C  1  A9 00        		lda #0
00B16E  1  8D 63 03     		sta BowserBodyControls
00B171  1  8D 69 03     		sta BridgeCollapseOffset
00B174  1  B5 87        		lda $87,x
00B176  1  8D 66 03     		sta BowserOrigXPos
00B179  1  A9 DF        		lda #$DF
00B17B  1  8D 90 07     		sta BowserFireBreathTimer
00B17E  1  95 46        		sta $46,x
00B180  1  A9 20        		lda #$20
00B182  1  8D 64 03     		sta BowserFeetCounter
00B185  1  9D 8A 07     		sta $78A,x
00B188  1  A9 05        		lda #5
00B18A  1  8D 83 04     		sta BowserHitPoints
00B18D  1  4A           		lsr
00B18E  1  8D 65 03     		sta BowserMovementSpeed
00B191  1  60           		rts
00B192  1               DuplicateEnemyObj:
00B192  1               
00B192  1  A0 FF        		ldy #$FF
00B194  1               loc_9188:
00B194  1               
00B194  1  C8           		iny
00B195  1  B9 0F 00     		lda $F,y
00B198  1  D0 FA        		bne loc_9188
00B19A  1  8C CF 06     		sty DuplicateObj_Offset
00B19D  1  8A           		txa
00B19E  1  09 80        		ora #$80
00B1A0  1  99 0F 00     		sta $F,y
00B1A3  1  B5 6E        		lda $6E,x
00B1A5  1  99 6E 00     		sta $6E,y
00B1A8  1  B5 87        		lda $87,x
00B1AA  1  99 87 00     		sta $87,y
00B1AD  1  A9 01        		lda #1
00B1AF  1  95 0F        		sta $F,x
00B1B1  1  99 B6 00     		sta $B6,y
00B1B4  1  B5 CF        		lda $CF,x
00B1B6  1  99 CF 00     		sta $CF,y
00B1B9  1               locret_91AD:
00B1B9  1               
00B1B9  1  60           		rts
00B1BA  1               FlameYPosData:
00B1BA  1  90           		.byte $90
00B1BB  1  80           		.byte $80
00B1BC  1  70           		.byte $70
00B1BD  1  90           		.byte $90
00B1BE  1               FlameYMFAdderData:
00B1BE  1  FF           		.byte $FF
00B1BF  1  01           		.byte 1
00B1C0  1               InitBowserFlame:
00B1C0  1               
00B1C0  1  AD 8F 07     		lda FrenzyEnemyTimer
00B1C3  1  D0 F4        		bne locret_91AD
00B1C5  1  9D 34 04     		sta $434,x
00B1C8  1  A5 FD        		lda NoiseSoundQueue
00B1CA  1  09 02        		ora #2
00B1CC  1  85 FD        		sta NoiseSoundQueue
00B1CE  1  AC 68 03     		ldy BowserFront_Offset
00B1D1  1  B9 16 00     		lda $16,y
00B1D4  1  C9 2D        		cmp #$2D
00B1D6  1  F0 31        		beq loc_91FD
00B1D8  1  20 1D BE     		jsr sub_9E0E
00B1DB  1  18           		clc
00B1DC  1  69 20        		adc #$20
00B1DE  1  AC CC 06     		ldy SecondaryHardMode
00B1E1  1  F0 03        		beq loc_91DA
00B1E3  1  38           		sec
00B1E4  1  E9 10        		sbc #$10
00B1E6  1               loc_91DA:
00B1E6  1               
00B1E6  1  8D 8F 07     		sta FrenzyEnemyTimer
00B1E9  1  BD A7 07     		lda PseudoRandomBitReg,x
00B1EC  1  29 03        		and #3
00B1EE  1  9D 17 04     		sta PiranhaPlantUpYPos,x
00B1F1  1  A8           		tay
00B1F2  1  B9 BA B1     		lda FlameYPosData,y
00B1F5  1               sub_91E9:
00B1F5  1               
00B1F5  1  95 CF        		sta Enemy_Y_Position,x
00B1F7  1  AD 1D 07     		lda ScreenRight_X_Pos
00B1FA  1  18           		clc
00B1FB  1  69 20        		adc #$20
00B1FD  1  95 87        		sta Enemy_X_Position,x
00B1FF  1  AD 1B 07     		lda ScreenRight_PageLoc
00B202  1  69 00        		adc #0
00B204  1  95 6E        		sta Enemy_PageLoc,x
00B206  1  4C 3C B2     		jmp loc_9230
00B209  1               loc_91FD:
00B209  1               
00B209  1  B9 87 00     		lda Enemy_X_Position,y
00B20C  1  38           		sec
00B20D  1  E9 0E        		sbc #$E
00B20F  1  95 87        		sta Enemy_X_Position,x
00B211  1  B9 6E 00     		lda Enemy_PageLoc,y
00B214  1  95 6E        		sta Enemy_PageLoc,x
00B216  1  B9 CF 00     		lda Enemy_Y_Position,y
00B219  1  18           		clc
00B21A  1  69 08        		adc #8
00B21C  1  95 CF        		sta Enemy_Y_Position,x
00B21E  1  BD A7 07     		lda $7A7,x
00B221  1  29 03        		and #3
00B223  1  9D 17 04     		sta $417,x
00B226  1  A8           		tay
00B227  1  B9 BA B1     		lda FlameYPosData,y
00B22A  1  A0 00        		ldy #0
00B22C  1  D5 CF        		cmp Enemy_Y_Position,x
00B22E  1  90 01        		bcc loc_9225
00B230  1  C8           		iny
00B231  1               loc_9225:
00B231  1               
00B231  1  B9 BE B1     		lda FlameYMFAdderData,y
00B234  1  9D 34 04     		sta $434,x
00B237  1  A9 00        		lda #0
00B239  1  8D CB 06     		sta EnemyFrenzyBuffer
00B23C  1               loc_9230:
00B23C  1               
00B23C  1  A9 08        		lda #8
00B23E  1  9D 9A 04     		sta $49A,x
00B241  1  A9 01        		lda #1
00B243  1  95 B6        		sta $B6,x
00B245  1  95 0F        		sta $F,x
00B247  1  4A           		lsr
00B248  1  9D 01 04     		sta $401,x
00B24B  1  95 1E        		sta $1E,x
00B24D  1  60           		rts
00B24E  1               FireworksXPosData:
00B24E  1  00           		.byte 0
00B24F  1  30           		.byte $30
00B250  1  60           		.byte $60
00B251  1  60           		.byte $60
00B252  1  00           		.byte 0
00B253  1  20           		.byte $20
00B254  1               FireworksYPosData:
00B254  1  60           		.byte $60
00B255  1  40           		.byte $40
00B256  1  70           		.byte $70
00B257  1  40           		.byte $40
00B258  1  60           		.byte $60
00B259  1  30           		.byte $30
00B25A  1               InitFireworks:
00B25A  1               
00B25A  1  AD 8F 07     		lda FrenzyEnemyTimer
00B25D  1  D0 47        		bne locret_929A
00B25F  1  A9 20        		lda #$20
00B261  1  8D 8F 07     		sta FrenzyEnemyTimer
00B264  1  CE D7 06     		dec FireworksCounter
00B267  1  A0 06        		ldy #6
00B269  1               loc_925D:
00B269  1               
00B269  1  88           		dey
00B26A  1  B9 16 00     		lda $16,y
00B26D  1  C9 31        		cmp #$31
00B26F  1  D0 F8        		bne loc_925D
00B271  1  B9 87 00     		lda $87,y
00B274  1  38           		sec
00B275  1  E9 30        		sbc #$30
00B277  1  48           		pha
00B278  1  B9 6E 00     		lda $6E,y
00B27B  1  E9 00        		sbc #0
00B27D  1  85 00        		sta TMP_0
00B27F  1  AD D7 06     		lda FireworksCounter
00B282  1  18           		clc
00B283  1  79 1E 00     		adc $1E,y
00B286  1  A8           		tay
00B287  1  68           		pla
00B288  1  18           		clc
00B289  1  79 4E B2     		adc FireworksXPosData,y
00B28C  1  95 87        		sta $87,x
00B28E  1  A5 00        		lda TMP_0
00B290  1  69 00        		adc #0
00B292  1  95 6E        		sta $6E,x
00B294  1  B9 54 B2     		lda FireworksYPosData,y
00B297  1  95 CF        		sta $CF,x
00B299  1  A9 01        		lda #1
00B29B  1  95 B6        		sta $B6,x
00B29D  1  95 0F        		sta $F,x
00B29F  1  4A           		lsr
00B2A0  1  95 58        		sta $58,x
00B2A2  1  A9 08        		lda #8
00B2A4  1  95 A0        		sta $A0,x
00B2A6  1               locret_929A:
00B2A6  1               
00B2A6  1  60           		rts
00B2A7  1               Bitmasks:
00B2A7  1  01           		.byte 1
00B2A8  1  02           		.byte 2
00B2A9  1  04           		.byte 4
00B2AA  1  08           		.byte 8
00B2AB  1  10           		.byte $10
00B2AC  1  20           		.byte $20
00B2AD  1  40           		.byte $40
00B2AE  1  80           		.byte $80
00B2AF  1               Enemy17YPosData:
00B2AF  1  40           		.byte $40
00B2B0  1  30           		.byte $30
00B2B1  1  90           		.byte $90
00B2B2  1  50           		.byte $50
00B2B3  1  20           		.byte $20
00B2B4  1  60           		.byte $60
00B2B5  1  A0           		.byte $A0
00B2B6  1  70           		.byte $70
00B2B7  1               SwimCC_IDData:
00B2B7  1  0A           		.byte $A
00B2B8  1  0B           		.byte $B
00B2B9  1               BulletBillCheepCheep:
00B2B9  1               
00B2B9  1  AD 8F 07     		lda FrenzyEnemyTimer
00B2BC  1  D0 6F        		bne locret_9321
00B2BE  1  AD 4E 07     		lda AreaType
00B2C1  1  D0 57        		bne loc_930E
00B2C3  1  E0 03        		cpx #3
00B2C5  1  B0 66        		bcs locret_9321
00B2C7  1  A0 00        		ldy #0
00B2C9  1  BD A7 07     		lda PseudoRandomBitReg,x
00B2CC  1               loc_92C0:
00B2CC  1               
00B2CC  1  C9 AA        		cmp #$AA
00B2CE  1  90 01        		bcc loc_92C5
00B2D0  1  C8           		iny
00B2D1  1               loc_92C5:
00B2D1  1               
00B2D1  1  AD 5F 07     		lda WorldNumber
00B2D4  1  C9 01        		cmp #1
00B2D6  1  F0 01        		beq loc_92CD
00B2D8  1  C8           		iny
00B2D9  1               loc_92CD:
00B2D9  1               
00B2D9  1  98           		tya
00B2DA  1  29 01        		and #1
00B2DC  1  A8           		tay
00B2DD  1  B9 B7 B2     		lda SwimCC_IDData,y
00B2E0  1               loc_92D4:
00B2E0  1               
00B2E0  1  95 16        		sta $16,x
00B2E2  1  AD DD 06     		lda BitMFilter
00B2E5  1  C9 FF        		cmp #$FF
00B2E7  1  D0 05        		bne loc_92E2
00B2E9  1  A9 00        		lda #0
00B2EB  1  8D DD 06     		sta BitMFilter
00B2EE  1               loc_92E2:
00B2EE  1               
00B2EE  1  BD A7 07     		lda $7A7,x
00B2F1  1  29 07        		and #7
00B2F3  1               loc_92E7:
00B2F3  1               
00B2F3  1  A8           		tay
00B2F4  1  B9 A7 B2     		lda Bitmasks,y
00B2F7  1  2C DD 06     		bit BitMFilter
00B2FA  1  F0 07        		beq loc_92F7
00B2FC  1  C8           		iny
00B2FD  1  98           		tya
00B2FE  1  29 07        		and #7
00B300  1  4C F3 B2     		jmp loc_92E7
00B303  1               loc_92F7:
00B303  1               
00B303  1  0D DD 06     		ora BitMFilter
00B306  1  8D DD 06     		sta BitMFilter
00B309  1  B9 AF B2     		lda Enemy17YPosData,y
00B30C  1  20 F5 B1     		jsr sub_91E9
00B30F  1  9D 17 04     		sta $417,x
00B312  1  A9 20        		lda #$20
00B314  1  8D 8F 07     		sta FrenzyEnemyTimer
00B317  1  4C 5C AE     		jmp CheckpointEnemyID
00B31A  1               loc_930E:
00B31A  1               
00B31A  1  A0 FF        		ldy #$FF
00B31C  1               loc_9310:
00B31C  1               
00B31C  1  C8           		iny
00B31D  1  C0 05        		cpy #5
00B31F  1  B0 0D        		bcs loc_9322
00B321  1  B9 0F 00     		lda $F,y
00B324  1  F0 F6        		beq loc_9310
00B326  1  B9 16 00     		lda $16,y
00B329  1  C9 08        		cmp #8
00B32B  1  D0 EF        		bne loc_9310
00B32D  1               locret_9321:
00B32D  1               
00B32D  1  60           		rts
00B32E  1               loc_9322:
00B32E  1               
00B32E  1  A5 FE        		lda Square2SoundQueue
00B330  1  09 08        		ora #8
00B332  1  85 FE        		sta Square2SoundQueue
00B334  1  A9 08        		lda #8
00B336  1  D0 A8        		bne loc_92D4
00B338  1               loc_932C:
00B338  1               
00B338  1  A0 00        		ldy #0
00B33A  1  38           		sec
00B33B  1  E9 37        		sbc #$37
00B33D  1  48           		pha
00B33E  1  C9 04        		cmp #4
00B340  1  B0 0B        		bcs loc_9341
00B342  1  48           		pha
00B343  1  A0 06        		ldy #6
00B345  1  AD 6A 07     		lda PrimaryHardMode
00B348  1  F0 02        		beq loc_9340
00B34A  1  A0 02        		ldy #2
00B34C  1               loc_9340:
00B34C  1               
00B34C  1  68           		pla
00B34D  1               loc_9341:
00B34D  1               
00B34D  1  84 01        		sty TMP_1
00B34F  1  A0 B0        		ldy #$B0
00B351  1  29 02        		and #2
00B353  1  F0 02        		beq loc_934B
00B355  1  A0 70        		ldy #$70
00B357  1               loc_934B:
00B357  1               
00B357  1  84 00        		sty TMP_0
00B359  1  AD 1B 07     		lda ScreenRight_PageLoc
00B35C  1  85 02        		sta byte_2
00B35E  1  AD 1D 07     		lda ScreenRight_X_Pos
00B361  1  85 03        		sta byte_3
00B363  1  A0 02        		ldy #2
00B365  1  68           		pla
00B366  1  4A           		lsr
00B367  1  90 01        		bcc loc_935E
00B369  1  C8           		iny
00B36A  1               loc_935E:
00B36A  1  8C D3 06     		sty NumberofGroupEnemies
00B36D  1               loc_9361:
00B36D  1  A2 FF        		ldx #$FF
00B36F  1               loc_9363:
00B36F  1  E8           		inx
00B370  1  E0 05        		cpx #5
00B372  1  B0 2D        		bcs loc_9395
00B374  1  B5 0F        		lda $F,x
00B376  1  D0 F7        		bne loc_9363
00B378  1  A5 01        		lda TMP_1
00B37A  1  95 16        		sta $16,x
00B37C  1  A5 02        		lda byte_2
00B37E  1  95 6E        		sta $6E,x
00B380  1  A5 03        		lda byte_3
00B382  1  95 87        		sta $87,x
00B384  1  18           		clc
00B385  1  69 18        		adc #$18
00B387  1  85 03        		sta byte_3
00B389  1  A5 02        		lda byte_2
00B38B  1  69 00        		adc #0
00B38D  1  85 02        		sta byte_2
00B38F  1  A5 00        		lda TMP_0
00B391  1  95 CF        		sta $CF,x
00B393  1  A9 01        		lda #1
00B395  1  95 B6        		sta $B6,x
00B397  1  95 0F        		sta $F,x
00B399  1  20 5C AE     		jsr CheckpointEnemyID
00B39C  1  CE D3 06     		dec NumberofGroupEnemies
00B39F  1  D0 CC        		bne loc_9361
00B3A1  1               loc_9395:
00B3A1  1               
00B3A1  1  4C 4E AE     		jmp loc_8E42
00B3A4  1               loc_9398:
00B3A4  1               
00B3A4  1  A9 22        		lda #$22
00B3A6  1               loc_939A:
00B3A6  1               
00B3A6  1  85 00        		sta TMP_0
00B3A8  1  A9 13        		lda #$13
00B3AA  1  85 01        		sta TMP_1
00B3AC  1  AD FB 07     		lda IsPlayingExtendedWorlds
00B3AF  1  D0 0D        		bne loc_93B2
00B3B1  1  AD 5F 07     		lda WorldNumber
00B3B4  1  C9 03        		cmp #3
00B3B6  1  B0 06        		bcs loc_93B2
00B3B8  1  C6 00        		dec TMP_0
00B3BA  1  A9 21        		lda #$21
00B3BC  1  85 01        		sta TMP_1
00B3BE  1               loc_93B2:
00B3BE  1               
00B3BE  1  A5 00        		lda TMP_0
00B3C0  1  8D 3D 64     		sta WRAM_PiranhaPlantAttributeData
00B3C3  1  A5 01        		lda TMP_1
00B3C5  1  8D 52 64     		sta WRAM_PiranhaPlantDist
00B3C8  1  A9 01        		lda #1
00B3CA  1  95 58        		sta Enemy_X_Speed,x
00B3CC  1  4A           		lsr
00B3CD  1  95 1E        		sta Enemy_State,x
00B3CF  1  95 A0        		sta ExplosionTimerCounter,x
00B3D1  1  B5 CF        		lda Enemy_Y_Position,x
00B3D3  1  9D 34 04     		sta PiranhaPlantDownYPos,x
00B3D6  1  38           		sec
00B3D7  1  E9 18        		sbc #$18
00B3D9  1  9D 17 04     		sta PiranhaPlantUpYPos,x
00B3DC  1  A9 09        		lda #9
00B3DE  1  4C 1C B4     		jmp SetBBox2
00B3E1  1               InitEnemyFrenzy:
00B3E1  1               
00B3E1  1  B5 16        		lda Enemy_ID,x
00B3E3  1  8D CB 06     		sta EnemyFrenzyBuffer
00B3E6  1  38           		sec
00B3E7  1  E9 12        		sbc #$12
00B3E9  1  20 FC 8C     		jsr JumpEngine
00B3EC  1  9B AF        		.word LakituAndSpinyHandler
00B3EE  1  F8 B3        		.word NoFrenzyCode
00B3F0  1  AD B0        		.word InitFlyingCheepCheep
00B3F2  1  C0 B1        		.word InitBowserFlame
00B3F4  1  5A B2        		.word InitFireworks
00B3F6  1  B9 B2        		.word BulletBillCheepCheep
00B3F8  1               NoFrenzyCode:
00B3F8  1               
00B3F8  1  60           		rts
00B3F9  1               loc_93ED:
00B3F9  1               
00B3F9  1  A0 05        		ldy #5
00B3FB  1               loc_93EF:
00B3FB  1               
00B3FB  1  B9 16 00     		lda Enemy_ID,y
00B3FE  1  C9 11        		cmp #$11
00B400  1  D0 05        		bne loc_93FB
00B402  1  A9 01        		lda #1
00B404  1  99 1E 00     		sta Enemy_State,y
00B407  1               loc_93FB:
00B407  1               
00B407  1  88           		dey
00B408  1  10 F1        		bpl loc_93EF
00B40A  1  A9 00        		lda #0
00B40C  1  8D CB 06     		sta EnemyFrenzyBuffer
00B40F  1  95 0F        		sta Enemy_Flag,x
00B411  1  60           		rts
00B412  1               InitJumpGPTroopa:
00B412  1               
00B412  1  A9 02        		lda #2
00B414  1  95 46        		sta Enemy_MovingDir,x
00B416  1  A9 F4        		lda #$F4
00B418  1  95 58        		sta Enemy_X_Speed,x
00B41A  1               TallBBox2:
00B41A  1               
00B41A  1  A9 03        		lda #3
00B41C  1               SetBBox2:
00B41C  1               
00B41C  1  9D 9A 04     		sta Enemy_BoundBoxCtrl,x
00B41F  1  60           		rts
00B420  1               InitBalPlatform:
00B420  1               
00B420  1  D6 CF        		dec Enemy_Y_Position,x
00B422  1  D6 CF        		dec Enemy_Y_Position,x
00B424  1  AC CC 06     		ldy SecondaryHardMode
00B427  1  D0 05        		bne loc_9422
00B429  1  A0 02        		ldy #2
00B42B  1  20 B2 B4     		jsr PosPlatform
00B42E  1               loc_9422:
00B42E  1               
00B42E  1  A0 FF        		ldy #$FF
00B430  1  AD A0 03     		lda BalPlatformAlignment
00B433  1  95 1E        		sta $1E,x
00B435  1  10 02        		bpl loc_942D
00B437  1  8A           		txa
00B438  1  A8           		tay
00B439  1               loc_942D:
00B439  1               
00B439  1  8C A0 03     		sty BalPlatformAlignment
00B43C  1  A9 00        		lda #0
00B43E  1  95 46        		sta $46,x
00B440  1  A8           		tay
00B441  1  20 B2 B4     		jsr PosPlatform
00B444  1               InitDropPlatform:
00B444  1               
00B444  1  A9 FF        		lda #$FF
00B446  1  9D A2 03     		sta HammerThrowingTimer,x
00B449  1  4C 69 B4     		jmp CommonPlatCode
00B44C  1               InitHoriPlatform:
00B44C  1               
00B44C  1  A9 00        		lda #0
00B44E  1  95 58        		sta Enemy_X_Speed,x
00B450  1  4C 69 B4     		jmp CommonPlatCode
00B453  1               InitVertPlatform:
00B453  1               
00B453  1  A0 40        		ldy #$40
00B455  1  B5 CF        		lda Enemy_Y_Position,x
00B457  1  10 07        		bpl loc_9454
00B459  1  49 FF        		eor #$FF
00B45B  1  18           		clc
00B45C  1  69 01        		adc #1
00B45E  1  A0 C0        		ldy #$C0
00B460  1               loc_9454:
00B460  1               
00B460  1  9D 01 04     		sta $401,x
00B463  1  98           		tya
00B464  1  18           		clc
00B465  1  75 CF        		adc $CF,x
00B467  1  95 58        		sta $58,x
00B469  1               CommonPlatCode:
00B469  1               
00B469  1  20 5A AF     		jsr InitVStf
00B46C  1               SPBBox:
00B46C  1               
00B46C  1  A9 05        		lda #5
00B46E  1  AC 4E 07     		ldy AreaType
00B471  1  C0 03        		cpy #3
00B473  1  F0 07        		beq loc_9470
00B475  1  AC CC 06     		ldy SecondaryHardMode
00B478  1  D0 02        		bne loc_9470
00B47A  1  A9 06        		lda #6
00B47C  1               loc_9470:
00B47C  1               
00B47C  1  9D 9A 04     		sta $49A,x
00B47F  1  60           		rts
00B480  1               LargeLiftUp:
00B480  1               
00B480  1  20 8C B4     		jsr PlatLiftUp
00B483  1  4C 89 B4     		jmp LargeLiftBBox
00B486  1               LargeLiftDown:
00B486  1               
00B486  1  20 98 B4     		jsr PlatLiftDown
00B489  1               LargeLiftBBox:
00B489  1               
00B489  1  4C 6C B4     		jmp SPBBox
00B48C  1               PlatLiftUp:
00B48C  1               
00B48C  1  A9 10        		lda #$10
00B48E  1  9D 34 04     		sta PiranhaPlantDownYPos,x
00B491  1  A9 FF        		lda #$FF
00B493  1  95 A0        		sta ExplosionTimerCounter,x
00B495  1  4C A1 B4     		jmp CommonSmallLift
00B498  1               PlatLiftDown:
00B498  1               
00B498  1  A9 F0        		lda #$F0
00B49A  1  9D 34 04     		sta $434,x
00B49D  1  A9 00        		lda #0
00B49F  1  95 A0        		sta $A0,x
00B4A1  1               CommonSmallLift:
00B4A1  1               
00B4A1  1  A0 01        		ldy #1
00B4A3  1  20 B2 B4     		jsr PosPlatform
00B4A6  1  A9 04        		lda #4
00B4A8  1  9D 9A 04     		sta $49A,x
00B4AB  1  60           		rts
00B4AC  1               PlatPosDataLow:
00B4AC  1  08           		.byte 8
00B4AD  1  0C           		.byte $C
00B4AE  1  F8           		.byte $F8
00B4AF  1               PlatPosDataHigh:
00B4AF  1  00           		.byte 0
00B4B0  1  00           		.byte 0
00B4B1  1  FF           		.byte $FF
00B4B2  1               PosPlatform:
00B4B2  1               
00B4B2  1  B5 87        		lda Enemy_X_Position,x
00B4B4  1  18           		clc
00B4B5  1  79 AC B4     		adc PlatPosDataLow,y
00B4B8  1  95 87        		sta Enemy_X_Position,x
00B4BA  1  B5 6E        		lda Enemy_PageLoc,x
00B4BC  1  79 AF B4     		adc PlatPosDataHigh,y
00B4BF  1  95 6E        		sta Enemy_PageLoc,x
00B4C1  1  60           		rts
00B4C2  1               EndOfEnemyInitCode:
00B4C2  1               
00B4C2  1  60           		rts
00B4C3  1               RunEnemyObjectsCore:
00B4C3  1               
00B4C3  1  A6 08        		ldx ObjectOffset
00B4C5  1  A9 00        		lda #0
00B4C7  1  B4 16        		ldy Enemy_ID,x
00B4C9  1  C0 15        		cpy #$15
00B4CB  1  90 03        		bcc JmpEO
00B4CD  1  98           		tya
00B4CE  1  E9 14        		sbc #$14
00B4D0  1               JmpEO:
00B4D0  1               
00B4D0  1  20 FC 8C     		jsr JumpEngine
00B4D3  1  21 B5        		.word RunNormalEnemies
00B4D5  1  76 B5        		.word RunBowserFlame
00B4D7  1  D9 BE        		.word RunFireworks
00B4D9  1  17 B5        		.word NoRunCode
00B4DB  1  17 B5        		.word NoRunCode
00B4DD  1  17 B5        		.word NoRunCode
00B4DF  1  17 B5        		.word NoRunCode
00B4E1  1  88 B5        		.word RunFirebarObj
00B4E3  1  88 B5        		.word RunFirebarObj
00B4E5  1  88 B5        		.word RunFirebarObj
00B4E7  1  88 B5        		.word RunFirebarObj
00B4E9  1  88 B5        		.word RunFirebarObj
00B4EB  1  88 B5        		.word RunFirebarObj
00B4ED  1  88 B5        		.word RunFirebarObj
00B4EF  1  88 B5        		.word RunFirebarObj
00B4F1  1  17 B5        		.word NoRunCode
00B4F3  1  A6 B5        		.word RunLargePlatform
00B4F5  1  A6 B5        		.word RunLargePlatform
00B4F7  1  A6 B5        		.word RunLargePlatform
00B4F9  1  A6 B5        		.word RunLargePlatform
00B4FB  1  A6 B5        		.word RunLargePlatform
00B4FD  1  A6 B5        		.word RunLargePlatform
00B4FF  1  A6 B5        		.word RunLargePlatform
00B501  1  8E B5        		.word RunSmallPlatform
00B503  1  8E B5        		.word RunSmallPlatform
00B505  1  A9 BC        		.word RunBowser
00B507  1  42 A8        		.word PowerUpObjHandler
00B509  1  DE A4        		.word VineObjectHandler
00B50B  1  17 B5        		.word NoRunCode
00B50D  1  16 BF        		.word RunStarFlagObj
00B50F  1  38 A4        		.word JumpspringHandler
00B511  1  17 B5        		.word NoRunCode
00B513  1  1A A3        		.word WarpZoneObject
00B515  1  18 B5        		.word RunRetainerObj
00B517  1               NoRunCode:
00B517  1               
00B517  1  60           		rts
00B518  1               RunRetainerObj:
00B518  1               
00B518  1  20 3C DE     		jsr GetEnemyOffscreenBits
00B51B  1  20 DF DD     		jsr RelativeEnemyPosition
00B51E  1  4C D4 D4     		jmp EnemyGfxHandler
00B521  1               RunNormalEnemies:
00B521  1               
00B521  1  A9 00        		lda #0
00B523  1  9D C5 03     		sta Enemy_SprAttrib,x
00B526  1  20 3C DE     		jsr GetEnemyOffscreenBits
00B529  1  20 DF DD     		jsr RelativeEnemyPosition
00B52C  1  20 D4 D4     		jsr EnemyGfxHandler
00B52F  1  20 A4 CE     		jsr GetEnemyBoundBox
00B532  1  20 0D CC     		jsr EnemyToBGCollisionDet
00B535  1  20 8D C6     		jsr EnemiesCollision
00B538  1  20 9C C4     		jsr PlayerEnemyCollision
00B53B  1  AC 47 07     		ldy TimerControl
00B53E  1  D0 03        		bne SkipMove
00B540  1  20 46 B5     		jsr EnemyMovementSubs
00B543  1               SkipMove:
00B543  1               
00B543  1  4C A5 C2     		jmp OffscreenBoundsCheck
00B546  1               EnemyMovementSubs:
00B546  1               
00B546  1  B5 16        		lda Enemy_ID,x
00B548  1  20 FC 8C     		jsr JumpEngine
00B54B  1  B8 B6        		.word MoveNormalEnemy
00B54D  1  B8 B6        		.word MoveNormalEnemy
00B54F  1  B8 B6        		.word MoveNormalEnemy
00B551  1  B8 B6        		.word MoveNormalEnemy
00B553  1  68 E2        		.word MoveUpsideDownPiranhaPlant
00B555  1  19 B6        		.word ProcHammerBro
00B557  1  B8 B6        		.word MoveNormalEnemy
00B559  1  CA B7        		.word MoveBloober
00B55B  1  77 B8        		.word MoveBulletBill
00B55D  1  75 B5        		.word NoMoveCode
00B55F  1  8B B8        		.word MoveSwimmingCheepCheep
00B561  1  8B B8        		.word MoveSwimmingCheepCheep
00B563  1  F1 B5        		.word MovePodoboo
00B565  1  CC BF        		.word MovePiranhaPlant
00B567  1  3A B7        		.word MoveJumpingEnemy
00B569  1  40 B7        		.word ProcMoveRedPTroopa
00B56B  1  66 B7        		.word MoveFlyGreenPTroopa
00B56D  1  69 BB        		.word MoveLakitu
00B56F  1  B8 B6        		.word MoveNormalEnemy
00B571  1  75 B5        		.word NoMoveCode
00B573  1  20 BB        		.word MoveFlyingCheepCheep
00B575  1               
00B575  1               NoMoveCode:
00B575  1  60           		rts
00B576  1               
00B576  1               RunBowserFlame:
00B576  1               
00B576  1  20 2F BE     		jsr ProcBowserFlame
00B579  1  20 3C DE     		jsr GetEnemyOffscreenBits
00B57C  1  20 DF DD     		jsr RelativeEnemyPosition
00B57F  1  20 A4 CE     		jsr GetEnemyBoundBox
00B582  1  20 9C C4     		jsr PlayerEnemyCollision
00B585  1  4C A5 C2     		jmp OffscreenBoundsCheck
00B588  1               RunFirebarObj:
00B588  1               
00B588  1  20 7D B9     		jsr ProcFirebar
00B58B  1  4C A5 C2     		jmp OffscreenBoundsCheck
00B58E  1               RunSmallPlatform:
00B58E  1               
00B58E  1  20 3C DE     		jsr GetEnemyOffscreenBits
00B591  1  20 DF DD     		jsr RelativeEnemyPosition
00B594  1  20 AD CE     		jsr SmallPlatformBoundBox
00B597  1  20 E1 C7     		jsr SmallPlatformCollision
00B59A  1  20 DF DD     		jsr RelativeEnemyPosition
00B59D  1  20 E9 D9     		jsr DrawSmallPlatform
00B5A0  1  20 80 C2     		jsr MoveSmallPlatform
00B5A3  1  4C A5 C2     		jmp OffscreenBoundsCheck
00B5A6  1               RunLargePlatform:
00B5A6  1               
00B5A6  1  20 3C DE     		jsr GetEnemyOffscreenBits
00B5A9  1  20 DF DD     		jsr RelativeEnemyPosition
00B5AC  1  20 D4 CE     		jsr LargePlatformBoundBox
00B5AF  1  20 AB C7     		jsr LargePlatformCollision
00B5B2  1  AD 47 07     		lda TimerControl
00B5B5  1  D0 03        		bne loc_95AE
00B5B7  1  20 C3 B5     		jsr LargePlatformSubroutines
00B5BA  1               loc_95AE:
00B5BA  1               
00B5BA  1  20 DF DD     		jsr RelativeEnemyPosition
00B5BD  1  20 31 D2     		jsr DrawLargePlatform
00B5C0  1  4C A5 C2     		jmp OffscreenBoundsCheck
00B5C3  1               LargePlatformSubroutines:
00B5C3  1               
00B5C3  1  B5 16        		lda Enemy_ID,x
00B5C5  1  38           		sec
00B5C6  1  E9 24        		sbc #$24
00B5C8  1  20 FC 8C     		jsr JumpEngine
00B5CB  1  56 C0        		.word BalancePlatform
00B5CD  1  FE C1        		.word YMovingPlatform
00B5CF  1  7A C2        		.word MoveLargeLiftPlat
00B5D1  1  7A C2        		.word MoveLargeLiftPlat
00B5D3  1  32 C2        		.word XMovingPlatform
00B5D5  1  5C C2        		.word DropPlatform
00B5D7  1  68 C2        		.word RightPlatform
00B5D9  1               EraseEnemyObject:
00B5D9  1               
00B5D9  1  A9 00        		lda #0
00B5DB  1  95 0F        		sta Enemy_Flag,x
00B5DD  1  95 16        		sta Enemy_ID,x
00B5DF  1  95 1E        		sta Enemy_State,x
00B5E1  1  9D 10 01     		sta FloateyNum_Control,x
00B5E4  1  9D 96 07     		sta EnemyIntervalTimer,x
00B5E7  1  9D 25 01     		sta ShellChainCounter,x
00B5EA  1  9D C5 03     		sta Enemy_SprAttrib,x
00B5ED  1  9D 8A 07     		sta EnemyFrameTimer,x
00B5F0  1  60           		rts
00B5F1  1               MovePodoboo:
00B5F1  1               
00B5F1  1  BD 96 07     		lda EnemyIntervalTimer,x
00B5F4  1  D0 16        		bne loc_9600
00B5F6  1  20 E7 AE     		jsr InitPodoboo
00B5F9  1  BD A8 07     		lda PseudoRandomBitReg+1,x
00B5FC  1  09 80        		ora #$80
00B5FE  1  9D 34 04     		sta $434,x
00B601  1  29 0F        		and #$F
00B603  1  09 06        		ora #6
00B605  1  9D 96 07     		sta $796,x
00B608  1  A9 F9        		lda #$F9
00B60A  1  95 A0        		sta $A0,x
00B60C  1               loc_9600:
00B60C  1               
00B60C  1  4C 67 AB     		jmp MoveJ_EnemyVertically
00B60F  1               HammerThrowTmrData:
00B60F  1  30           		.byte $30
00B610  1  1C           		.byte $1C
00B611  1               XSpeedAdderData:
00B611  1  00           		.byte 0
00B612  1  E8           		.byte $E8
00B613  1  00           		.byte 0
00B614  1  18           		.byte $18
00B615  1               RevivedXSpeed:
00B615  1  08           		.byte 8
00B616  1  F8           		.byte $F8
00B617  1  0C           		.byte $C
00B618  1  F4           		.byte $F4
00B619  1               
00B619  1               ProcHammerBro:
00B619  1  B5 1E        		lda Enemy_State,x
00B61B  1  29 20        		and #$20
00B61D  1  F0 03        		beq ChkJH
00B61F  1  4C 26 B7     		jmp MoveDefeatedEnemy
00B622  1               ChkJH:
00B622  1  B5 3C        		lda HammerBroJumpTimer,x
00B624  1  F0 2D        		beq loc_9647
00B626  1  D6 3C        		dec HammerBroJumpTimer,x
00B628  1  AD D1 03     		lda Enemy_OffscreenBits
00B62B  1  29 0C        		and #$C
00B62D  1  D0 6A        		bne MoveHammerBroXDir
00B62F  1  BD A2 03     		lda $3A2,x
00B632  1  D0 17        		bne loc_963F
00B634  1  AC CC 06     		ldy SecondaryHardMode
00B637  1  B9 0F B6     		lda HammerThrowTmrData,y
00B63A  1  9D A2 03     		sta $3A2,x
00B63D  1  20 66 A6     		jsr SpawnHammerObj
00B640  1  90 09        		bcc loc_963F
00B642  1  B5 1E        		lda $1E,x
00B644  1  09 08        		ora #8
00B646  1  95 1E        		sta $1E,x
00B648  1  4C 99 B6     		jmp MoveHammerBroXDir
00B64B  1               loc_963F:
00B64B  1  DE A2 03     		dec $3A2,x
00B64E  1  4C 99 B6     		jmp MoveHammerBroXDir
00B651  1               
00B651  1               HammerBroJumpLData:
00B651  1  20 37        		.byte $20, $37
00B653  1               loc_9647:
00B653  1               
00B653  1  B5 1E        		lda $1E,x
00B655  1  29 07        		and #7
00B657  1  C9 01        		cmp #1
00B659  1  F0 3E        		beq MoveHammerBroXDir
00B65B  1  A9 00        		lda #0
00B65D  1  85 00        		sta TMP_0
00B65F  1  A0 FA        		ldy #$FA
00B661  1  B5 CF        		lda $CF,x
00B663  1  30 13        		bmi loc_966C
00B665  1  A0 FD        		ldy #$FD
00B667  1  C9 70        		cmp #$70
00B669  1  E6 00        		inc TMP_0
00B66B  1  90 0B        		bcc loc_966C
00B66D  1  C6 00        		dec TMP_0
00B66F  1  BD A8 07     		lda $7A8,x
00B672  1  29 01        		and #1
00B674  1  D0 02        		bne loc_966C
00B676  1  A0 FA        		ldy #$FA
00B678  1               loc_966C:
00B678  1               
00B678  1  94 A0        		sty $A0,x
00B67A  1  B5 1E        		lda $1E,x
00B67C  1  09 01        		ora #1
00B67E  1  95 1E        		sta $1E,x
00B680  1  A5 00        		lda TMP_0
00B682  1  3D A9 07     		and $7A9,x
00B685  1  A8           		tay
00B686  1  AD CC 06     		lda SecondaryHardMode
00B689  1  D0 01        		bne loc_9680
00B68B  1  A8           		tay
00B68C  1               loc_9680:
00B68C  1               
00B68C  1  B9 51 B6     		lda HammerBroJumpLData,y
00B68F  1  9D 8A 07     		sta $78A,x
00B692  1  BD A8 07     		lda $7A8,x
00B695  1  09 C0        		ora #$C0
00B697  1  95 3C        		sta $3C,x
00B699  1               MoveHammerBroXDir:
00B699  1               
00B699  1  A0 FC        		ldy #$FC
00B69B  1  A5 09        		lda FrameCounter
00B69D  1  29 40        		and #$40
00B69F  1  D0 02        		bne loc_9697
00B6A1  1  A0 04        		ldy #4
00B6A3  1               loc_9697:
00B6A3  1               
00B6A3  1  94 58        		sty $58,x
00B6A5  1  A0 01        		ldy #1
00B6A7  1  20 9C CD     		jsr PlayerEnemyDiff
00B6AA  1  30 0A        		bmi loc_96AA
00B6AC  1  C8           		iny
00B6AD  1  BD 96 07     		lda $796,x
00B6B0  1  D0 04        		bne loc_96AA
00B6B2  1  A9 F8        		lda #$F8
00B6B4  1  95 58        		sta $58,x
00B6B6  1               loc_96AA:
00B6B6  1               
00B6B6  1  94 46        		sty $46,x
00B6B8  1               MoveNormalEnemy:
00B6B8  1               
00B6B8  1  A0 00        		ldy #0
00B6BA  1  B5 1E        		lda $1E,x
00B6BC  1  29 40        		and #$40
00B6BE  1  D0 19        		bne loc_96CD
00B6C0  1  B5 1E        		lda $1E,x
00B6C2  1  0A           		asl
00B6C3  1  B0 30        		bcs loc_96E9
00B6C5  1  B5 1E        		lda $1E,x
00B6C7  1  29 20        		and #$20
00B6C9  1  D0 5B        		bne MoveDefeatedEnemy
00B6CB  1  B5 1E        		lda $1E,x
00B6CD  1  29 07        		and #7
00B6CF  1  F0 24        		beq loc_96E9
00B6D1  1  C9 05        		cmp #5
00B6D3  1  F0 04        		beq loc_96CD
00B6D5  1  C9 03        		cmp #3
00B6D7  1  B0 30        		bcs loc_96FD
00B6D9  1               loc_96CD:
00B6D9  1               
00B6D9  1  20 38 AB     		jsr sub_8B34
00B6DC  1  A0 00        		ldy #0
00B6DE  1  B5 1E        		lda $1E,x
00B6E0  1  C9 02        		cmp #2
00B6E2  1  F0 0C        		beq loc_96E4
00B6E4  1  29 40        		and #$40
00B6E6  1  F0 0D        		beq loc_96E9
00B6E8  1  B5 16        		lda $16,x
00B6EA  1  C9 2E        		cmp #$2E
00B6EC  1  F0 07        		beq loc_96E9
00B6EE  1  D0 03        		bne loc_96E7
00B6F0  1               loc_96E4:
00B6F0  1               
00B6F0  1  4C D7 AA     		jmp MoveEnemyHorizontally
00B6F3  1               loc_96E7:
00B6F3  1               
00B6F3  1  A0 01        		ldy #1
00B6F5  1               loc_96E9:
00B6F5  1               
00B6F5  1  B5 58        		lda $58,x
00B6F7  1  48           		pha
00B6F8  1  10 02        		bpl loc_96F0
00B6FA  1  C8           		iny
00B6FB  1  C8           		iny
00B6FC  1               loc_96F0:
00B6FC  1               
00B6FC  1  18           		clc
00B6FD  1  79 11 B6     		adc XSpeedAdderData,y
00B700  1  95 58        		sta $58,x
00B702  1  20 D7 AA     		jsr MoveEnemyHorizontally
00B705  1  68           		pla
00B706  1  95 58        		sta $58,x
00B708  1  60           		rts
00B709  1               loc_96FD:
00B709  1               
00B709  1  BD 96 07     		lda $796,x
00B70C  1  D0 1E        		bne loc_9720
00B70E  1  95 1E        		sta $1E,x
00B710  1  A5 09        		lda FrameCounter
00B712  1  29 01        		and #1
00B714  1  A8           		tay
00B715  1  C8           		iny
00B716  1  94 46        		sty $46,x
00B718  1  88           		dey
00B719  1  AD 6A 07     		lda PrimaryHardMode
00B71C  1  F0 02        		beq loc_9714
00B71E  1  C8           		iny
00B71F  1  C8           		iny
00B720  1               loc_9714:
00B720  1               
00B720  1  B9 15 B6     		lda RevivedXSpeed,y
00B723  1  95 58        		sta $58,x
00B725  1  60           		rts
00B726  1               MoveDefeatedEnemy:
00B726  1               
00B726  1  20 38 AB     		jsr sub_8B34
00B729  1  4C D7 AA     		jmp MoveEnemyHorizontally
00B72C  1               loc_9720:
00B72C  1               
00B72C  1  C9 0E        		cmp #$E
00B72E  1  D0 09        		bne locret_972D
00B730  1  B5 16        		lda $16,x
00B732  1  C9 06        		cmp #6
00B734  1  D0 03        		bne locret_972D
00B736  1  20 D9 B5     		jsr EraseEnemyObject
00B739  1               locret_972D:
00B739  1               
00B739  1  60           		rts
00B73A  1               MoveJumpingEnemy:
00B73A  1               
00B73A  1  20 67 AB     		jsr MoveJ_EnemyVertically
00B73D  1  4C D7 AA     		jmp MoveEnemyHorizontally
00B740  1               ProcMoveRedPTroopa:
00B740  1               
00B740  1  B5 A0        		lda ExplosionTimerCounter,x
00B742  1  1D 34 04     		ora PiranhaPlantDownYPos,x
00B745  1  D0 13        		bne loc_974E
00B747  1  9D 17 04     		sta PiranhaPlantUpYPos,x
00B74A  1  B5 CF        		lda Enemy_Y_Position,x
00B74C  1  DD 01 04     		cmp RedPTroopaOrigXPos,x
00B74F  1  B0 09        		bcs loc_974E
00B751  1  A5 09        		lda FrameCounter
00B753  1  29 07        		and #7
00B755  1  D0 02        		bne locret_974D
00B757  1  F6 CF        		inc Enemy_Y_Position,x
00B759  1               locret_974D:
00B759  1               
00B759  1  60           		rts
00B75A  1               loc_974E:
00B75A  1               
00B75A  1  B5 CF        		lda Enemy_Y_Position,x
00B75C  1  D5 58        		cmp Enemy_X_Speed,x
00B75E  1  90 03        		bcc loc_9757
00B760  1  4C 4A AB     		jmp loc_8B46
00B763  1               loc_9757:
00B763  1               
00B763  1  4C 45 AB     		jmp loc_8B41
00B766  1               MoveFlyGreenPTroopa:
00B766  1               
00B766  1  20 86 B7     		jsr XMoveCntr_GreenPTroopa
00B769  1  20 A7 B7     		jsr MoveWithXMCntrs
00B76C  1  A0 01        		ldy #1
00B76E  1  A5 09        		lda FrameCounter
00B770  1  29 03        		and #3
00B772  1  D0 11        		bne locret_9779
00B774  1  A5 09        		lda FrameCounter
00B776  1  29 40        		and #$40
00B778  1  D0 02        		bne loc_9770
00B77A  1  A0 FF        		ldy #$FF
00B77C  1               loc_9770:
00B77C  1               
00B77C  1  84 00        		sty TMP_0
00B77E  1  B5 CF        		lda Enemy_Y_Position,x
00B780  1  18           		clc
00B781  1  65 00        		adc TMP_0
00B783  1  95 CF        		sta Enemy_Y_Position,x
00B785  1               locret_9779:
00B785  1               
00B785  1  60           		rts
00B786  1               XMoveCntr_GreenPTroopa:
00B786  1               
00B786  1  A9 13        		lda #$13
00B788  1               XMoveCntr_Platform:
00B788  1               
00B788  1  85 01        		sta TMP_1
00B78A  1  A5 09        		lda FrameCounter
00B78C  1  29 03        		and #3
00B78E  1  D0 0D        		bne locret_9791
00B790  1  B4 58        		ldy $58,x
00B792  1  B5 A0        		lda $A0,x
00B794  1  4A           		lsr
00B795  1  B0 0A        		bcs loc_9795
00B797  1  C4 01        		cpy TMP_1
00B799  1  F0 03        		beq loc_9792
00B79B  1  F6 58        		inc $58,x
00B79D  1               locret_9791:
00B79D  1               
00B79D  1  60           		rts
00B79E  1               loc_9792:
00B79E  1               
00B79E  1  F6 A0        		inc $A0,x
00B7A0  1  60           		rts
00B7A1  1               loc_9795:
00B7A1  1               
00B7A1  1  98           		tya
00B7A2  1  F0 FA        		beq loc_9792
00B7A4  1  D6 58        		dec $58,x
00B7A6  1  60           		rts
00B7A7  1               MoveWithXMCntrs:
00B7A7  1               
00B7A7  1  B5 58        		lda $58,x
00B7A9  1  48           		pha
00B7AA  1  A0 01        		ldy #1
00B7AC  1  B5 A0        		lda $A0,x
00B7AE  1  29 02        		and #2
00B7B0  1  D0 0B        		bne loc_97B1
00B7B2  1  B5 58        		lda $58,x
00B7B4  1  49 FF        		eor #$FF
00B7B6  1  18           		clc
00B7B7  1  69 01        		adc #1
00B7B9  1  95 58        		sta $58,x
00B7BB  1  A0 02        		ldy #2
00B7BD  1               loc_97B1:
00B7BD  1               
00B7BD  1  94 46        		sty $46,x
00B7BF  1  20 D7 AA     		jsr MoveEnemyHorizontally
00B7C2  1  85 00        		sta TMP_0
00B7C4  1  68           		pla
00B7C5  1  95 58        		sta $58,x
00B7C7  1  60           		rts
00B7C8  1               BlooberBitmasks:
00B7C8  1  3F           		.byte $3F
00B7C9  1  03           		.byte 3
00B7CA  1               MoveBloober:
00B7CA  1               
00B7CA  1  B5 1E        		lda Enemy_State,x
00B7CC  1  29 20        		and #$20
00B7CE  1  D0 4D        		bne loc_9811
00B7D0  1  AC CC 06     		ldy SecondaryHardMode
00B7D3  1  BD A8 07     		lda $7A8,x
00B7D6  1  39 C8 B7     		and BlooberBitmasks,y
00B7D9  1  D0 12        		bne loc_97E1
00B7DB  1  8A           		txa
00B7DC  1  4A           		lsr
00B7DD  1  90 04        		bcc loc_97D7
00B7DF  1  A4 45        		ldy Player_MovingDir
00B7E1  1  B0 08        		bcs loc_97DF
00B7E3  1               loc_97D7:
00B7E3  1               
00B7E3  1  A0 02        		ldy #2
00B7E5  1  20 9C CD     		jsr PlayerEnemyDiff
00B7E8  1  10 01        		bpl loc_97DF
00B7EA  1  88           		dey
00B7EB  1               loc_97DF:
00B7EB  1               
00B7EB  1  94 46        		sty $46,x
00B7ED  1               loc_97E1:
00B7ED  1               
00B7ED  1  20 20 B8     		jsr sub_9814
00B7F0  1  B5 CF        		lda $CF,x
00B7F2  1  38           		sec
00B7F3  1  FD 34 04     		sbc $434,x
00B7F6  1  C9 20        		cmp #$20
00B7F8  1  90 02        		bcc loc_97F0
00B7FA  1  95 CF        		sta $CF,x
00B7FC  1               loc_97F0:
00B7FC  1               
00B7FC  1  B4 46        		ldy $46,x
00B7FE  1  88           		dey
00B7FF  1  D0 0E        		bne loc_9803
00B801  1  B5 87        		lda $87,x
00B803  1  18           		clc
00B804  1  75 58        		adc $58,x
00B806  1  95 87        		sta $87,x
00B808  1  B5 6E        		lda $6E,x
00B80A  1  69 00        		adc #0
00B80C  1  95 6E        		sta $6E,x
00B80E  1  60           		rts
00B80F  1               loc_9803:
00B80F  1               
00B80F  1  B5 87        		lda $87,x
00B811  1  38           		sec
00B812  1  F5 58        		sbc $58,x
00B814  1  95 87        		sta $87,x
00B816  1  B5 6E        		lda $6E,x
00B818  1  E9 00        		sbc #0
00B81A  1  95 6E        		sta $6E,x
00B81C  1  60           		rts
00B81D  1               loc_9811:
00B81D  1               
00B81D  1  4C 61 AB     		jmp MoveEnemySlowVert
00B820  1               sub_9814:
00B820  1               
00B820  1  B5 A0        		lda $A0,x
00B822  1  29 02        		and #2
00B824  1  D0 37        		bne loc_9851
00B826  1  A5 09        		lda FrameCounter
00B828  1  29 07        		and #7
00B82A  1  48           		pha
00B82B  1  B5 A0        		lda $A0,x
00B82D  1  4A           		lsr
00B82E  1  B0 15        		bcs loc_9839
00B830  1  68           		pla
00B831  1  D0 11        		bne locret_9838
00B833  1  BD 34 04     		lda $434,x
00B836  1  18           		clc
00B837  1  69 01        		adc #1
00B839  1  9D 34 04     		sta $434,x
00B83C  1  95 58        		sta $58,x
00B83E  1  C9 02        		cmp #2
00B840  1  D0 02        		bne locret_9838
00B842  1  F6 A0        		inc $A0,x
00B844  1               locret_9838:
00B844  1               
00B844  1  60           		rts
00B845  1               loc_9839:
00B845  1               
00B845  1  68           		pla
00B846  1  D0 14        		bne locret_9850
00B848  1  BD 34 04     		lda $434,x
00B84B  1  38           		sec
00B84C  1  E9 01        		sbc #1
00B84E  1  9D 34 04     		sta $434,x
00B851  1  95 58        		sta $58,x
00B853  1  D0 07        		bne locret_9850
00B855  1  F6 A0        		inc $A0,x
00B857  1  A9 02        		lda #2
00B859  1  9D 96 07     		sta $796,x
00B85C  1               locret_9850:
00B85C  1               
00B85C  1  60           		rts
00B85D  1               loc_9851:
00B85D  1               
00B85D  1  BD 96 07     		lda $796,x
00B860  1  F0 08        		beq loc_985E
00B862  1               loc_9856:
00B862  1               
00B862  1  A5 09        		lda FrameCounter
00B864  1  4A           		lsr
00B865  1  B0 02        		bcs locret_985D
00B867  1  F6 CF        		inc $CF,x
00B869  1               locret_985D:
00B869  1               
00B869  1  60           		rts
00B86A  1               loc_985E:
00B86A  1               
00B86A  1  B5 CF        		lda $CF,x
00B86C  1  69 10        		adc #$10
00B86E  1  C5 CE        		cmp SprObject_Y_Position
00B870  1  90 F0        		bcc loc_9856
00B872  1  A9 00        		lda #0
00B874  1  95 A0        		sta $A0,x
00B876  1  60           		rts
00B877  1               MoveBulletBill:
00B877  1               
00B877  1  B5 1E        		lda Enemy_State,x
00B879  1  29 20        		and #$20
00B87B  1  F0 03        		beq loc_9874
00B87D  1  4C 67 AB     		jmp MoveJ_EnemyVertically
00B880  1               loc_9874:
00B880  1               
00B880  1  A9 E8        		lda #$E8
00B882  1  95 58        		sta Enemy_X_Speed,x
00B884  1  4C D7 AA     		jmp MoveEnemyHorizontally
00B887  1               SwimCCXMoveData:
00B887  1  40           		.byte $40
00B888  1  80           		.byte $80
00B889  1  04           		.byte 4
00B88A  1  04           		.byte 4
00B88B  1               MoveSwimmingCheepCheep:
00B88B  1               
00B88B  1  B5 1E        		lda $1E,x
00B88D  1  29 20        		and #$20
00B88F  1  F0 03        		beq loc_9888
00B891  1  4C 61 AB     		jmp MoveEnemySlowVert
00B894  1               loc_9888:
00B894  1               
00B894  1  85 03        		sta byte_3
00B896  1  B5 16        		lda $16,x
00B898  1  38           		sec
00B899  1  E9 0A        		sbc #$A
00B89B  1  A8           		tay
00B89C  1  B9 87 B8     		lda SwimCCXMoveData,y
00B89F  1  85 02        		sta byte_2
00B8A1  1  BD 01 04     		lda $401,x
00B8A4  1  38           		sec
00B8A5  1  E5 02        		sbc byte_2
00B8A7  1  9D 01 04     		sta $401,x
00B8AA  1  B5 87        		lda $87,x
00B8AC  1  E9 00        		sbc #0
00B8AE  1  95 87        		sta $87,x
00B8B0  1  B5 6E        		lda $6E,x
00B8B2  1  E9 00        		sbc #0
00B8B4  1  95 6E        		sta $6E,x
00B8B6  1  A9 40        		lda #$40
00B8B8  1  85 02        		sta byte_2
00B8BA  1  E0 02        		cpx #2
00B8BC  1  90 49        		bcc locret_98FB
00B8BE  1  B5 58        		lda $58,x
00B8C0  1  C9 10        		cmp #$10
00B8C2  1  90 16        		bcc loc_98CE
00B8C4  1  BD 17 04     		lda $417,x
00B8C7  1  18           		clc
00B8C8  1  65 02        		adc byte_2
00B8CA  1  9D 17 04     		sta $417,x
00B8CD  1  B5 CF        		lda $CF,x
00B8CF  1  65 03        		adc byte_3
00B8D1  1  95 CF        		sta $CF,x
00B8D3  1  B5 B6        		lda $B6,x
00B8D5  1  69 00        		adc #0
00B8D7  1  4C ED B8     		jmp loc_98E1
00B8DA  1               loc_98CE:
00B8DA  1               
00B8DA  1  BD 17 04     		lda $417,x
00B8DD  1  38           		sec
00B8DE  1  E5 02        		sbc byte_2
00B8E0  1  9D 17 04     		sta $417,x
00B8E3  1  B5 CF        		lda $CF,x
00B8E5  1  E5 03        		sbc byte_3
00B8E7  1  95 CF        		sta $CF,x
00B8E9  1  B5 B6        		lda $B6,x
00B8EB  1  E9 00        		sbc #0
00B8ED  1               loc_98E1:
00B8ED  1               
00B8ED  1  95 B6        		sta $B6,x
00B8EF  1  A0 00        		ldy #0
00B8F1  1  B5 CF        		lda $CF,x
00B8F3  1  38           		sec
00B8F4  1  FD 34 04     		sbc $434,x
00B8F7  1  10 07        		bpl loc_98F4
00B8F9  1  A0 10        		ldy #$10
00B8FB  1  49 FF        		eor #$FF
00B8FD  1  18           		clc
00B8FE  1  69 01        		adc #1
00B900  1               loc_98F4:
00B900  1               
00B900  1  C9 0F        		cmp #$F
00B902  1  90 03        		bcc locret_98FB
00B904  1  98           		tya
00B905  1  95 58        		sta $58,x
00B907  1               locret_98FB:
00B907  1               
00B907  1  60           		rts
00B908  1               FirebarPosLookupTbl:
00B908  1  00           		.byte 0
00B909  1  01           		.byte 1
00B90A  1  03           		.byte 3
00B90B  1  04           		.byte 4
00B90C  1  05           		.byte 5
00B90D  1  06           		.byte 6
00B90E  1  07           		.byte 7
00B90F  1  07           		.byte 7
00B910  1  08           		.byte 8
00B911  1  00           		.byte 0
00B912  1  03           		.byte 3
00B913  1  06           		.byte 6
00B914  1  09           		.byte 9
00B915  1  0B           		.byte $B
00B916  1  0D           		.byte $D
00B917  1  0E           		.byte $E
00B918  1  0F           		.byte $F
00B919  1  10           		.byte $10
00B91A  1  00           		.byte 0
00B91B  1  04           		.byte 4
00B91C  1  09           		.byte 9
00B91D  1  0D           		.byte $D
00B91E  1  10           		.byte $10
00B91F  1  13           		.byte $13
00B920  1  16           		.byte $16
00B921  1  17           		.byte $17
00B922  1  18           		.byte $18
00B923  1  00           		.byte 0
00B924  1  06           		.byte 6
00B925  1  0C           		.byte $C
00B926  1  12           		.byte $12
00B927  1  16           		.byte $16
00B928  1  1A           		.byte $1A
00B929  1  1D           		.byte $1D
00B92A  1  1F           		.byte $1F
00B92B  1  20           		.byte $20
00B92C  1  00           		.byte 0
00B92D  1  07           		.byte 7
00B92E  1  0F           		.byte $F
00B92F  1  16           		.byte $16
00B930  1  1C           		.byte $1C
00B931  1  21           		.byte $21
00B932  1  25           		.byte $25
00B933  1  27           		.byte $27
00B934  1  28           		.byte $28
00B935  1  00           		.byte 0
00B936  1  09           		.byte 9
00B937  1  12           		.byte $12
00B938  1  1B           		.byte $1B
00B939  1  21           		.byte $21
00B93A  1  27           		.byte $27
00B93B  1  2C           		.byte $2C
00B93C  1  2F           		.byte $2F
00B93D  1  30           		.byte $30
00B93E  1  00           		.byte 0
00B93F  1  0B           		.byte $B
00B940  1  15           		.byte $15
00B941  1  1F           		.byte $1F
00B942  1  27           		.byte $27
00B943  1  2E           		.byte $2E
00B944  1  33           		.byte $33
00B945  1  37           		.byte $37
00B946  1  38           		.byte $38
00B947  1  00           		.byte 0
00B948  1  0C           		.byte $C
00B949  1  18           		.byte $18
00B94A  1  24           		.byte $24
00B94B  1  2D           		.byte $2D
00B94C  1  35           		.byte $35
00B94D  1  3B           		.byte $3B
00B94E  1  3E           		.byte $3E
00B94F  1  40           		.byte $40
00B950  1  00           		.byte 0
00B951  1  0E           		.byte $E
00B952  1  1B           		.byte $1B
00B953  1  28           		.byte $28
00B954  1  32           		.byte $32
00B955  1  3B           		.byte $3B
00B956  1  42           		.byte $42
00B957  1  46           		.byte $46
00B958  1  48           		.byte $48
00B959  1  00           		.byte 0
00B95A  1  0F           		.byte $F
00B95B  1  1F           		.byte $1F
00B95C  1  2D           		.byte $2D
00B95D  1  38           		.byte $38
00B95E  1  42           		.byte $42
00B95F  1  4A           		.byte $4A
00B960  1  4E           		.byte $4E
00B961  1  50           		.byte $50
00B962  1  00           		.byte 0
00B963  1  11           		.byte $11
00B964  1  22           		.byte $22
00B965  1  31           		.byte $31
00B966  1  3E           		.byte $3E
00B967  1  49           		.byte $49
00B968  1  51           		.byte $51
00B969  1  56           		.byte $56
00B96A  1  58           		.byte $58
00B96B  1               FirebarMirrorData:
00B96B  1  01           		.byte 1
00B96C  1  03           		.byte 3
00B96D  1  02           		.byte 2
00B96E  1  00           		.byte 0
00B96F  1               FirebarTblOffsets:
00B96F  1  00           		.byte 0
00B970  1  09           		.byte 9
00B971  1  12           		.byte $12
00B972  1  1B           		.byte $1B
00B973  1  24           		.byte $24
00B974  1  2D           		.byte $2D
00B975  1  36           		.byte $36
00B976  1  3F           		.byte $3F
00B977  1  48           		.byte $48
00B978  1  51           		.byte $51
00B979  1  5A           		.byte $5A
00B97A  1  63           		.byte $63
00B97B  1               FirebarYPos:
00B97B  1  0C           		.byte $C
00B97C  1  18           		.byte $18
00B97D  1               ProcFirebar:
00B97D  1               
00B97D  1  20 3C DE     		jsr GetEnemyOffscreenBits
00B980  1  AD D1 03     		lda Enemy_OffscreenBits
00B983  1  29 08        		and #8
00B985  1  D0 74        		bne locret_99EF
00B987  1  AD 47 07     		lda TimerControl
00B98A  1  D0 0A        		bne loc_998A
00B98C  1  BD 88 03     		lda $388,x
00B98F  1  20 34 C0     		jsr sub_A043
00B992  1  29 1F        		and #$1F
00B994  1  95 A0        		sta $A0,x
00B996  1               loc_998A:
00B996  1               
00B996  1  B5 A0        		lda $A0,x
00B998  1  B4 16        		ldy $16,x
00B99A  1  C0 1F        		cpy #$1F
00B99C  1  90 0D        		bcc loc_999F
00B99E  1  C9 08        		cmp #8
00B9A0  1  F0 04        		beq loc_999A
00B9A2  1  C9 18        		cmp #$18
00B9A4  1  D0 05        		bne loc_999F
00B9A6  1               loc_999A:
00B9A6  1               
00B9A6  1  18           		clc
00B9A7  1  69 01        		adc #1
00B9A9  1  95 A0        		sta $A0,x
00B9AB  1               loc_999F:
00B9AB  1               
00B9AB  1  85 EF        		sta byte_EF
00B9AD  1  20 DF DD     		jsr RelativeEnemyPosition
00B9B0  1  20 CF BA     		jsr sub_9AC3
00B9B3  1  BC E5 06     		ldy $6E5,x
00B9B6  1  AD B9 03     		lda Enemy_Rel_YPos
00B9B9  1  99 00 02     		sta $200,y
00B9BC  1  85 07        		sta unk_7
00B9BE  1  AD AE 03     		lda Enemy_Rel_XPos
00B9C1  1  99 03 02     		sta $203,y
00B9C4  1  85 06        		sta byte_6
00B9C6  1  A9 01        		lda #1
00B9C8  1  85 00        		sta TMP_0
00B9CA  1  20 49 BA     		jsr FirebarCollision
00B9CD  1  A0 05        		ldy #5
00B9CF  1  B5 16        		lda $16,x
00B9D1  1  C9 1F        		cmp #$1F
00B9D3  1  90 02        		bcc loc_99CB
00B9D5  1  A0 0B        		ldy #$B
00B9D7  1               loc_99CB:
00B9D7  1               
00B9D7  1  84 ED        		sty byte_ED
00B9D9  1  A9 00        		lda #0
00B9DB  1  85 00        		sta TMP_0
00B9DD  1               loc_99D1:
00B9DD  1               
00B9DD  1  A5 EF        		lda byte_EF
00B9DF  1  20 CF BA     		jsr sub_9AC3
00B9E2  1  20 FC B9     		jsr sub_99F0
00B9E5  1  A5 00        		lda TMP_0
00B9E7  1  C9 04        		cmp #4
00B9E9  1  D0 08        		bne loc_99E7
00B9EB  1  AC CF 06     		ldy DuplicateObj_Offset
00B9EE  1  B9 E5 06     		lda $6E5,y
00B9F1  1  85 06        		sta byte_6
00B9F3  1               loc_99E7:
00B9F3  1               
00B9F3  1  E6 00        		inc TMP_0
00B9F5  1  A5 00        		lda TMP_0
00B9F7  1  C5 ED        		cmp byte_ED
00B9F9  1  90 E2        		bcc loc_99D1
00B9FB  1               locret_99EF:
00B9FB  1               
00B9FB  1  60           		rts
00B9FC  1               sub_99F0:
00B9FC  1               
00B9FC  1  A5 03        		lda byte_3
00B9FE  1  85 05        		sta byte_5
00BA00  1  A4 06        		ldy byte_6
00BA02  1  A5 01        		lda TMP_1
00BA04  1  46 05        		lsr byte_5
00BA06  1  B0 04        		bcs loc_9A00
00BA08  1  49 FF        		eor #$FF
00BA0A  1  69 01        		adc #1
00BA0C  1               loc_9A00:
00BA0C  1               
00BA0C  1  18           		clc
00BA0D  1  6D AE 03     		adc Enemy_Rel_XPos
00BA10  1  99 03 02     		sta $203,y
00BA13  1  85 06        		sta byte_6
00BA15  1  CD AE 03     		cmp Enemy_Rel_XPos
00BA18  1  B0 09        		bcs loc_9A17
00BA1A  1  AD AE 03     		lda Enemy_Rel_XPos
00BA1D  1  38           		sec
00BA1E  1  E5 06        		sbc byte_6
00BA20  1  4C 27 BA     		jmp loc_9A1B
00BA23  1               loc_9A17:
00BA23  1               
00BA23  1  38           		sec
00BA24  1  ED AE 03     		sbc Enemy_Rel_XPos
00BA27  1               loc_9A1B:
00BA27  1               
00BA27  1  C9 59        		cmp #$59
00BA29  1  90 04        		bcc loc_9A23
00BA2B  1  A9 F8        		lda #$F8
00BA2D  1  D0 15        		bne loc_9A38
00BA2F  1               loc_9A23:
00BA2F  1               
00BA2F  1  AD B9 03     		lda Enemy_Rel_YPos
00BA32  1  C9 F8        		cmp #$F8
00BA34  1  F0 0E        		beq loc_9A38
00BA36  1  A5 02        		lda byte_2
00BA38  1  46 05        		lsr byte_5
00BA3A  1  B0 04        		bcs loc_9A34
00BA3C  1  49 FF        		eor #$FF
00BA3E  1  69 01        		adc #1
00BA40  1               loc_9A34:
00BA40  1               
00BA40  1  18           		clc
00BA41  1  6D B9 03     		adc Enemy_Rel_YPos
00BA44  1               loc_9A38:
00BA44  1               
00BA44  1  99 00 02     		sta $200,y
00BA47  1  85 07        		sta unk_7
00BA49  1               FirebarCollision:
00BA49  1               
00BA49  1  20 70 D9     		jsr DrawFirebar
00BA4C  1  98           		tya
00BA4D  1  48           		pha
00BA4E  1  AD 9F 07     		lda StarInvincibleTimer
00BA51  1  0D 47 07     		ora TimerControl
00BA54  1  D0 70        		bne loc_9ABA
00BA56  1  85 05        		sta byte_5
00BA58  1  A4 B5        		ldy Player_Y_HighPos
00BA5A  1  88           		dey
00BA5B  1  D0 69        		bne loc_9ABA
00BA5D  1  A4 CE        		ldy SprObject_Y_Position
00BA5F  1  AD 54 07     		lda PlayerSize
00BA62  1  D0 05        		bne loc_9A5D
00BA64  1  AD 14 07     		lda CrouchingFlag
00BA67  1  F0 09        		beq loc_9A66
00BA69  1               loc_9A5D:
00BA69  1               
00BA69  1  E6 05        		inc byte_5
00BA6B  1  E6 05        		inc byte_5
00BA6D  1  98           		tya
00BA6E  1  18           		clc
00BA6F  1  69 18        		adc #$18
00BA71  1  A8           		tay
00BA72  1               loc_9A66:
00BA72  1               
00BA72  1  98           		tya
00BA73  1               loc_9A67:
00BA73  1               
00BA73  1  38           		sec
00BA74  1  E5 07        		sbc unk_7
00BA76  1  10 05        		bpl loc_9A71
00BA78  1  49 FF        		eor #$FF
00BA7A  1  18           		clc
00BA7B  1  69 01        		adc #1
00BA7D  1               loc_9A71:
00BA7D  1               
00BA7D  1  C9 08        		cmp #8
00BA7F  1  B0 1C        		bcs loc_9A91
00BA81  1  A5 06        		lda byte_6
00BA83  1  C9 F0        		cmp #$F0
00BA85  1  B0 16        		bcs loc_9A91
00BA87  1  AD 07 02     		lda byte_207
00BA8A  1  18           		clc
00BA8B  1  69 04        		adc #4
00BA8D  1  85 04        		sta byte_4
00BA8F  1  38           		sec
00BA90  1  E5 06        		sbc byte_6
00BA92  1  10 05        		bpl loc_9A8D
00BA94  1  49 FF        		eor #$FF
00BA96  1  18           		clc
00BA97  1  69 01        		adc #1
00BA99  1               loc_9A8D:
00BA99  1               
00BA99  1  C9 08        		cmp #8
00BA9B  1  90 13        		bcc loc_9AA4
00BA9D  1               loc_9A91:
00BA9D  1               
00BA9D  1  A5 05        		lda byte_5
00BA9F  1  C9 02        		cmp #2
00BAA1  1  F0 23        		beq loc_9ABA
00BAA3  1  A4 05        		ldy byte_5
00BAA5  1  A5 CE        		lda SprObject_Y_Position
00BAA7  1  18           		clc
00BAA8  1  79 7B B9     		adc FirebarYPos,y
00BAAB  1  E6 05        		inc byte_5
00BAAD  1  4C 73 BA     		jmp loc_9A67
00BAB0  1               loc_9AA4:
00BAB0  1               
00BAB0  1  A2 01        		ldx #1
00BAB2  1  A5 04        		lda byte_4
00BAB4  1  C5 06        		cmp byte_6
00BAB6  1  B0 01        		bcs loc_9AAD
00BAB8  1  E8           		inx
00BAB9  1               loc_9AAD:
00BAB9  1               
00BAB9  1  86 46        		stx Enemy_MovingDir
00BABB  1  A2 00        		ldx #0
00BABD  1  A5 00        		lda TMP_0
00BABF  1  48           		pha
00BAC0  1  20 78 C5     		jsr loc_A587
00BAC3  1  68           		pla
00BAC4  1  85 00        		sta TMP_0
00BAC6  1               loc_9ABA:
00BAC6  1               
00BAC6  1  68           		pla
00BAC7  1  18           		clc
00BAC8  1  69 04        		adc #4
00BACA  1  85 06        		sta byte_6
00BACC  1  A6 08        		ldx ObjectOffset
00BACE  1  60           		rts
00BACF  1               sub_9AC3:
00BACF  1               
00BACF  1  48           		pha
00BAD0  1  29 0F        		and #$F
00BAD2  1  C9 09        		cmp #9
00BAD4  1  90 05        		bcc loc_9ACF
00BAD6  1  49 0F        		eor #$F
00BAD8  1  18           		clc
00BAD9  1  69 01        		adc #1
00BADB  1               loc_9ACF:
00BADB  1               
00BADB  1  85 01        		sta TMP_1
00BADD  1  A4 00        		ldy TMP_0
00BADF  1  B9 6F B9     		lda FirebarTblOffsets,y
00BAE2  1  18           		clc
00BAE3  1  65 01        		adc TMP_1
00BAE5  1  A8           		tay
00BAE6  1  B9 08 B9     		lda FirebarPosLookupTbl,y
00BAE9  1  85 01        		sta TMP_1
00BAEB  1  68           		pla
00BAEC  1  48           		pha
00BAED  1  18           		clc
00BAEE  1  69 08        		adc #8
00BAF0  1  29 0F        		and #$F
00BAF2  1  C9 09        		cmp #9
00BAF4  1  90 05        		bcc loc_9AEF
00BAF6  1  49 0F        		eor #$F
00BAF8  1  18           		clc
00BAF9  1  69 01        		adc #1
00BAFB  1               loc_9AEF:
00BAFB  1               
00BAFB  1  85 02        		sta byte_2
00BAFD  1  A4 00        		ldy TMP_0
00BAFF  1  B9 6F B9     		lda FirebarTblOffsets,y
00BB02  1  18           		clc
00BB03  1  65 02        		adc byte_2
00BB05  1  A8           		tay
00BB06  1  B9 08 B9     		lda FirebarPosLookupTbl,y
00BB09  1  85 02        		sta byte_2
00BB0B  1  68           		pla
00BB0C  1  4A           		lsr
00BB0D  1  4A           		lsr
00BB0E  1  4A           		lsr
00BB0F  1  A8           		tay
00BB10  1  B9 6B B9     		lda FirebarMirrorData,y
00BB13  1  85 03        		sta byte_3
00BB15  1  60           		rts
00BB16  1               PRandomSubtracter:
00BB16  1  F8           		.byte $F8
00BB17  1  A0           		.byte $A0
00BB18  1  70           		.byte $70
00BB19  1  BD           		.byte $BD
00BB1A  1  00           		.byte 0
00BB1B  1               FlyCCBPriority:
00BB1B  1  20           		.byte $20
00BB1C  1  20           		.byte $20
00BB1D  1  20           		.byte $20
00BB1E  1  00           		.byte 0
00BB1F  1  00           		.byte 0
00BB20  1               MoveFlyingCheepCheep:
00BB20  1               
00BB20  1  B5 1E        		lda Enemy_State,x
00BB22  1  29 20        		and #$20
00BB24  1  F0 08        		beq loc_9B22
00BB26  1  A9 00        		lda #0
00BB28  1  9D C5 03     		sta Enemy_SprAttrib,x
00BB2B  1  4C 67 AB     		jmp MoveJ_EnemyVertically
00BB2E  1               loc_9B22:
00BB2E  1               
00BB2E  1  20 D7 AA     		jsr MoveEnemyHorizontally
00BB31  1  A0 0D        		ldy #$D
00BB33  1  A9 05        		lda #5
00BB35  1  20 6B AB     		jsr loc_8B67
00BB38  1  BD 34 04     		lda $434,x
00BB3B  1  4A           		lsr
00BB3C  1  4A           		lsr
00BB3D  1  4A           		lsr
00BB3E  1  4A           		lsr
00BB3F  1  A8           		tay
00BB40  1  B5 CF        		lda Enemy_Y_Position,x
00BB42  1  38           		sec
00BB43  1  F9 16 BB     		sbc PRandomSubtracter,y
00BB46  1  10 05        		bpl loc_9B41
00BB48  1  49 FF        		eor #$FF
00BB4A  1  18           		clc
00BB4B  1  69 01        		adc #1
00BB4D  1               loc_9B41:
00BB4D  1               
00BB4D  1  C9 08        		cmp #8
00BB4F  1  B0 0E        		bcs loc_9B53
00BB51  1  BD 34 04     		lda $434,x
00BB54  1  18           		clc
00BB55  1  69 10        		adc #$10
00BB57  1  9D 34 04     		sta $434,x
00BB5A  1  4A           		lsr
00BB5B  1  4A           		lsr
00BB5C  1  4A           		lsr
00BB5D  1  4A           		lsr
00BB5E  1  A8           		tay
00BB5F  1               loc_9B53:
00BB5F  1               
00BB5F  1  B9 1B BB     		lda FlyCCBPriority,y
00BB62  1  9D C5 03     		sta Enemy_SprAttrib,x
00BB65  1  60           		rts
00BB66  1               LakituDiffAdj:
00BB66  1  15           		.byte $15
00BB67  1  30           		.byte $30
00BB68  1  40           		.byte $40
00BB69  1               MoveLakitu:
00BB69  1               
00BB69  1  B5 1E        		lda Enemy_State,x
00BB6B  1  29 20        		and #$20
00BB6D  1  F0 03        		beq loc_9B66
00BB6F  1  4C 38 AB     		jmp sub_8B34
00BB72  1               loc_9B66:
00BB72  1               
00BB72  1  B5 1E        		lda Enemy_State,x
00BB74  1  F0 0B        		beq loc_9B75
00BB76  1  A9 00        		lda #0
00BB78  1  95 A0        		sta $A0,x
00BB7A  1  8D CB 06     		sta EnemyFrenzyBuffer
00BB7D  1  A9 10        		lda #$10
00BB7F  1  D0 13        		bne loc_9B88
00BB81  1               loc_9B75:
00BB81  1               
00BB81  1  A9 12        		lda #$12
00BB83  1  8D CB 06     		sta EnemyFrenzyBuffer
00BB86  1  A0 02        		ldy #2
00BB88  1               loc_9B7C:
00BB88  1               
00BB88  1  B9 66 BB     		lda LakituDiffAdj,y
00BB8B  1  99 01 00     		sta 1,y
00BB8E  1  88           		dey
00BB8F  1  10 F7        		bpl loc_9B7C
00BB91  1  20 AD BB     		jsr PlayerLakituDiff
00BB94  1               loc_9B88:
00BB94  1               
00BB94  1  95 58        		sta $58,x
00BB96  1  A0 01        		ldy #1
00BB98  1  B5 A0        		lda $A0,x
00BB9A  1  29 01        		and #1
00BB9C  1  D0 0A        		bne loc_9B9C
00BB9E  1  B5 58        		lda $58,x
00BBA0  1  49 FF        		eor #$FF
00BBA2  1  18           		clc
00BBA3  1  69 01        		adc #1
00BBA5  1  95 58        		sta $58,x
00BBA7  1  C8           		iny
00BBA8  1               loc_9B9C:
00BBA8  1               
00BBA8  1  94 46        		sty $46,x
00BBAA  1  4C D7 AA     		jmp MoveEnemyHorizontally
00BBAD  1               PlayerLakituDiff:
00BBAD  1               
00BBAD  1  A0 00        		ldy #0
00BBAF  1  20 9C CD     		jsr PlayerEnemyDiff
00BBB2  1  10 0A        		bpl loc_9BB2
00BBB4  1  C8           		iny
00BBB5  1  A5 00        		lda TMP_0
00BBB7  1  49 FF        		eor #$FF
00BBB9  1  18           		clc
00BBBA  1  69 01        		adc #1
00BBBC  1  85 00        		sta TMP_0
00BBBE  1               loc_9BB2:
00BBBE  1               
00BBBE  1  A5 00        		lda TMP_0
00BBC0  1  C9 3C        		cmp #$3C
00BBC2  1  90 1C        		bcc loc_9BD4
00BBC4  1  A9 3C        		lda #$3C
00BBC6  1  85 00        		sta TMP_0
00BBC8  1  B5 16        		lda $16,x
00BBCA  1  C9 11        		cmp #$11
00BBCC  1  D0 12        		bne loc_9BD4
00BBCE  1  98           		tya
00BBCF  1  D5 A0        		cmp $A0,x
00BBD1  1  F0 0D        		beq loc_9BD4
00BBD3  1  B5 A0        		lda $A0,x
00BBD5  1  F0 06        		beq loc_9BD1
00BBD7  1  D6 58        		dec $58,x
00BBD9  1  B5 58        		lda $58,x
00BBDB  1  D0 40        		bne locret_9C11
00BBDD  1               loc_9BD1:
00BBDD  1               
00BBDD  1  98           		tya
00BBDE  1  95 A0        		sta $A0,x
00BBE0  1               loc_9BD4:
00BBE0  1               
00BBE0  1  A5 00        		lda TMP_0
00BBE2  1  29 3C        		and #$3C
00BBE4  1  4A           		lsr
00BBE5  1  4A           		lsr
00BBE6  1  85 00        		sta TMP_0
00BBE8  1  A0 00        		ldy #0
00BBEA  1  A5 57        		lda Player_X_Speed
00BBEC  1  F0 24        		beq loc_9C06
00BBEE  1  AD 75 07     		lda ScrollAmount
00BBF1  1  F0 1F        		beq loc_9C06
00BBF3  1  C8           		iny
00BBF4  1  A5 57        		lda Player_X_Speed
00BBF6  1  C9 19        		cmp #$19
00BBF8  1  90 08        		bcc loc_9BF6
00BBFA  1  AD 75 07     		lda ScrollAmount
00BBFD  1  C9 02        		cmp #2
00BBFF  1  90 01        		bcc loc_9BF6
00BC01  1  C8           		iny
00BC02  1               loc_9BF6:
00BC02  1               
00BC02  1  B5 16        		lda $16,x
00BC04  1  C9 12        		cmp #$12
00BC06  1  D0 04        		bne loc_9C00
00BC08  1  A5 57        		lda Player_X_Speed
00BC0A  1  D0 06        		bne loc_9C06
00BC0C  1               loc_9C00:
00BC0C  1               
00BC0C  1  B5 A0        		lda $A0,x
00BC0E  1  D0 02        		bne loc_9C06
00BC10  1  A0 00        		ldy #0
00BC12  1               loc_9C06:
00BC12  1               
00BC12  1  B9 01 00     		lda 1,y
00BC15  1  A4 00        		ldy TMP_0
00BC17  1               loc_9C0B:
00BC17  1               
00BC17  1  38           		sec
00BC18  1  E9 01        		sbc #1
00BC1A  1  88           		dey
00BC1B  1  10 FA        		bpl loc_9C0B
00BC1D  1               locret_9C11:
00BC1D  1               
00BC1D  1  60           		rts
00BC1E  1               BridgeCollapseData:
00BC1E  1  1A           		.byte $1A
00BC1F  1               byte_9C13:
00BC1F  1  58           		.byte $58
00BC20  1  98           		.byte $98
00BC21  1  96           		.byte $96
00BC22  1  94           		.byte $94
00BC23  1  92           		.byte $92
00BC24  1  90           		.byte $90
00BC25  1  8E           		.byte $8E
00BC26  1  8C           		.byte $8C
00BC27  1  8A           		.byte $8A
00BC28  1  88           		.byte $88
00BC29  1  86           		.byte $86
00BC2A  1  84           		.byte $84
00BC2B  1  82           		.byte $82
00BC2C  1  80           		.byte $80
00BC2D  1               BridgeCollapse:
00BC2D  1               
00BC2D  1  20 00 FE     		jsr Enter_EndOfCastle
00BC30  1  AE 68 03     		ldx BowserFront_Offset
00BC33  1  B5 16        		lda Enemy_ID,x
00BC35  1  C9 2D        		cmp #$2D
00BC37  1  D0 10        		bne loc_9C3A
00BC39  1  86 08        		stx ObjectOffset
00BC3B  1  B5 1E        		lda $1E,x
00BC3D  1  F0 1A        		beq loc_9C4A
00BC3F  1  29 40        		and #$40
00BC41  1  F0 06        		beq loc_9C3A
00BC43  1  B5 CF        		lda $CF,x
00BC45  1  C9 E0        		cmp #$E0
00BC47  1  90 0A        		bcc loc_9C44
00BC49  1               loc_9C3A:
00BC49  1               
00BC49  1  A9 80        		lda #$80
00BC4B  1  85 FC        		sta EventMusicQueue
00BC4D  1  EE 72 07     		inc OperMode_Task
00BC50  1  4C B5 BC     		jmp sub_9CA6
00BC53  1               loc_9C44:
00BC53  1               
00BC53  1  20 61 AB     		jsr MoveEnemySlowVert
00BC56  1  4C BF BD     		jmp loc_9DB0
00BC59  1               loc_9C4A:
00BC59  1               
00BC59  1  CE 64 03     		dec BowserFeetCounter
00BC5C  1  D0 44        		bne loc_9C93
00BC5E  1  A9 04        		lda #4
00BC60  1  8D 64 03     		sta BowserFeetCounter
00BC63  1  AD 63 03     		lda BowserBodyControls
00BC66  1  49 01        		eor #1
00BC68  1  8D 63 03     		sta BowserBodyControls
00BC6B  1  A9 22        		lda #$22
00BC6D  1  85 05        		sta byte_5
00BC6F  1  AC 69 03     		ldy BridgeCollapseOffset
00BC72  1  B9 1E BC     		lda BridgeCollapseData,y
00BC75  1  85 04        		sta byte_4
00BC77  1  AC 00 03     		ldy VRAM_Buffer1_Offset
00BC7A  1  C8           		iny
00BC7B  1  A2 0C        		ldx #$C
00BC7D  1  20 57 8A     		jsr loc_69AA
00BC80  1  A6 08        		ldx ObjectOffset
00BC82  1  20 19 8A     		jsr loc_696C
00BC85  1  A9 08        		lda #8
00BC87  1  85 FE        		sta Square2SoundQueue
00BC89  1  A9 01        		lda #1
00BC8B  1  85 FD        		sta NoiseSoundQueue
00BC8D  1  EE 69 03     		inc BridgeCollapseOffset
00BC90  1  AD 69 03     		lda BridgeCollapseOffset
00BC93  1  C9 0F        		cmp #$F
00BC95  1  D0 0B        		bne loc_9C93
00BC97  1  20 5A AF     		jsr InitVStf
00BC9A  1  A9 40        		lda #$40
00BC9C  1  95 1E        		sta $1E,x
00BC9E  1  A9 80        		lda #$80
00BCA0  1  85 FE        		sta Square2SoundQueue
00BCA2  1               loc_9C93:
00BCA2  1               
00BCA2  1  4C BF BD     		jmp loc_9DB0
00BCA5  1               PRandomRange:
00BCA5  1  21           		.byte $21
00BCA6  1  41           		.byte $41
00BCA7  1  11           		.byte $11
00BCA8  1  31           		.byte $31
00BCA9  1               RunBowser:
00BCA9  1               
00BCA9  1  B5 1E        		lda Enemy_State,x
00BCAB  1  29 20        		and #$20
00BCAD  1  F0 14        		beq loc_9CB4
00BCAF  1  B5 CF        		lda Enemy_Y_Position,x
00BCB1  1  C9 E0        		cmp #$E0
00BCB3  1  90 9E        		bcc loc_9C44
00BCB5  1               sub_9CA6:
00BCB5  1               
00BCB5  1  A2 04        		ldx #4
00BCB7  1               loc_9CA8:
00BCB7  1               
00BCB7  1  20 D9 B5     		jsr EraseEnemyObject
00BCBA  1  CA           		dex
00BCBB  1  10 FA        		bpl loc_9CA8
00BCBD  1  8D CB 06     		sta EnemyFrenzyBuffer
00BCC0  1  A6 08        		ldx ObjectOffset
00BCC2  1  60           		rts
00BCC3  1               loc_9CB4:
00BCC3  1               
00BCC3  1  A9 00        		lda #0
00BCC5  1  8D CB 06     		sta EnemyFrenzyBuffer
00BCC8  1  AD 47 07     		lda TimerControl
00BCCB  1  F0 03        		beq loc_9CC1
00BCCD  1  4C 7D BD     		jmp loc_9D6E
00BCD0  1               loc_9CC1:
00BCD0  1               
00BCD0  1  AD 63 03     		lda BowserBodyControls
00BCD3  1  10 03        		bpl loc_9CC9
00BCD5  1  4C 53 BD     		jmp loc_9D44
00BCD8  1               loc_9CC9:
00BCD8  1               
00BCD8  1  CE 64 03     		dec BowserFeetCounter
00BCDB  1  D0 0D        		bne loc_9CDB
00BCDD  1  A9 20        		lda #$20
00BCDF  1  8D 64 03     		sta BowserFeetCounter
00BCE2  1  AD 63 03     		lda BowserBodyControls
00BCE5  1  49 01        		eor #1
00BCE7  1  8D 63 03     		sta BowserBodyControls
00BCEA  1               loc_9CDB:
00BCEA  1               
00BCEA  1  A5 09        		lda FrameCounter
00BCEC  1  29 0F        		and #$F
00BCEE  1  D0 04        		bne loc_9CE5
00BCF0  1  A9 02        		lda #2
00BCF2  1  95 46        		sta $46,x
00BCF4  1               loc_9CE5:
00BCF4  1               
00BCF4  1  BD 8A 07     		lda $78A,x
00BCF7  1  F0 1C        		beq loc_9D06
00BCF9  1  20 9C CD     		jsr PlayerEnemyDiff
00BCFC  1  10 17        		bpl loc_9D06
00BCFE  1  A9 01        		lda #1
00BD00  1  95 46        		sta $46,x
00BD02  1  A9 02        		lda #2
00BD04  1  8D 65 03     		sta BowserMovementSpeed
00BD07  1  A9 20        		lda #$20
00BD09  1  9D 8A 07     		sta $78A,x
00BD0C  1  8D 90 07     		sta BowserFireBreathTimer
00BD0F  1  B5 87        		lda $87,x
00BD11  1  C9 C8        		cmp #$C8
00BD13  1  B0 3E        		bcs loc_9D44
00BD15  1               loc_9D06:
00BD15  1               
00BD15  1  A5 09        		lda FrameCounter
00BD17  1  29 03        		and #3
00BD19  1  D0 38        		bne loc_9D44
00BD1B  1  B5 87        		lda $87,x
00BD1D  1  CD 66 03     		cmp BowserOrigXPos
00BD20  1  D0 0C        		bne loc_9D1F
00BD22  1  BD A7 07     		lda $7A7,x
00BD25  1  29 03        		and #3
00BD27  1  A8           		tay
00BD28  1  B9 A5 BC     		lda PRandomRange,y
00BD2B  1  8D DC 06     		sta MaxRangeFromOrigin
00BD2E  1               loc_9D1F:
00BD2E  1               
00BD2E  1  B5 87        		lda $87,x
00BD30  1  18           		clc
00BD31  1  6D 65 03     		adc BowserMovementSpeed
00BD34  1  95 87        		sta $87,x
00BD36  1  B4 46        		ldy $46,x
00BD38  1  C0 01        		cpy #1
00BD3A  1  F0 17        		beq loc_9D44
00BD3C  1  A0 FF        		ldy #$FF
00BD3E  1  38           		sec
00BD3F  1  ED 66 03     		sbc BowserOrigXPos
00BD42  1  10 07        		bpl loc_9D3C
00BD44  1  49 FF        		eor #$FF
00BD46  1  18           		clc
00BD47  1  69 01        		adc #1
00BD49  1  A0 01        		ldy #1
00BD4B  1               loc_9D3C:
00BD4B  1               
00BD4B  1  CD DC 06     		cmp MaxRangeFromOrigin
00BD4E  1  90 03        		bcc loc_9D44
00BD50  1  8C 65 03     		sty BowserMovementSpeed
00BD53  1               loc_9D44:
00BD53  1               
00BD53  1  BD 8A 07     		lda $78A,x
00BD56  1  D0 28        		bne loc_9D71
00BD58  1  20 61 AB     		jsr MoveEnemySlowVert
00BD5B  1  AD 5F 07     		lda WorldNumber
00BD5E  1  C9 05        		cmp #5
00BD60  1  90 09        		bcc loc_9D5C
00BD62  1  A5 09        		lda FrameCounter
00BD64  1  29 03        		and #3
00BD66  1  D0 03        		bne loc_9D5C
00BD68  1  20 66 A6     		jsr SpawnHammerObj
00BD6B  1               loc_9D5C:
00BD6B  1               
00BD6B  1  B5 CF        		lda $CF,x
00BD6D  1  C9 80        		cmp #$80
00BD6F  1  90 1C        		bcc loc_9D7E
00BD71  1  BD A7 07     		lda $7A7,x
00BD74  1  29 03        		and #3
00BD76  1  A8           		tay
00BD77  1  B9 A5 BC     		lda PRandomRange,y
00BD7A  1  9D 8A 07     		sta $78A,x
00BD7D  1               loc_9D6E:
00BD7D  1               
00BD7D  1  4C 8D BD     		jmp loc_9D7E
00BD80  1               loc_9D71:
00BD80  1               
00BD80  1  C9 01        		cmp #1
00BD82  1  D0 09        		bne loc_9D7E
00BD84  1  D6 CF        		dec $CF,x
00BD86  1  20 5A AF     		jsr InitVStf
00BD89  1  A9 FE        		lda #$FE
00BD8B  1  95 A0        		sta $A0,x
00BD8D  1               loc_9D7E:
00BD8D  1               
00BD8D  1  AD 5F 07     		lda WorldNumber
00BD90  1  C9 07        		cmp #7
00BD92  1  F0 04        		beq loc_9D89
00BD94  1  C9 05        		cmp #5
00BD96  1  B0 27        		bcs loc_9DB0
00BD98  1               loc_9D89:
00BD98  1               
00BD98  1  AD 90 07     		lda BowserFireBreathTimer
00BD9B  1  D0 22        		bne loc_9DB0
00BD9D  1  A9 20        		lda #$20
00BD9F  1  8D 90 07     		sta BowserFireBreathTimer
00BDA2  1  AD 63 03     		lda BowserBodyControls
00BDA5  1  49 80        		eor #$80
00BDA7  1  8D 63 03     		sta BowserBodyControls
00BDAA  1  30 E1        		bmi loc_9D7E
00BDAC  1  20 1D BE     		jsr sub_9E0E
00BDAF  1  AC CC 06     		ldy SecondaryHardMode
00BDB2  1  F0 03        		beq loc_9DA8
00BDB4  1  38           		sec
00BDB5  1  E9 10        		sbc #$10
00BDB7  1               loc_9DA8:
00BDB7  1               
00BDB7  1  8D 90 07     		sta BowserFireBreathTimer
00BDBA  1  A9 15        		lda #$15
00BDBC  1  8D CB 06     		sta EnemyFrenzyBuffer
00BDBF  1               loc_9DB0:
00BDBF  1               
00BDBF  1  20 00 BE     		jsr sub_9DF1
00BDC2  1  A0 10        		ldy #$10
00BDC4  1  B5 46        		lda $46,x
00BDC6  1  4A           		lsr
00BDC7  1  90 02        		bcc loc_9DBC
00BDC9  1  A0 F0        		ldy #$F0
00BDCB  1               loc_9DBC:
00BDCB  1               
00BDCB  1  98           		tya
00BDCC  1  18           		clc
00BDCD  1  75 87        		adc $87,x
00BDCF  1  AC CF 06     		ldy DuplicateObj_Offset
00BDD2  1  99 87 00     		sta $87,y
00BDD5  1  B5 CF        		lda $CF,x
00BDD7  1  18           		clc
00BDD8  1  69 08        		adc #8
00BDDA  1  99 CF 00     		sta $CF,y
00BDDD  1  B5 1E        		lda $1E,x
00BDDF  1  99 1E 00     		sta $1E,y
00BDE2  1  B5 46        		lda $46,x
00BDE4  1  99 46 00     		sta $46,y
00BDE7  1  A5 08        		lda ObjectOffset
00BDE9  1  48           		pha
00BDEA  1  AE CF 06     		ldx DuplicateObj_Offset
00BDED  1  86 08        		stx ObjectOffset
00BDEF  1  A9 2D        		lda #$2D
00BDF1  1  95 16        		sta $16,x
00BDF3  1  20 00 BE     		jsr sub_9DF1
00BDF6  1  68           		pla
00BDF7  1  85 08        		sta ObjectOffset
00BDF9  1  AA           		tax
00BDFA  1  A9 00        		lda #0
00BDFC  1  8D 6A 03     		sta BowserGfxFlag
00BDFF  1               locret_9DF0:
00BDFF  1  60           		rts
00BE00  1               sub_9DF1:
00BE00  1  EE 6A 03     		inc BowserGfxFlag
00BE03  1  20 18 B5     		jsr RunRetainerObj
00BE06  1  B5 1E        		lda $1E,x
00BE08  1  D0 F5        		bne locret_9DF0
00BE0A  1  A9 0A        		lda #$A
00BE0C  1  9D 9A 04     		sta $49A,x
00BE0F  1  20 A4 CE     		jsr GetEnemyBoundBox
00BE12  1  4C 9C C4     		jmp PlayerEnemyCollision
00BE15  1               
00BE15  1               FlameTimerData:
00BE15  1  BF           		.byte $BF
00BE16  1  40           		.byte $40
00BE17  1  BF           		.byte $BF
00BE18  1  BF           		.byte $BF
00BE19  1  BF           		.byte $BF
00BE1A  1  40           		.byte $40
00BE1B  1  40           		.byte $40
00BE1C  1  BF           		.byte $BF
00BE1D  1               
00BE1D  1               sub_9E0E:
00BE1D  1  AC 67 03     		ldy BowserFlameTimerCtrl
00BE20  1  EE 67 03     		inc BowserFlameTimerCtrl
00BE23  1  AD 67 03     		lda BowserFlameTimerCtrl
00BE26  1  29 07        		and #7
00BE28  1  8D 67 03     		sta BowserFlameTimerCtrl
00BE2B  1  B9 15 BE     		lda FlameTimerData,y
00BE2E  1               locret_9E1F:
00BE2E  1  60           		rts
00BE2F  1               
00BE2F  1               ProcBowserFlame:
00BE2F  1  AD 47 07     		lda TimerControl
00BE32  1  D0 30        		bne loc_9E55
00BE34  1  A9 40        		lda #$40
00BE36  1  AC CC 06     		ldy SecondaryHardMode
00BE39  1  F0 02        		beq loc_9E2E
00BE3B  1  A9 60        		lda #$60
00BE3D  1               loc_9E2E:
00BE3D  1  85 00        		sta TMP_0
00BE3F  1  BD 01 04     		lda $401,x
00BE42  1  38           		sec
00BE43  1  E5 00        		sbc TMP_0
00BE45  1  9D 01 04     		sta $401,x
00BE48  1  B5 87        		lda Enemy_X_Position,x
00BE4A  1  E9 01        		sbc #1
00BE4C  1  95 87        		sta Enemy_X_Position,x
00BE4E  1  B5 6E        		lda Enemy_PageLoc,x
00BE50  1  E9 00        		sbc #0
00BE52  1  95 6E        		sta Enemy_PageLoc,x
00BE54  1  BC 17 04     		ldy $417,x
00BE57  1  B5 CF        		lda Enemy_Y_Position,x
00BE59  1  D9 BA B1     		cmp FlameYPosData,y
00BE5C  1  F0 06        		beq loc_9E55
00BE5E  1  18           		clc
00BE5F  1  7D 34 04     		adc $434,x
00BE62  1  95 CF        		sta Enemy_Y_Position,x
00BE64  1               loc_9E55:
00BE64  1  20 DF DD     		jsr RelativeEnemyPosition
00BE67  1  B5 1E        		lda Enemy_State,x
00BE69  1  D0 C3        		bne locret_9E1F
00BE6B  1  A9 51        		lda #$51
00BE6D  1  85 00        		sta TMP_0
00BE6F  1  A0 02        		ldy #2
00BE71  1  A5 09        		lda FrameCounter
00BE73  1  29 02        		and #2
00BE75  1  F0 02        		beq loc_9E6A
00BE77  1  A0 82        		ldy #$82
00BE79  1               loc_9E6A:
00BE79  1  84 01        		sty TMP_1
00BE7B  1  BC E5 06     		ldy $6E5,x
00BE7E  1  A2 00        		ldx #0
00BE80  1               loc_9E71:
00BE80  1  AD B9 03     		lda Enemy_Rel_YPos
00BE83  1  99 00 02     		sta $200,y
00BE86  1  A5 00        		lda TMP_0
00BE88  1  99 01 02     		sta $201,y
00BE8B  1  E6 00        		inc TMP_0
00BE8D  1  A5 01        		lda TMP_1
00BE8F  1  99 02 02     		sta $202,y
00BE92  1  AD AE 03     		lda Enemy_Rel_XPos
00BE95  1  99 03 02     		sta $203,y
00BE98  1  18           		clc
00BE99  1  69 08        		adc #8
00BE9B  1  8D AE 03     		sta Enemy_Rel_XPos
00BE9E  1  C8           		iny
00BE9F  1  C8           		iny
00BEA0  1  C8           		iny
00BEA1  1  C8           		iny
00BEA2  1  E8           		inx
00BEA3  1  E0 03        		cpx #3
00BEA5  1  90 D9        		bcc loc_9E71
00BEA7  1  A6 08        		ldx ObjectOffset
00BEA9  1  20 3C DE     		jsr GetEnemyOffscreenBits
00BEAC  1  BC E5 06     		ldy $6E5,x
00BEAF  1  AD D1 03     		lda Enemy_OffscreenBits
00BEB2  1  4A           		lsr
00BEB3  1  48           		pha
00BEB4  1  90 05        		bcc loc_9EAC
00BEB6  1  A9 F8        		lda #$F8
00BEB8  1  99 0C 02     		sta $20C,y
00BEBB  1               loc_9EAC:
00BEBB  1  68           		pla
00BEBC  1  4A           		lsr
00BEBD  1  48           		pha
00BEBE  1  90 05        		bcc loc_9EB6
00BEC0  1  A9 F8        		lda #$F8
00BEC2  1  99 08 02     		sta $208,y
00BEC5  1               loc_9EB6:
00BEC5  1  68           		pla
00BEC6  1  4A           		lsr
00BEC7  1  48           		pha
00BEC8  1  90 05        		bcc loc_9EC0
00BECA  1  A9 F8        		lda #$F8
00BECC  1  99 04 02     		sta $204,y
00BECF  1               loc_9EC0:
00BECF  1  68           		pla
00BED0  1  4A           		lsr
00BED1  1  90 05        		bcc locret_9EC9
00BED3  1  A9 F8        		lda #$F8
00BED5  1  99 00 02     		sta $200,y
00BED8  1               locret_9EC9:
00BED8  1  60           		rts
00BED9  1               
00BED9  1               RunFireworks:
00BED9  1  D6 A0        		dec ExplosionTimerCounter,x
00BEDB  1  D0 0C        		bne loc_9EDA
00BEDD  1  A9 08        		lda #8
00BEDF  1  95 A0        		sta ExplosionTimerCounter,x
00BEE1  1  F6 58        		inc Enemy_X_Speed,x
00BEE3  1  B5 58        		lda Enemy_X_Speed,x
00BEE5  1  C9 03        		cmp #3
00BEE7  1  B0 18        		bcs FireworksSoundScore
00BEE9  1               loc_9EDA:
00BEE9  1  20 DF DD     		jsr RelativeEnemyPosition
00BEEC  1  AD B9 03     		lda Enemy_Rel_YPos
00BEEF  1  8D BA 03     		sta Fireball_Rel_YPos
00BEF2  1  AD AE 03     		lda Enemy_Rel_XPos
00BEF5  1  8D AF 03     		sta Fireball_Rel_XPos
00BEF8  1  BC E5 06     		ldy $6E5,x
00BEFB  1  B5 58        		lda $58,x
00BEFD  1  20 9A D9     		jsr DrawExplosion_Fireworks
00BF00  1  60           		rts
00BF01  1               FireworksSoundScore:
00BF01  1  A9 00        		lda #0
00BF03  1  95 0F        		sta $F,x
00BF05  1  A9 08        		lda #8
00BF07  1  85 FE        		sta Square2SoundQueue
00BF09  1  60           		rts
00BF0A  1               
00BF0A  1               StarFlagYPosAdder:
00BF0A  1  00           		.byte 0
00BF0B  1  00           		.byte 0
00BF0C  1  08           		.byte 8
00BF0D  1  08           		.byte 8
00BF0E  1               StarFlagXPosAdder:
00BF0E  1  00           		.byte 0
00BF0F  1  08           		.byte 8
00BF10  1  00           		.byte 0
00BF11  1  08           		.byte 8
00BF12  1               StarFlagTileData:
00BF12  1  54           		.byte $54
00BF13  1  55           		.byte $55
00BF14  1  56           		.byte $56
00BF15  1  57           		.byte $57
00BF16  1               
00BF16  1               RunStarFlagObj:
00BF16  1  A9 00        		lda #0
00BF18  1  8D CB 06     		sta EnemyFrenzyBuffer
00BF1B  1  AD 46 07     		lda StarFlagTaskControl
00BF1E  1  C9 05        		cmp #5
00BF20  1  B0 19        		bcs StarFlagExit
00BF22  1  20 FC 8C     		jsr JumpEngine
00BF25  1  3B BF        		.word StarFlagExit
00BF27  1  2F BF        		.word GameTimerFireworks_NEW
00BF29  1  3C BF        		.word AwardGameTimerPoints
00BF2B  1  6A BF        		.word RaiseFlagSetoffFWorks
00BF2D  1  BE BF        		.word DelayToAreaEnd
00BF2F  1               
00BF2F  1               GameTimerFireworks_NEW:
00BF2F  1  A0 00        		ldy #0
00BF31  1  A9 FF        		lda #$FF
00BF33  1  8D D7 06     		sta FireworksCounter
00BF36  1  94 1E        		sty $1E,x
00BF38  1               NextStarFlagControl:
00BF38  1  EE 46 07     		inc StarFlagTaskControl
00BF3B  1               StarFlagExit:
00BF3B  1  60           		rts
00BF3C  1               
00BF3C  1               AwardGameTimerPoints:
00BF3C  1  AD F8 07              lda GameTimerDisplay   ;check all game timer digits for any intervals left
00BF3F  1  0D F9 07              ora GameTimerDisplay+1
00BF42  1  0D FA 07              ora GameTimerDisplay+2
00BF45  1  F0 F1                 beq NextStarFlagControl   ;if no time left on game timer at all, branch to next task
00BF47  1               AwardTimerCastle:
00BF47  1  A5 09                 lda FrameCounter
00BF49  1  29 04                 and #%00000100         ;check frame counter for d2 set (skip ahead
00BF4B  1  F0 04                 beq NoTTick            ;for four frames every four frames) branch if not set
00BF4D  1  A9 10                 lda #Sfx_TimerTick
00BF4F  1  85 FE                 sta Square2SoundQueue  ;load timer tick sound
00BF51  1  A0 23        NoTTick: ldy #$23               ;set offset here to subtract from game timer's last digit
00BF53  1  A9 FF                 lda #$ff               ;set adder here to $ff, or -1, to subtract one
00BF55  1  8D 39 01              sta DigitModifier+5    ;from the last digit of the game timer
00BF58  1  20 1B 8E              jsr DigitsMathRoutine  ;subtract digit
00BF5B  1  A9 05                 lda #$05               ;set now to add 50 points
00BF5D  1  8D 39 01              sta DigitModifier+5    ;per game timer interval subtracted
00BF60  1               
00BF60  1               EndAreaPoints:
00BF60  1  A0 0B                 ldy #$0b               ;load offset for score, then jump to handle the awarding
00BF62  1  20 1B 8E              jsr DigitsMathRoutine
00BF65  1  A9 02                 lda #$02               ;now update the score on the screen
00BF67  1  4C F3 A7              jmp WriteDigits
00BF6A  1               
00BF6A  1               RaiseFlagSetoffFWorks:
00BF6A  1  B5 CF        		lda Enemy_Y_Position,x
00BF6C  1  C9 72        		cmp #$72
00BF6E  1  90 05        		bcc SetoffF
00BF70  1  D6 CF        		dec $CF,x
00BF72  1  4C 81 BF     		jmp DrawStarFlag
00BF75  1               SetoffF:
00BF75  1  AD D7 06     		lda FireworksCounter
00BF78  1  F0 38        		beq DrawFlagSetTimer
00BF7A  1  30 36        		bmi DrawFlagSetTimer
00BF7C  1  A9 16        		lda #$16
00BF7E  1  8D CB 06     		sta EnemyFrenzyBuffer
00BF81  1               
00BF81  1               DrawStarFlag:
00BF81  1  20 DF DD     		jsr RelativeEnemyPosition
00BF84  1  BC E5 06     		ldy $6E5,x
00BF87  1  A2 03        		ldx #3
00BF89  1               DSFLoop:
00BF89  1  AD B9 03     		lda Enemy_Rel_YPos
00BF8C  1  18           		clc
00BF8D  1  7D 0A BF     		adc StarFlagYPosAdder,x
00BF90  1  99 00 02     		sta $200,y
00BF93  1  BD 12 BF     		lda StarFlagTileData,x
00BF96  1  99 01 02     		sta $201,y
00BF99  1  A9 22        		lda #$22
00BF9B  1  99 02 02     		sta $202,y
00BF9E  1  AD AE 03     		lda Enemy_Rel_XPos
00BFA1  1  18           		clc
00BFA2  1  7D 0E BF     		adc StarFlagXPosAdder,x
00BFA5  1  99 03 02     		sta $203,y
00BFA8  1  C8           		iny
00BFA9  1  C8           		iny
00BFAA  1  C8           		iny
00BFAB  1  C8           		iny
00BFAC  1  CA           		dex
00BFAD  1  10 DA        		bpl DSFLoop
00BFAF  1  A6 08        		ldx ObjectOffset
00BFB1  1  60           		rts
00BFB2  1               
00BFB2  1               DrawFlagSetTimer:
00BFB2  1  20 81 BF     		jsr DrawStarFlag
00BFB5  1  A9 06        		lda #6
00BFB7  1  9D 96 07     		sta $796,x
00BFBA  1               IncrementSFTask2:
00BFBA  1  EE 46 07     		inc StarFlagTaskControl
00BFBD  1  60           		rts
00BFBE  1               
00BFBE  1               DelayToAreaEnd:
00BFBE  1  20 81 BF     		jsr DrawStarFlag
00BFC1  1  BD 96 07     		lda EnemyIntervalTimer,x
00BFC4  1  D0 05        		bne locret_9FDB
00BFC6  1  AD B1 07     		lda EventMusicBuffer
00BFC9  1  F0 EF        		beq IncrementSFTask2
00BFCB  1               locret_9FDB:
00BFCB  1  60           		rts
00BFCC  1               
00BFCC  1               MovePiranhaPlant:
00BFCC  1  B5 1E        		lda Enemy_State,x
00BFCE  1  D0 5E        		bne loc_A03D
00BFD0  1  BD 8A 07     		lda EnemyFrameTimer,x
00BFD3  1  D0 59        		bne loc_A03D
00BFD5  1  B5 A0        		lda ExplosionTimerCounter,x
00BFD7  1  D0 24        		bne loc_A00C
00BFD9  1  B5 58        		lda Enemy_X_Speed,x
00BFDB  1  30 15        		bmi loc_A001
00BFDD  1  20 9C CD     		jsr PlayerEnemyDiff
00BFE0  1  10 09        		bpl loc_9FFB
00BFE2  1  A5 00        		lda TMP_0
00BFE4  1  49 FF        		eor #$FF
00BFE6  1  18           		clc
00BFE7  1  69 01        		adc #1
00BFE9  1  85 00        		sta TMP_0
00BFEB  1               loc_9FFB:
00BFEB  1               
00BFEB  1  A5 00        		lda TMP_0
00BFED  1  CD 52 64     		cmp WRAM_PiranhaPlantDist
00BFF0  1  90 3C        		bcc loc_A03D
00BFF2  1               loc_A001:
00BFF2  1               
00BFF2  1  B5 58        		lda $58,x
00BFF4  1  49 FF        		eor #$FF
00BFF6  1  18           		clc
00BFF7  1  69 01        		adc #1
00BFF9  1  95 58        		sta $58,x
00BFFB  1  F6 A0        		inc $A0,x
00BFFD  1               loc_A00C:
00BFFD  1               
00BFFD  1  BD 34 04     		lda $434,x
00C000  1  B4 58        		ldy $58,x
00C002  1  10 03        		bpl loc_A016
00C004  1  BD 17 04     		lda $417,x
00C007  1               loc_A016:
00C007  1               
00C007  1  85 00        		sta TMP_0
00C009  1  AD 3D 64     		lda WRAM_PiranhaPlantAttributeData
00C00C  1  C9 22        		cmp #$22
00C00E  1  F0 05        		beq loc_A024
00C010  1  A5 09        		lda FrameCounter
00C012  1  4A           		lsr
00C013  1  90 19        		bcc loc_A03D
00C015  1               loc_A024:
00C015  1               
00C015  1  AD 47 07     		lda TimerControl
00C018  1  D0 14        		bne loc_A03D
00C01A  1  B5 CF        		lda $CF,x
00C01C  1  18           		clc
00C01D  1  75 58        		adc $58,x
00C01F  1  95 CF        		sta $CF,x
00C021  1  C5 00        		cmp TMP_0
00C023  1  D0 09        		bne loc_A03D
00C025  1  A9 00        		lda #0
00C027  1  95 A0        		sta $A0,x
00C029  1  A9 40        		lda #$40
00C02B  1  9D 8A 07     		sta $78A,x
00C02E  1               loc_A03D:
00C02E  1               
00C02E  1  A9 20        		lda #$20
00C030  1  9D C5 03     		sta $3C5,x
00C033  1  60           		rts
00C034  1               sub_A043:
00C034  1               
00C034  1  85 07        		sta unk_7
00C036  1  B5 34        		lda $34,x
00C038  1  D0 0E        		bne loc_A057
00C03A  1  A0 18        		ldy #$18
00C03C  1  B5 58        		lda $58,x
00C03E  1  18           		clc
00C03F  1  65 07        		adc unk_7
00C041  1  95 58        		sta $58,x
00C043  1  B5 A0        		lda $A0,x
00C045  1  69 00        		adc #0
00C047  1  60           		rts
00C048  1               loc_A057:
00C048  1               
00C048  1  A0 08        		ldy #8
00C04A  1  B5 58        		lda $58,x
00C04C  1  38           		sec
00C04D  1  E5 07        		sbc unk_7
00C04F  1  95 58        		sta $58,x
00C051  1               sub_A060:
00C051  1               
00C051  1  B5 A0        		lda $A0,x
00C053  1  E9 00        		sbc #0
00C055  1  60           		rts
00C056  1               BalancePlatform:
00C056  1               
00C056  1  B5 B6        		lda Enemy_Y_HighPos,x
00C058  1  C9 03        		cmp #3
00C05A  1  D0 03        		bne loc_A06E
00C05C  1  4C D9 B5     		jmp EraseEnemyObject
00C05F  1               loc_A06E:
00C05F  1               
00C05F  1  B5 1E        		lda $1E,x
00C061  1  10 01        		bpl loc_A073
00C063  1               locret_A072:
00C063  1               
00C063  1  60           		rts
00C064  1               loc_A073:
00C064  1               
00C064  1  A8           		tay
00C065  1  B9 16 00     		lda $16,y
00C068  1  C9 24        		cmp #$24
00C06A  1  D0 F7        		bne locret_A072
00C06C  1  BD A2 03     		lda $3A2,x
00C06F  1  85 00        		sta TMP_0
00C071  1  B5 46        		lda $46,x
00C073  1  F0 03        		beq loc_A087
00C075  1  4C E6 C1     		jmp loc_A1F5
00C078  1               loc_A087:
00C078  1               
00C078  1  A9 2D        		lda #$2D
00C07A  1  D5 CF        		cmp $CF,x
00C07C  1  90 0F        		bcc loc_A09C
00C07E  1  C4 00        		cpy TMP_0
00C080  1  F0 08        		beq loc_A099
00C082  1  18           		clc
00C083  1  69 02        		adc #2
00C085  1  95 CF        		sta $CF,x
00C087  1  4C DC C1     		jmp sub_A1EB
00C08A  1               loc_A099:
00C08A  1               
00C08A  1  4C C3 C1     		jmp loc_A1D2
00C08D  1               loc_A09C:
00C08D  1               
00C08D  1  D9 CF 00     		cmp $CF,y
00C090  1  90 0D        		bcc loc_A0AE
00C092  1  E4 00        		cpx TMP_0
00C094  1  F0 F4        		beq loc_A099
00C096  1  18           		clc
00C097  1  69 02        		adc #2
00C099  1  99 CF 00     		sta $CF,y
00C09C  1  4C DC C1     		jmp sub_A1EB
00C09F  1               loc_A0AE:
00C09F  1               
00C09F  1  B5 CF        		lda $CF,x
00C0A1  1  48           		pha
00C0A2  1  BD A2 03     		lda $3A2,x
00C0A5  1  10 18        		bpl loc_A0CE
00C0A7  1  BD 34 04     		lda $434,x
00C0AA  1  18           		clc
00C0AB  1  69 05        		adc #5
00C0AD  1  85 00        		sta TMP_0
00C0AF  1  B5 A0        		lda $A0,x
00C0B1  1  69 00        		adc #0
00C0B3  1  30 1A        		bmi loc_A0DE
00C0B5  1  D0 0C        		bne loc_A0D2
00C0B7  1  A5 00        		lda TMP_0
00C0B9  1  C9 0B        		cmp #$B
00C0BB  1  90 0C        		bcc loc_A0D8
00C0BD  1  B0 04        		bcs loc_A0D2
00C0BF  1               loc_A0CE:
00C0BF  1               
00C0BF  1  C5 08        		cmp ObjectOffset
00C0C1  1  F0 0C        		beq loc_A0DE
00C0C3  1               loc_A0D2:
00C0C3  1               
00C0C3  1  20 8C AB     		jsr loc_8B87+1
00C0C6  1  4C D2 C0     		jmp loc_A0E1
00C0C9  1               loc_A0D8:
00C0C9  1               
00C0C9  1  20 DC C1     		jsr sub_A1EB
00C0CC  1  4C D2 C0     		jmp loc_A0E1
00C0CF  1               loc_A0DE:
00C0CF  1               
00C0CF  1  20 89 AB     		jsr sub_8B85
00C0D2  1               loc_A0E1:
00C0D2  1               
00C0D2  1  B4 1E        		ldy $1E,x
00C0D4  1  68           		pla
00C0D5  1  38           		sec
00C0D6  1  F5 CF        		sbc $CF,x
00C0D8  1  18           		clc
00C0D9  1  79 CF 00     		adc $CF,y
00C0DC  1  99 CF 00     		sta $CF,y
00C0DF  1  BD A2 03     		lda $3A2,x
00C0E2  1  30 04        		bmi loc_A0F7
00C0E4  1  AA           		tax
00C0E5  1  20 87 C8     		jsr PositionPlayerOnVPlat
00C0E8  1               loc_A0F7:
00C0E8  1               
00C0E8  1  A4 08        		ldy ObjectOffset
00C0EA  1  B9 A0 00     		lda $A0,y
00C0ED  1  19 34 04     		ora $434,y
00C0F0  1  F0 77        		beq loc_A178
00C0F2  1  AE 00 03     		ldx VRAM_Buffer1_Offset
00C0F5  1  E0 20        		cpx #$20
00C0F7  1  B0 70        		bcs loc_A178
00C0F9  1  B9 A0 00     		lda $A0,y
00C0FC  1  48           		pha
00C0FD  1  48           		pha
00C0FE  1  20 6C C1     		jsr sub_A17B
00C101  1  A5 01        		lda TMP_1
00C103  1  9D 01 03     		sta $301,x
00C106  1  A5 00        		lda TMP_0
00C108  1  9D 02 03     		sta $302,x
00C10B  1  A9 02        		lda #2
00C10D  1  9D 03 03     		sta $303,x
00C110  1  B9 A0 00     		lda $A0,y
00C113  1  30 0D        		bmi loc_A131
00C115  1  A9 A2        		lda #$A2
00C117  1  9D 04 03     		sta $304,x
00C11A  1  A9 A3        		lda #$A3
00C11C  1  9D 05 03     		sta $305,x
00C11F  1  4C 2A C1     		jmp loc_A139
00C122  1               loc_A131:
00C122  1               
00C122  1  A9 24        		lda #$24
00C124  1  9D 04 03     		sta $304,x
00C127  1  9D 05 03     		sta $305,x
00C12A  1               loc_A139:
00C12A  1               
00C12A  1  B9 1E 00     		lda $1E,y
00C12D  1  A8           		tay
00C12E  1  68           		pla
00C12F  1  49 FF        		eor #$FF
00C131  1  20 6C C1     		jsr sub_A17B
00C134  1  A5 01        		lda TMP_1
00C136  1  9D 06 03     		sta $306,x
00C139  1  A5 00        		lda TMP_0
00C13B  1  9D 07 03     		sta $307,x
00C13E  1  A9 02        		lda #2
00C140  1  9D 08 03     		sta $308,x
00C143  1  68           		pla
00C144  1  10 0D        		bpl loc_A162
00C146  1  A9 A2        		lda #$A2
00C148  1  9D 09 03     		sta $309,x
00C14B  1  A9 A3        		lda #$A3
00C14D  1  9D 0A 03     		sta $30A,x
00C150  1  4C 5B C1     		jmp loc_A16A
00C153  1               loc_A162:
00C153  1               
00C153  1  A9 24        		lda #$24
00C155  1  9D 09 03     		sta $309,x
00C158  1  9D 0A 03     		sta $30A,x
00C15B  1               loc_A16A:
00C15B  1               
00C15B  1  A9 00        		lda #0
00C15D  1  9D 0B 03     		sta $30B,x
00C160  1  AD 00 03     		lda VRAM_Buffer1_Offset
00C163  1  18           		clc
00C164  1  69 0A        		adc #$A
00C166  1  8D 00 03     		sta VRAM_Buffer1_Offset
00C169  1               loc_A178:
00C169  1               
00C169  1  A6 08        		ldx ObjectOffset
00C16B  1  60           		rts
00C16C  1               sub_A17B:
00C16C  1               
00C16C  1  48           		pha
00C16D  1  B9 87 00     		lda $87,y
00C170  1  18           		clc
00C171  1  69 08        		adc #8
00C173  1  AE CC 06     		ldx SecondaryHardMode
00C176  1  D0 03        		bne loc_A18A
00C178  1  18           		clc
00C179  1  69 10        		adc #$10
00C17B  1               loc_A18A:
00C17B  1               
00C17B  1  48           		pha
00C17C  1  B9 6E 00     		lda $6E,y
00C17F  1  69 00        		adc #0
00C181  1  85 02        		sta byte_2
00C183  1  68           		pla
00C184  1  29 F0        		and #$F0
00C186  1  4A           		lsr
00C187  1  4A           		lsr
00C188  1  4A           		lsr
00C189  1  85 00        		sta TMP_0
00C18B  1  B6 CF        		ldx $CF,y
00C18D  1  68           		pla
00C18E  1  10 05        		bpl loc_A1A4
00C190  1  8A           		txa
00C191  1  18           		clc
00C192  1  69 08        		adc #8
00C194  1  AA           		tax
00C195  1               loc_A1A4:
00C195  1               
00C195  1  8A           		txa
00C196  1  AE 00 03     		ldx VRAM_Buffer1_Offset
00C199  1  0A           		asl
00C19A  1  2A           		rol
00C19B  1  48           		pha
00C19C  1  2A           		rol
00C19D  1  29 03        		and #3
00C19F  1  09 20        		ora #$20
00C1A1  1  85 01        		sta TMP_1
00C1A3  1  A5 02        		lda byte_2
00C1A5  1  29 01        		and #1
00C1A7  1  0A           		asl
00C1A8  1  0A           		asl
00C1A9  1  05 01        		ora TMP_1
00C1AB  1  85 01        		sta TMP_1
00C1AD  1  68           		pla
00C1AE  1  29 E0        		and #$E0
00C1B0  1  18           		clc
00C1B1  1  65 00        		adc TMP_0
00C1B3  1  85 00        		sta TMP_0
00C1B5  1  B9 CF 00     		lda $CF,y
00C1B8  1  C9 E8        		cmp #$E8
00C1BA  1  90 06        		bcc locret_A1D1
00C1BC  1  A5 00        		lda TMP_0
00C1BE  1  29 BF        		and #$BF
00C1C0  1  85 00        		sta TMP_0
00C1C2  1               locret_A1D1:
00C1C2  1               
00C1C2  1  60           		rts
00C1C3  1               loc_A1D2:
00C1C3  1               
00C1C3  1  98           		tya
00C1C4  1  AA           		tax
00C1C5  1  20 3C DE     		jsr GetEnemyOffscreenBits
00C1C8  1  A9 06        		lda #6
00C1CA  1  20 6B C6     		jsr SetupFloateyNumber
00C1CD  1  AD AD 03     		lda Player_Rel_XPos
00C1D0  1  9D 17 01     		sta $117,x
00C1D3  1  A5 CE        		lda SprObject_Y_Position
00C1D5  1  9D 1E 01     		sta $11E,x
00C1D8  1  A9 01        		lda #1
00C1DA  1  95 46        		sta $46,x
00C1DC  1               sub_A1EB:
00C1DC  1               
00C1DC  1  20 5A AF     		jsr InitVStf
00C1DF  1  99 A0 00     		sta $A0,y
00C1E2  1  99 34 04     		sta $434,y
00C1E5  1  60           		rts
00C1E6  1               loc_A1F5:
00C1E6  1               
00C1E6  1  98           		tya
00C1E7  1  48           		pha
00C1E8  1  20 40 AB     		jsr loc_8B3C
00C1EB  1  68           		pla
00C1EC  1  AA           		tax
00C1ED  1  20 40 AB     		jsr loc_8B3C
00C1F0  1  A6 08        		ldx ObjectOffset
00C1F2  1  BD A2 03     		lda $3A2,x
00C1F5  1  30 04        		bmi loc_A20A
00C1F7  1  AA           		tax
00C1F8  1  20 87 C8     		jsr PositionPlayerOnVPlat
00C1FB  1               loc_A20A:
00C1FB  1               
00C1FB  1  A6 08        		ldx ObjectOffset
00C1FD  1  60           		rts
00C1FE  1               YMovingPlatform:
00C1FE  1               
00C1FE  1  B5 A0        		lda ExplosionTimerCounter,x
00C200  1  1D 34 04     		ora PiranhaPlantDownYPos,x
00C203  1  D0 15        		bne loc_A229
00C205  1  9D 17 04     		sta PiranhaPlantUpYPos,x
00C208  1  B5 CF        		lda Enemy_Y_Position,x
00C20A  1  DD 01 04     		cmp RedPTroopaOrigXPos,x
00C20D  1  B0 0B        		bcs loc_A229
00C20F  1  A5 09        		lda FrameCounter
00C211  1  29 07        		and #7
00C213  1  D0 02        		bne loc_A226
00C215  1  F6 CF        		inc Enemy_Y_Position,x
00C217  1               loc_A226:
00C217  1               
00C217  1  4C 29 C2     		jmp ChkYPCollision
00C21A  1               loc_A229:
00C21A  1               
00C21A  1  B5 CF        		lda $CF,x
00C21C  1  D5 58        		cmp $58,x
00C21E  1  90 06        		bcc loc_A235
00C220  1  20 8C AB     		jsr loc_8B87+1
00C223  1  4C 29 C2     		jmp ChkYPCollision
00C226  1               loc_A235:
00C226  1               
00C226  1  20 89 AB     		jsr sub_8B85
00C229  1               ChkYPCollision:
00C229  1               
00C229  1  BD A2 03     		lda $3A2,x
00C22C  1  30 03        		bmi locret_A240
00C22E  1  20 87 C8     		jsr PositionPlayerOnVPlat
00C231  1               locret_A240:
00C231  1               
00C231  1  60           		rts
00C232  1               XMovingPlatform:
00C232  1               
00C232  1  A9 0E        		lda #$E
00C234  1  20 88 B7     		jsr XMoveCntr_Platform
00C237  1  20 A7 B7     		jsr MoveWithXMCntrs
00C23A  1  BD A2 03     		lda HammerThrowingTimer,x
00C23D  1  30 1C        		bmi locret_A26A
00C23F  1               PositionPlayerOnHPlat:
00C23F  1               
00C23F  1  A5 86        		lda Player_X_Position
00C241  1  18           		clc
00C242  1  65 00        		adc TMP_0
00C244  1  85 86        		sta Player_X_Position
00C246  1  A5 6D        		lda Player_PageLoc
00C248  1  A4 00        		ldy TMP_0
00C24A  1  30 05        		bmi loc_A260
00C24C  1  69 00        		adc #0
00C24E  1  4C 53 C2     		jmp loc_A262
00C251  1               loc_A260:
00C251  1               
00C251  1  E9 00        		sbc #0
00C253  1               loc_A262:
00C253  1               
00C253  1  85 6D        		sta Player_PageLoc
00C255  1  8C A1 03     		sty Platform_X_Scroll
00C258  1  20 87 C8     		jsr PositionPlayerOnVPlat
00C25B  1               locret_A26A:
00C25B  1  60           		rts
00C25C  1               
00C25C  1               DropPlatform:
00C25C  1  BD A2 03     		lda HammerThrowingTimer,x
00C25F  1  30 06        		bmi locret_A276
00C261  1  20 5D AB     		jsr MoveDropPlatform
00C264  1  20 87 C8     		jsr PositionPlayerOnVPlat
00C267  1               locret_A276:
00C267  1  60           		rts
00C268  1               
00C268  1               RightPlatform:
00C268  1  20 D7 AA     		jsr MoveEnemyHorizontally
00C26B  1  85 00        		sta TMP_0
00C26D  1  BD A2 03     		lda HammerThrowingTimer,x
00C270  1  30 07        		bmi locret_A288
00C272  1  A9 10        		lda #$10
00C274  1  95 58        		sta Enemy_X_Speed,x
00C276  1  20 3F C2     		jsr PositionPlayerOnHPlat
00C279  1               locret_A288:
00C279  1  60           		rts
00C27A  1               
00C27A  1               MoveLargeLiftPlat:
00C27A  1  20 86 C2     		jsr MoveLiftPlatforms
00C27D  1  4C 29 C2     		jmp ChkYPCollision
00C280  1               
00C280  1               MoveSmallPlatform:
00C280  1  20 86 C2     		jsr MoveLiftPlatforms
00C283  1  4C 9C C2     		jmp ChkSmallPlatCollision
00C286  1               
00C286  1               MoveLiftPlatforms:
00C286  1  AD 47 07     		lda TimerControl
00C289  1  D0 19        		bne locret_A2B3
00C28B  1  BD 17 04     		lda $417,x
00C28E  1  18           		clc
00C28F  1  7D 34 04     		adc $434,x
00C292  1  9D 17 04     		sta $417,x
00C295  1  B5 CF        		lda $CF,x
00C297  1  75 A0        		adc $A0,x
00C299  1  95 CF        		sta $CF,x
00C29B  1  60           		rts
00C29C  1               
00C29C  1               ChkSmallPlatCollision:
00C29C  1  BD A2 03     		lda $3A2,x
00C29F  1  F0 03        		beq locret_A2B3
00C2A1  1  20 7F C8     		jsr PositionPlayerOnS_Plat
00C2A4  1               locret_A2B3:
00C2A4  1  60           		rts
00C2A5  1               
00C2A5  1               OffscreenBoundsCheck:
00C2A5  1  B5 16        		lda $16,x
00C2A7  1  C9 14        		cmp #$14
00C2A9  1  F0 5D        		beq locret_A317
00C2AB  1  AD 1C 07     		lda ScreenLeft_X_Pos
00C2AE  1  B4 16        		ldy $16,x
00C2B0  1  C0 05        		cpy #5
00C2B2  1  F0 08        		beq loc_A2CB
00C2B4  1  C0 04        		cpy #4
00C2B6  1  F0 04        		beq loc_A2CB
00C2B8  1  C0 0D        		cpy #$D
00C2BA  1  D0 02        		bne loc_A2CD
00C2BC  1               loc_A2CB:
00C2BC  1  69 38        		adc #$38
00C2BE  1               loc_A2CD:
00C2BE  1  E9 48        		sbc #$48
00C2C0  1  85 01        		sta TMP_1
00C2C2  1  AD 1A 07     		lda ScreenLeft_PageLoc
00C2C5  1  E9 00        		sbc #0
00C2C7  1  85 00        		sta TMP_0
00C2C9  1  AD 1D 07     		lda ScreenRight_X_Pos
00C2CC  1  69 48        		adc #$48
00C2CE  1  85 03        		sta byte_3
00C2D0  1  AD 1B 07     		lda ScreenRight_PageLoc
00C2D3  1  69 00        		adc #0
00C2D5  1  85 02        		sta byte_2
00C2D7  1  B5 87        		lda $87,x
00C2D9  1  C5 01        		cmp TMP_1
00C2DB  1  B5 6E        		lda $6E,x
00C2DD  1  E5 00        		sbc TMP_0
00C2DF  1  30 24        		bmi loc_A314
00C2E1  1  B5 87        		lda $87,x
00C2E3  1  C5 03        		cmp byte_3
00C2E5  1  B5 6E        		lda $6E,x
00C2E7  1  E5 02        		sbc byte_2
00C2E9  1  30 1D        		bmi locret_A317
00C2EB  1  B5 1E        		lda $1E,x
00C2ED  1  C9 05        		cmp #5
00C2EF  1  F0 17        		beq locret_A317
00C2F1  1  C0 0D        		cpy #$D
00C2F3  1  F0 13        		beq locret_A317
00C2F5  1  C0 04        		cpy #4
00C2F7  1  F0 0F        		beq locret_A317
00C2F9  1  C0 30        		cpy #$30
00C2FB  1  F0 0B        		beq locret_A317
00C2FD  1  C0 31        		cpy #$31
00C2FF  1  F0 07        		beq locret_A317
00C301  1  C0 32        		cpy #$32
00C303  1  F0 03        		beq locret_A317
00C305  1               loc_A314:
00C305  1               
00C305  1  20 D9 B5     		jsr EraseEnemyObject
00C308  1               locret_A317:
00C308  1               
00C308  1  60           		rts
00C309  1  FF           		.byte $FF
00C30A  1               sub_A319:
00C30A  1               
00C30A  1  B5 24        		lda $24,x
00C30C  1  F0 56        		beq loc_A373
00C30E  1  0A           		asl
00C30F  1  B0 53        		bcs loc_A373
00C311  1  A5 09        		lda FrameCounter
00C313  1  4A           		lsr
00C314  1  B0 4E        		bcs loc_A373
00C316  1  8A           		txa
00C317  1  0A           		asl
00C318  1  0A           		asl
00C319  1  18           		clc
00C31A  1  69 1C        		adc #$1C
00C31C  1  A8           		tay
00C31D  1  A2 04        		ldx #4
00C31F  1               loc_A32E:
00C31F  1               
00C31F  1  86 01        		stx TMP_1
00C321  1  98           		tya
00C322  1  48           		pha
00C323  1  B5 1E        		lda $1E,x
00C325  1  29 20        		and #$20
00C327  1  D0 34        		bne loc_A36C
00C329  1  B5 0F        		lda $F,x
00C32B  1  F0 30        		beq loc_A36C
00C32D  1  B5 16        		lda $16,x
00C32F  1  C9 24        		cmp #$24
00C331  1  90 04        		bcc loc_A346
00C333  1  C9 2B        		cmp #$2B
00C335  1  90 26        		bcc loc_A36C
00C337  1               loc_A346:
00C337  1               
00C337  1  C9 06        		cmp #6
00C339  1  D0 06        		bne loc_A350
00C33B  1  B5 1E        		lda $1E,x
00C33D  1  C9 02        		cmp #2
00C33F  1  B0 1C        		bcs loc_A36C
00C341  1               loc_A350:
00C341  1               
00C341  1  BD D8 03     		lda $3D8,x
00C344  1  D0 17        		bne loc_A36C
00C346  1  8A           		txa
00C347  1  0A           		asl
00C348  1  0A           		asl
00C349  1  18           		clc
00C34A  1  69 04        		adc #4
00C34C  1  AA           		tax
00C34D  1  20 88 CF     		jsr sub_AFC5
00C350  1  A6 08        		ldx ObjectOffset
00C352  1  90 09        		bcc loc_A36C
00C354  1  A9 80        		lda #$80
00C356  1  95 24        		sta $24,x
00C358  1  A6 01        		ldx TMP_1
00C35A  1  20 70 C3     		jsr sub_A37F
00C35D  1               loc_A36C:
00C35D  1               
00C35D  1  68           		pla
00C35E  1  A8           		tay
00C35F  1  A6 01        		ldx TMP_1
00C361  1  CA           		dex
00C362  1  10 BB        		bpl loc_A32E
00C364  1               loc_A373:
00C364  1               
00C364  1  A6 08        		ldx ObjectOffset
00C366  1  60           		rts
00C367  1               BowserIdentities:
00C367  1  06           		.byte 6
00C368  1  00           		.byte 0
00C369  1  02           		.byte 2
00C36A  1  12           		.byte $12
00C36B  1  11           		.byte $11
00C36C  1  07           		.byte 7
00C36D  1  05           		.byte 5
00C36E  1  2D           		.byte $2D
00C36F  1  2D           		.byte $2D
00C370  1               sub_A37F:
00C370  1               
00C370  1  20 DF DD     		jsr RelativeEnemyPosition
00C373  1  A6 01        		ldx TMP_1
00C375  1  B5 0F        		lda $F,x
00C377  1  10 0B        		bpl loc_A393
00C379  1  29 0F        		and #$F
00C37B  1  AA           		tax
00C37C  1  B5 16        		lda $16,x
00C37E  1  C9 2D        		cmp #$2D
00C380  1  F0 0C        		beq loc_A39D
00C382  1  A6 01        		ldx TMP_1
00C384  1               loc_A393:
00C384  1               
00C384  1  B5 16        		lda $16,x
00C386  1  C9 02        		cmp #2
00C388  1  F0 76        		beq locret_A40F
00C38A  1  C9 2D        		cmp #$2D
00C38C  1  D0 2D        		bne loc_A3CA
00C38E  1               loc_A39D:
00C38E  1  CE 83 04     		dec BowserHitPoints
00C391  1  D0 6D        		bne locret_A40F
00C393  1  20 5A AF     		jsr InitVStf
00C396  1  95 58        		sta Enemy_X_Speed,x
00C398  1  8D CB 06     		sta EnemyFrenzyBuffer
00C39B  1  A9 FE        		lda #$FE
00C39D  1  95 A0        		sta $A0,x
00C39F  1  AC 5F 07     		ldy WorldNumber
00C3A2  1  B9 67 C3     		lda BowserIdentities,y
00C3A5  1  95 16        		sta $16,x
00C3A7  1  A9 20        		lda #$20
00C3A9  1  C0 03        		cpy #3
00C3AB  1  B0 02        		bcs loc_A3BE
00C3AD  1  09 03        		ora #3
00C3AF  1               loc_A3BE:
00C3AF  1  95 1E        		sta $1E,x
00C3B1  1  A9 80        		lda #$80
00C3B3  1  85 FE        		sta Square2SoundQueue
00C3B5  1  A6 01        		ldx TMP_1
00C3B7  1  A9 09        		lda #9
00C3B9  1  D0 3E        		bne loc_A408
00C3BB  1               loc_A3CA:
00C3BB  1               
00C3BB  1  C9 08        		cmp #8
00C3BD  1  F0 41        		beq locret_A40F
00C3BF  1  C9 0C        		cmp #$C
00C3C1  1  F0 3D        		beq locret_A40F
00C3C3  1  C9 15        		cmp #$15
00C3C5  1  B0 39        		bcs locret_A40F
00C3C7  1               loc_A3D6:
00C3C7  1               
00C3C7  1  B5 16        		lda $16,x
00C3C9  1  C9 04        		cmp #4
00C3CB  1  F0 04        		beq loc_A3E0
00C3CD  1  C9 0D        		cmp #$D
00C3CF  1  D0 0D        		bne loc_A3ED
00C3D1  1               loc_A3E0:
00C3D1  1               
00C3D1  1  A8           		tay
00C3D2  1  B5 CF        		lda $CF,x
00C3D4  1  69 18        		adc #$18
00C3D6  1  C0 04        		cpy #4
00C3D8  1  D0 02        		bne loc_A3EB
00C3DA  1  E9 31        		sbc #$31
00C3DC  1               loc_A3EB:
00C3DC  1               
00C3DC  1  95 CF        		sta $CF,x
00C3DE  1               loc_A3ED:
00C3DE  1               
00C3DE  1  20 66 CC     		jsr sub_ACA3
00C3E1  1  B5 1E        		lda $1E,x
00C3E3  1  29 1F        		and #$1F
00C3E5  1  09 20        		ora #$20
00C3E7  1  95 1E        		sta $1E,x
00C3E9  1  A9 02        		lda #2
00C3EB  1  B4 16        		ldy $16,x
00C3ED  1  C0 05        		cpy #5
00C3EF  1  D0 02        		bne loc_A402
00C3F1  1  A9 06        		lda #6
00C3F3  1               loc_A402:
00C3F3  1               
00C3F3  1  C0 06        		cpy #6
00C3F5  1  D0 02        		bne loc_A408
00C3F7  1  A9 01        		lda #1
00C3F9  1               loc_A408:
00C3F9  1               
00C3F9  1  20 6B C6     		jsr SetupFloateyNumber
00C3FC  1  A9 08        		lda #8
00C3FE  1  85 FF        		sta Square1SoundQueue
00C400  1               locret_A40F:
00C400  1               
00C400  1  60           		rts
00C401  1               PlayerHammerCollision:
00C401  1               
00C401  1  A5 09        		lda FrameCounter
00C403  1  4A           		lsr
00C404  1  90 39        		bcc locret_A44E
00C406  1  AD D0 03     		lda Player_OffscreenBits
00C409  1  0D 47 07     		ora TimerControl
00C40C  1  0D D6 03     		ora Misc_OffscreenBits
00C40F  1  D0 2E        		bne locret_A44E
00C411  1  8A           		txa
00C412  1  0A           		asl
00C413  1  0A           		asl
00C414  1  18           		clc
00C415  1  69 24        		adc #$24
00C417  1  A8           		tay
00C418  1  20 86 CF     		jsr sub_AFC3
00C41B  1  A6 08        		ldx ObjectOffset
00C41D  1  90 1B        		bcc loc_A449
00C41F  1  BD BE 06     		lda $6BE,x
00C422  1  D0 1B        		bne locret_A44E
00C424  1  A9 01        		lda #1
00C426  1  9D BE 06     		sta $6BE,x
00C429  1  B5 64        		lda $64,x
00C42B  1  49 FF        		eor #$FF
00C42D  1  18           		clc
00C42E  1  69 01        		adc #1
00C430  1  95 64        		sta $64,x
00C432  1  AD 9F 07     		lda StarInvincibleTimer
00C435  1  D0 08        		bne locret_A44E
00C437  1  4C 78 C5     		jmp loc_A587
00C43A  1               loc_A449:
00C43A  1               
00C43A  1  A9 00        		lda #0
00C43C  1  9D BE 06     		sta $6BE,x
00C43F  1               locret_A44E:
00C43F  1               
00C43F  1  60           		rts
00C440  1               loc_A44F:
00C440  1               
00C440  1  20 D9 B5     		jsr EraseEnemyObject
00C443  1  A5 39        		lda PowerUpType
00C445  1  C9 04        		cmp #4
00C447  1  D0 03        		bne loc_A45B
00C449  1  4C 78 C5     		jmp loc_A587
00C44C  1               loc_A45B:
00C44C  1               
00C44C  1  A9 06        		lda #6
00C44E  1  20 6B C6     		jsr SetupFloateyNumber
00C451  1  A9 20        		lda #$20
00C453  1  85 FE        		sta Square2SoundQueue
00C455  1  A5 39        		lda PowerUpType
00C457  1  C9 02        		cmp #2
00C459  1  90 0E        		bcc loc_A478
00C45B  1  C9 03        		cmp #3
00C45D  1  F0 24        		beq loc_A492
00C45F  1  A9 23        		lda #$23
00C461  1  8D 9F 07     		sta StarInvincibleTimer
00C464  1  A9 40        		lda #$40
00C466  1  85 FB        		sta AreaMusicQueue
00C468  1  60           		rts
00C469  1               loc_A478:
00C469  1               
00C469  1  AD 56 07     		lda PlayerStatus
00C46C  1  F0 1B        		beq loc_A498
00C46E  1  C9 01        		cmp #1
00C470  1  D0 23        		bne locret_A4A4
00C472  1  A6 08        		ldx ObjectOffset
00C474  1  A9 02        		lda #2
00C476  1  8D 56 07     		sta PlayerStatus
00C479  1  20 11 86     		jsr GetPlayerColors_RW
00C47C  1  A6 08        		ldx ObjectOffset
00C47E  1  A9 0C        		lda #$C
00C480  1  4C 90 C4     		jmp loc_A49F
00C483  1               loc_A492:
00C483  1               
00C483  1  A9 0B        		lda #$B
00C485  1  9D 10 01     		sta $110,x
00C488  1  60           		rts
00C489  1               loc_A498:
00C489  1               
00C489  1  A9 01        		lda #1
00C48B  1  8D 56 07     		sta PlayerStatus
00C48E  1  A9 09        		lda #9
00C490  1               loc_A49F:
00C490  1               
00C490  1  A0 00        		ldy #0
00C492  1  20 97 C5     		jsr sub_A5A6
00C495  1               locret_A4A4:
00C495  1               
00C495  1  60           		rts
00C496  1  18           		.byte $18
00C497  1  E8           		.byte $E8
00C498  1               KickedShellXSpdData:
00C498  1  30           		.byte $30
00C499  1  D0           		.byte $D0
00C49A  1               DemotedKoopaXSpdData:
00C49A  1  08           		.byte 8
00C49B  1  F8           		.byte $F8
00C49C  1               PlayerEnemyCollision:
00C49C  1               
00C49C  1  A5 09        		lda FrameCounter
00C49E  1  4A           		lsr
00C49F  1  B0 F4        		bcs locret_A4A4
00C4A1  1  20 A7 C8     		jsr CheckPlayerVertical
00C4A4  1  B0 23        		bcs locret_A4D8
00C4A6  1  BD D8 03     		lda $3D8,x
00C4A9  1  D0 1E        		bne locret_A4D8
00C4AB  1  A5 0E        		lda GameEngineSubroutine
00C4AD  1  C9 08        		cmp #8
00C4AF  1  D0 18        		bne locret_A4D8
00C4B1  1  B5 1E        		lda $1E,x
00C4B3  1  29 20        		and #$20
00C4B5  1  D0 12        		bne locret_A4D8
00C4B7  1  20 B1 C8     		jsr sub_A8C0
00C4BA  1  20 86 CF     		jsr sub_AFC3
00C4BD  1  A6 08        		ldx ObjectOffset
00C4BF  1  B0 09        		bcs loc_A4D9
00C4C1  1  BD 91 04     		lda $491,x
00C4C4  1  29 FE        		and #$FE
00C4C6  1  9D 91 04     		sta $491,x
00C4C9  1               locret_A4D8:
00C4C9  1               
00C4C9  1  60           		rts
00C4CA  1               loc_A4D9:
00C4CA  1               
00C4CA  1  B4 16        		ldy $16,x
00C4CC  1  C0 2E        		cpy #$2E
00C4CE  1  D0 03        		bne loc_A4E2
00C4D0  1  4C 40 C4     		jmp loc_A44F
00C4D3  1               loc_A4E2:
00C4D3  1               
00C4D3  1  AD 9F 07     		lda StarInvincibleTimer
00C4D6  1  F0 06        		beq loc_A4ED
00C4D8  1  4C C7 C3     		jmp loc_A3D6
00C4DB  1               KickedShellPtsData:
00C4DB  1               
00C4DB  1  0A           		.byte $A
00C4DC  1  06           		.byte 6
00C4DD  1  04           		.byte 4
00C4DE  1               loc_A4ED:
00C4DE  1               
00C4DE  1  BD 91 04     		lda $491,x
00C4E1  1  29 01        		and #1
00C4E3  1  1D D8 03     		ora $3D8,x
00C4E6  1  D0 5D        		bne locret_A554
00C4E8  1  A9 01        		lda #1
00C4EA  1  1D 91 04     		ora $491,x
00C4ED  1  9D 91 04     		sta $491,x
00C4F0  1  C0 12        		cpy #$12
00C4F2  1  F0 52        		beq loc_A555
00C4F4  1  C0 33        		cpy #$33
00C4F6  1  F0 4E        		beq loc_A555
00C4F8  1  C0 0D        		cpy #$D
00C4FA  1  F0 7C        		beq loc_A587
00C4FC  1  C0 04        		cpy #4
00C4FE  1  F0 78        		beq loc_A587
00C500  1  C0 0C        		cpy #$C
00C502  1  F0 74        		beq loc_A587
00C504  1  C0 15        		cpy #$15
00C506  1  B0 70        		bcs loc_A587
00C508  1  AD 4E 07     		lda AreaType
00C50B  1  F0 6B        		beq loc_A587
00C50D  1  B5 1E        		lda $1E,x
00C50F  1  0A           		asl
00C510  1  B0 34        		bcs loc_A555
00C512  1  B5 1E        		lda $1E,x
00C514  1  29 07        		and #7
00C516  1  C9 02        		cmp #2
00C518  1  90 2C        		bcc loc_A555
00C51A  1  B5 16        		lda $16,x
00C51C  1  C9 06        		cmp #6
00C51E  1  F0 25        		beq locret_A554
00C520  1  A9 08        		lda #8
00C522  1  85 FF        		sta Square1SoundQueue
00C524  1  B5 1E        		lda Enemy_State,x
00C526  1  09 80        		ora #$80
00C528  1  95 1E        		sta Enemy_State,x
00C52A  1  20 5F C6     		jsr EnemyFacePlayer
00C52D  1  B9 98 C4     		lda KickedShellXSpdData,y
00C530  1  95 58        		sta $58,x
00C532  1  A9 03        		lda #3
00C534  1  18           		clc
00C535  1  6D 84 04     		adc StompChainCounter
00C538  1  BC 96 07     		ldy $796,x
00C53B  1  C0 03        		cpy #3
00C53D  1  B0 03        		bcs loc_A551
00C53F  1  B9 DB C4     		lda KickedShellPtsData,y
00C542  1               loc_A551:
00C542  1               
00C542  1  20 6B C6     		jsr SetupFloateyNumber
00C545  1               locret_A554:
00C545  1               
00C545  1  60           		rts
00C546  1               loc_A555:
00C546  1               
00C546  1  A4 9F        		ldy Player_Y_Speed
00C548  1  88           		dey
00C549  1  10 6D        		bpl loc_A5C7
00C54B  1  B5 16        		lda $16,x
00C54D  1  C9 07        		cmp #7
00C54F  1  90 09        		bcc loc_A569
00C551  1  A5 CE        		lda SprObject_Y_Position
00C553  1  18           		clc
00C554  1  69 0C        		adc #$C
00C556  1  D5 CF        		cmp $CF,x
00C558  1  90 5E        		bcc loc_A5C7
00C55A  1               loc_A569:
00C55A  1               
00C55A  1  AD 91 07     		lda StompTimer
00C55D  1  D0 59        		bne loc_A5C7
00C55F  1  AD 9E 07     		lda InjuryTimer
00C562  1  D0 40        		bne loc_A5B3
00C564  1  AD AD 03     		lda Player_Rel_XPos
00C567  1  CD AE 03     		cmp Enemy_Rel_XPos
00C56A  1  90 03        		bcc loc_A57E
00C56C  1  4C 50 C6     		jmp loc_A65F
00C56F  1               loc_A57E:
00C56F  1               
00C56F  1  B5 46        		lda $46,x
00C571  1  C9 01        		cmp #1
00C573  1  D0 03        		bne loc_A587
00C575  1  4C 59 C6     		jmp loc_A668
00C578  1               loc_A587:
00C578  1               
00C578  1  AD 9E 07     		lda InjuryTimer
00C57B  1  0D 9F 07     		ora StarInvincibleTimer
00C57E  1  D0 24        		bne loc_A5B3
00C580  1               loc_A58F:
00C580  1               
00C580  1  AE 56 07     		ldx PlayerStatus
00C583  1  F0 22        		beq loc_A5B6
00C585  1  8D 56 07     		sta PlayerStatus
00C588  1  A9 08        		lda #8
00C58A  1  8D 9E 07     		sta InjuryTimer
00C58D  1  0A           		asl
00C58E  1  85 FF        		sta Square1SoundQueue
00C590  1  20 11 86     		jsr GetPlayerColors_RW
00C593  1  A9 0A        		lda #$A
00C595  1               loc_A5A4:
00C595  1               
00C595  1  A0 01        		ldy #1
00C597  1               sub_A5A6:
00C597  1               
00C597  1  85 0E        		sta GameEngineSubroutine
00C599  1  84 1D        		sty Player_State
00C59B  1  A0 FF        		ldy #$FF
00C59D  1  8C 47 07     		sty TimerControl
00C5A0  1  C8           		iny
00C5A1  1  8C 75 07     		sty ScrollAmount
00C5A4  1               loc_A5B3:
00C5A4  1               
00C5A4  1  A6 08        		ldx ObjectOffset
00C5A6  1  60           		rts
00C5A7  1               loc_A5B6:
00C5A7  1               
00C5A7  1  86 57        		stx Player_X_Speed
00C5A9  1  E8           		inx
00C5AA  1  86 FC        		stx EventMusicQueue
00C5AC  1  A9 FC        		lda #$FC
00C5AE  1  85 9F        		sta Player_Y_Speed
00C5B0  1  A9 0B        		lda #$B
00C5B2  1  D0 E1        		bne loc_A5A4
00C5B4  1               StompedEnemyPtsData:
00C5B4  1  02 06 05 06  		.byte 2, 6,	5, 6
00C5B8  1               loc_A5C7:
00C5B8  1               
00C5B8  1  B5 16        		lda $16,x
00C5BA  1  C9 12        		cmp #$12
00C5BC  1  F0 BA        		beq loc_A587
00C5BE  1  A9 04        		lda #4
00C5C0  1  85 FF        		sta Square1SoundQueue
00C5C2  1  B5 16        		lda $16,x
00C5C4  1  A0 00        		ldy #0
00C5C6  1  C9 14        		cmp #$14
00C5C8  1  F0 1B        		beq loc_A5F4
00C5CA  1  C9 08        		cmp #8
00C5CC  1  F0 17        		beq loc_A5F4
00C5CE  1  C9 33        		cmp #$33
00C5D0  1  F0 13        		beq loc_A5F4
00C5D2  1  C9 0C        		cmp #$C
00C5D4  1  F0 0F        		beq loc_A5F4
00C5D6  1  C8           		iny
00C5D7  1  C9 05        		cmp #5
00C5D9  1  F0 0A        		beq loc_A5F4
00C5DB  1  C8           		iny
00C5DC  1  C9 11        		cmp #$11
00C5DE  1  F0 05        		beq loc_A5F4
00C5E0  1  C8           		iny
00C5E1  1  C9 07        		cmp #7
00C5E3  1  D0 1B        		bne loc_A60F
00C5E5  1               loc_A5F4:
00C5E5  1               
00C5E5  1  B9 B4 C5     		lda StompedEnemyPtsData,y
00C5E8  1  20 6B C6     		jsr SetupFloateyNumber
00C5EB  1  B5 46        		lda Enemy_MovingDir,x
00C5ED  1  48           		pha
00C5EE  1  20 84 CC     		jsr loc_ACC1
00C5F1  1  68           		pla
00C5F2  1  95 46        		sta $46,x
00C5F4  1  A9 20        		lda #$20
00C5F6  1  95 1E        		sta $1E,x
00C5F8  1  20 5A AF     		jsr InitVStf
00C5FB  1  95 58        		sta $58,x
00C5FD  1  4C 3F C6     		jmp sub_A64E
00C600  1               loc_A60F:
00C600  1               
00C600  1  C9 09        		cmp #9
00C602  1  90 1E        		bcc HandleStompedShellE
00C604  1  20 3F C6     		jsr sub_A64E
00C607  1  29 01        		and #1
00C609  1  95 16        		sta $16,x
00C60B  1  A9 00        		lda #0
00C60D  1  95 1E        		sta $1E,x
00C60F  1  A9 03        		lda #3
00C611  1  20 6B C6     		jsr SetupFloateyNumber
00C614  1  20 5A AF     		jsr InitVStf
00C617  1  20 5F C6     		jsr EnemyFacePlayer
00C61A  1  B9 9A C4     		lda DemotedKoopaXSpdData,y
00C61D  1  95 58        		sta $58,x
00C61F  1  60           		rts
00C620  1               RevivalRateData:
00C620  1  10           		.byte $10
00C621  1  0B           		.byte $B
00C622  1               HandleStompedShellE:
00C622  1               
00C622  1  A9 04        		lda #4
00C624  1  95 1E        		sta $1E,x
00C626  1  EE 84 04     		inc StompChainCounter
00C629  1  AD 84 04     		lda StompChainCounter
00C62C  1  18           		clc
00C62D  1  6D 91 07     		adc StompTimer
00C630  1  20 6B C6     		jsr SetupFloateyNumber
00C633  1  EE 91 07     		inc StompTimer
00C636  1  AC 6A 07     		ldy PrimaryHardMode
00C639  1  B9 20 C6     		lda RevivalRateData,y
00C63C  1  9D 96 07     		sta $796,x
00C63F  1               sub_A64E:
00C63F  1               
00C63F  1  A0 FA        		ldy #$FA
00C641  1  B5 16        		lda $16,x
00C643  1  C9 0F        		cmp #$F
00C645  1  F0 04        		beq loc_A65A
00C647  1  C9 10        		cmp #$10
00C649  1  D0 02        		bne loc_A65C
00C64B  1               loc_A65A:
00C64B  1               
00C64B  1  A0 F8        		ldy #$F8
00C64D  1               loc_A65C:
00C64D  1               
00C64D  1  84 9F        		sty Player_Y_Speed
00C64F  1  60           		rts
00C650  1               loc_A65F:
00C650  1               
00C650  1  B5 46        		lda $46,x
00C652  1  C9 01        		cmp #1
00C654  1  D0 03        		bne loc_A668
00C656  1  4C 78 C5     		jmp loc_A587
00C659  1               loc_A668:
00C659  1               
00C659  1  20 7E C7     		jsr sub_A78D
00C65C  1  4C 78 C5     		jmp loc_A587
00C65F  1               EnemyFacePlayer:
00C65F  1               
00C65F  1  A0 01        		ldy #1
00C661  1  20 9C CD     		jsr PlayerEnemyDiff
00C664  1  10 01        		bpl loc_A676
00C666  1  C8           		iny
00C667  1               loc_A676:
00C667  1               
00C667  1  94 46        		sty $46,x
00C669  1  88           		dey
00C66A  1  60           		rts
00C66B  1               SetupFloateyNumber:
00C66B  1               
00C66B  1  9D 10 01     		sta $110,x
00C66E  1  A9 30        		lda #$30
00C670  1  9D 2C 01     		sta $12C,x
00C673  1  B5 CF        		lda $CF,x
00C675  1  9D 1E 01     		sta $11E,x
00C678  1  AD AE 03     		lda Enemy_Rel_XPos
00C67B  1  9D 17 01     		sta $117,x
00C67E  1               locret_A68D:
00C67E  1               
00C67E  1  60           		rts
00C67F  1               SetBitsMask:
00C67F  1  80           		.byte $80
00C680  1  40           		.byte $40
00C681  1  20           		.byte $20
00C682  1  10           		.byte $10
00C683  1  08           		.byte 8
00C684  1  04           		.byte 4
00C685  1  02           		.byte 2
00C686  1               ClearBitsMask:
00C686  1  7F           		.byte $7F
00C687  1  BF           		.byte $BF
00C688  1  DF           		.byte $DF
00C689  1  EF           		.byte $EF
00C68A  1  F7           		.byte $F7
00C68B  1  FB           		.byte $FB
00C68C  1  FD           		.byte $FD
00C68D  1               EnemiesCollision:
00C68D  1  A5 09        		lda FrameCounter
00C68F  1  4A           		lsr
00C690  1  90 EC        		bcc locret_A68D
00C692  1  AD 4E 07     		lda AreaType
00C695  1  F0 E7        		beq locret_A68D
00C697  1  B5 16        		lda $16,x
00C699  1  C9 15        		cmp #$15
00C69B  1  B0 76        		bcs loc_A722
00C69D  1  C9 11        		cmp #$11
00C69F  1  F0 72        		beq loc_A722
00C6A1  1  C9 0D        		cmp #$D
00C6A3  1  F0 6E        		beq loc_A722
00C6A5  1  C9 04        		cmp #4
00C6A7  1  F0 6A        		beq loc_A722
00C6A9  1  BD D8 03     		lda $3D8,x
00C6AC  1  D0 65        		bne loc_A722
00C6AE  1  20 B1 C8     		jsr sub_A8C0
00C6B1  1  CA           		dex
00C6B2  1  30 5F        		bmi loc_A722
00C6B4  1               loc_A6C3:
00C6B4  1  86 01        		stx TMP_1
00C6B6  1  98           		tya
00C6B7  1  48           		pha
00C6B8  1  B5 0F        		lda $F,x
00C6BA  1  F0 50        		beq loc_A71B
00C6BC  1  B5 16        		lda $16,x
00C6BE  1  C9 15        		cmp #$15
00C6C0  1  B0 4A        		bcs loc_A71B
00C6C2  1  C9 11        		cmp #$11
00C6C4  1  F0 46        		beq loc_A71B
00C6C6  1  C9 0D        		cmp #$D
00C6C8  1  F0 42        		beq loc_A71B
00C6CA  1  C9 04        		cmp #4
00C6CC  1  F0 3E        		beq loc_A71B
00C6CE  1  BD D8 03     		lda $3D8,x
00C6D1  1  D0 39        		bne loc_A71B
00C6D3  1  8A           		txa
00C6D4  1  0A           		asl
00C6D5  1  0A           		asl
00C6D6  1  18           		clc
00C6D7  1  69 04        		adc #4
00C6D9  1  AA           		tax
00C6DA  1  20 88 CF     		jsr sub_AFC5
00C6DD  1  A6 08        		ldx ObjectOffset
00C6DF  1  A4 01        		ldy TMP_1
00C6E1  1  90 20        		bcc loc_A712
00C6E3  1  B5 1E        		lda $1E,x
00C6E5  1  19 1E 00     		ora $1E,y
00C6E8  1  29 80        		and #$80
00C6EA  1  D0 11        		bne loc_A70C
00C6EC  1  B9 91 04     		lda Enemy_CollisionBits,y
00C6EF  1  3D 7F C6     		and SetBitsMask,x
00C6F2  1  D0 18        		bne loc_A71B
00C6F4  1  B9 91 04     		lda Enemy_CollisionBits,y
00C6F7  1  1D 7F C6     		ora SetBitsMask,x
00C6FA  1  99 91 04     		sta Enemy_CollisionBits,y
00C6FD  1               loc_A70C:
00C6FD  1  20 16 C7     		jsr sub_A725
00C700  1  4C 0C C7     		jmp loc_A71B
00C703  1               loc_A712:
00C703  1  B9 91 04     		lda Enemy_CollisionBits,y
00C706  1  3D 86 C6     		and ClearBitsMask,x
00C709  1  99 91 04     		sta Enemy_CollisionBits,y
00C70C  1               loc_A71B:
00C70C  1  68           		pla
00C70D  1  A8           		tay
00C70E  1  A6 01        		ldx TMP_1
00C710  1  CA           		dex
00C711  1  10 A1        		bpl loc_A6C3
00C713  1               loc_A722:
00C713  1  A6 08        		ldx ObjectOffset
00C715  1  60           		rts
00C716  1               sub_A725:
00C716  1  B9 1E 00     		lda $1E,y
00C719  1  15 1E        		ora $1E,x
00C71B  1  29 20        		and #$20
00C71D  1  D0 33        		bne locret_A761
00C71F  1  B5 1E        		lda $1E,x
00C721  1  C9 06        		cmp #6
00C723  1  90 2E        		bcc loc_A762
00C725  1  B5 16        		lda $16,x
00C727  1  C9 05        		cmp #5
00C729  1  F0 27        		beq locret_A761
00C72B  1  B9 1E 00     		lda $1E,y
00C72E  1  0A           		asl
00C72F  1  90 0A        		bcc loc_A74A
00C731  1  A9 06        		lda #6
00C733  1  20 6B C6     		jsr SetupFloateyNumber
00C736  1  20 C7 C3     		jsr loc_A3D6
00C739  1  A4 01        		ldy TMP_1
00C73B  1               loc_A74A:
00C73B  1  98           		tya
00C73C  1  AA           		tax
00C73D  1  20 C7 C3     		jsr loc_A3D6
00C740  1  A6 08        		ldx ObjectOffset
00C742  1  BD 25 01     		lda $125,x
00C745  1  18           		clc
00C746  1  69 04        		adc #4
00C748  1  A6 01        		ldx TMP_1
00C74A  1  20 6B C6     		jsr SetupFloateyNumber
00C74D  1  A6 08        		ldx ObjectOffset
00C74F  1  FE 25 01     		inc $125,x
00C752  1               locret_A761:
00C752  1  60           		rts
00C753  1               loc_A762:
00C753  1  B9 1E 00     		lda $1E,y
00C756  1  C9 06        		cmp #6
00C758  1  90 1D        		bcc loc_A786
00C75A  1  B9 16 00     		lda $16,y
00C75D  1  C9 05        		cmp #5
00C75F  1  F0 F1        		beq locret_A761
00C761  1  20 C7 C3     		jsr loc_A3D6
00C764  1  A4 01        		ldy TMP_1
00C766  1  B9 25 01     		lda $125,y
00C769  1  18           		clc
00C76A  1  69 04        		adc #4
00C76C  1  A6 08        		ldx ObjectOffset
00C76E  1  20 6B C6     		jsr SetupFloateyNumber
00C771  1  A6 01        		ldx TMP_1
00C773  1  FE 25 01     		inc $125,x
00C776  1  60           		rts
00C777  1               loc_A786:
00C777  1  98           		tya
00C778  1  AA           		tax
00C779  1  20 7E C7     		jsr sub_A78D
00C77C  1  A6 08        		ldx ObjectOffset
00C77E  1               sub_A78D:
00C77E  1  B5 16        		lda $16,x
00C780  1  C9 0D        		cmp #$D
00C782  1  F0 26        		beq locret_A7B9
00C784  1  C9 04        		cmp #4
00C786  1  F0 22        		beq locret_A7B9
00C788  1  C9 11        		cmp #$11
00C78A  1  F0 1E        		beq locret_A7B9
00C78C  1  C9 05        		cmp #5
00C78E  1  F0 1A        		beq locret_A7B9
00C790  1  C9 12        		cmp #$12
00C792  1  F0 08        		beq loc_A7AB
00C794  1  C9 0E        		cmp #$E
00C796  1  F0 04        		beq loc_A7AB
00C798  1  C9 07        		cmp #7
00C79A  1  B0 0E        		bcs locret_A7B9
00C79C  1               loc_A7AB:
00C79C  1  B5 58        		lda $58,x
00C79E  1  49 FF        		eor #$FF
00C7A0  1  A8           		tay
00C7A1  1  C8           		iny
00C7A2  1  94 58        		sty $58,x
00C7A4  1  B5 46        		lda $46,x
00C7A6  1  49 03        		eor #3
00C7A8  1  95 46        		sta $46,x
00C7AA  1               locret_A7B9:
00C7AA  1  60           		rts
00C7AB  1               
00C7AB  1               LargePlatformCollision:
00C7AB  1  A9 FF        		lda #$FF
00C7AD  1  9D A2 03     		sta HammerThrowingTimer,x
00C7B0  1  AD 47 07     		lda TimerControl
00C7B3  1  D0 29        		bne loc_A7ED
00C7B5  1  B5 1E        		lda Enemy_State,x
00C7B7  1  30 25        		bmi loc_A7ED
00C7B9  1  B5 16        		lda Enemy_ID,x
00C7BB  1  C9 24        		cmp #$24
00C7BD  1  D0 06        		bne ChkForPlayerC_LargeP
00C7BF  1  B5 1E        		lda Enemy_State,x
00C7C1  1  AA           		tax
00C7C2  1  20 C5 C7     		jsr ChkForPlayerC_LargeP
00C7C5  1               ChkForPlayerC_LargeP:
00C7C5  1  20 A7 C8     		jsr CheckPlayerVertical
00C7C8  1  B0 14        		bcs loc_A7ED
00C7CA  1  8A           		txa
00C7CB  1  20 B3 C8     		jsr loc_A8C2
00C7CE  1  B5 CF        		lda $CF,x
00C7D0  1  85 00        		sta TMP_0
00C7D2  1  8A           		txa
00C7D3  1  48           		pha
00C7D4  1  20 86 CF     		jsr sub_AFC3
00C7D7  1  68           		pla
00C7D8  1  AA           		tax
00C7D9  1  90 03        		bcc loc_A7ED
00C7DB  1  20 22 C8     		jsr loc_A831
00C7DE  1               loc_A7ED:
00C7DE  1  A6 08        		ldx ObjectOffset
00C7E0  1  60           		rts
00C7E1  1               
00C7E1  1               SmallPlatformCollision:
00C7E1  1  AD 47 07     		lda TimerControl
00C7E4  1  D0 37        		bne loc_A82C
00C7E6  1  9D A2 03     		sta $3A2,x
00C7E9  1  20 A7 C8     		jsr CheckPlayerVertical
00C7EC  1  B0 2F        		bcs loc_A82C
00C7EE  1  A9 02        		lda #2
00C7F0  1  85 00        		sta TMP_0
00C7F2  1               loc_A801:
00C7F2  1  A6 08        		ldx ObjectOffset
00C7F4  1  20 B1 C8     		jsr sub_A8C0
00C7F7  1  29 02        		and #2
00C7F9  1  D0 22        		bne loc_A82C
00C7FB  1  B9 AD 04     		lda $4AD,y
00C7FE  1  C9 20        		cmp #$20
00C800  1  90 05        		bcc loc_A816
00C802  1  20 86 CF     		jsr sub_AFC3
00C805  1  B0 19        		bcs loc_A82F
00C807  1               loc_A816:
00C807  1  B9 AD 04     		lda $4AD,y
00C80A  1  18           		clc
00C80B  1  69 80        		adc #$80
00C80D  1  99 AD 04     		sta $4AD,y
00C810  1  B9 AF 04     		lda $4AF,y
00C813  1  18           		clc
00C814  1  69 80        		adc #$80
00C816  1  99 AF 04     		sta $4AF,y
00C819  1  C6 00        		dec TMP_0
00C81B  1  D0 D5        		bne loc_A801
00C81D  1               loc_A82C:
00C81D  1  A6 08        		ldx ObjectOffset
00C81F  1  60           		rts
00C820  1               loc_A82F:
00C820  1  A6 08        		ldx ObjectOffset
00C822  1               loc_A831:
00C822  1  B9 AF 04     		lda $4AF,y
00C825  1  38           		sec
00C826  1  ED AD 04     		sbc BoundingBox_UL_YPos
00C829  1  C9 04        		cmp #4
00C82B  1  B0 08        		bcs loc_A844
00C82D  1  A5 9F        		lda Player_Y_Speed
00C82F  1  10 04        		bpl loc_A844
00C831  1  A9 01        		lda #1
00C833  1  85 9F        		sta Player_Y_Speed
00C835  1               loc_A844:
00C835  1  AD AF 04     		lda BoundingBox_DR_YPos
00C838  1  38           		sec
00C839  1  F9 AD 04     		sbc $4AD,y
00C83C  1  C9 06        		cmp #6
00C83E  1  B0 1B        		bcs loc_A86A
00C840  1  A5 9F        		lda Player_Y_Speed
00C842  1  30 17        		bmi loc_A86A
00C844  1  A5 00        		lda TMP_0
00C846  1  B4 16        		ldy $16,x
00C848  1  C0 2B        		cpy #$2B
00C84A  1  F0 05        		beq loc_A860
00C84C  1  C0 2C        		cpy #$2C
00C84E  1  F0 01        		beq loc_A860
00C850  1  8A           		txa
00C851  1               loc_A860:
00C851  1               
00C851  1  A6 08        		ldx ObjectOffset
00C853  1  9D A2 03     		sta $3A2,x
00C856  1  A9 00        		lda #0
00C858  1  85 1D        		sta Player_State
00C85A  1  60           		rts
00C85B  1               loc_A86A:
00C85B  1               
00C85B  1  A9 01        		lda #1
00C85D  1  85 00        		sta TMP_0
00C85F  1  AD AE 04     		lda BoundingBox_LR_Corner
00C862  1  38           		sec
00C863  1  F9 AC 04     		sbc $4AC,y
00C866  1  C9 08        		cmp #8
00C868  1  90 0D        		bcc loc_A886
00C86A  1  E6 00        		inc TMP_0
00C86C  1  B9 AE 04     		lda $4AE,y
00C86F  1  18           		clc
00C870  1  ED AC 04     		sbc BoundingBox_UL_Corner
00C873  1  C9 09        		cmp #9
00C875  1  B0 03        		bcs loc_A889
00C877  1               loc_A886:
00C877  1               
00C877  1  20 97 CB     		jsr sub_ABD4
00C87A  1               loc_A889:
00C87A  1               
00C87A  1  A6 08        		ldx ObjectOffset
00C87C  1  60           		rts
00C87D  1               
00C87D  1               PlayerPosSPlatData:
00C87D  1  80           		.byte $80
00C87E  1  00           		.byte 0
00C87F  1               
00C87F  1               PositionPlayerOnS_Plat:
00C87F  1  A8           		tay
00C880  1  B5 CF        		lda Enemy_Y_Position,x
00C882  1  18           		clc
00C883  1  79 7C C8     		adc PlayerPosSPlatData-1,y
00C886  1  2C           		.byte $2c ; BIT $ABS
00C887  1               PositionPlayerOnVPlat:
00C887  1  B5 CF        		lda Enemy_Y_Position,x
00C889  1  A4 0E        		ldy GameEngineSubroutine
00C88B  1  C0 0B        		cpy #$B
00C88D  1  F0 17        		beq locret_A8B5
00C88F  1  B4 B6        		ldy Enemy_Y_HighPos,x
00C891  1  C0 01        		cpy #1
00C893  1  D0 11        		bne locret_A8B5
00C895  1  38           		sec
00C896  1  E9 20        		sbc #$20
00C898  1  85 CE        		sta SprObject_Y_Position
00C89A  1  98           		tya
00C89B  1  E9 00        		sbc #0
00C89D  1  85 B5        		sta Player_Y_HighPos
00C89F  1  A9 00        		lda #0
00C8A1  1  85 9F        		sta Player_Y_Speed
00C8A3  1  8D 33 04     		sta Player_Y_MoveForce
00C8A6  1               locret_A8B5:
00C8A6  1  60           		rts
00C8A7  1               
00C8A7  1               CheckPlayerVertical:
00C8A7  1  AD D0 03     		lda Player_OffscreenBits
00C8AA  1  29 F0        		and #$F0
00C8AC  1  18           		clc
00C8AD  1  F0 01        		beq locret_A8BF
00C8AF  1  38           		sec
00C8B0  1               locret_A8BF:
00C8B0  1  60           		rts
00C8B1  1               
00C8B1  1               sub_A8C0:
00C8B1  1  A5 08        		lda ObjectOffset
00C8B3  1               loc_A8C2:
00C8B3  1  0A           		asl
00C8B4  1  0A           		asl
00C8B5  1  18           		clc
00C8B6  1  69 04        		adc #4
00C8B8  1  A8           		tay
00C8B9  1  AD D1 03     		lda Enemy_OffscreenBits
00C8BC  1  29 0F        		and #$F
00C8BE  1  C9 0F        		cmp #$F
00C8C0  1  60           		rts
00C8C1  1               PlayerBGUpperExtent:
00C8C1  1  20 10        		.byte $20, $10
00C8C3  1               sub_A8D2:
00C8C3  1               
00C8C3  1  AD 16 07     		lda DisableCollisionDet
00C8C6  1  D0 2E        		bne locret_A905
00C8C8  1  A5 0E        		lda GameEngineSubroutine
00C8CA  1  C9 0B        		cmp #$B
00C8CC  1  F0 28        		beq locret_A905
00C8CE  1  C9 04        		cmp #4
00C8D0  1  90 24        		bcc locret_A905
00C8D2  1  A9 01        		lda #1
00C8D4  1  AC 04 07     		ldy SwimmingFlag
00C8D7  1  D0 0A        		bne loc_A8F2
00C8D9  1  A5 1D        		lda Player_State
00C8DB  1  F0 04        		beq loc_A8F0
00C8DD  1  C9 03        		cmp #3
00C8DF  1  D0 04        		bne loc_A8F4
00C8E1  1               loc_A8F0:
00C8E1  1               
00C8E1  1  A9 02        		lda #2
00C8E3  1               loc_A8F2:
00C8E3  1               
00C8E3  1  85 1D        		sta Player_State
00C8E5  1               loc_A8F4:
00C8E5  1               
00C8E5  1  A5 B5        		lda Player_Y_HighPos
00C8E7  1  C9 01        		cmp #1
00C8E9  1  D0 0B        		bne locret_A905
00C8EB  1  A9 FF        		lda #$FF
00C8ED  1  8D 90 04     		sta Player_CollisionBits
00C8F0  1               loc_A8FF:
00C8F0  1               
00C8F0  1  A5 CE        		lda SprObject_Y_Position
00C8F2  1  C9 CF        		cmp #$CF
00C8F4  1  90 01        		bcc loc_A906
00C8F6  1               locret_A905:
00C8F6  1               
00C8F6  1  60           		rts
00C8F7  1               loc_A906:
00C8F7  1               
00C8F7  1  A0 02        		ldy #2
00C8F9  1  AD 14 07     		lda CrouchingFlag
00C8FC  1  D0 0C        		bne loc_A919
00C8FE  1  AD 54 07     		lda PlayerSize
00C901  1  D0 07        		bne loc_A919
00C903  1  88           		dey
00C904  1  AD 04 07     		lda SwimmingFlag
00C907  1  D0 01        		bne loc_A919
00C909  1  88           		dey
00C90A  1               loc_A919:
00C90A  1               
00C90A  1  B9 0E D0     		lda BlockBufferAdderData,y
00C90D  1  85 EB        		sta byte_EB
00C90F  1  A8           		tay
00C910  1  AE 54 07     		ldx PlayerSize
00C913  1  AD 14 07     		lda CrouchingFlag
00C916  1  F0 01        		beq loc_A928
00C918  1  E8           		inx
00C919  1               loc_A928:
00C919  1               
00C919  1  A5 CE        		lda SprObject_Y_Position
00C91B  1  DD C1 C8     		cmp PlayerBGUpperExtent,x
00C91E  1  90 35        		bcc DoFootCheck
00C920  1  20 4A D0     		jsr BlockBufferColli_Head
00C923  1  F0 30        		beq DoFootCheck
00C925  1  20 ED CB     		jsr CheckForCoinMTiles
00C928  1  B0 4F        		bcs AwardTouchedCoin
00C92A  1  A4 9F        		ldy Player_Y_Speed
00C92C  1  10 27        		bpl DoFootCheck
00C92E  1  A4 04        		ldy byte_4
00C930  1  C0 04        		cpy #4
00C932  1  90 21        		bcc DoFootCheck
00C934  1  20 DB CB     		jsr sub_AC18
00C937  1  B0 10        		bcs SolidOrClimb
00C939  1  AC 4E 07     		ldy AreaType
00C93C  1  F0 13        		beq NYSpd
00C93E  1  AC 84 07     		ldy BlockBounceTimer
00C941  1  D0 0E        		bne NYSpd
00C943  1  20 B2 A8     		jsr sub_88AE
00C946  1  4C 55 C9     		jmp DoFootCheck
00C949  1               
00C949  1               SolidOrClimb:
00C949  1  C9 23        		cmp #$23
00C94B  1  F0 04        		beq NYSpd
00C94D  1  A9 02        		lda #2
00C94F  1  85 FF        		sta Square1SoundQueue
00C951  1               NYSpd:
00C951  1  A9 01        		lda #1
00C953  1  85 9F        		sta Player_Y_Speed
00C955  1               DoFootCheck:
00C955  1  A4 EB        		ldy byte_EB
00C957  1  A5 CE        		lda SprObject_Y_Position
00C959  1  C9 CF        		cmp #$CF
00C95B  1  B0 60        		bcs DoPlayerSideCheck
00C95D  1  20 49 D0     		jsr BlockBufferColli_Feet
00C960  1  20 ED CB     		jsr CheckForCoinMTiles
00C963  1  B0 14        		bcs AwardTouchedCoin
00C965  1  48           		pha
00C966  1  20 49 D0     		jsr BlockBufferColli_Feet
00C969  1  85 00        		sta TMP_0
00C96B  1  68           		pla
00C96C  1  85 01        		sta TMP_1
00C96E  1  D0 0C        		bne ChkFootMTile
00C970  1  A5 00        		lda TMP_0
00C972  1  F0 49        		beq DoPlayerSideCheck
00C974  1  20 ED CB     		jsr CheckForCoinMTiles
00C977  1  90 03        		bcc ChkFootMTile
00C979  1               
00C979  1               AwardTouchedCoin:
00C979  1  4C 64 CA     		jmp loc_AA73
00C97C  1               
00C97C  1               ChkFootMTile:
00C97C  1  20 E6 CB     		jsr CheckForClimbMTiles
00C97F  1  B0 3C        		bcs DoPlayerSideCheck
00C981  1  A4 9F        		ldy Player_Y_Speed
00C983  1  30 38        		bmi DoPlayerSideCheck
00C985  1  C9 C6        		cmp #$C6
00C987  1  D0 03        		bne loc_A99B
00C989  1  4C 6D CA     		jmp HandleAxeMetatile
00C98C  1               
00C98C  1               loc_A99B:
00C98C  1  20 34 CB     		jsr sub_AB40
00C98F  1  F0 2C        		beq DoPlayerSideCheck
00C991  1  AC 0E 07     		ldy JumpspringAnimCtrl
00C994  1  D0 23        		bne loc_A9C8
00C996  1  A4 04        		ldy byte_4
00C998  1  C0 05        		cpy #5
00C99A  1  90 07        		bcc loc_A9B2
00C99C  1  A5 45        		lda Player_MovingDir
00C99E  1  85 00        		sta TMP_0
00C9A0  1  4C 97 CB     		jmp sub_ABD4
00C9A3  1               loc_A9B2:
00C9A3  1               
00C9A3  1  20 43 CB     		jsr sub_AB4F
00C9A6  1  A9 F0        		lda #$F0
00C9A8  1  25 CE        		and SprObject_Y_Position
00C9AA  1  85 CE        		sta SprObject_Y_Position
00C9AC  1  20 6A CB     		jsr HandlePipeEntry
00C9AF  1  A9 00        		lda #0
00C9B1  1  85 9F        		sta Player_Y_Speed
00C9B3  1  8D 33 04     		sta Player_Y_MoveForce
00C9B6  1  8D 84 04     		sta StompChainCounter
00C9B9  1               loc_A9C8:
00C9B9  1               
00C9B9  1  A9 00        		lda #0
00C9BB  1  85 1D        		sta Player_State
00C9BD  1               DoPlayerSideCheck:
00C9BD  1               
00C9BD  1  A4 EB        		ldy byte_EB
00C9BF  1  C8           		iny
00C9C0  1  C8           		iny
00C9C1  1  A9 02        		lda #2
00C9C3  1  85 00        		sta TMP_0
00C9C5  1               loc_A9D4:
00C9C5  1               
00C9C5  1  C8           		iny
00C9C6  1  84 EB        		sty byte_EB
00C9C8  1  A5 CE        		lda SprObject_Y_Position
00C9CA  1  C9 20        		cmp #$20
00C9CC  1  90 16        		bcc loc_A9F3
00C9CE  1  C9 E4        		cmp #$E4
00C9D0  1  B0 28        		bcs locret_AA09
00C9D2  1  20 4D D0     		jsr BlockBufferColli_Side+1
00C9D5  1  F0 0D        		beq loc_A9F3
00C9D7  1  C9 19        		cmp #$19
00C9D9  1  F0 09        		beq loc_A9F3
00C9DB  1  C9 6D        		cmp #$6D
00C9DD  1  F0 05        		beq loc_A9F3
00C9DF  1  20 E6 CB     		jsr CheckForClimbMTiles
00C9E2  1  90 17        		bcc loc_AA0A
00C9E4  1               loc_A9F3:
00C9E4  1               
00C9E4  1  A4 EB        		ldy byte_EB
00C9E6  1  C8           		iny
00C9E7  1  A5 CE        		lda SprObject_Y_Position
00C9E9  1  C9 08        		cmp #8
00C9EB  1  90 0D        		bcc locret_AA09
00C9ED  1  C9 D0        		cmp #$D0
00C9EF  1  B0 09        		bcs locret_AA09
00C9F1  1  20 4D D0     		jsr BlockBufferColli_Side+1
00C9F4  1  D0 05        		bne loc_AA0A
00C9F6  1  C6 00        		dec TMP_0
00C9F8  1  D0 CB        		bne loc_A9D4
00C9FA  1               locret_AA09:
00C9FA  1               
00C9FA  1  60           		rts
00C9FB  1               loc_AA0A:
00C9FB  1               
00C9FB  1  20 34 CB     		jsr sub_AB40
00C9FE  1  F0 61        		beq locret_AA70
00CA00  1  20 E6 CB     		jsr CheckForClimbMTiles
00CA03  1  90 03        		bcc loc_AA17
00CA05  1  4C 93 CA     		jmp HandleClimbing
00CA08  1               loc_AA17:
00CA08  1               
00CA08  1  20 ED CB     		jsr CheckForCoinMTiles
00CA0B  1  B0 57        		bcs loc_AA73
00CA0D  1  20 5F CB     		jsr sub_AB6B
00CA10  1  90 08        		bcc loc_AA29
00CA12  1  AD 0E 07     		lda JumpspringAnimCtrl
00CA15  1  D0 4A        		bne locret_AA70
00CA17  1  4C 5E CA     		jmp loc_AA6D
00CA1A  1               loc_AA29:
00CA1A  1               
00CA1A  1  A4 1D        		ldy Player_State
00CA1C  1  C0 00        		cpy #0
00CA1E  1  D0 3E        		bne loc_AA6D
00CA20  1  A4 33        		ldy PlayerFacingDir
00CA22  1  88           		dey
00CA23  1  D0 39        		bne loc_AA6D
00CA25  1  C9 6E        		cmp #$6E
00CA27  1  F0 04        		beq loc_AA3C
00CA29  1  C9 1C        		cmp #$1C
00CA2B  1  D0 31        		bne loc_AA6D
00CA2D  1               loc_AA3C:
00CA2D  1               
00CA2D  1  AD C4 03     		lda Player_SprAttrib
00CA30  1  D0 04        		bne loc_AA45
00CA32  1  A0 10        		ldy #$10
00CA34  1  84 FF        		sty Square1SoundQueue
00CA36  1               loc_AA45:
00CA36  1               
00CA36  1  09 20        		ora #$20
00CA38  1  8D C4 03     		sta Player_SprAttrib
00CA3B  1  A5 86        		lda Player_X_Position
00CA3D  1  29 0F        		and #$F
00CA3F  1  F0 0E        		beq loc_AA5E
00CA41  1  A0 00        		ldy #0
00CA43  1  AD 1A 07     		lda ScreenLeft_PageLoc
00CA46  1  F0 01        		beq loc_AA58
00CA48  1  C8           		iny
00CA49  1               loc_AA58:
00CA49  1               
00CA49  1  B9 62 CA     		lda AreaChangeTimerData,y
00CA4C  1  8D DE 06     		sta ChangeAreaTimer
00CA4F  1               loc_AA5E:
00CA4F  1               
00CA4F  1  A5 0E        		lda GameEngineSubroutine
00CA51  1  C9 07        		cmp #7
00CA53  1  F0 0C        		beq locret_AA70
00CA55  1  C9 08        		cmp #8
00CA57  1  D0 08        		bne locret_AA70
00CA59  1  A9 02        		lda #2
00CA5B  1  85 0E        		sta GameEngineSubroutine
00CA5D  1  60           		rts
00CA5E  1               loc_AA6D:
00CA5E  1               
00CA5E  1  20 97 CB     		jsr sub_ABD4
00CA61  1               locret_AA70:
00CA61  1               
00CA61  1  60           		rts
00CA62  1               AreaChangeTimerData:
00CA62  1               
00CA62  1  A0           		.byte $A0
00CA63  1  34           		.byte $34
00CA64  1               loc_AA73:
00CA64  1               
00CA64  1  20 81 CA     		jsr sub_AA8D
00CA67  1  EE 48 07     		inc CoinTallyFor1Ups
00CA6A  1  4C CA A7     		jmp GiveOneCoin
00CA6D  1               
00CA6D  1               HandleAxeMetatile:
00CA6D  1  A9 00        		lda #0
00CA6F  1  8D 72 07     		sta OperMode_Task
00CA72  1  A9 02        		lda #2
00CA74  1  8D 70 07     		sta OperMode
00CA77  1  20 00 FE     		jsr Enter_EndOfCastle
00CA7A  1  20 98 FE     		jsr Enter_LoadMarioPhysics
00CA7D  1  A9 18        		lda #$18
00CA7F  1  85 57        		sta Player_X_Speed
00CA81  1               
00CA81  1               sub_AA8D:
00CA81  1               
00CA81  1  A4 02        		ldy byte_2
00CA83  1  A9 00        		lda #0
00CA85  1  91 06        		sta (6),y
00CA87  1  4C D7 89     		jmp RemoveCoin_Axe
00CA8A  1               ClimbXPosAdder:
00CA8A  1  F9           		.byte $F9
00CA8B  1  07           		.byte 7
00CA8C  1               ClimbPLocAdder:
00CA8C  1  FF           		.byte $FF
00CA8D  1  00           		.byte 0
00CA8E  1               FlagpoleYPosData:
00CA8E  1  18           		.byte $18
00CA8F  1  22           		.byte $22
00CA90  1  50           		.byte $50
00CA91  1  68           		.byte $68
00CA92  1  90           		.byte $90
00CA93  1               HandleClimbing:
00CA93  1               
00CA93  1  A4 04        		ldy byte_4
00CA95  1  C0 06        		cpy #6
00CA97  1  90 04        		bcc ExHC
00CA99  1  C0 0A        		cpy #$A
00CA9B  1  90 01        		bcc ChkForFlagpole
00CA9D  1               ExHC:
00CA9D  1               
00CA9D  1  60           		rts
00CA9E  1               ChkForFlagpole:
00CA9E  1               
00CA9E  1  C9 21        		cmp #$21
00CAA0  1  F0 04        		beq FlagpoleCollision
00CAA2  1  C9 22        		cmp #$22
00CAA4  1  D0 4B        		bne loc_AAFD
00CAA6  1               FlagpoleCollision:
00CAA6  1               
00CAA6  1  A5 0E        		lda GameEngineSubroutine
00CAA8  1  C9 05        		cmp #5
00CAAA  1  F0 53        		beq loc_AB0B
00CAAC  1  A9 01        		lda #1
00CAAE  1  85 33        		sta PlayerFacingDir
00CAB0  1  EE 23 07     		inc ScrollLock
00CAB3  1  A5 0E        		lda GameEngineSubroutine
00CAB5  1  C9 04        		cmp #4
00CAB7  1  F0 31        		beq loc_AAF6
00CAB9  1  A9 33        		lda #$33
00CABB  1  20 67 95     		jsr sub_756D
00CABE  1  A9 80        		lda #$80
00CAC0  1  85 FC        		sta EventMusicQueue
00CAC2  1  4A           		lsr
00CAC3  1  8D 13 07     		sta FlagpoleSoundQueue
00CAC6  1  A2 04        		ldx #4
00CAC8  1  A5 CE        		lda SprObject_Y_Position
00CACA  1  8D 0F 07     		sta FlagpoleCollisionYPos
00CACD  1               loc_AAD9:
00CACD  1               
00CACD  1  DD 8E CA     		cmp FlagpoleYPosData,x
00CAD0  1  B0 03        		bcs loc_AAE1
00CAD2  1  CA           		dex
00CAD3  1  D0 F8        		bne loc_AAD9
00CAD5  1               loc_AAE1:
00CAD5  1               
00CAD5  1  8E 0F 01     		stx FlagpoleScore
00CAD8  1  AD E7 07     		lda byte_7E7
00CADB  1  CD E8 07     		cmp byte_7E8
00CADE  1  D0 0A        		bne loc_AAF6
00CAE0  1  CD FA 07     		cmp GameTimerDisplay+2
00CAE3  1  D0 05        		bne loc_AAF6
00CAE5  1  A9 05        		lda #5
00CAE7  1  8D 0F 01     		sta FlagpoleScore
00CAEA  1               loc_AAF6:
00CAEA  1               
00CAEA  1  A9 04        		lda #4
00CAEC  1  85 0E        		sta GameEngineSubroutine
00CAEE  1  4C FF CA     		jmp loc_AB0B
00CAF1  1               loc_AAFD:
00CAF1  1               
00CAF1  1  C9 23        		cmp #$23
00CAF3  1  D0 0A        		bne loc_AB0B
00CAF5  1  A5 CE        		lda SprObject_Y_Position
00CAF7  1  C9 20        		cmp #$20
00CAF9  1  B0 04        		bcs loc_AB0B
00CAFB  1  A9 01        		lda #1
00CAFD  1  85 0E        		sta GameEngineSubroutine
00CAFF  1               loc_AB0B:
00CAFF  1               
00CAFF  1  A9 03        		lda #3
00CB01  1  85 1D        		sta Player_State
00CB03  1  A9 00        		lda #0
00CB05  1  85 57        		sta Player_X_Speed
00CB07  1  8D 05 07     		sta Player_X_MoveForce
00CB0A  1  A5 86        		lda Player_X_Position
00CB0C  1  38           		sec
00CB0D  1  ED 1C 07     		sbc ScreenLeft_X_Pos
00CB10  1  C9 10        		cmp #$10
00CB12  1  B0 04        		bcs loc_AB24
00CB14  1  A9 02        		lda #2
00CB16  1  85 33        		sta PlayerFacingDir
00CB18  1               loc_AB24:
00CB18  1               
00CB18  1  A4 33        		ldy PlayerFacingDir
00CB1A  1  A5 06        		lda byte_6
00CB1C  1  0A           		asl
00CB1D  1  0A           		asl
00CB1E  1  0A           		asl
00CB1F  1  0A           		asl
00CB20  1  18           		clc
00CB21  1  79 89 CA     		adc ClimbXPosAdder-1,y
00CB24  1  85 86        		sta Player_X_Position
00CB26  1  A5 06        		lda byte_6
00CB28  1  D0 09        		bne locret_AB3F
00CB2A  1  AD 1B 07     		lda ScreenRight_PageLoc
00CB2D  1  18           		clc
00CB2E  1  79 8B CA     		adc ClimbPLocAdder-1,y
00CB31  1  85 6D        		sta Player_PageLoc
00CB33  1               locret_AB3F:
00CB33  1               
00CB33  1  60           		rts
00CB34  1               sub_AB40:
00CB34  1               
00CB34  1  C9 5E        		cmp #$5E
00CB36  1  F0 0A        		beq locret_AB4E
00CB38  1  C9 5F        		cmp #$5F
00CB3A  1  F0 06        		beq locret_AB4E
00CB3C  1  C9 60        		cmp #$60
00CB3E  1  F0 02        		beq locret_AB4E
00CB40  1  C9 61        		cmp #$61
00CB42  1               locret_AB4E:
00CB42  1               
00CB42  1  60           		rts
00CB43  1               sub_AB4F:
00CB43  1               
00CB43  1  20 5F CB     		jsr sub_AB6B
00CB46  1  90 16        		bcc locret_AB6A
00CB48  1  A9 70        		lda #$70
00CB4A  1  8D 09 07     		sta VerticalForce
00CB4D  1  8D 0A 07     		sta VerticalForceDown
00CB50  1  A9 F9        		lda #$F9
00CB52  1  8D DB 06     		sta JumpspringForce
00CB55  1  A9 03        		lda #3
00CB57  1  8D 86 07     		sta JumpspringTimer
00CB5A  1  4A           		lsr
00CB5B  1  8D 0E 07     		sta JumpspringAnimCtrl
00CB5E  1               locret_AB6A:
00CB5E  1               
00CB5E  1  60           		rts
00CB5F  1               sub_AB6B:
00CB5F  1               
00CB5F  1  C9 68        		cmp #$68
00CB61  1  F0 05        		beq loc_AB74
00CB63  1  C9 69        		cmp #$69
00CB65  1  18           		clc
00CB66  1  D0 01        		bne locret_AB75
00CB68  1               loc_AB74:
00CB68  1  38           		sec
00CB69  1               locret_AB75:
00CB69  1  60           		rts
00CB6A  1               
00CB6A  1               HandlePipeEntry:
00CB6A  1  A5 0B        		lda Up_Down_Buttons
00CB6C  1  29 04        		and #4
00CB6E  1  F0 26        		beq locret_ABD3
00CB70  1  A5 00        		lda TMP_0
00CB72  1  C9 11        		cmp #$11
00CB74  1  D0 20        		bne locret_ABD3
00CB76  1  A5 01        		lda TMP_1
00CB78  1  C9 10        		cmp #$10
00CB7A  1  D0 1A        		bne locret_ABD3
00CB7C  1  A9 30        		lda #$30
00CB7E  1  8D DE 06     		sta ChangeAreaTimer
00CB81  1  A9 03        		lda #3
00CB83  1  85 0E        		sta GameEngineSubroutine
00CB85  1  A9 10        		lda #$10
00CB87  1  85 FF        		sta Square1SoundQueue
00CB89  1  A9 20        		lda #$20
00CB8B  1  8D C4 03     		sta Player_SprAttrib
00CB8E  1  AD D6 06     		lda WarpZoneControl
00CB91  1  F0 03        		beq locret_ABD3
00CB93  1  20 A0 FE     		jsr Enter_LL_LoadWarpzone
00CB96  1               locret_ABD3:
00CB96  1  60           		rts
00CB97  1               
00CB97  1               sub_ABD4:
00CB97  1  A9 00        		lda #0
00CB99  1  A4 57        		ldy Player_X_Speed
00CB9B  1  A6 00        		ldx TMP_0
00CB9D  1  CA           		dex
00CB9E  1  D0 0A        		bne loc_ABE7
00CBA0  1  E8           		inx
00CBA1  1  C0 00        		cpy #0
00CBA3  1  30 28        		bmi loc_AC0A
00CBA5  1  A9 FF        		lda #$FF
00CBA7  1  4C B2 CB     		jmp loc_ABEF
00CBAA  1               loc_ABE7:
00CBAA  1               
00CBAA  1  A2 02        		ldx #2
00CBAC  1  C0 01        		cpy #1
00CBAE  1  10 1D        		bpl loc_AC0A
00CBB0  1  A9 01        		lda #1
00CBB2  1               loc_ABEF:
00CBB2  1               
00CBB2  1  A0 10        		ldy #$10
00CBB4  1  8C 85 07     		sty SideCollisionTimer
00CBB7  1  A0 00        		ldy #0
00CBB9  1  84 57        		sty Player_X_Speed
00CBBB  1  C9 00        		cmp #0
00CBBD  1  10 01        		bpl loc_ABFD
00CBBF  1  88           		dey
00CBC0  1               loc_ABFD:
00CBC0  1               
00CBC0  1  84 00        		sty TMP_0
00CBC2  1  18           		clc
00CBC3  1  65 86        		adc Player_X_Position
00CBC5  1  85 86        		sta Player_X_Position
00CBC7  1  A5 6D        		lda Player_PageLoc
00CBC9  1  65 00        		adc TMP_0
00CBCB  1  85 6D        		sta Player_PageLoc
00CBCD  1               loc_AC0A:
00CBCD  1               
00CBCD  1  8A           		txa
00CBCE  1  49 FF        		eor #$FF
00CBD0  1  2D 90 04     		and Player_CollisionBits
00CBD3  1  8D 90 04     		sta Player_CollisionBits
00CBD6  1  60           		rts
00CBD7  1               SolidMTileUpperExt:
00CBD7  1  10           		.byte $10
00CBD8  1  62           		.byte $62
00CBD9  1  88           		.byte $88
00CBDA  1  C5           		.byte $C5
00CBDB  1               sub_AC18:
00CBDB  1               
00CBDB  1  20 FC CB     		jsr GetMTileAttrib
00CBDE  1  DD D7 CB     		cmp SolidMTileUpperExt,x
00CBE1  1  60           		rts
00CBE2  1               ClimbMTileUpperExt:
00CBE2  1  21           		.byte $21
00CBE3  1  6F           		.byte $6F
00CBE4  1  8D           		.byte $8D
00CBE5  1  C7           		.byte $C7
00CBE6  1               CheckForClimbMTiles:
00CBE6  1               
00CBE6  1  20 FC CB     		jsr GetMTileAttrib
00CBE9  1  DD E2 CB     		cmp ClimbMTileUpperExt,x
00CBEC  1  60           		rts
00CBED  1               CheckForCoinMTiles:
00CBED  1               
00CBED  1  C9 C3        		cmp #$C3
00CBEF  1  F0 06        		beq loc_AC34
00CBF1  1  C9 C4        		cmp #$C4
00CBF3  1  F0 02        		beq loc_AC34
00CBF5  1  18           		clc
00CBF6  1  60           		rts
00CBF7  1               loc_AC34:
00CBF7  1               
00CBF7  1  A9 01        		lda #1
00CBF9  1  85 FE        		sta Square2SoundQueue
00CBFB  1  60           		rts
00CBFC  1               GetMTileAttrib:
00CBFC  1               
00CBFC  1  A8           		tay
00CBFD  1  29 C0        		and #$C0
00CBFF  1  0A           		asl
00CC00  1  2A           		rol
00CC01  1  2A           		rol
00CC02  1  AA           		tax
00CC03  1  98           		tya
00CC04  1               locret_AC41:
00CC04  1               
00CC04  1  60           		rts
00CC05  1               EnemyBGCStateData:
00CC05  1  01           		.byte 1
00CC06  1  01           		.byte 1
00CC07  1  02           		.byte 2
00CC08  1  02           		.byte 2
00CC09  1  02           		.byte 2
00CC0A  1  05           		.byte 5
00CC0B  1               EnemyBGCXSpdData:
00CC0B  1  10           		.byte $10
00CC0C  1  F0           		.byte $F0
00CC0D  1               EnemyToBGCollisionDet:
00CC0D  1               
00CC0D  1  B5 1E        		lda Enemy_State,x
00CC0F  1  29 20        		and #$20
00CC11  1  D0 F1        		bne locret_AC41
00CC13  1  20 B4 CD     		jsr SubtEnemyYPos
00CC16  1  90 EC        		bcc locret_AC41
00CC18  1  B4 16        		ldy $16,x
00CC1A  1  C0 12        		cpy #$12
00CC1C  1  D0 06        		bne loc_AC61
00CC1E  1  B5 CF        		lda $CF,x
00CC20  1  C9 25        		cmp #$25
00CC22  1  90 E0        		bcc locret_AC41
00CC24  1               loc_AC61:
00CC24  1               
00CC24  1  C0 0E        		cpy #$E
00CC26  1  D0 03        		bne loc_AC68
00CC28  1  4C BC CD     		jmp sub_ADF9
00CC2B  1               loc_AC68:
00CC2B  1               
00CC2B  1  C0 05        		cpy #5
00CC2D  1  D0 04        		bne loc_AC70
00CC2F  1  4C DE CD     		jmp loc_AE1B
00CC32  1               locret_AC6F:
00CC32  1               
00CC32  1  60           		rts
00CC33  1               loc_AC70:
00CC33  1               
00CC33  1  C0 12        		cpy #$12
00CC35  1  F0 0C        		beq loc_AC80
00CC37  1  C0 2E        		cpy #$2E
00CC39  1  F0 08        		beq loc_AC80
00CC3B  1  C0 04        		cpy #4
00CC3D  1  F0 F3        		beq locret_AC6F
00CC3F  1  C0 07        		cpy #7
00CC41  1  B0 EF        		bcs locret_AC6F
00CC43  1               loc_AC80:
00CC43  1               
00CC43  1  20 07 CE     		jsr sub_AE44
00CC46  1  D0 03        		bne loc_AC88
00CC48  1               loc_AC85:
00CC48  1               
00CC48  1  4C 3B CD     		jmp loc_AD78
00CC4B  1               loc_AC88:
00CC4B  1               
00CC4B  1  20 0E CE     		jsr sub_AE4B
00CC4E  1  F0 F8        		beq loc_AC85
00CC50  1  C9 20        		cmp #$20
00CC52  1  D0 6C        		bne loc_ACFD
00CC54  1  B5 16        		lda $16,x
00CC56  1  C9 15        		cmp #$15
00CC58  1               loc_AC95:
00CC58  1               
00CC58  1  B0 0C        		bcs sub_ACA3
00CC5A  1  C9 06        		cmp #6
00CC5C  1  D0 03        		bne loc_AC9E
00CC5E  1  20 E7 CD     		jsr sub_AE24
00CC61  1               loc_AC9E:
00CC61  1               
00CC61  1  A9 01        		lda #1
00CC63  1  20 6B C6     		jsr SetupFloateyNumber
00CC66  1               sub_ACA3:
00CC66  1               
00CC66  1  B5 16        		lda $16,x
00CC68  1  C9 09        		cmp #9
00CC6A  1  90 18        		bcc loc_ACC1
00CC6C  1  C9 11        		cmp #$11
00CC6E  1  B0 14        		bcs loc_ACC1
00CC70  1  C9 0D        		cmp #$D
00CC72  1  F0 10        		beq loc_ACC1
00CC74  1  C9 04        		cmp #4
00CC76  1  F0 0C        		beq loc_ACC1
00CC78  1  C9 0A        		cmp #$A
00CC7A  1  90 04        		bcc loc_ACBD
00CC7C  1  C9 0D        		cmp #$D
00CC7E  1  90 04        		bcc loc_ACC1
00CC80  1               loc_ACBD:
00CC80  1               
00CC80  1  29 01        		and #1
00CC82  1  95 16        		sta $16,x
00CC84  1               loc_ACC1:
00CC84  1               
00CC84  1  C9 2E        		cmp #$2E
00CC86  1  F0 08        		beq loc_ACCD
00CC88  1  C9 06        		cmp #6
00CC8A  1  F0 04        		beq loc_ACCD
00CC8C  1  A9 02        		lda #2
00CC8E  1  95 1E        		sta $1E,x
00CC90  1               loc_ACCD:
00CC90  1               
00CC90  1  D6 CF        		dec $CF,x
00CC92  1  D6 CF        		dec $CF,x
00CC94  1  B5 16        		lda $16,x
00CC96  1  C9 07        		cmp #7
00CC98  1  F0 07        		beq loc_ACDE
00CC9A  1  A9 FD        		lda #$FD
00CC9C  1  AC 4E 07     		ldy AreaType
00CC9F  1  D0 02        		bne loc_ACE0
00CCA1  1               loc_ACDE:
00CCA1  1               
00CCA1  1  A9 FF        		lda #$FF
00CCA3  1               loc_ACE0:
00CCA3  1               
00CCA3  1  95 A0        		sta $A0,x
00CCA5  1  A0 01        		ldy #1
00CCA7  1  20 9C CD     		jsr PlayerEnemyDiff
00CCAA  1  10 01        		bpl loc_ACEA
00CCAC  1  C8           		iny
00CCAD  1               loc_ACEA:
00CCAD  1               
00CCAD  1  B5 16        		lda $16,x
00CCAF  1  C9 33        		cmp #$33
00CCB1  1  F0 06        		beq loc_ACF6
00CCB3  1  C9 08        		cmp #8
00CCB5  1  F0 02        		beq loc_ACF6
00CCB7  1  94 46        		sty $46,x
00CCB9  1               loc_ACF6:
00CCB9  1               
00CCB9  1  88           		dey
00CCBA  1  B9 0B CC     		lda EnemyBGCXSpdData,y
00CCBD  1  95 58        		sta $58,x
00CCBF  1  60           		rts
00CCC0  1               loc_ACFD:
00CCC0  1               
00CCC0  1  A5 04        		lda byte_4
00CCC2  1  38           		sec
00CCC3  1  E9 08        		sbc #8
00CCC5  1  C9 05        		cmp #5
00CCC7  1  B0 72        		bcs loc_AD78
00CCC9  1  B5 1E        		lda Enemy_State,x
00CCCB  1  29 40        		and #$40
00CCCD  1  D0 57        		bne loc_AD63
00CCCF  1  B5 1E        		lda Enemy_State,x
00CCD1  1  0A           		asl
00CCD2  1  90 03        		bcc loc_AD14
00CCD4  1               loc_AD11:
00CCD4  1               
00CCD4  1  4C 57 CD     		jmp loc_AD94
00CCD7  1               loc_AD14:
00CCD7  1               
00CCD7  1  B5 1E        		lda Enemy_State,x
00CCD9  1  F0 F9        		beq loc_AD11
00CCDB  1  C9 05        		cmp #5
00CCDD  1  F0 1F        		beq loc_AD3B
00CCDF  1  C9 03        		cmp #3
00CCE1  1  B0 1A        		bcs locret_AD3A
00CCE3  1  B5 1E        		lda $1E,x
00CCE5  1  C9 02        		cmp #2
00CCE7  1  D0 15        		bne loc_AD3B
00CCE9  1  A9 10        		lda #$10
00CCEB  1  B4 16        		ldy $16,x
00CCED  1  C0 12        		cpy #$12
00CCEF  1  D0 02        		bne loc_AD30
00CCF1  1  A9 00        		lda #0
00CCF3  1               loc_AD30:
00CCF3  1               
00CCF3  1  9D 96 07     		sta EnemyIntervalTimer,x
00CCF6  1  A9 03        		lda #3
00CCF8  1  95 1E        		sta $1E,x
00CCFA  1  20 A8 CD     		jsr sub_ADE5
00CCFD  1               locret_AD3A:
00CCFD  1               
00CCFD  1  60           		rts
00CCFE  1               loc_AD3B:
00CCFE  1               
00CCFE  1  B5 16        		lda $16,x
00CD00  1  C9 06        		cmp #6
00CD02  1  F0 22        		beq loc_AD63
00CD04  1  C9 12        		cmp #$12
00CD06  1  D0 0E        		bne loc_AD53
00CD08  1  A9 01        		lda #1
00CD0A  1  95 46        		sta $46,x
00CD0C  1  A9 08        		lda #8
00CD0E  1  95 58        		sta $58,x
00CD10  1  A5 09        		lda FrameCounter
00CD12  1  29 07        		and #7
00CD14  1  F0 10        		beq loc_AD63
00CD16  1               loc_AD53:
00CD16  1               
00CD16  1  A0 01        		ldy #1
00CD18  1  20 9C CD     		jsr PlayerEnemyDiff
00CD1B  1  10 01        		bpl loc_AD5B
00CD1D  1  C8           		iny
00CD1E  1               loc_AD5B:
00CD1E  1               
00CD1E  1  98           		tya
00CD1F  1  D5 46        		cmp $46,x
00CD21  1  D0 03        		bne loc_AD63
00CD23  1  20 7D CD     		jsr sub_ADBA
00CD26  1               loc_AD63:
00CD26  1               
00CD26  1  20 A8 CD     		jsr sub_ADE5
00CD29  1  B5 1E        		lda $1E,x
00CD2B  1  29 80        		and #$80
00CD2D  1  D0 05        		bne loc_AD71
00CD2F  1  A9 00        		lda #0
00CD31  1  95 1E        		sta $1E,x
00CD33  1  60           		rts
00CD34  1               loc_AD71:
00CD34  1               
00CD34  1  B5 1E        		lda $1E,x
00CD36  1  29 BF        		and #$BF
00CD38  1  95 1E        		sta $1E,x
00CD3A  1  60           		rts
00CD3B  1               loc_AD78:
00CD3B  1               
00CD3B  1  B5 16        		lda $16,x
00CD3D  1  C9 03        		cmp #3
00CD3F  1  D0 04        		bne loc_AD82
00CD41  1  B5 1E        		lda $1E,x
00CD43  1  F0 38        		beq sub_ADBA
00CD45  1               loc_AD82:
00CD45  1               
00CD45  1  B5 1E        		lda $1E,x
00CD47  1  A8           		tay
00CD48  1  0A           		asl
00CD49  1  90 07        		bcc loc_AD8F
00CD4B  1  B5 1E        		lda $1E,x
00CD4D  1  09 40        		ora #$40
00CD4F  1  4C 55 CD     		jmp loc_AD92
00CD52  1               loc_AD8F:
00CD52  1               
00CD52  1  B9 05 CC     		lda EnemyBGCStateData,y
00CD55  1               loc_AD92:
00CD55  1               
00CD55  1  95 1E        		sta $1E,x
00CD57  1               loc_AD94:
00CD57  1               
00CD57  1  B5 CF        		lda $CF,x
00CD59  1  C9 20        		cmp #$20
00CD5B  1  90 1F        		bcc locret_ADB9
00CD5D  1  A0 16        		ldy #$16
00CD5F  1  A9 02        		lda #2
00CD61  1  85 EB        		sta byte_EB
00CD63  1               loc_ADA0:
00CD63  1               
00CD63  1  A5 EB        		lda byte_EB
00CD65  1  D5 46        		cmp $46,x
00CD67  1  D0 0C        		bne loc_ADB2
00CD69  1  A9 01        		lda #1
00CD6B  1  20 E9 CF     		jsr sub_B026
00CD6E  1  F0 05        		beq loc_ADB2
00CD70  1  20 0E CE     		jsr sub_AE4B
00CD73  1  D0 08        		bne sub_ADBA
00CD75  1               loc_ADB2:
00CD75  1               
00CD75  1  C6 EB        		dec byte_EB
00CD77  1  C8           		iny
00CD78  1  C0 18        		cpy #$18
00CD7A  1  90 E7        		bcc loc_ADA0
00CD7C  1               locret_ADB9:
00CD7C  1               
00CD7C  1  60           		rts
00CD7D  1               sub_ADBA:
00CD7D  1               
00CD7D  1  E0 05        		cpx #5
00CD7F  1  F0 09        		beq loc_ADC7
00CD81  1  B5 1E        		lda $1E,x
00CD83  1  0A           		asl
00CD84  1  90 04        		bcc loc_ADC7
00CD86  1  A9 02        		lda #2
00CD88  1  85 FF        		sta Square1SoundQueue
00CD8A  1               loc_ADC7:
00CD8A  1               
00CD8A  1  B5 16        		lda $16,x
00CD8C  1  C9 05        		cmp #5
00CD8E  1  D0 09        		bne loc_ADD6
00CD90  1  A9 00        		lda #0
00CD92  1  85 00        		sta TMP_0
00CD94  1  A0 FA        		ldy #$FA
00CD96  1  4C 78 B6     		jmp loc_966C
00CD99  1               loc_ADD6:
00CD99  1               
00CD99  1  4C 9C C7     		jmp loc_A7AB
00CD9C  1               PlayerEnemyDiff:
00CD9C  1               
00CD9C  1  B5 87        		lda $87,x
00CD9E  1  38           		sec
00CD9F  1  E5 86        		sbc Player_X_Position
00CDA1  1  85 00        		sta TMP_0
00CDA3  1  B5 6E        		lda $6E,x
00CDA5  1  E5 6D        		sbc Player_PageLoc
00CDA7  1  60           		rts
00CDA8  1               sub_ADE5:
00CDA8  1               
00CDA8  1  20 5A AF     		jsr InitVStf
00CDAB  1  B5 CF        		lda $CF,x
00CDAD  1  29 F0        		and #$F0
00CDAF  1  09 08        		ora #8
00CDB1  1  95 CF        		sta $CF,x
00CDB3  1  60           		rts
00CDB4  1               SubtEnemyYPos:
00CDB4  1               
00CDB4  1  B5 CF        		lda $CF,x
00CDB6  1  18           		clc
00CDB7  1  69 3E        		adc #$3E
00CDB9  1  C9 44        		cmp #$44
00CDBB  1  60           		rts
00CDBC  1               sub_ADF9:
00CDBC  1               
00CDBC  1  20 B4 CD     		jsr SubtEnemyYPos
00CDBF  1  90 1A        		bcc loc_AE18
00CDC1  1  B5 A0        		lda $A0,x
00CDC3  1  18           		clc
00CDC4  1  69 02        		adc #2
00CDC6  1  C9 03        		cmp #3
00CDC8  1  90 11        		bcc loc_AE18
00CDCA  1  20 07 CE     		jsr sub_AE44
00CDCD  1  F0 0C        		beq loc_AE18
00CDCF  1  20 0E CE     		jsr sub_AE4B
00CDD2  1  F0 07        		beq loc_AE18
00CDD4  1  20 A8 CD     		jsr sub_ADE5
00CDD7  1  A9 FD        		lda #$FD
00CDD9  1  95 A0        		sta $A0,x
00CDDB  1               loc_AE18:
00CDDB  1               
00CDDB  1  4C 57 CD     		jmp loc_AD94
00CDDE  1               loc_AE1B:
00CDDE  1               
00CDDE  1  20 07 CE     		jsr sub_AE44
00CDE1  1  F0 1D        		beq loc_AE3D
00CDE3  1  C9 20        		cmp #$20
00CDE5  1  D0 08        		bne loc_AE2C
00CDE7  1               sub_AE24:
00CDE7  1               
00CDE7  1  20 C7 C3     		jsr loc_A3D6
00CDEA  1  A9 FC        		lda #$FC
00CDEC  1  95 A0        		sta $A0,x
00CDEE  1  60           		rts
00CDEF  1               loc_AE2C:
00CDEF  1               
00CDEF  1  BD 8A 07     		lda $78A,x
00CDF2  1  D0 0C        		bne loc_AE3D
00CDF4  1  B5 1E        		lda $1E,x
00CDF6  1  29 88        		and #$88
00CDF8  1  95 1E        		sta $1E,x
00CDFA  1  20 A8 CD     		jsr sub_ADE5
00CDFD  1  4C 57 CD     		jmp loc_AD94
00CE00  1               loc_AE3D:
00CE00  1               
00CE00  1  B5 1E        		lda $1E,x
00CE02  1  09 01        		ora #1
00CE04  1  95 1E        		sta $1E,x
00CE06  1  60           		rts
00CE07  1               sub_AE44:
00CE07  1               
00CE07  1  A9 00        		lda #0
00CE09  1  A0 15        		ldy #$15
00CE0B  1  4C E9 CF     		jmp sub_B026
00CE0E  1               sub_AE4B:
00CE0E  1               
00CE0E  1  C9 23        		cmp #$23
00CE10  1  F0 16        		beq locret_AE65
00CE12  1  C9 C3        		cmp #$C3
00CE14  1  F0 12        		beq locret_AE65
00CE16  1  C9 C4        		cmp #$C4
00CE18  1  F0 0E        		beq locret_AE65
00CE1A  1  C9 5E        		cmp #$5E
00CE1C  1  F0 0A        		beq locret_AE65
00CE1E  1  C9 5F        		cmp #$5F
00CE20  1  F0 06        		beq locret_AE65
00CE22  1  C9 60        		cmp #$60
00CE24  1  F0 02        		beq locret_AE65
00CE26  1  C9 61        		cmp #$61
00CE28  1               locret_AE65:
00CE28  1               
00CE28  1  60           		rts
00CE29  1               FireballBGCollision:
00CE29  1               
00CE29  1  B5 D5        		lda $D5,x
00CE2B  1  C9 18        		cmp #$18
00CE2D  1  90 21        		bcc loc_AE8D
00CE2F  1  20 FD CF     		jsr sub_B03A
00CE32  1  F0 1C        		beq loc_AE8D
00CE34  1  20 0E CE     		jsr sub_AE4B
00CE37  1  F0 17        		beq loc_AE8D
00CE39  1  B5 A6        		lda $A6,x
00CE3B  1  30 18        		bmi loc_AE92
00CE3D  1  B5 3A        		lda $3A,x
00CE3F  1  D0 14        		bne loc_AE92
00CE41  1  A9 FD        		lda #$FD
00CE43  1  95 A6        		sta $A6,x
00CE45  1  A9 01        		lda #1
00CE47  1  95 3A        		sta $3A,x
00CE49  1  B5 D5        		lda $D5,x
00CE4B  1  29 F8        		and #$F8
00CE4D  1  95 D5        		sta $D5,x
00CE4F  1  60           		rts
00CE50  1               loc_AE8D:
00CE50  1               
00CE50  1  A9 00        		lda #0
00CE52  1  95 3A        		sta $3A,x
00CE54  1  60           		rts
00CE55  1               loc_AE92:
00CE55  1               
00CE55  1  A9 80        		lda #$80
00CE57  1  95 24        		sta $24,x
00CE59  1  A9 02        		lda #2
00CE5B  1  85 FF        		sta Square1SoundQueue
00CE5D  1  60           		rts
00CE5E  1               BoundBoxCtrlData:
00CE5E  1  02           		.byte 2
00CE5F  1  08           		.byte 8
00CE60  1  0E           		.byte $E
00CE61  1  20           		.byte $20
00CE62  1  03           		.byte 3
00CE63  1  14           		.byte $14
00CE64  1  0D           		.byte $D
00CE65  1  20           		.byte $20
00CE66  1  02           		.byte 2
00CE67  1  14           		.byte $14
00CE68  1  0E           		.byte $E
00CE69  1  20           		.byte $20
00CE6A  1  02           		.byte 2
00CE6B  1  09           		.byte 9
00CE6C  1  0E           		.byte $E
00CE6D  1  15           		.byte $15
00CE6E  1  00           		.byte 0
00CE6F  1  00           		.byte 0
00CE70  1  18           		.byte $18
00CE71  1  06           		.byte 6
00CE72  1  00           		.byte 0
00CE73  1  00           		.byte 0
00CE74  1  20           		.byte $20
00CE75  1  0D           		.byte $D
00CE76  1  00           		.byte 0
00CE77  1  00           		.byte 0
00CE78  1  30           		.byte $30
00CE79  1  0D           		.byte $D
00CE7A  1  00           		.byte 0
00CE7B  1  00           		.byte 0
00CE7C  1  08           		.byte 8
00CE7D  1  08           		.byte 8
00CE7E  1  06           		.byte 6
00CE7F  1  04           		.byte 4
00CE80  1  0A           		.byte $A
00CE81  1  08           		.byte 8
00CE82  1  03           		.byte 3
00CE83  1  0E           		.byte $E
00CE84  1  0D           		.byte $D
00CE85  1  16           		.byte $16
00CE86  1  00           		.byte 0
00CE87  1  02           		.byte 2
00CE88  1  10           		.byte $10
00CE89  1  15           		.byte $15
00CE8A  1  04           		.byte 4
00CE8B  1  04           		.byte 4
00CE8C  1  0C           		.byte $C
00CE8D  1  1C           		.byte $1C
00CE8E  1               GetFireballBoundBox:
00CE8E  1               
00CE8E  1  8A           		txa
00CE8F  1  18           		clc
00CE90  1  69 07        		adc #7
00CE92  1  AA           		tax
00CE93  1  A0 02        		ldy #2
00CE95  1  D0 07        		bne loc_AEDB
00CE97  1               GetMiscBoundBox:
00CE97  1               
00CE97  1  8A           		txa
00CE98  1  18           		clc
00CE99  1  69 09        		adc #9
00CE9B  1  AA           		tax
00CE9C  1  A0 06        		ldy #6
00CE9E  1               loc_AEDB:
00CE9E  1               
00CE9E  1  20 FD CE     		jsr BoundingBoxCore
00CEA1  1  4C 3F CF     		jmp loc_AF7C
00CEA4  1               GetEnemyBoundBox:
00CEA4  1               
00CEA4  1  A0 48        		ldy #$48
00CEA6  1  84 00        		sty TMP_0
00CEA8  1  A0 44        		ldy #$44
00CEAA  1  4C B3 CE     		jmp GetMaskedOffScrBits
00CEAD  1               SmallPlatformBoundBox:
00CEAD  1               
00CEAD  1  A0 08        		ldy #8
00CEAF  1  84 00        		sty TMP_0
00CEB1  1  A0 04        		ldy #4
00CEB3  1               GetMaskedOffScrBits:
00CEB3  1               
00CEB3  1  B5 87        		lda Enemy_X_Position,x
00CEB5  1  38           		sec
00CEB6  1  ED 1C 07     		sbc ScreenLeft_X_Pos
00CEB9  1  85 01        		sta TMP_1
00CEBB  1  B5 6E        		lda $6E,x
00CEBD  1  ED 1A 07     		sbc ScreenLeft_PageLoc
00CEC0  1  30 06        		bmi loc_AF05
00CEC2  1  05 01        		ora TMP_1
00CEC4  1  F0 02        		beq loc_AF05
00CEC6  1  A4 00        		ldy TMP_0
00CEC8  1               loc_AF05:
00CEC8  1               
00CEC8  1  98           		tya
00CEC9  1  2D D1 03     		and Enemy_OffscreenBits
00CECC  1  9D D8 03     		sta $3D8,x
00CECF  1  D0 19        		bne loc_AF27
00CED1  1  4C DD CE     		jmp loc_AF1A
00CED4  1               LargePlatformBoundBox:
00CED4  1               
00CED4  1  E8           		inx
00CED5  1  20 83 DE     		jsr GetXOffscreenBits
00CED8  1  CA           		dex
00CED9  1  C9 FE        		cmp #$FE
00CEDB  1  B0 0D        		bcs loc_AF27
00CEDD  1               loc_AF1A:
00CEDD  1               
00CEDD  1  8A           		txa
00CEDE  1  18           		clc
00CEDF  1  69 01        		adc #1
00CEE1  1  AA           		tax
00CEE2  1  A0 01        		ldy #1
00CEE4  1  20 FD CE     		jsr BoundingBoxCore
00CEE7  1  4C 3F CF     		jmp loc_AF7C
00CEEA  1               loc_AF27:
00CEEA  1               
00CEEA  1  8A           		txa
00CEEB  1  0A           		asl
00CEEC  1  0A           		asl
00CEED  1  A8           		tay
00CEEE  1  A9 FF        		lda #$FF
00CEF0  1  99 B0 04     		sta $4B0,y
00CEF3  1  99 B1 04     		sta $4B1,y
00CEF6  1  99 B2 04     		sta $4B2,y
00CEF9  1  99 B3 04     		sta $4B3,y
00CEFC  1  60           		rts
00CEFD  1               BoundingBoxCore:
00CEFD  1               
00CEFD  1  86 00        		stx TMP_0
00CEFF  1  B9 B8 03     		lda Player_Rel_YPos,y
00CF02  1  85 02        		sta byte_2
00CF04  1  B9 AD 03     		lda Player_Rel_XPos,y
00CF07  1  85 01        		sta TMP_1
00CF09  1  8A           		txa
00CF0A  1  0A           		asl
00CF0B  1  0A           		asl
00CF0C  1  48           		pha
00CF0D  1  A8           		tay
00CF0E  1  BD 99 04     		lda Player_BoundBoxCtrl,x
00CF11  1  0A           		asl
00CF12  1  0A           		asl
00CF13  1  AA           		tax
00CF14  1  A5 01        		lda TMP_1
00CF16  1  18           		clc
00CF17  1  7D 5E CE     		adc BoundBoxCtrlData,x
00CF1A  1  99 AC 04     		sta BoundingBox_UL_Corner,y
00CF1D  1  A5 01        		lda TMP_1
00CF1F  1  18           		clc
00CF20  1  7D 60 CE     		adc BoundBoxCtrlData+2,x
00CF23  1  99 AE 04     		sta BoundingBox_LR_Corner,y
00CF26  1  E8           		inx
00CF27  1  C8           		iny
00CF28  1  A5 02        		lda byte_2
00CF2A  1  18           		clc
00CF2B  1  7D 5E CE     		adc BoundBoxCtrlData,x
00CF2E  1  99 AC 04     		sta BoundingBox_UL_Corner,y
00CF31  1  A5 02        		lda byte_2
00CF33  1  18           		clc
00CF34  1  7D 60 CE     		adc BoundBoxCtrlData+2,x
00CF37  1  99 AE 04     		sta BoundingBox_LR_Corner,y
00CF3A  1  68           		pla
00CF3B  1  A8           		tay
00CF3C  1  A6 00        		ldx TMP_0
00CF3E  1  60           		rts
00CF3F  1               loc_AF7C:
00CF3F  1               
00CF3F  1  AD 1C 07     		lda ScreenLeft_X_Pos
00CF42  1  18           		clc
00CF43  1  69 80        		adc #$80
00CF45  1  85 02        		sta byte_2
00CF47  1  AD 1A 07     		lda ScreenLeft_PageLoc
00CF4A  1  69 00        		adc #0
00CF4C  1  85 01        		sta TMP_1
00CF4E  1  B5 86        		lda $86,x
00CF50  1  C5 02        		cmp byte_2
00CF52  1  B5 6D        		lda $6D,x
00CF54  1  E5 01        		sbc TMP_1
00CF56  1  90 15        		bcc loc_AFAA
00CF58  1  B9 AE 04     		lda $4AE,y
00CF5B  1  30 0D        		bmi loc_AFA7
00CF5D  1  A9 FF        		lda #$FF
00CF5F  1  BE AC 04     		ldx $4AC,y
00CF62  1  30 03        		bmi loc_AFA4
00CF64  1  99 AC 04     		sta $4AC,y
00CF67  1               loc_AFA4:
00CF67  1               
00CF67  1  99 AE 04     		sta $4AE,y
00CF6A  1               loc_AFA7:
00CF6A  1               
00CF6A  1  A6 08        		ldx ObjectOffset
00CF6C  1  60           		rts
00CF6D  1               loc_AFAA:
00CF6D  1               
00CF6D  1  B9 AC 04     		lda $4AC,y
00CF70  1  10 11        		bpl loc_AFC0
00CF72  1  C9 A0        		cmp #$A0
00CF74  1  90 0D        		bcc loc_AFC0
00CF76  1  A9 00        		lda #0
00CF78  1  BE AE 04     		ldx $4AE,y
00CF7B  1  10 03        		bpl loc_AFBD
00CF7D  1  99 AE 04     		sta $4AE,y
00CF80  1               loc_AFBD:
00CF80  1               
00CF80  1  99 AC 04     		sta $4AC,y
00CF83  1               loc_AFC0:
00CF83  1               
00CF83  1  A6 08        		ldx ObjectOffset
00CF85  1  60           		rts
00CF86  1               sub_AFC3:
00CF86  1               
00CF86  1  A2 00        		ldx #0
00CF88  1               sub_AFC5:
00CF88  1               
00CF88  1  84 06        		sty byte_6
00CF8A  1  A9 01        		lda #1
00CF8C  1  85 07        		sta unk_7
00CF8E  1               loc_AFCB:
00CF8E  1               
00CF8E  1  B9 AC 04     		lda $4AC,y
00CF91  1  DD AC 04     		cmp $4AC,x
00CF94  1  B0 2A        		bcs loc_AFFD
00CF96  1  DD AE 04     		cmp $4AE,x
00CF99  1  90 12        		bcc loc_AFEA
00CF9B  1  F0 42        		beq loc_B01C
00CF9D  1  B9 AE 04     		lda $4AE,y
00CFA0  1  D9 AC 04     		cmp $4AC,y
00CFA3  1  90 3A        		bcc loc_B01C
00CFA5  1  DD AC 04     		cmp $4AC,x
00CFA8  1  B0 35        		bcs loc_B01C
00CFAA  1  A4 06        		ldy byte_6
00CFAC  1  60           		rts
00CFAD  1               loc_AFEA:
00CFAD  1               
00CFAD  1  BD AE 04     		lda $4AE,x
00CFB0  1  DD AC 04     		cmp $4AC,x
00CFB3  1  90 2A        		bcc loc_B01C
00CFB5  1  B9 AE 04     		lda $4AE,y
00CFB8  1  DD AC 04     		cmp $4AC,x
00CFBB  1  B0 22        		bcs loc_B01C
00CFBD  1  A4 06        		ldy byte_6
00CFBF  1  60           		rts
00CFC0  1               loc_AFFD:
00CFC0  1               
00CFC0  1  DD AC 04     		cmp $4AC,x
00CFC3  1  F0 1A        		beq loc_B01C
00CFC5  1  DD AE 04     		cmp $4AE,x
00CFC8  1  90 15        		bcc loc_B01C
00CFCA  1  F0 13        		beq loc_B01C
00CFCC  1  D9 AE 04     		cmp $4AE,y
00CFCF  1  90 0A        		bcc loc_B018
00CFD1  1  F0 08        		beq loc_B018
00CFD3  1  B9 AE 04     		lda $4AE,y
00CFD6  1  DD AC 04     		cmp $4AC,x
00CFD9  1  B0 04        		bcs loc_B01C
00CFDB  1               loc_B018:
00CFDB  1               
00CFDB  1  18           		clc
00CFDC  1  A4 06        		ldy byte_6
00CFDE  1  60           		rts
00CFDF  1               loc_B01C:
00CFDF  1               
00CFDF  1  E8           		inx
00CFE0  1  C8           		iny
00CFE1  1  C6 07        		dec unk_7
00CFE3  1  10 A9        		bpl loc_AFCB
00CFE5  1  38           		sec
00CFE6  1  A4 06        		ldy byte_6
00CFE8  1  60           		rts
00CFE9  1               sub_B026:
00CFE9  1               
00CFE9  1  48           		pha
00CFEA  1  8A           		txa
00CFEB  1  18           		clc
00CFEC  1  69 01        		adc #1
00CFEE  1  AA           		tax
00CFEF  1  68           		pla
00CFF0  1  4C 06 D0     		jmp loc_B043
00CFF3  1  8A           		txa
00CFF4  1  18           		clc
00CFF5  1  69 0D        		adc #$D
00CFF7  1  AA           		tax
00CFF8  1  A0 1B        		ldy #$1B
00CFFA  1  4C 04 D0     		jmp loc_B041
00CFFD  1               sub_B03A:
00CFFD  1               
00CFFD  1  A0 1A        		ldy #$1A
00CFFF  1  8A           		txa
00D000  1  18           		clc
00D001  1  69 07        		adc #7
00D003  1  AA           		tax
00D004  1               loc_B041:
00D004  1               
00D004  1  A9 00        		lda #0
00D006  1               loc_B043:
00D006  1               
00D006  1  20 51 D0     		jsr BlockBufferCollision
00D009  1  A6 08        		ldx ObjectOffset
00D00B  1  C9 00        		cmp #0
00D00D  1  60           		rts
00D00E  1               BlockBufferAdderData:
00D00E  1  00           		.byte 0
00D00F  1  07           		.byte 7
00D010  1  0E           		.byte $E
00D011  1               BlockBuffer_X_Adder:
00D011  1  08           		.byte 8
00D012  1  03           		.byte 3
00D013  1  0C           		.byte $C
00D014  1  02           		.byte 2
00D015  1  02           		.byte 2
00D016  1  0D           		.byte $D
00D017  1  0D           		.byte $D
00D018  1  08           		.byte 8
00D019  1  03           		.byte 3
00D01A  1  0C           		.byte $C
00D01B  1  02           		.byte 2
00D01C  1  02           		.byte 2
00D01D  1  0D           		.byte $D
00D01E  1  0D           		.byte $D
00D01F  1  08           		.byte 8
00D020  1  03           		.byte 3
00D021  1  0C           		.byte $C
00D022  1  02           		.byte 2
00D023  1  02           		.byte 2
00D024  1  0D           		.byte $D
00D025  1  0D           		.byte $D
00D026  1  08           		.byte 8
00D027  1  00           		.byte 0
00D028  1  10           		.byte $10
00D029  1  04           		.byte 4
00D02A  1  14           		.byte $14
00D02B  1  04           		.byte 4
00D02C  1  04           		.byte 4
00D02D  1               BlockBuffer_Y_Adder:
00D02D  1  04           		.byte 4
00D02E  1  20           		.byte $20
00D02F  1  20           		.byte $20
00D030  1  08           		.byte 8
00D031  1  18           		.byte $18
00D032  1  08           		.byte 8
00D033  1  18           		.byte $18
00D034  1  02           		.byte 2
00D035  1  20           		.byte $20
00D036  1  20           		.byte $20
00D037  1  08           		.byte 8
00D038  1  18           		.byte $18
00D039  1  08           		.byte 8
00D03A  1  18           		.byte $18
00D03B  1  12           		.byte $12
00D03C  1  20           		.byte $20
00D03D  1  20           		.byte $20
00D03E  1  18           		.byte $18
00D03F  1  18           		.byte $18
00D040  1  18           		.byte $18
00D041  1  18           		.byte $18
00D042  1  18           		.byte $18
00D043  1  14           		.byte $14
00D044  1  14           		.byte $14
00D045  1  06           		.byte 6
00D046  1  06           		.byte 6
00D047  1  08           		.byte 8
00D048  1  10           		.byte $10
00D049  1               BlockBufferColli_Feet:
00D049  1               
00D049  1  C8           		iny
00D04A  1               BlockBufferColli_Head:
00D04A  1               
00D04A  1  A9 00        		lda #0
00D04C  1               BlockBufferColli_Side:
00D04C  1               
00D04C  1  2C A9 01     		bit byte_1A9
00D04F  1  A2 00        		ldx #0
00D051  1               BlockBufferCollision:
00D051  1               
00D051  1  48           		pha
00D052  1  84 04        		sty byte_4
00D054  1  B9 11 D0     		lda BlockBuffer_X_Adder,y
00D057  1  18           		clc
00D058  1  75 86        		adc $86,x
00D05A  1  85 05        		sta byte_5
00D05C  1  B5 6D        		lda $6D,x
00D05E  1  69 00        		adc #0
00D060  1  29 01        		and #1
00D062  1  4A           		lsr
00D063  1  05 05        		ora byte_5
00D065  1  6A           		ror
00D066  1  4A           		lsr
00D067  1  4A           		lsr
00D068  1  4A           		lsr
00D069  1  20 1C 9A     		jsr GetBlockBufferAddr
00D06C  1  A4 04        		ldy byte_4
00D06E  1  B5 CE        		lda $CE,x
00D070  1  18           		clc
00D071  1  79 2D D0     		adc BlockBuffer_Y_Adder,y
00D074  1  29 F0        		and #$F0
00D076  1  38           		sec
00D077  1  E9 20        		sbc #$20
00D079  1  85 02        		sta byte_2
00D07B  1  A8           		tay
00D07C  1  B1 06        		lda (6),y
00D07E  1  85 03        		sta byte_3
00D080  1  A4 04        		ldy byte_4
00D082  1  68           		pla
00D083  1  D0 05        		bne loc_B0C7
00D085  1  B5 CE        		lda $CE,x
00D087  1  4C 8C D0     		jmp loc_B0C9
00D08A  1               loc_B0C7:
00D08A  1               
00D08A  1  B5 86        		lda $86,x
00D08C  1               loc_B0C9:
00D08C  1               
00D08C  1  29 0F        		and #$F
00D08E  1  85 04        		sta byte_4
00D090  1  A5 03        		lda byte_3
00D092  1  60           		rts
00D093  1  FF           		.byte $FF
00D094  1  FF           		.byte $FF
00D095  1  FF           		.byte $FF
00D096  1  FF           		.byte $FF
00D097  1  FF           		.byte $FF
00D098  1  FF           		.byte $FF
00D099  1  FF           		.byte $FF
00D09A  1               VineYPosAdder:
00D09A  1  00           		.byte 0
00D09B  1  30           		.byte $30
00D09C  1               DrawVine:
00D09C  1               
00D09C  1  84 00        		sty TMP_0
00D09E  1  AD B9 03     		lda Enemy_Rel_YPos
00D0A1  1  18           		clc
00D0A2  1  79 9A D0     		adc VineYPosAdder,y
00D0A5  1  BE 9A 03     		ldx VineObjOffset,y
00D0A8  1  BC E5 06     		ldy Enemy_SprDataOffset,x
00D0AB  1  84 02        		sty byte_2
00D0AD  1  20 15 D1     		jsr sub_B152
00D0B0  1  AD AE 03     		lda Enemy_Rel_XPos
00D0B3  1  99 03 02     		sta $203,y
00D0B6  1  99 0B 02     		sta $20B,y
00D0B9  1  99 13 02     		sta $213,y
00D0BC  1  18           		clc
00D0BD  1  69 06        		adc #6
00D0BF  1  99 07 02     		sta $207,y
00D0C2  1  99 0F 02     		sta $20F,y
00D0C5  1  99 17 02     		sta $217,y
00D0C8  1  A9 21        		lda #$21
00D0CA  1  99 02 02     		sta $202,y
00D0CD  1  99 0A 02     		sta $20A,y
00D0D0  1  99 12 02     		sta $212,y
00D0D3  1  09 40        		ora #$40
00D0D5  1  99 06 02     		sta $206,y
00D0D8  1  99 0E 02     		sta $20E,y
00D0DB  1  99 16 02     		sta $216,y
00D0DE  1  A2 05        		ldx #5
00D0E0  1               loc_B11D:
00D0E0  1               
00D0E0  1  A9 E1        		lda #$E1
00D0E2  1  99 01 02     		sta $201,y
00D0E5  1  C8           		iny
00D0E6  1  C8           		iny
00D0E7  1  C8           		iny
00D0E8  1  C8           		iny
00D0E9  1  CA           		dex
00D0EA  1  10 F4        		bpl loc_B11D
00D0EC  1  A4 02        		ldy byte_2
00D0EE  1  A5 00        		lda TMP_0
00D0F0  1  D0 05        		bne loc_B134
00D0F2  1  A9 E0        		lda #$E0
00D0F4  1  99 01 02     		sta $201,y
00D0F7  1               loc_B134:
00D0F7  1               
00D0F7  1  A2 00        		ldx #0
00D0F9  1               loc_B136:
00D0F9  1               
00D0F9  1  AD 9D 03     		lda VineStart_Y_Position
00D0FC  1  38           		sec
00D0FD  1  F9 00 02     		sbc $200,y
00D100  1  C9 64        		cmp #$64
00D102  1  90 05        		bcc loc_B146
00D104  1  A9 F8        		lda #$F8
00D106  1  99 00 02     		sta $200,y
00D109  1               loc_B146:
00D109  1               
00D109  1  C8           		iny
00D10A  1  C8           		iny
00D10B  1  C8           		iny
00D10C  1  C8           		iny
00D10D  1  E8           		inx
00D10E  1  E0 06        		cpx #6
00D110  1  D0 E7        		bne loc_B136
00D112  1  A4 00        		ldy TMP_0
00D114  1  60           		rts
00D115  1               sub_B152:
00D115  1               
00D115  1  A2 06        		ldx #6
00D117  1               loc_B154:
00D117  1               
00D117  1  99 00 02     		sta $200,y
00D11A  1  18           		clc
00D11B  1  69 08        		adc #8
00D11D  1  C8           		iny
00D11E  1  C8           		iny
00D11F  1  C8           		iny
00D120  1  C8           		iny
00D121  1  CA           		dex
00D122  1  D0 F3        		bne loc_B154
00D124  1  A4 02        		ldy byte_2
00D126  1  60           		rts
00D127  1               FirstSprXPos:
00D127  1  04           		.byte 4
00D128  1  00           		.byte 0
00D129  1  04           		.byte 4
00D12A  1  00           		.byte 0
00D12B  1               FirstSprYPos:
00D12B  1  00           		.byte 0
00D12C  1  04           		.byte 4
00D12D  1  00           		.byte 0
00D12E  1  04           		.byte 4
00D12F  1               SecondSprXPos:
00D12F  1  00           		.byte 0
00D130  1  08           		.byte 8
00D131  1  00           		.byte 0
00D132  1  08           		.byte 8
00D133  1               SecondSprYPos:
00D133  1  08           		.byte 8
00D134  1  00           		.byte 0
00D135  1  08           		.byte 8
00D136  1  00           		.byte 0
00D137  1               FirstSprTilenum:
00D137  1  80           		.byte $80
00D138  1  82           		.byte $82
00D139  1  81           		.byte $81
00D13A  1  83           		.byte $83
00D13B  1               SecondSprTilenum:
00D13B  1  81           		.byte $81
00D13C  1  83           		.byte $83
00D13D  1  80           		.byte $80
00D13E  1  82           		.byte $82
00D13F  1               HammerSprAttrib:
00D13F  1  03           		.byte 3
00D140  1  03           		.byte 3
00D141  1  C3           		.byte $C3
00D142  1  C3           		.byte $C3
00D143  1               DrawHammer:
00D143  1               
00D143  1  BC F3 06     		ldy $6F3,x
00D146  1  AD 47 07     		lda TimerControl
00D149  1  D0 08        		bne loc_B190
00D14B  1  B5 2A        		lda $2A,x
00D14D  1  29 7F        		and #$7F
00D14F  1  C9 01        		cmp #1
00D151  1  F0 04        		beq loc_B194
00D153  1               loc_B190:
00D153  1               
00D153  1  A2 00        		ldx #0
00D155  1  F0 07        		beq loc_B19B
00D157  1               loc_B194:
00D157  1               
00D157  1  A5 09        		lda FrameCounter
00D159  1  4A           		lsr
00D15A  1  4A           		lsr
00D15B  1  29 03        		and #3
00D15D  1  AA           		tax
00D15E  1               loc_B19B:
00D15E  1               
00D15E  1  AD BE 03     		lda Misc_Rel_YPos
00D161  1  18           		clc
00D162  1  7D 2B D1     		adc FirstSprYPos,x
00D165  1  99 00 02     		sta Sprite_Y_Position,y
00D168  1  18           		clc
00D169  1  7D 33 D1     		adc SecondSprYPos,x
00D16C  1  99 04 02     		sta $204,y
00D16F  1  AD B3 03     		lda Misc_Rel_XPos
00D172  1  18           		clc
00D173  1  7D 27 D1     		adc FirstSprXPos,x
00D176  1  99 03 02     		sta Sprite_X_Position,y
00D179  1  18           		clc
00D17A  1  7D 2F D1     		adc SecondSprXPos,x
00D17D  1  99 07 02     		sta byte_207,y
00D180  1  BD 37 D1     		lda FirstSprTilenum,x
00D183  1  99 01 02     		sta $201,y
00D186  1  BD 3B D1     		lda SecondSprTilenum,x
00D189  1  99 05 02     		sta $205,y
00D18C  1  BD 3F D1     		lda HammerSprAttrib,x
00D18F  1  99 02 02     		sta $202,y
00D192  1  99 06 02     		sta $206,y
00D195  1  A6 08        		ldx ObjectOffset
00D197  1  AD D6 03     		lda Misc_OffscreenBits
00D19A  1  29 FC        		and #$FC
00D19C  1  F0 09        		beq locret_B1E4
00D19E  1  A9 00        		lda #0
00D1A0  1  95 2A        		sta $2A,x
00D1A2  1  A9 F8        		lda #$F8
00D1A4  1  20 2A D2     		jsr DumpTwoSpr
00D1A7  1               locret_B1E4:
00D1A7  1               
00D1A7  1  60           		rts
00D1A8  1               FlagpoleScoreNumTiles:
00D1A8  1  F9           		.byte $F9
00D1A9  1  50           		.byte $50
00D1AA  1  F7           		.byte $F7
00D1AB  1  50           		.byte $50
00D1AC  1  FA           		.byte $FA
00D1AD  1  FB           		.byte $FB
00D1AE  1  F8           		.byte $F8
00D1AF  1  FB           		.byte $FB
00D1B0  1  F6           		.byte $F6
00D1B1  1  FB           		.byte $FB
00D1B2  1  FD           		.byte $FD
00D1B3  1  FE           		.byte $FE
00D1B4  1               FlagpoleGfxHandler:
00D1B4  1               
00D1B4  1  BC E5 06     		ldy $6E5,x
00D1B7  1  AD AE 03     		lda Enemy_Rel_XPos
00D1BA  1  99 03 02     		sta $203,y
00D1BD  1  18           		clc
00D1BE  1  69 08        		adc #8
00D1C0  1  99 07 02     		sta $207,y
00D1C3  1  99 0B 02     		sta $20B,y
00D1C6  1  18           		clc
00D1C7  1  69 0C        		adc #$C
00D1C9  1  85 05        		sta byte_5
00D1CB  1  B5 CF        		lda $CF,x
00D1CD  1  20 2A D2     		jsr DumpTwoSpr
00D1D0  1  69 08        		adc #8
00D1D2  1  99 08 02     		sta $208,y
00D1D5  1  AD 0D 01     		lda FlagpoleFNum_Y_Pos
00D1D8  1  85 02        		sta byte_2
00D1DA  1  A9 01        		lda #1
00D1DC  1  85 03        		sta byte_3
00D1DE  1  85 04        		sta byte_4
00D1E0  1  99 02 02     		sta $202,y
00D1E3  1  99 06 02     		sta $206,y
00D1E6  1  99 0A 02     		sta $20A,y
00D1E9  1  A9 7E        		lda #$7E
00D1EB  1  99 01 02     		sta $201,y
00D1EE  1  99 09 02     		sta $209,y
00D1F1  1  A9 7F        		lda #$7F
00D1F3  1  99 05 02     		sta $205,y
00D1F6  1  AD 0F 07     		lda FlagpoleCollisionYPos
00D1F9  1  F0 15        		beq loc_B24D
00D1FB  1  98           		tya
00D1FC  1  18           		clc
00D1FD  1  69 0C        		adc #$C
00D1FF  1  A8           		tay
00D200  1  AD 0F 01     		lda FlagpoleScore
00D203  1  0A           		asl
00D204  1  AA           		tax
00D205  1  BD A8 D1     		lda FlagpoleScoreNumTiles,x
00D208  1  85 00        		sta TMP_0
00D20A  1  BD A9 D1     		lda FlagpoleScoreNumTiles+1,x
00D20D  1  20 35 D8     		jsr DrawOneSpriteRow
00D210  1               loc_B24D:
00D210  1               
00D210  1  A6 08        		ldx ObjectOffset
00D212  1  BC E5 06     		ldy $6E5,x
00D215  1  AD D1 03     		lda Enemy_OffscreenBits
00D218  1  29 0E        		and #$E
00D21A  1  F0 14        		beq locret_B26D
00D21C  1               loc_B259:
00D21C  1               
00D21C  1  A9 F8        		lda #$F8
00D21E  1               sub_B25B:
00D21E  1               
00D21E  1  99 14 02     		sta $214,y
00D221  1  99 10 02     		sta $210,y
00D224  1               loc_B261:
00D224  1               
00D224  1  99 0C 02     		sta $20C,y
00D227  1               loc_B264:
00D227  1               
00D227  1  99 08 02     		sta $208,y
00D22A  1               DumpTwoSpr:
00D22A  1               
00D22A  1  99 04 02     		sta $204,y
00D22D  1  99 00 02     		sta $200,y
00D230  1               locret_B26D:
00D230  1               
00D230  1  60           		rts
00D231  1               DrawLargePlatform:
00D231  1               
00D231  1  BC E5 06     		ldy $6E5,x
00D234  1  84 02        		sty byte_2
00D236  1  C8           		iny
00D237  1  C8           		iny
00D238  1  C8           		iny
00D239  1  AD AE 03     		lda Enemy_Rel_XPos
00D23C  1  20 15 D1     		jsr sub_B152
00D23F  1  A6 08        		ldx ObjectOffset
00D241  1  B5 CF        		lda $CF,x
00D243  1  20 24 D2     		jsr loc_B261
00D246  1  AC 4E 07     		ldy AreaType
00D249  1  C0 03        		cpy #3
00D24B  1  F0 05        		beq loc_B28F
00D24D  1  AC CC 06     		ldy SecondaryHardMode
00D250  1  F0 02        		beq loc_B291
00D252  1               loc_B28F:
00D252  1               
00D252  1  A9 F8        		lda #$F8
00D254  1               loc_B291:
00D254  1               
00D254  1  BC E5 06     		ldy $6E5,x
00D257  1  99 10 02     		sta $210,y
00D25A  1  99 14 02     		sta $214,y
00D25D  1  A9 5B        		lda #$5B
00D25F  1  AE 43 07     		ldx CloudTypeOverride
00D262  1  F0 02        		beq loc_B2A3
00D264  1  A9 75        		lda #$75
00D266  1               loc_B2A3:
00D266  1               
00D266  1  A6 08        		ldx ObjectOffset
00D268  1  C8           		iny
00D269  1  20 1E D2     		jsr sub_B25B
00D26C  1  A9 02        		lda #2
00D26E  1  C8           		iny
00D26F  1  20 1E D2     		jsr sub_B25B
00D272  1  E8           		inx
00D273  1  20 83 DE     		jsr GetXOffscreenBits
00D276  1  CA           		dex
00D277  1  BC E5 06     		ldy $6E5,x
00D27A  1  0A           		asl
00D27B  1  48           		pha
00D27C  1  90 05        		bcc loc_B2C0
00D27E  1  A9 F8        		lda #$F8
00D280  1  99 00 02     		sta $200,y
00D283  1               loc_B2C0:
00D283  1               
00D283  1  68           		pla
00D284  1  0A           		asl
00D285  1  48           		pha
00D286  1  90 05        		bcc loc_B2CA
00D288  1  A9 F8        		lda #$F8
00D28A  1  99 04 02     		sta $204,y
00D28D  1               loc_B2CA:
00D28D  1               
00D28D  1  68           		pla
00D28E  1  0A           		asl
00D28F  1  48           		pha
00D290  1  90 05        		bcc loc_B2D4
00D292  1  A9 F8        		lda #$F8
00D294  1  99 08 02     		sta $208,y
00D297  1               loc_B2D4:
00D297  1               
00D297  1  68           		pla
00D298  1  0A           		asl
00D299  1  48           		pha
00D29A  1  90 05        		bcc loc_B2DE
00D29C  1  A9 F8        		lda #$F8
00D29E  1  99 0C 02     		sta $20C,y
00D2A1  1               loc_B2DE:
00D2A1  1               
00D2A1  1  68           		pla
00D2A2  1  0A           		asl
00D2A3  1  48           		pha
00D2A4  1  90 05        		bcc loc_B2E8
00D2A6  1  A9 F8        		lda #$F8
00D2A8  1  99 10 02     		sta $210,y
00D2AB  1               loc_B2E8:
00D2AB  1               
00D2AB  1  68           		pla
00D2AC  1  0A           		asl
00D2AD  1  90 05        		bcc loc_B2F1
00D2AF  1  A9 F8        		lda #$F8
00D2B1  1  99 14 02     		sta $214,y
00D2B4  1               loc_B2F1:
00D2B4  1               
00D2B4  1  AD D1 03     		lda Enemy_OffscreenBits
00D2B7  1  0A           		asl
00D2B8  1  90 03        		bcc locret_B2FA
00D2BA  1  20 1C D2     		jsr loc_B259
00D2BD  1               locret_B2FA:
00D2BD  1               
00D2BD  1  60           		rts
00D2BE  1               loc_B2FB:
00D2BE  1               
00D2BE  1  A5 09        		lda FrameCounter
00D2C0  1  4A           		lsr
00D2C1  1  B0 02        		bcs loc_B302
00D2C3  1  D6 DB        		dec $DB,x
00D2C5  1               loc_B302:
00D2C5  1               
00D2C5  1  B5 DB        		lda $DB,x
00D2C7  1  20 2A D2     		jsr DumpTwoSpr
00D2CA  1  AD B3 03     		lda Misc_Rel_XPos
00D2CD  1  99 03 02     		sta $203,y
00D2D0  1  18           		clc
00D2D1  1  69 08        		adc #8
00D2D3  1  99 07 02     		sta $207,y
00D2D6  1  A9 02        		lda #2
00D2D8  1  99 02 02     		sta $202,y
00D2DB  1  99 06 02     		sta $206,y
00D2DE  1  A9 F7        		lda #$F7
00D2E0  1  99 01 02     		sta $201,y
00D2E3  1  A9 FB        		lda #$FB
00D2E5  1  99 05 02     		sta $205,y
00D2E8  1  4C 26 D3     		jmp locret_B363
00D2EB  1               JumpingCoinTiles:
00D2EB  1  60           		.byte $60
00D2EC  1  61           		.byte $61
00D2ED  1  62           		.byte $62
00D2EE  1  63           		.byte $63
00D2EF  1               JCoinGfxHandler:
00D2EF  1               
00D2EF  1  BC F3 06     		ldy Misc_SprDataOffset,x
00D2F2  1  B5 2A        		lda Misc_State,x
00D2F4  1  C9 02        		cmp #2
00D2F6  1  B0 C6        		bcs loc_B2FB
00D2F8  1  B5 DB        		lda Misc_Y_Position,x
00D2FA  1  99 00 02     		sta $200,y
00D2FD  1  18           		clc
00D2FE  1  69 08        		adc #8
00D300  1  99 04 02     		sta $204,y
00D303  1  AD B3 03     		lda Misc_Rel_XPos
00D306  1  99 03 02     		sta $203,y
00D309  1  99 07 02     		sta $207,y
00D30C  1  A5 09        		lda FrameCounter
00D30E  1  4A           		lsr
00D30F  1  29 03        		and #3
00D311  1  AA           		tax
00D312  1  BD EB D2     		lda JumpingCoinTiles,x
00D315  1  C8           		iny
00D316  1  20 2A D2     		jsr DumpTwoSpr
00D319  1  88           		dey
00D31A  1  A9 02        		lda #2
00D31C  1  99 02 02     		sta $202,y
00D31F  1  A9 82        		lda #$82
00D321  1  99 06 02     		sta $206,y
00D324  1  A6 08        		ldx ObjectOffset
00D326  1               locret_B363:
00D326  1               
00D326  1  60           		rts
00D327  1               PowerUpGfxTable:
00D327  1  D8           		.byte $D8
00D328  1  DA           		.byte $DA
00D329  1  DB           		.byte $DB
00D32A  1  FF           		.byte $FF
00D32B  1  D6           		.byte $D6
00D32C  1  D6           		.byte $D6
00D32D  1  D9           		.byte $D9
00D32E  1  D9           		.byte $D9
00D32F  1  8D           		.byte $8D
00D330  1  8D           		.byte $8D
00D331  1  E4           		.byte $E4
00D332  1  E4           		.byte $E4
00D333  1  D8           		.byte $D8
00D334  1  DA           		.byte $DA
00D335  1  DB           		.byte $DB
00D336  1  FF           		.byte $FF
00D337  1  D8           		.byte $D8
00D338  1  DA           		.byte $DA
00D339  1  DB           		.byte $DB
00D33A  1  FF           		.byte $FF
00D33B  1               PowerUpAttributes:
00D33B  1  02           		.byte 2
00D33C  1  01           		.byte 1
00D33D  1  02           		.byte 2
00D33E  1  01           		.byte 1
00D33F  1  03           		.byte 3
00D340  1               sub_B37D:
00D340  1               
00D340  1  AC EA 06     		ldy byte_6EA
00D343  1  AD B9 03     		lda Enemy_Rel_YPos
00D346  1  18           		clc
00D347  1  69 08        		adc #8
00D349  1  85 02        		sta byte_2
00D34B  1  AD AE 03     		lda Enemy_Rel_XPos
00D34E  1  85 05        		sta byte_5
00D350  1  A6 39        		ldx PowerUpType
00D352  1  BD 3B D3     		lda PowerUpAttributes,x
00D355  1  0D CA 03     		ora byte_3CA
00D358  1  85 04        		sta byte_4
00D35A  1  8A           		txa
00D35B  1  48           		pha
00D35C  1  0A           		asl
00D35D  1  0A           		asl
00D35E  1  AA           		tax
00D35F  1  A9 01        		lda #1
00D361  1  85 07        		sta unk_7
00D363  1  85 03        		sta byte_3
00D365  1               loc_B3A2:
00D365  1               
00D365  1  BD 27 D3     		lda PowerUpGfxTable,x
00D368  1  85 00        		sta TMP_0
00D36A  1  BD 28 D3     		lda PowerUpGfxTable+1,x
00D36D  1  20 35 D8     		jsr DrawOneSpriteRow
00D370  1  C6 07        		dec unk_7
00D372  1  10 F1        		bpl loc_B3A2
00D374  1  AC EA 06     		ldy byte_6EA
00D377  1  68           		pla
00D378  1  F0 33        		beq loc_B3EA
00D37A  1  C9 03        		cmp #3
00D37C  1  F0 2F        		beq loc_B3EA
00D37E  1  C9 04        		cmp #4
00D380  1  F0 2B        		beq loc_B3EA
00D382  1  85 00        		sta TMP_0
00D384  1  A5 09        		lda FrameCounter
00D386  1  4A           		lsr
00D387  1  29 03        		and #3
00D389  1  0D CA 03     		ora byte_3CA
00D38C  1  99 02 02     		sta $202,y
00D38F  1  99 06 02     		sta $206,y
00D392  1  A6 00        		ldx TMP_0
00D394  1  CA           		dex
00D395  1  F0 06        		beq loc_B3DA
00D397  1  99 0A 02     		sta $20A,y
00D39A  1  99 0E 02     		sta $20E,y
00D39D  1               loc_B3DA:
00D39D  1               
00D39D  1  B9 06 02     		lda $206,y
00D3A0  1  09 40        		ora #$40
00D3A2  1  99 06 02     		sta $206,y
00D3A5  1  B9 0E 02     		lda $20E,y
00D3A8  1  09 40        		ora #$40
00D3AA  1  99 0E 02     		sta $20E,y
00D3AD  1               loc_B3EA:
00D3AD  1               
00D3AD  1  4C E7 D7     		jmp loc_B83F
00D3B0  1               EnemyGraphicsTable:
00D3B0  1  FC           		.byte $FC
00D3B1  1  FC           		.byte $FC
00D3B2  1  AA           		.byte $AA
00D3B3  1               byte_B3F0:
00D3B3  1  AB           		.byte $AB
00D3B4  1  AC           		.byte $AC
00D3B5  1  AD           		.byte $AD
00D3B6  1  FC           		.byte $FC
00D3B7  1  FC           		.byte $FC
00D3B8  1  AE           		.byte $AE
00D3B9  1  AF           		.byte $AF
00D3BA  1  B0           		.byte $B0
00D3BB  1  B1           		.byte $B1
00D3BC  1  FC           		.byte $FC
00D3BD  1  A5           		.byte $A5
00D3BE  1  A6           		.byte $A6
00D3BF  1  A7           		.byte $A7
00D3C0  1  A8           		.byte $A8
00D3C1  1  A9           		.byte $A9
00D3C2  1  FC           		.byte $FC
00D3C3  1  A0           		.byte $A0
00D3C4  1  A1           		.byte $A1
00D3C5  1  A2           		.byte $A2
00D3C6  1  A3           		.byte $A3
00D3C7  1  A4           		.byte $A4
00D3C8  1  69           		.byte $69
00D3C9  1  A5           		.byte $A5
00D3CA  1  6A           		.byte $6A
00D3CB  1  A7           		.byte $A7
00D3CC  1  A8           		.byte $A8
00D3CD  1  A9           		.byte $A9
00D3CE  1  6B           		.byte $6B
00D3CF  1  A0           		.byte $A0
00D3D0  1  6C           		.byte $6C
00D3D1  1  A2           		.byte $A2
00D3D2  1  A3           		.byte $A3
00D3D3  1  A4           		.byte $A4
00D3D4  1  FC           		.byte $FC
00D3D5  1  FC           		.byte $FC
00D3D6  1  96           		.byte $96
00D3D7  1  97           		.byte $97
00D3D8  1  98           		.byte $98
00D3D9  1  99           		.byte $99
00D3DA  1  FC           		.byte $FC
00D3DB  1  FC           		.byte $FC
00D3DC  1  9A           		.byte $9A
00D3DD  1  9B           		.byte $9B
00D3DE  1  9C           		.byte $9C
00D3DF  1  9D           		.byte $9D
00D3E0  1  FC           		.byte $FC
00D3E1  1  FC           		.byte $FC
00D3E2  1  8F           		.byte $8F
00D3E3  1  8E           		.byte $8E
00D3E4  1  8E           		.byte $8E
00D3E5  1  8F           		.byte $8F
00D3E6  1  FC           		.byte $FC
00D3E7  1  FC           		.byte $FC
00D3E8  1  95           		.byte $95
00D3E9  1  94           		.byte $94
00D3EA  1  94           		.byte $94
00D3EB  1  95           		.byte $95
00D3EC  1  FC           		.byte $FC
00D3ED  1  FC           		.byte $FC
00D3EE  1  DC           		.byte $DC
00D3EF  1  DC           		.byte $DC
00D3F0  1  DF           		.byte $DF
00D3F1  1  DF           		.byte $DF
00D3F2  1  DC           		.byte $DC
00D3F3  1  DC           		.byte $DC
00D3F4  1  DD           		.byte $DD
00D3F5  1  DD           		.byte $DD
00D3F6  1  DE           		.byte $DE
00D3F7  1  DE           		.byte $DE
00D3F8  1  FC           		.byte $FC
00D3F9  1  FC           		.byte $FC
00D3FA  1  B2           		.byte $B2
00D3FB  1  B3           		.byte $B3
00D3FC  1  B4           		.byte $B4
00D3FD  1  B5           		.byte $B5
00D3FE  1  FC           		.byte $FC
00D3FF  1  FC           		.byte $FC
00D400  1  B6           		.byte $B6
00D401  1  B3           		.byte $B3
00D402  1  B7           		.byte $B7
00D403  1  B5           		.byte $B5
00D404  1  FC           		.byte $FC
00D405  1  FC           		.byte $FC
00D406  1  70           		.byte $70
00D407  1  71           		.byte $71
00D408  1  72           		.byte $72
00D409  1  73           		.byte $73
00D40A  1  FC           		.byte $FC
00D40B  1  FC           		.byte $FC
00D40C  1  6E           		.byte $6E
00D40D  1  6E           		.byte $6E
00D40E  1  6F           		.byte $6F
00D40F  1  6F           		.byte $6F
00D410  1  FC           		.byte $FC
00D411  1  FC           		.byte $FC
00D412  1  6D           		.byte $6D
00D413  1  6D           		.byte $6D
00D414  1  6F           		.byte $6F
00D415  1  6F           		.byte $6F
00D416  1  FC           		.byte $FC
00D417  1  FC           		.byte $FC
00D418  1  6F           		.byte $6F
00D419  1  6F           		.byte $6F
00D41A  1  6E           		.byte $6E
00D41B  1  6E           		.byte $6E
00D41C  1  FC           		.byte $FC
00D41D  1  FC           		.byte $FC
00D41E  1  6F           		.byte $6F
00D41F  1  6F           		.byte $6F
00D420  1  6D           		.byte $6D
00D421  1  6D           		.byte $6D
00D422  1  FC           		.byte $FC
00D423  1  FC           		.byte $FC
00D424  1  F4           		.byte $F4
00D425  1  F4           		.byte $F4
00D426  1  F5           		.byte $F5
00D427  1  F5           		.byte $F5
00D428  1  FC           		.byte $FC
00D429  1  FC           		.byte $FC
00D42A  1  F4           		.byte $F4
00D42B  1  F4           		.byte $F4
00D42C  1  F5           		.byte $F5
00D42D  1  F5           		.byte $F5
00D42E  1  FC           		.byte $FC
00D42F  1  FC           		.byte $FC
00D430  1  F5           		.byte $F5
00D431  1  F5           		.byte $F5
00D432  1  F4           		.byte $F4
00D433  1  F4           		.byte $F4
00D434  1  FC           		.byte $FC
00D435  1  FC           		.byte $FC
00D436  1  F5           		.byte $F5
00D437  1  F5           		.byte $F5
00D438  1  F4           		.byte $F4
00D439  1  F4           		.byte $F4
00D43A  1  FC           		.byte $FC
00D43B  1  FC           		.byte $FC
00D43C  1  FC           		.byte $FC
00D43D  1  FC           		.byte $FC
00D43E  1  EF           		.byte $EF
00D43F  1  EF           		.byte $EF
00D440  1  B9           		.byte $B9
00D441  1  B8           		.byte $B8
00D442  1  BB           		.byte $BB
00D443  1  BA           		.byte $BA
00D444  1  BC           		.byte $BC
00D445  1  BC           		.byte $BC
00D446  1  FC           		.byte $FC
00D447  1  FC           		.byte $FC
00D448  1  BD           		.byte $BD
00D449  1  BD           		.byte $BD
00D44A  1  BC           		.byte $BC
00D44B  1  BC           		.byte $BC
00D44C  1  76           		.byte $76
00D44D  1  79           		.byte $79
00D44E  1  77           		.byte $77
00D44F  1  77           		.byte $77
00D450  1  78           		.byte $78
00D451  1  78           		.byte $78
00D452  1  CD           		.byte $CD
00D453  1  CD           		.byte $CD
00D454  1  CE           		.byte $CE
00D455  1  CE           		.byte $CE
00D456  1  CF           		.byte $CF
00D457  1  CF           		.byte $CF
00D458  1  7D           		.byte $7D
00D459  1  7C           		.byte $7C
00D45A  1  D1           		.byte $D1
00D45B  1  8C           		.byte $8C
00D45C  1  D3           		.byte $D3
00D45D  1  D2           		.byte $D2
00D45E  1  7D           		.byte $7D
00D45F  1  7C           		.byte $7C
00D460  1  89           		.byte $89
00D461  1  88           		.byte $88
00D462  1  8B           		.byte $8B
00D463  1  8A           		.byte $8A
00D464  1  D5           		.byte $D5
00D465  1  D4           		.byte $D4
00D466  1  E3           		.byte $E3
00D467  1  E2           		.byte $E2
00D468  1  D3           		.byte $D3
00D469  1  D2           		.byte $D2
00D46A  1  D5           		.byte $D5
00D46B  1  D4           		.byte $D4
00D46C  1  E3           		.byte $E3
00D46D  1  E2           		.byte $E2
00D46E  1  8B           		.byte $8B
00D46F  1  8A           		.byte $8A
00D470  1  E5           		.byte $E5
00D471  1  E5           		.byte $E5
00D472  1  E6           		.byte $E6
00D473  1  E6           		.byte $E6
00D474  1  EB           		.byte $EB
00D475  1  EB           		.byte $EB
00D476  1  EC           		.byte $EC
00D477  1  EC           		.byte $EC
00D478  1  ED           		.byte $ED
00D479  1  ED           		.byte $ED
00D47A  1  EB           		.byte $EB
00D47B  1  EB           		.byte $EB
00D47C  1  FC           		.byte $FC
00D47D  1  FC           		.byte $FC
00D47E  1  D0           		.byte $D0
00D47F  1  D0           		.byte $D0
00D480  1  D7           		.byte $D7
00D481  1  D7           		.byte $D7
00D482  1  BF           		.byte $BF
00D483  1  BE           		.byte $BE
00D484  1  C1           		.byte $C1
00D485  1  C0           		.byte $C0
00D486  1  C2           		.byte $C2
00D487  1  FC           		.byte $FC
00D488  1  C4           		.byte $C4
00D489  1  C3           		.byte $C3
00D48A  1  C6           		.byte $C6
00D48B  1  C5           		.byte $C5
00D48C  1  C8           		.byte $C8
00D48D  1  C7           		.byte $C7
00D48E  1  BF           		.byte $BF
00D48F  1  BE           		.byte $BE
00D490  1  CA           		.byte $CA
00D491  1  C9           		.byte $C9
00D492  1  C2           		.byte $C2
00D493  1  FC           		.byte $FC
00D494  1  C4           		.byte $C4
00D495  1  C3           		.byte $C3
00D496  1  C6           		.byte $C6
00D497  1  C5           		.byte $C5
00D498  1  CC           		.byte $CC
00D499  1  CB           		.byte $CB
00D49A  1  FC           		.byte $FC
00D49B  1  FC           		.byte $FC
00D49C  1  E8           		.byte $E8
00D49D  1  E7           		.byte $E7
00D49E  1  EA           		.byte $EA
00D49F  1  E9           		.byte $E9
00D4A0  1  F2           		.byte $F2
00D4A1  1  F2           		.byte $F2
00D4A2  1  F3           		.byte $F3
00D4A3  1  F3           		.byte $F3
00D4A4  1  F2           		.byte $F2
00D4A5  1  F2           		.byte $F2
00D4A6  1  F1           		.byte $F1
00D4A7  1  F1           		.byte $F1
00D4A8  1  F1           		.byte $F1
00D4A9  1  F1           		.byte $F1
00D4AA  1  FC           		.byte $FC
00D4AB  1  FC           		.byte $FC
00D4AC  1  F0           		.byte $F0
00D4AD  1  F0           		.byte $F0
00D4AE  1  FC           		.byte $FC
00D4AF  1  FC           		.byte $FC
00D4B0  1  FC           		.byte $FC
00D4B1  1  FC           		.byte $FC
00D4B2  1               EnemyGfxTableOffsets:
00D4B2  1  0C           		.byte $C
00D4B3  1  0C           		.byte $C
00D4B4  1  00           		.byte 0
00D4B5  1  0C           		.byte $C
00D4B6  1  C0           		.byte $C0
00D4B7  1  A8           		.byte $A8
00D4B8  1  54           		.byte $54
00D4B9  1  3C           		.byte $3C
00D4BA  1  EA           		.byte $EA
00D4BB  1  18           		.byte $18
00D4BC  1  48           		.byte $48
00D4BD  1  48           		.byte $48
00D4BE  1  CC           		.byte $CC
00D4BF  1  C0           		.byte $C0
00D4C0  1  18           		.byte $18
00D4C1  1  18           		.byte $18
00D4C2  1  18           		.byte $18
00D4C3  1  90           		.byte $90
00D4C4  1  24           		.byte $24
00D4C5  1  FF           		.byte $FF
00D4C6  1  48           		.byte $48
00D4C7  1  9C           		.byte $9C
00D4C8  1  D2           		.byte $D2
00D4C9  1  D8           		.byte $D8
00D4CA  1  F0           		.byte $F0
00D4CB  1  F6           		.byte $F6
00D4CC  1  FC           		.byte $FC
00D4CD  1               EnemyAnimTimingBMask:
00D4CD  1  08           		.byte 8
00D4CE  1  18           		.byte $18
00D4CF  1               JumpspringFrameOffsets:
00D4CF  1  18           		.byte $18
00D4D0  1  19           		.byte $19
00D4D1  1  1A           		.byte $1A
00D4D2  1  19           		.byte $19
00D4D3  1  18           		.byte $18
00D4D4  1               EnemyGfxHandler:
00D4D4  1               
00D4D4  1  A9 02        		lda #2
00D4D6  1  AC 5F 07     		ldy WorldNumber
00D4D9  1  C0 01        		cpy #1
00D4DB  1  F0 08        		beq loc_B53D
00D4DD  1  C0 02        		cpy #2
00D4DF  1  F0 04        		beq loc_B53D
00D4E1  1  C0 06        		cpy #6
00D4E3  1  D0 01        		bne loc_B53E
00D4E5  1               loc_B53D:
00D4E5  1  4A           		lsr
00D4E6  1               loc_B53E:
00D4E6  1  8D 48 64     		sta WRAM_UnknownAttributeData0
00D4E9  1  8D 49 64     		sta WRAM_UnknownAttributeData1
00D4EC  1  8D 4A 64     		sta WRAM_UnknownAttributeData2
00D4EF  1  B5 CF        		lda $CF,x
00D4F1  1  85 02        		sta byte_2
00D4F3  1  AD AE 03     		lda Enemy_Rel_XPos
00D4F6  1  85 05        		sta byte_5
00D4F8  1  BC E5 06     		ldy $6E5,x
00D4FB  1  84 EB        		sty byte_EB
00D4FD  1  A9 00        		lda #0
00D4FF  1  8D 09 01     		sta VerticalFlipFlag
00D502  1  B5 46        		lda $46,x
00D504  1  85 03        		sta byte_3
00D506  1  BD C5 03     		lda $3C5,x
00D509  1  85 04        		sta byte_4
00D50B  1  B5 16        		lda $16,x
00D50D  1  C9 0D        		cmp #$D
00D50F  1  D0 0A        		bne loc_B573
00D511  1  B4 58        		ldy $58,x
00D513  1  30 06        		bmi loc_B573
00D515  1  BC 8A 07     		ldy $78A,x
00D518  1  F0 01        		beq loc_B573
00D51A  1  60           		rts
00D51B  1               loc_B573:
00D51B  1               
00D51B  1  B5 1E        		lda $1E,x
00D51D  1  85 ED        		sta byte_ED
00D51F  1  29 1F        		and #$1F
00D521  1  A8           		tay
00D522  1  B5 16        		lda $16,x
00D524  1  C9 35        		cmp #$35
00D526  1  D0 08        		bne loc_B588
00D528  1  A0 00        		ldy #0
00D52A  1  A9 01        		lda #1
00D52C  1  85 03        		sta byte_3
00D52E  1  A9 15        		lda #$15
00D530  1               loc_B588:
00D530  1               
00D530  1  C9 33        		cmp #$33
00D532  1  D0 13        		bne loc_B59F
00D534  1  C6 02        		dec byte_2
00D536  1  A9 03        		lda #3
00D538  1  BC 8A 07     		ldy $78A,x
00D53B  1  F0 02        		beq loc_B597
00D53D  1  09 20        		ora #$20
00D53F  1               loc_B597:
00D53F  1               
00D53F  1  85 04        		sta byte_4
00D541  1  A0 00        		ldy #0
00D543  1  84 ED        		sty byte_ED
00D545  1  A9 08        		lda #8
00D547  1               loc_B59F:
00D547  1               
00D547  1  C9 32        		cmp #$32
00D549  1  D0 08        		bne loc_B5AB
00D54B  1  A0 03        		ldy #3
00D54D  1  AE 0E 07     		ldx JumpspringAnimCtrl
00D550  1  BD CF D4     		lda JumpspringFrameOffsets,x
00D553  1               loc_B5AB:
00D553  1               
00D553  1  85 EF        		sta byte_EF
00D555  1  84 EC        		sty byte_EC
00D557  1  A6 08        		ldx ObjectOffset
00D559  1  C9 0C        		cmp #$C
00D55B  1  D0 07        		bne loc_B5BC
00D55D  1  B5 A0        		lda $A0,x
00D55F  1  30 03        		bmi loc_B5BC
00D561  1  EE 09 01     		inc VerticalFlipFlag
00D564  1               loc_B5BC:
00D564  1               
00D564  1  AD 6A 03     		lda BowserGfxFlag
00D567  1  F0 09        		beq loc_B5CA
00D569  1  A0 16        		ldy #$16
00D56B  1  C9 01        		cmp #1
00D56D  1  F0 01        		beq loc_B5C8
00D56F  1  C8           		iny
00D570  1               loc_B5C8:
00D570  1               
00D570  1  84 EF        		sty byte_EF
00D572  1               loc_B5CA:
00D572  1               
00D572  1  A4 EF        		ldy byte_EF
00D574  1  C0 06        		cpy #6
00D576  1  D0 1D        		bne loc_B5ED
00D578  1  B5 1E        		lda $1E,x
00D57A  1  C9 02        		cmp #2
00D57C  1  90 04        		bcc loc_B5DA
00D57E  1  A2 04        		ldx #4
00D580  1  86 EC        		stx byte_EC
00D582  1               loc_B5DA:
00D582  1               
00D582  1  29 20        		and #$20
00D584  1  0D 47 07     		ora TimerControl
00D587  1  D0 0C        		bne loc_B5ED
00D589  1  A5 09        		lda FrameCounter
00D58B  1  29 08        		and #8
00D58D  1  D0 06        		bne loc_B5ED
00D58F  1  A5 03        		lda byte_3
00D591  1  49 03        		eor #3
00D593  1  85 03        		sta byte_3
00D595  1               loc_B5ED:
00D595  1               
00D595  1  B9 30 64     		lda WRAM_EnemyAttributeData,y
00D598  1  05 04        		ora byte_4
00D59A  1  85 04        		sta byte_4
00D59C  1  B9 B2 D4     		lda EnemyGfxTableOffsets,y
00D59F  1  AA           		tax
00D5A0  1  A4 EC        		ldy byte_EC
00D5A2  1  AD 6A 03     		lda BowserGfxFlag
00D5A5  1  F0 30        		beq loc_B62F
00D5A7  1  C9 01        		cmp #1
00D5A9  1  D0 13        		bne loc_B616
00D5AB  1  AD 63 03     		lda BowserBodyControls
00D5AE  1  10 02        		bpl loc_B60A
00D5B0  1  A2 DE        		ldx #$DE
00D5B2  1               loc_B60A:
00D5B2  1               
00D5B2  1  A5 ED        		lda byte_ED
00D5B4  1  29 20        		and #$20
00D5B6  1  F0 03        		beq loc_B613
00D5B8  1               loc_B610:
00D5B8  1               
00D5B8  1  8E 09 01     		stx VerticalFlipFlag
00D5BB  1               loc_B613:
00D5BB  1               
00D5BB  1  4C C3 D6     		jmp loc_B71B
00D5BE  1               loc_B616:
00D5BE  1               
00D5BE  1  AD 63 03     		lda BowserBodyControls
00D5C1  1  29 01        		and #1
00D5C3  1  F0 02        		beq loc_B61F
00D5C5  1  A2 E4        		ldx #$E4
00D5C7  1               loc_B61F:
00D5C7  1               
00D5C7  1  A5 ED        		lda byte_ED
00D5C9  1  29 20        		and #$20
00D5CB  1  F0 EE        		beq loc_B613
00D5CD  1  A5 02        		lda byte_2
00D5CF  1  38           		sec
00D5D0  1  E9 10        		sbc #$10
00D5D2  1  85 02        		sta byte_2
00D5D4  1  4C B8 D5     		jmp loc_B610
00D5D7  1               loc_B62F:
00D5D7  1               
00D5D7  1  E0 24        		cpx #$24
00D5D9  1  D0 11        		bne loc_B644
00D5DB  1  C0 05        		cpy #5
00D5DD  1  D0 0A        		bne loc_B641
00D5DF  1  A2 30        		ldx #$30
00D5E1  1  A9 02        		lda #2
00D5E3  1  85 03        		sta byte_3
00D5E5  1  A9 05        		lda #5
00D5E7  1  85 EC        		sta byte_EC
00D5E9  1               loc_B641:
00D5E9  1               
00D5E9  1  4C 3C D6     		jmp loc_B694
00D5EC  1               loc_B644:
00D5EC  1               
00D5EC  1  E0 90        		cpx #$90
00D5EE  1  D0 12        		bne loc_B65A
00D5F0  1  A5 ED        		lda byte_ED
00D5F2  1  29 20        		and #$20
00D5F4  1  D0 09        		bne loc_B657
00D5F6  1  AD 8F 07     		lda FrenzyEnemyTimer
00D5F9  1  C9 10        		cmp #$10
00D5FB  1  B0 02        		bcs loc_B657
00D5FD  1  A2 96        		ldx #$96
00D5FF  1               loc_B657:
00D5FF  1               
00D5FF  1  4C A9 D6     		jmp loc_B701
00D602  1               loc_B65A:
00D602  1               
00D602  1  A5 EF        		lda byte_EF
00D604  1  C9 04        		cmp #4
00D606  1  B0 10        		bcs loc_B670
00D608  1  C0 02        		cpy #2
00D60A  1  90 0C        		bcc loc_B670
00D60C  1  A2 5A        		ldx #$5A
00D60E  1  A4 EF        		ldy byte_EF
00D610  1  C0 02        		cpy #2
00D612  1  D0 04        		bne loc_B670
00D614  1  A2 7E        		ldx #$7E
00D616  1  E6 02        		inc byte_2
00D618  1               loc_B670:
00D618  1               
00D618  1  A5 EC        		lda byte_EC
00D61A  1  C9 04        		cmp #4
00D61C  1  D0 1E        		bne loc_B694
00D61E  1  A2 72        		ldx #$72
00D620  1  E6 02        		inc byte_2
00D622  1  A4 EF        		ldy byte_EF
00D624  1  C0 02        		cpy #2
00D626  1  F0 04        		beq loc_B684
00D628  1  A2 66        		ldx #$66
00D62A  1  E6 02        		inc byte_2
00D62C  1               loc_B684:
00D62C  1               
00D62C  1  C0 06        		cpy #6
00D62E  1  D0 0C        		bne loc_B694
00D630  1  A2 54        		ldx #$54
00D632  1  A5 ED        		lda byte_ED
00D634  1  29 20        		and #$20
00D636  1  D0 04        		bne loc_B694
00D638  1  A2 8A        		ldx #$8A
00D63A  1  C6 02        		dec byte_2
00D63C  1               loc_B694:
00D63C  1               
00D63C  1  A4 08        		ldy ObjectOffset
00D63E  1  A5 EF        		lda byte_EF
00D640  1  C9 05        		cmp #5
00D642  1  D0 0C        		bne loc_B6A8
00D644  1  A5 ED        		lda byte_ED
00D646  1  F0 24        		beq CheckToAnimateEnemy
00D648  1  29 08        		and #8
00D64A  1  F0 5D        		beq loc_B701
00D64C  1  A2 B4        		ldx #$B4
00D64E  1  D0 1C        		bne CheckToAnimateEnemy
00D650  1               loc_B6A8:
00D650  1               
00D650  1  E0 48        		cpx #$48
00D652  1  F0 18        		beq CheckToAnimateEnemy
00D654  1  B9 96 07     		lda $796,y
00D657  1  C9 05        		cmp #5
00D659  1  B0 4E        		bcs loc_B701
00D65B  1  E0 3C        		cpx #$3C
00D65D  1  D0 0D        		bne CheckToAnimateEnemy
00D65F  1  C9 01        		cmp #1
00D661  1  F0 46        		beq loc_B701
00D663  1  E6 02        		inc byte_2
00D665  1  E6 02        		inc byte_2
00D667  1  E6 02        		inc byte_2
00D669  1  4C 9B D6     		jmp CheckAnimationStop
00D66C  1               CheckToAnimateEnemy:
00D66C  1               
00D66C  1  A5 EF        		lda byte_EF
00D66E  1  C9 06        		cmp #6
00D670  1  F0 37        		beq loc_B701
00D672  1  C9 08        		cmp #8
00D674  1  F0 33        		beq loc_B701
00D676  1  C9 0C        		cmp #$C
00D678  1  F0 2F        		beq loc_B701
00D67A  1  C9 18        		cmp #$18
00D67C  1  B0 2B        		bcs loc_B701
00D67E  1  A0 00        		ldy #0
00D680  1  C9 15        		cmp #$15
00D682  1  D0 10        		bne CheckForSecondFrame
00D684  1  C8           		iny
00D685  1  A9 03        		lda #3
00D687  1  85 EC        		sta byte_EC
00D689  1  AD 5F 07     		lda WorldNumber
00D68C  1  C9 07        		cmp #7
00D68E  1  B0 19        		bcs loc_B701
00D690  1  A2 A2        		ldx #$A2
00D692  1  D0 15        		bne loc_B701
00D694  1               CheckForSecondFrame:
00D694  1  A5 09        		lda FrameCounter
00D696  1  39 CD D4     		and EnemyAnimTimingBMask,y
00D699  1  D0 0E        		bne loc_B701
00D69B  1               CheckAnimationStop:
00D69B  1  A5 ED        		lda byte_ED
00D69D  1  29 A0        		and #$A0
00D69F  1  0D 47 07     		ora TimerControl
00D6A2  1  D0 05        		bne loc_B701
00D6A4  1  8A           		txa
00D6A5  1  18           		clc
00D6A6  1  69 06        		adc #6
00D6A8  1  AA           		tax
00D6A9  1               loc_B701:
00D6A9  1  A5 EF        		lda byte_EF
00D6AB  1  C9 04        		cmp #4
00D6AD  1  F0 0C        		beq loc_B713
00D6AF  1  A5 ED        		lda byte_ED
00D6B1  1  29 20        		and #$20
00D6B3  1  F0 0E        		beq loc_B71B
00D6B5  1  A5 EF        		lda byte_EF
00D6B7  1  C9 04        		cmp #4
00D6B9  1  90 08        		bcc loc_B71B
00D6BB  1               loc_B713:
00D6BB  1  A0 01        		ldy #1
00D6BD  1  8C 09 01     		sty VerticalFlipFlag
00D6C0  1  88           		dey
00D6C1  1  84 EC        		sty byte_EC
00D6C3  1               loc_B71B:
00D6C3  1  A4 EB        		ldy byte_EB
00D6C5  1  20 2D D8     		jsr DrawEnemyObjRow
00D6C8  1  20 2D D8     		jsr DrawEnemyObjRow
00D6CB  1  20 2D D8     		jsr DrawEnemyObjRow
00D6CE  1  A6 08        		ldx ObjectOffset
00D6D0  1  BC E5 06     		ldy $6E5,x
00D6D3  1  A5 EF        		lda byte_EF
00D6D5  1  C9 08        		cmp #8
00D6D7  1  D0 03        		bne loc_B734
00D6D9  1               loc_B731:
00D6D9  1  4C E7 D7     		jmp loc_B83F
00D6DC  1               loc_B734:
00D6DC  1  AD 09 01     		lda VerticalFlipFlag
00D6DF  1  F0 41        		beq loc_B77A
00D6E1  1  B9 02 02     		lda $202,y
00D6E4  1  09 80        		ora #$80
00D6E6  1  C8           		iny
00D6E7  1  C8           		iny
00D6E8  1  20 1E D2     		jsr sub_B25B
00D6EB  1  88           		dey
00D6EC  1  88           		dey
00D6ED  1  98           		tya
00D6EE  1  AA           		tax
00D6EF  1  A5 EF        		lda byte_EF
00D6F1  1  C9 05        		cmp #5
00D6F3  1  F0 11        		beq loc_B75E
00D6F5  1  C9 04        		cmp #4
00D6F7  1  F0 0D        		beq loc_B75E
00D6F9  1  C9 11        		cmp #$11
00D6FB  1  F0 09        		beq loc_B75E
00D6FD  1  C9 15        		cmp #$15
00D6FF  1  B0 05        		bcs loc_B75E
00D701  1  8A           		txa
00D702  1  18           		clc
00D703  1  69 08        		adc #8
00D705  1  AA           		tax
00D706  1               loc_B75E:
00D706  1               
00D706  1  BD 01 02     		lda $201,x
00D709  1  48           		pha
00D70A  1  BD 05 02     		lda $205,x
00D70D  1  48           		pha
00D70E  1  B9 11 02     		lda $211,y
00D711  1  9D 01 02     		sta $201,x
00D714  1  B9 15 02     		lda $215,y
00D717  1  9D 05 02     		sta $205,x
00D71A  1  68           		pla
00D71B  1  99 15 02     		sta $215,y
00D71E  1  68           		pla
00D71F  1  99 11 02     		sta $211,y
00D722  1               loc_B77A:
00D722  1               
00D722  1  AD 6A 03     		lda BowserGfxFlag
00D725  1  D0 B2        		bne loc_B731
00D727  1  A5 EF        		lda byte_EF
00D729  1  A6 EC        		ldx byte_EC
00D72B  1  C9 05        		cmp #5
00D72D  1  D0 03        		bne loc_B78A
00D72F  1  4C E7 D7     		jmp loc_B83F
00D732  1               loc_B78A:
00D732  1               
00D732  1  C9 07        		cmp #7
00D734  1  F0 21        		beq loc_B7AF
00D736  1  C9 0D        		cmp #$D
00D738  1  F0 1D        		beq loc_B7AF
00D73A  1  C9 04        		cmp #4
00D73C  1  F0 19        		beq loc_B7AF
00D73E  1  C9 0C        		cmp #$C
00D740  1  F0 15        		beq loc_B7AF
00D742  1  C9 12        		cmp #$12
00D744  1  D0 04        		bne loc_B7A2
00D746  1  E0 05        		cpx #5
00D748  1  D0 48        		bne loc_B7EA
00D74A  1               loc_B7A2:
00D74A  1               
00D74A  1  C9 15        		cmp #$15
00D74C  1  D0 05        		bne loc_B7AB
00D74E  1  A9 42        		lda #$42
00D750  1  99 16 02     		sta $216,y
00D753  1               loc_B7AB:
00D753  1               
00D753  1  E0 02        		cpx #2
00D755  1  90 3B        		bcc loc_B7EA
00D757  1               loc_B7AF:
00D757  1               
00D757  1  AD 6A 03     		lda BowserGfxFlag
00D75A  1  D0 36        		bne loc_B7EA
00D75C  1  B9 02 02     		lda $202,y
00D75F  1  29 A3        		and #$A3
00D761  1  99 02 02     		sta $202,y
00D764  1  99 0A 02     		sta $20A,y
00D767  1  99 12 02     		sta $212,y
00D76A  1  09 40        		ora #$40
00D76C  1  E0 05        		cpx #5
00D76E  1  D0 02        		bne loc_B7CA
00D770  1  09 80        		ora #$80
00D772  1               loc_B7CA:
00D772  1               
00D772  1  99 06 02     		sta $206,y
00D775  1  99 0E 02     		sta $20E,y
00D778  1  99 16 02     		sta $216,y
00D77B  1  E0 04        		cpx #4
00D77D  1  D0 13        		bne loc_B7EA
00D77F  1  B9 0A 02     		lda $20A,y
00D782  1  09 80        		ora #$80
00D784  1  99 0A 02     		sta $20A,y
00D787  1  99 12 02     		sta $212,y
00D78A  1  09 40        		ora #$40
00D78C  1  99 0E 02     		sta $20E,y
00D78F  1  99 16 02     		sta $216,y
00D792  1               loc_B7EA:
00D792  1               
00D792  1  A5 EF        		lda byte_EF
00D794  1  C9 11        		cmp #$11
00D796  1  D0 36        		bne loc_B826
00D798  1  AD 09 01     		lda VerticalFlipFlag
00D79B  1  D0 21        		bne loc_B816
00D79D  1  B9 12 02     		lda $212,y
00D7A0  1  29 81        		and #$81
00D7A2  1  99 12 02     		sta $212,y
00D7A5  1  B9 16 02     		lda $216,y
00D7A8  1  09 41        		ora #$41
00D7AA  1  99 16 02     		sta $216,y
00D7AD  1  AE 8F 07     		ldx FrenzyEnemyTimer
00D7B0  1  E0 10        		cpx #$10
00D7B2  1  B0 33        		bcs loc_B83F
00D7B4  1  99 0E 02     		sta $20E,y
00D7B7  1  29 81        		and #$81
00D7B9  1  99 0A 02     		sta $20A,y
00D7BC  1  90 29        		bcc loc_B83F
00D7BE  1               loc_B816:
00D7BE  1               
00D7BE  1  B9 02 02     		lda $202,y
00D7C1  1  29 81        		and #$81
00D7C3  1  99 02 02     		sta $202,y
00D7C6  1  B9 06 02     		lda $206,y
00D7C9  1  09 41        		ora #$41
00D7CB  1  99 06 02     		sta $206,y
00D7CE  1               loc_B826:
00D7CE  1               
00D7CE  1  A5 EF        		lda byte_EF
00D7D0  1  C9 18        		cmp #$18
00D7D2  1  90 13        		bcc loc_B83F
00D7D4  1  A9 80        		lda #$80
00D7D6  1  0D 48 64     		ora WRAM_UnknownAttributeData0
00D7D9  1  99 0A 02     		sta $20A,y
00D7DC  1  99 12 02     		sta $212,y
00D7DF  1  09 40        		ora #$40
00D7E1  1  99 0E 02     		sta $20E,y
00D7E4  1  99 16 02     		sta $216,y
00D7E7  1               loc_B83F:
00D7E7  1               
00D7E7  1  A6 08        		ldx ObjectOffset
00D7E9  1  AD D1 03     		lda Enemy_OffscreenBits
00D7EC  1  4A           		lsr
00D7ED  1  4A           		lsr
00D7EE  1  4A           		lsr
00D7EF  1  48           		pha
00D7F0  1  90 05        		bcc loc_B84F
00D7F2  1  A9 04        		lda #4
00D7F4  1  20 44 D8     		jsr sub_B89C
00D7F7  1               loc_B84F:
00D7F7  1               
00D7F7  1  68           		pla
00D7F8  1  4A           		lsr
00D7F9  1  48           		pha
00D7FA  1  90 05        		bcc loc_B859
00D7FC  1  A9 00        		lda #0
00D7FE  1  20 44 D8     		jsr sub_B89C
00D801  1               loc_B859:
00D801  1               
00D801  1  68           		pla
00D802  1  4A           		lsr
00D803  1  4A           		lsr
00D804  1  48           		pha
00D805  1  90 05        		bcc loc_B864
00D807  1  A9 10        		lda #$10
00D809  1  20 3A D8     		jsr MoveESprRowOffscreen
00D80C  1               loc_B864:
00D80C  1               
00D80C  1  68           		pla
00D80D  1  4A           		lsr
00D80E  1  48           		pha
00D80F  1  90 05        		bcc loc_B86E
00D811  1  A9 08        		lda #8
00D813  1  20 3A D8     		jsr MoveESprRowOffscreen
00D816  1               loc_B86E:
00D816  1               
00D816  1  68           		pla
00D817  1  4A           		lsr
00D818  1  90 12        		bcc ExEGHandler
00D81A  1  20 3A D8     		jsr MoveESprRowOffscreen
00D81D  1  B5 16        		lda $16,x
00D81F  1  C9 0C        		cmp #$C
00D821  1  F0 09        		beq ExEGHandler
00D823  1  B5 B6        		lda $B6,x
00D825  1  C9 02        		cmp #2
00D827  1  D0 03        		bne ExEGHandler
00D829  1  20 D9 B5     		jsr EraseEnemyObject
00D82C  1               ExEGHandler:
00D82C  1               
00D82C  1  60           		rts
00D82D  1               DrawEnemyObjRow:
00D82D  1               
00D82D  1  BD B0 D3     		lda EnemyGraphicsTable,x
00D830  1  85 00        		sta TMP_0
00D832  1  BD B1 D3     		lda EnemyGraphicsTable+1,x
00D835  1               DrawOneSpriteRow:
00D835  1               
00D835  1  85 01        		sta TMP_1
00D837  1  4C 0F DF     		jmp DrawSpriteObject
00D83A  1               MoveESprRowOffscreen:
00D83A  1               
00D83A  1  18           		clc
00D83B  1  7D E5 06     		adc $6E5,x
00D83E  1  A8           		tay
00D83F  1  A9 F8        		lda #$F8
00D841  1  4C 2A D2     		jmp DumpTwoSpr
00D844  1               sub_B89C:
00D844  1               
00D844  1  18           		clc
00D845  1  7D E5 06     		adc $6E5,x
00D848  1  A8           		tay
00D849  1  20 CD D8     		jsr sub_B925
00D84C  1  99 10 02     		sta $210,y
00D84F  1  60           		rts
00D850  1               DefaultBlockObjTiles:
00D850  1  85           		.byte $85
00D851  1               unk_B8A9:
00D851  1  85           		.byte $85
00D852  1  86           		.byte $86
00D853  1  86           		.byte $86
00D854  1               sub_B8AC:
00D854  1               
00D854  1  AD BC 03     		lda Block_Rel_YPos
00D857  1  85 02        		sta byte_2
00D859  1  AD B1 03     		lda Block_Rel_XPos
00D85C  1  85 05        		sta byte_5
00D85E  1  A9 03        		lda #3
00D860  1  85 04        		sta byte_4
00D862  1  4A           		lsr
00D863  1  85 03        		sta byte_3
00D865  1  BC EC 06     		ldy $6EC,x
00D868  1  A2 00        		ldx #0
00D86A  1               loc_B8C2:
00D86A  1               
00D86A  1  BD 50 D8     		lda DefaultBlockObjTiles,x
00D86D  1  85 00        		sta TMP_0
00D86F  1  BD 51 D8     		lda DefaultBlockObjTiles+1,x
00D872  1  20 35 D8     		jsr DrawOneSpriteRow
00D875  1  E0 04        		cpx #4
00D877  1  D0 F1        		bne loc_B8C2
00D879  1  A6 08        		ldx ObjectOffset
00D87B  1  BC EC 06     		ldy $6EC,x
00D87E  1  AD 4E 07     		lda AreaType
00D881  1  C9 01        		cmp #1
00D883  1  F0 08        		beq loc_B8E5
00D885  1  A9 86        		lda #$86
00D887  1  99 01 02     		sta $201,y
00D88A  1  99 05 02     		sta $205,y
00D88D  1               loc_B8E5:
00D88D  1               
00D88D  1  BD E8 03     		lda $3E8,x
00D890  1  C9 C5        		cmp #$C5
00D892  1  D0 24        		bne loc_B910
00D894  1  A9 87        		lda #$87
00D896  1  C8           		iny
00D897  1  20 24 D2     		jsr loc_B261
00D89A  1  88           		dey
00D89B  1  A9 03        		lda #3
00D89D  1  AE 4E 07     		ldx AreaType
00D8A0  1  CA           		dex
00D8A1  1  F0 01        		beq loc_B8FC
00D8A3  1  4A           		lsr
00D8A4  1               loc_B8FC:
00D8A4  1               
00D8A4  1  A6 08        		ldx ObjectOffset
00D8A6  1  99 02 02     		sta $202,y
00D8A9  1  09 40        		ora #$40
00D8AB  1  99 06 02     		sta $206,y
00D8AE  1  09 80        		ora #$80
00D8B0  1  99 0E 02     		sta $20E,y
00D8B3  1  29 83        		and #$83
00D8B5  1  99 0A 02     		sta $20A,y
00D8B8  1               loc_B910:
00D8B8  1               
00D8B8  1  AD D4 03     		lda Block_OffscreenBits
00D8BB  1  48           		pha
00D8BC  1  29 04        		and #4
00D8BE  1  F0 08        		beq loc_B920
00D8C0  1  A9 F8        		lda #$F8
00D8C2  1  99 04 02     		sta $204,y
00D8C5  1  99 0C 02     		sta $20C,y
00D8C8  1               loc_B920:
00D8C8  1               
00D8C8  1  68           		pla
00D8C9  1               sub_B921:
00D8C9  1               
00D8C9  1  29 08        		and #8
00D8CB  1  F0 08        		beq locret_B92D
00D8CD  1               sub_B925:
00D8CD  1               
00D8CD  1  A9 F8        		lda #$F8
00D8CF  1  99 00 02     		sta $200,y
00D8D2  1  99 08 02     		sta $208,y
00D8D5  1               locret_B92D:
00D8D5  1               
00D8D5  1  60           		rts
00D8D6  1               sub_B92E:
00D8D6  1               
00D8D6  1  A9 02        		lda #2
00D8D8  1  85 00        		sta TMP_0
00D8DA  1  A9 75        		lda #$75
00D8DC  1  A4 0E        		ldy GameEngineSubroutine
00D8DE  1  C0 05        		cpy #5
00D8E0  1  F0 06        		beq loc_B940
00D8E2  1  A9 03        		lda #3
00D8E4  1  85 00        		sta TMP_0
00D8E6  1  A9 84        		lda #$84
00D8E8  1               loc_B940:
00D8E8  1               
00D8E8  1  BC EC 06     		ldy $6EC,x
00D8EB  1  C8           		iny
00D8EC  1  20 24 D2     		jsr loc_B261
00D8EF  1  A5 09        		lda FrameCounter
00D8F1  1  0A           		asl
00D8F2  1  0A           		asl
00D8F3  1  0A           		asl
00D8F4  1  0A           		asl
00D8F5  1  29 C0        		and #$C0
00D8F7  1  05 00        		ora TMP_0
00D8F9  1  C8           		iny
00D8FA  1  20 24 D2     		jsr loc_B261
00D8FD  1  88           		dey
00D8FE  1  88           		dey
00D8FF  1  AD BC 03     		lda Block_Rel_YPos
00D902  1  20 2A D2     		jsr DumpTwoSpr
00D905  1  AD B1 03     		lda Block_Rel_XPos
00D908  1  99 03 02     		sta $203,y
00D90B  1  BD F1 03     		lda $3F1,x
00D90E  1  38           		sec
00D90F  1  ED 1C 07     		sbc ScreenLeft_X_Pos
00D912  1  85 00        		sta TMP_0
00D914  1  38           		sec
00D915  1  ED B1 03     		sbc Block_Rel_XPos
00D918  1  65 00        		adc TMP_0
00D91A  1  69 06        		adc #6
00D91C  1  99 07 02     		sta $207,y
00D91F  1  AD BD 03     		lda byte_3BD
00D922  1  99 08 02     		sta $208,y
00D925  1  99 0C 02     		sta $20C,y
00D928  1  AD B2 03     		lda byte_3B2
00D92B  1  99 0B 02     		sta $20B,y
00D92E  1  A5 00        		lda TMP_0
00D930  1  38           		sec
00D931  1  ED B2 03     		sbc byte_3B2
00D934  1  65 00        		adc TMP_0
00D936  1  69 06        		adc #6
00D938  1  99 0F 02     		sta $20F,y
00D93B  1  AD D4 03     		lda Block_OffscreenBits
00D93E  1  20 C9 D8     		jsr sub_B921
00D941  1  AD D4 03     		lda Block_OffscreenBits
00D944  1  0A           		asl
00D945  1  90 05        		bcc loc_B9A4
00D947  1  A9 F8        		lda #$F8
00D949  1  20 2A D2     		jsr DumpTwoSpr
00D94C  1               loc_B9A4:
00D94C  1               
00D94C  1  A5 00        		lda TMP_0
00D94E  1  10 10        		bpl locret_B9B8
00D950  1  B9 03 02     		lda $203,y
00D953  1  D9 07 02     		cmp $207,y
00D956  1  90 08        		bcc locret_B9B8
00D958  1  A9 F8        		lda #$F8
00D95A  1  99 04 02     		sta $204,y
00D95D  1  99 0C 02     		sta $20C,y
00D960  1               locret_B9B8:
00D960  1               
00D960  1  60           		rts
00D961  1               loc_B9B9:
00D961  1               
00D961  1  BC F1 06     		ldy $6F1,x
00D964  1  AD BA 03     		lda Fireball_Rel_YPos
00D967  1  99 00 02     		sta $200,y
00D96A  1  AD AF 03     		lda Fireball_Rel_XPos
00D96D  1  99 03 02     		sta $203,y
00D970  1               DrawFirebar:
00D970  1               
00D970  1  A5 09        		lda FrameCounter
00D972  1  4A           		lsr
00D973  1  4A           		lsr
00D974  1  48           		pha
00D975  1  29 01        		and #1
00D977  1  49 64        		eor #$64
00D979  1  99 01 02     		sta $201,y
00D97C  1  68           		pla
00D97D  1  4A           		lsr
00D97E  1  4A           		lsr
00D97F  1  A9 02        		lda #2
00D981  1  90 02        		bcc loc_B9DD
00D983  1  09 C0        		ora #$C0
00D985  1               loc_B9DD:
00D985  1               
00D985  1  99 02 02     		sta $202,y
00D988  1  60           		rts
00D989  1               ExplosionTiles:
00D989  1  68           		.byte $68
00D98A  1  67           		.byte $67
00D98B  1  66           		.byte $66
00D98C  1               DrawExplosion_Fireball:
00D98C  1               
00D98C  1  BC EC 06     		ldy Alt_SprDataOffset,x
00D98F  1  B5 24        		lda Fireball_State,x
00D991  1  F6 24        		inc Fireball_State,x
00D993  1  4A           		lsr
00D994  1  29 07        		and #7
00D996  1  C9 03        		cmp #3
00D998  1  B0 4A        		bcs loc_BA3C
00D99A  1               DrawExplosion_Fireworks:
00D99A  1               
00D99A  1  AA           		tax
00D99B  1  BD 89 D9     		lda ExplosionTiles,x
00D99E  1  C8           		iny
00D99F  1  20 24 D2     		jsr loc_B261
00D9A2  1  88           		dey
00D9A3  1  A6 08        		ldx ObjectOffset
00D9A5  1  AD BA 03     		lda Fireball_Rel_YPos
00D9A8  1  38           		sec
00D9A9  1  E9 04        		sbc #4
00D9AB  1  99 00 02     		sta $200,y
00D9AE  1  99 08 02     		sta $208,y
00D9B1  1  18           		clc
00D9B2  1  69 08        		adc #8
00D9B4  1  99 04 02     		sta $204,y
00D9B7  1  99 0C 02     		sta $20C,y
00D9BA  1  AD AF 03     		lda Fireball_Rel_XPos
00D9BD  1  38           		sec
00D9BE  1  E9 04        		sbc #4
00D9C0  1  99 03 02     		sta $203,y
00D9C3  1  99 07 02     		sta $207,y
00D9C6  1  18           		clc
00D9C7  1  69 08        		adc #8
00D9C9  1  99 0B 02     		sta $20B,y
00D9CC  1  99 0F 02     		sta $20F,y
00D9CF  1  A9 02        		lda #2
00D9D1  1  99 02 02     		sta $202,y
00D9D4  1  A9 82        		lda #$82
00D9D6  1  99 06 02     		sta $206,y
00D9D9  1  A9 42        		lda #$42
00D9DB  1  99 0A 02     		sta $20A,y
00D9DE  1  A9 C2        		lda #$C2
00D9E0  1  99 0E 02     		sta $20E,y
00D9E3  1  60           		rts
00D9E4  1               loc_BA3C:
00D9E4  1               
00D9E4  1  A9 00        		lda #0
00D9E6  1  95 24        		sta $24,x
00D9E8  1  60           		rts
00D9E9  1               DrawSmallPlatform:
00D9E9  1               
00D9E9  1  BC E5 06     		ldy $6E5,x
00D9EC  1  A9 5B        		lda #$5B
00D9EE  1  C8           		iny
00D9EF  1  20 1E D2     		jsr sub_B25B
00D9F2  1  C8           		iny
00D9F3  1  A9 02        		lda #2
00D9F5  1  20 1E D2     		jsr sub_B25B
00D9F8  1  88           		dey
00D9F9  1  88           		dey
00D9FA  1  AD AE 03     		lda Enemy_Rel_XPos
00D9FD  1  99 03 02     		sta $203,y
00DA00  1  99 0F 02     		sta $20F,y
00DA03  1  18           		clc
00DA04  1  69 08        		adc #8
00DA06  1  99 07 02     		sta $207,y
00DA09  1  99 13 02     		sta $213,y
00DA0C  1  18           		clc
00DA0D  1  69 08        		adc #8
00DA0F  1  99 0B 02     		sta $20B,y
00DA12  1  99 17 02     		sta $217,y
00DA15  1  B5 CF        		lda $CF,x
00DA17  1  AA           		tax
00DA18  1  48           		pha
00DA19  1  E0 20        		cpx #$20
00DA1B  1  B0 02        		bcs loc_BA77
00DA1D  1  A9 F8        		lda #$F8
00DA1F  1               loc_BA77:
00DA1F  1               
00DA1F  1  20 27 D2     		jsr loc_B264
00DA22  1  68           		pla
00DA23  1  18           		clc
00DA24  1  69 80        		adc #$80
00DA26  1  AA           		tax
00DA27  1  E0 20        		cpx #$20
00DA29  1  B0 02        		bcs loc_BA85
00DA2B  1  A9 F8        		lda #$F8
00DA2D  1               loc_BA85:
00DA2D  1               
00DA2D  1  99 0C 02     		sta $20C,y
00DA30  1  99 10 02     		sta $210,y
00DA33  1  99 14 02     		sta $214,y
00DA36  1  AD D1 03     		lda Enemy_OffscreenBits
00DA39  1  48           		pha
00DA3A  1  29 08        		and #8
00DA3C  1  F0 08        		beq loc_BA9E
00DA3E  1  A9 F8        		lda #$F8
00DA40  1  99 00 02     		sta $200,y
00DA43  1  99 0C 02     		sta $20C,y
00DA46  1               loc_BA9E:
00DA46  1               
00DA46  1  68           		pla
00DA47  1  48           		pha
00DA48  1  29 04        		and #4
00DA4A  1  F0 08        		beq loc_BAAC
00DA4C  1  A9 F8        		lda #$F8
00DA4E  1  99 04 02     		sta $204,y
00DA51  1  99 10 02     		sta $210,y
00DA54  1               loc_BAAC:
00DA54  1               
00DA54  1  68           		pla
00DA55  1  29 02        		and #2
00DA57  1  F0 08        		beq loc_BAB9
00DA59  1  A9 F8        		lda #$F8
00DA5B  1  99 08 02     		sta $208,y
00DA5E  1  99 14 02     		sta $214,y
00DA61  1               loc_BAB9:
00DA61  1               
00DA61  1  A6 08        		ldx ObjectOffset
00DA63  1  60           		rts
00DA64  1               sub_BABC:
00DA64  1               
00DA64  1  A4 B5        		ldy Player_Y_HighPos
00DA66  1  88           		dey
00DA67  1  D0 20        		bne locret_BAE1
00DA69  1  AD D3 03     		lda Bubble_OffscreenBits
00DA6C  1  29 08        		and #8
00DA6E  1  D0 19        		bne locret_BAE1
00DA70  1  BC EE 06     		ldy $6EE,x
00DA73  1  AD B0 03     		lda Bubble_Rel_XPos
00DA76  1  99 03 02     		sta $203,y
00DA79  1  AD BB 03     		lda Bubble_Rel_YPos
00DA7C  1  99 00 02     		sta $200,y
00DA7F  1  A9 74        		lda #$74
00DA81  1  99 01 02     		sta $201,y
00DA84  1  A9 02        		lda #2
00DA86  1  99 02 02     		sta $202,y
00DA89  1               locret_BAE1:
00DA89  1               
00DA89  1  60           		rts
00DA8A  1               PlayerGfxTblOffsets:
00DA8A  1  20           		.byte $20
00DA8B  1  28           		.byte $28
00DA8C  1  C8           		.byte $C8
00DA8D  1  18           		.byte $18
00DA8E  1  00           		.byte 0
00DA8F  1  40           		.byte $40
00DA90  1  50           		.byte $50
00DA91  1  58           		.byte $58
00DA92  1  80           		.byte $80
00DA93  1  88           		.byte $88
00DA94  1  B8           		.byte $B8
00DA95  1  78           		.byte $78
00DA96  1  60           		.byte $60
00DA97  1  A0           		.byte $A0
00DA98  1  B0           		.byte $B0
00DA99  1  B8           		.byte $B8
00DA9A  1               PlayerGraphicsTable:
00DA9A  1  00           		.byte 0
00DA9B  1  01           		.byte 1
00DA9C  1  02           		.byte 2
00DA9D  1  03           		.byte 3
00DA9E  1  04           		.byte 4
00DA9F  1  05           		.byte 5
00DAA0  1  06           		.byte 6
00DAA1  1  07           		.byte 7
00DAA2  1  08           		.byte 8
00DAA3  1  09           		.byte 9
00DAA4  1  0A           		.byte $A
00DAA5  1  0B           		.byte $B
00DAA6  1  0C           		.byte $C
00DAA7  1  0D           		.byte $D
00DAA8  1  0E           		.byte $E
00DAA9  1  0F           		.byte $F
00DAAA  1  10           		.byte $10
00DAAB  1  11           		.byte $11
00DAAC  1  12           		.byte $12
00DAAD  1  13           		.byte $13
00DAAE  1  14           		.byte $14
00DAAF  1  15           		.byte $15
00DAB0  1  16           		.byte $16
00DAB1  1  17           		.byte $17
00DAB2  1  18           		.byte $18
00DAB3  1  19           		.byte $19
00DAB4  1  1A           		.byte $1A
00DAB5  1  1B           		.byte $1B
00DAB6  1  1C           		.byte $1C
00DAB7  1  1D           		.byte $1D
00DAB8  1  1E           		.byte $1E
00DAB9  1  1F           		.byte $1F
00DABA  1  20           		.byte $20
00DABB  1  21           		.byte $21
00DABC  1  22           		.byte $22
00DABD  1  23           		.byte $23
00DABE  1  24           		.byte $24
00DABF  1  25           		.byte $25
00DAC0  1  26           		.byte $26
00DAC1  1  27           		.byte $27
00DAC2  1  08           		.byte 8
00DAC3  1  09           		.byte 9
00DAC4  1  28           		.byte $28
00DAC5  1  29           		.byte $29
00DAC6  1  2A           		.byte $2A
00DAC7  1  2B           		.byte $2B
00DAC8  1  2C           		.byte $2C
00DAC9  1  2D           		.byte $2D
00DACA  1  08           		.byte 8
00DACB  1  09           		.byte 9
00DACC  1  0A           		.byte $A
00DACD  1  0B           		.byte $B
00DACE  1  0C           		.byte $C
00DACF  1  30           		.byte $30
00DAD0  1  2C           		.byte $2C
00DAD1  1  2D           		.byte $2D
00DAD2  1  08           		.byte 8
00DAD3  1  09           		.byte 9
00DAD4  1  0A           		.byte $A
00DAD5  1  0B           		.byte $B
00DAD6  1  2E           		.byte $2E
00DAD7  1  2F           		.byte $2F
00DAD8  1  2C           		.byte $2C
00DAD9  1  2D           		.byte $2D
00DADA  1  08           		.byte 8
00DADB  1  09           		.byte 9
00DADC  1  28           		.byte $28
00DADD  1  29           		.byte $29
00DADE  1  2A           		.byte $2A
00DADF  1  2B           		.byte $2B
00DAE0  1  5C           		.byte $5C
00DAE1  1  5D           		.byte $5D
00DAE2  1  08           		.byte 8
00DAE3  1  09           		.byte 9
00DAE4  1  0A           		.byte $A
00DAE5  1  0B           		.byte $B
00DAE6  1  0C           		.byte $C
00DAE7  1  0D           		.byte $D
00DAE8  1  5E           		.byte $5E
00DAE9  1  5F           		.byte $5F
00DAEA  1  FC           		.byte $FC
00DAEB  1  FC           		.byte $FC
00DAEC  1  08           		.byte 8
00DAED  1  09           		.byte 9
00DAEE  1  58           		.byte $58
00DAEF  1  59           		.byte $59
00DAF0  1  5A           		.byte $5A
00DAF1  1  5A           		.byte $5A
00DAF2  1  08           		.byte 8
00DAF3  1  09           		.byte 9
00DAF4  1  28           		.byte $28
00DAF5  1  29           		.byte $29
00DAF6  1  2A           		.byte $2A
00DAF7  1  2B           		.byte $2B
00DAF8  1  0E           		.byte $E
00DAF9  1  0F           		.byte $F
00DAFA  1  FC           		.byte $FC
00DAFB  1  FC           		.byte $FC
00DAFC  1  FC           		.byte $FC
00DAFD  1  FC           		.byte $FC
00DAFE  1  32           		.byte $32
00DAFF  1  33           		.byte $33
00DB00  1  34           		.byte $34
00DB01  1  35           		.byte $35
00DB02  1  FC           		.byte $FC
00DB03  1  FC           		.byte $FC
00DB04  1  FC           		.byte $FC
00DB05  1  FC           		.byte $FC
00DB06  1  36           		.byte $36
00DB07  1  37           		.byte $37
00DB08  1  38           		.byte $38
00DB09  1  39           		.byte $39
00DB0A  1  FC           		.byte $FC
00DB0B  1  FC           		.byte $FC
00DB0C  1  FC           		.byte $FC
00DB0D  1  FC           		.byte $FC
00DB0E  1  3A           		.byte $3A
00DB0F  1  37           		.byte $37
00DB10  1  3B           		.byte $3B
00DB11  1  3C           		.byte $3C
00DB12  1  FC           		.byte $FC
00DB13  1  FC           		.byte $FC
00DB14  1  FC           		.byte $FC
00DB15  1  FC           		.byte $FC
00DB16  1  3D           		.byte $3D
00DB17  1  3E           		.byte $3E
00DB18  1  3F           		.byte $3F
00DB19  1  40           		.byte $40
00DB1A  1  FC           		.byte $FC
00DB1B  1  FC           		.byte $FC
00DB1C  1  FC           		.byte $FC
00DB1D  1  FC           		.byte $FC
00DB1E  1  32           		.byte $32
00DB1F  1  41           		.byte $41
00DB20  1  42           		.byte $42
00DB21  1  43           		.byte $43
00DB22  1  FC           		.byte $FC
00DB23  1  FC           		.byte $FC
00DB24  1  FC           		.byte $FC
00DB25  1  FC           		.byte $FC
00DB26  1  32           		.byte $32
00DB27  1  33           		.byte $33
00DB28  1  44           		.byte $44
00DB29  1  45           		.byte $45
00DB2A  1  FC           		.byte $FC
00DB2B  1  FC           		.byte $FC
00DB2C  1  FC           		.byte $FC
00DB2D  1  FC           		.byte $FC
00DB2E  1  32           		.byte $32
00DB2F  1  33           		.byte $33
00DB30  1  44           		.byte $44
00DB31  1  47           		.byte $47
00DB32  1  FC           		.byte $FC
00DB33  1  FC           		.byte $FC
00DB34  1  FC           		.byte $FC
00DB35  1  FC           		.byte $FC
00DB36  1  32           		.byte $32
00DB37  1  33           		.byte $33
00DB38  1               byte_BB90:
00DB38  1  48           		.byte $48
00DB39  1  49           		.byte $49
00DB3A  1  FC           		.byte $FC
00DB3B  1               byte_BB93:
00DB3B  1  FC           		.byte $FC
00DB3C  1  FC           		.byte $FC
00DB3D  1  FC           		.byte $FC
00DB3E  1  32           		.byte $32
00DB3F  1  33           		.byte $33
00DB40  1  90           		.byte $90
00DB41  1  91           		.byte $91
00DB42  1  FC           		.byte $FC
00DB43  1  FC           		.byte $FC
00DB44  1  FC           		.byte $FC
00DB45  1  FC           		.byte $FC
00DB46  1  3A           		.byte $3A
00DB47  1  37           		.byte $37
00DB48  1  92           		.byte $92
00DB49  1  93           		.byte $93
00DB4A  1  FC           		.byte $FC
00DB4B  1  FC           		.byte $FC
00DB4C  1  FC           		.byte $FC
00DB4D  1  FC           		.byte $FC
00DB4E  1  9E           		.byte $9E
00DB4F  1  9E           		.byte $9E
00DB50  1  9F           		.byte $9F
00DB51  1  9F           		.byte $9F
00DB52  1  FC           		.byte $FC
00DB53  1  FC           		.byte $FC
00DB54  1  FC           		.byte $FC
00DB55  1  FC           		.byte $FC
00DB56  1  3A           		.byte $3A
00DB57  1  37           		.byte $37
00DB58  1  4F           		.byte $4F
00DB59  1  4F           		.byte $4F
00DB5A  1  FC           		.byte $FC
00DB5B  1  FC           		.byte $FC
00DB5C  1  00           		.byte 0
00DB5D  1  01           		.byte 1
00DB5E  1  4C           		.byte $4C
00DB5F  1  4D           		.byte $4D
00DB60  1  4E           		.byte $4E
00DB61  1  4E           		.byte $4E
00DB62  1  00           		.byte 0
00DB63  1  01           		.byte 1
00DB64  1  4C           		.byte $4C
00DB65  1  4D           		.byte $4D
00DB66  1  4A           		.byte $4A
00DB67  1  4A           		.byte $4A
00DB68  1  4B           		.byte $4B
00DB69  1  4B           		.byte $4B
00DB6A  1               NEW_SomethingWithPlayerGraphics:
00DB6A  1  31           		.byte $31
00DB6B  1  46           		.byte $46
00DB6C  1               PlayerGfxHandler:
00DB6C  1               
00DB6C  1  AD 9E 07     		lda InjuryTimer
00DB6F  1  F0 05        		beq loc_BBCE
00DB71  1  A5 09        		lda FrameCounter
00DB73  1  4A           		lsr
00DB74  1  B0 40        		bcs locret_BC0E
00DB76  1               loc_BBCE:
00DB76  1               
00DB76  1  A5 0E        		lda GameEngineSubroutine
00DB78  1  C9 0B        		cmp #$B
00DB7A  1  F0 47        		beq loc_BC1B
00DB7C  1  AD 0B 07     		lda PlayerChangeSizeFlag
00DB7F  1  D0 3C        		bne loc_BC15
00DB81  1  AC 04 07     		ldy SwimmingFlag
00DB84  1  F0 31        		beq sub_BC0F
00DB86  1  A5 1D        		lda Player_State
00DB88  1  C9 00        		cmp #0
00DB8A  1  F0 2B        		beq sub_BC0F
00DB8C  1  20 B7 DB     		jsr sub_BC0F
00DB8F  1  A5 09        		lda FrameCounter
00DB91  1  29 04        		and #4
00DB93  1  D0 21        		bne locret_BC0E
00DB95  1  AA           		tax
00DB96  1  AC E4 06     		ldy Player_SprDataOffset
00DB99  1  A5 33        		lda PlayerFacingDir
00DB9B  1  4A           		lsr
00DB9C  1  B0 04        		bcs loc_BBFA
00DB9E  1  C8           		iny
00DB9F  1  C8           		iny
00DBA0  1  C8           		iny
00DBA1  1  C8           		iny
00DBA2  1               loc_BBFA:
00DBA2  1               
00DBA2  1  AD 54 07     		lda PlayerSize
00DBA5  1  F0 09        		beq loc_BC08
00DBA7  1  B9 19 02     		lda $219,y
00DBAA  1  CD 38 DB     		cmp byte_BB90
00DBAD  1  F0 07        		beq locret_BC0E
00DBAF  1  E8           		inx
00DBB0  1               loc_BC08:
00DBB0  1               
00DBB0  1  BD 6A DB     		lda NEW_SomethingWithPlayerGraphics,x
00DBB3  1  99 19 02     		sta $219,y
00DBB6  1               locret_BC0E:
00DBB6  1               
00DBB6  1  60           		rts
00DBB7  1               sub_BC0F:
00DBB7  1               
00DBB7  1  20 6F DC     		jsr sub_BCC7
00DBBA  1  4C C8 DB     		jmp loc_BC20
00DBBD  1               loc_BC15:
00DBBD  1               
00DBBD  1  20 3D DD     		jsr sub_BD95
00DBC0  1  4C C8 DB     		jmp loc_BC20
00DBC3  1               loc_BC1B:
00DBC3  1               
00DBC3  1  A0 0E        		ldy #$E
00DBC5  1  B9 8A DA     		lda PlayerGfxTblOffsets,y
00DBC8  1               loc_BC20:
00DBC8  1               
00DBC8  1  8D D5 06     		sta PlayerGfxOffset
00DBCB  1  A9 04        		lda #4
00DBCD  1  20 41 DC     		jsr RenderPlayerSub
00DBD0  1  20 76 DD     		jsr ChkForPlayerAttrib
00DBD3  1  AD 11 07     		lda FireballThrowingTimer
00DBD6  1  F0 25        		beq loc_BC55
00DBD8  1  A0 00        		ldy #0
00DBDA  1  AD 81 07     		lda PlayerAnimTimer
00DBDD  1  CD 11 07     		cmp FireballThrowingTimer
00DBE0  1  8C 11 07     		sty FireballThrowingTimer
00DBE3  1  B0 18        		bcs loc_BC55
00DBE5  1  8D 11 07     		sta FireballThrowingTimer
00DBE8  1  A0 07        		ldy #7
00DBEA  1  B9 8A DA     		lda PlayerGfxTblOffsets,y
00DBED  1  8D D5 06     		sta PlayerGfxOffset
00DBF0  1  A0 04        		ldy #4
00DBF2  1  A5 57        		lda Player_X_Speed
00DBF4  1  05 0C        		ora Left_Right_Buttons
00DBF6  1  F0 01        		beq loc_BC51
00DBF8  1  88           		dey
00DBF9  1               loc_BC51:
00DBF9  1               
00DBF9  1  98           		tya
00DBFA  1  20 41 DC     		jsr RenderPlayerSub
00DBFD  1               loc_BC55:
00DBFD  1               
00DBFD  1  AD D0 03     		lda Player_OffscreenBits
00DC00  1  4A           		lsr
00DC01  1  4A           		lsr
00DC02  1  4A           		lsr
00DC03  1  4A           		lsr
00DC04  1  85 00        		sta TMP_0
00DC06  1  A2 03        		ldx #3
00DC08  1  AD E4 06     		lda Player_SprDataOffset
00DC0B  1  18           		clc
00DC0C  1  69 18        		adc #$18
00DC0E  1  A8           		tay
00DC0F  1               loc_BC67:
00DC0F  1               
00DC0F  1  A9 F8        		lda #$F8
00DC11  1  46 00        		lsr TMP_0
00DC13  1  90 03        		bcc loc_BC70
00DC15  1  20 2A D2     		jsr DumpTwoSpr
00DC18  1               loc_BC70:
00DC18  1               
00DC18  1  98           		tya
00DC19  1  38           		sec
00DC1A  1  E9 08        		sbc #8
00DC1C  1  A8           		tay
00DC1D  1  CA           		dex
00DC1E  1  10 EF        		bpl loc_BC67
00DC20  1  60           		rts
00DC21  1               IntermediatePlayerData:
00DC21  1  58           		.byte $58
00DC22  1  01           		.byte 1
00DC23  1  00           		.byte 0
00DC24  1  60           		.byte $60
00DC25  1  FF           		.byte $FF
00DC26  1  04           		.byte 4
00DC27  1               DrawPlayer_Intermediate:
00DC27  1               
00DC27  1  A2 05        		ldx #5
00DC29  1               loc_BC81:
00DC29  1               
00DC29  1  BD 21 DC     		lda IntermediatePlayerData,x
00DC2C  1  95 02        		sta 2,x
00DC2E  1  CA           		dex
00DC2F  1  10 F8        		bpl loc_BC81
00DC31  1  A2 B8        		ldx #$B8
00DC33  1               loc_BC8B:
00DC33  1               
00DC33  1  A0 04        		ldy #4
00DC35  1  20 5F DC     		jsr loc_BCB7
00DC38  1  AD 26 02     		lda byte_226
00DC3B  1  09 40        		ora #$40
00DC3D  1  8D 22 02     		sta byte_222
00DC40  1  60           		rts
00DC41  1               RenderPlayerSub:
00DC41  1               
00DC41  1  85 07        		sta unk_7
00DC43  1  AD AD 03     		lda Player_Rel_XPos
00DC46  1  8D 55 07     		sta Player_Pos_ForScroll
00DC49  1  85 05        		sta byte_5
00DC4B  1  AD B8 03     		lda Player_Rel_YPos
00DC4E  1  85 02        		sta byte_2
00DC50  1  A5 33        		lda PlayerFacingDir
00DC52  1  85 03        		sta byte_3
00DC54  1  AD C4 03     		lda Player_SprAttrib
00DC57  1  85 04        		sta byte_4
00DC59  1  AE D5 06     		ldx PlayerGfxOffset
00DC5C  1  AC E4 06     		ldy Player_SprDataOffset
00DC5F  1               loc_BCB7:
00DC5F  1               
00DC5F  1  BD 9A DA     		lda PlayerGraphicsTable,x
00DC62  1  85 00        		sta TMP_0
00DC64  1  BD 9B DA     		lda PlayerGraphicsTable+1,x
00DC67  1  20 35 D8     		jsr DrawOneSpriteRow
00DC6A  1  C6 07        		dec unk_7
00DC6C  1  D0 F1        		bne loc_BCB7
00DC6E  1  60           		rts
00DC6F  1               sub_BCC7:
00DC6F  1               
00DC6F  1  A5 1D        		lda Player_State
00DC71  1  C9 03        		cmp #3
00DC73  1  F0 5C        		beq loc_BD29
00DC75  1  C9 02        		cmp #2
00DC77  1  F0 48        		beq loc_BD19
00DC79  1  C9 01        		cmp #1
00DC7B  1  D0 11        		bne loc_BCE6
00DC7D  1  AD 04 07     		lda SwimmingFlag
00DC80  1  D0 5B        		bne loc_BD35
00DC82  1  A0 06        		ldy #6
00DC84  1  AD 14 07     		lda CrouchingFlag
00DC87  1  D0 2C        		bne loc_BD0D
00DC89  1  A0 00        		ldy #0
00DC8B  1  4C B5 DC     		jmp loc_BD0D
00DC8E  1               loc_BCE6:
00DC8E  1               
00DC8E  1  A0 06        		ldy #6
00DC90  1  AD 14 07     		lda CrouchingFlag
00DC93  1  D0 20        		bne loc_BD0D
00DC95  1  A0 02        		ldy #2
00DC97  1  A5 57        		lda Player_X_Speed
00DC99  1  05 0C        		ora Left_Right_Buttons
00DC9B  1  F0 18        		beq loc_BD0D
00DC9D  1  AD 00 07     		lda Player_XSpeedAbsolute
00DCA0  1  C9 09        		cmp #9
00DCA2  1  90 25        		bcc loc_BD21
00DCA4  1  A5 45        		lda Player_MovingDir
00DCA6  1  25 33        		and PlayerFacingDir
00DCA8  1  D0 1F        		bne loc_BD21
00DCAA  1  A5 0E        		lda GameEngineSubroutine
00DCAC  1  C9 09        		cmp #9
00DCAE  1  B0 04        		bcs loc_BD0C
00DCB0  1  A9 80        		lda #$80
00DCB2  1  85 FD        		sta NoiseSoundQueue
00DCB4  1               loc_BD0C:
00DCB4  1               
00DCB4  1  C8           		iny
00DCB5  1               loc_BD0D:
00DCB5  1               
00DCB5  1  20 1E DD     		jsr sub_BD76
00DCB8  1  A9 00        		lda #0
00DCBA  1  8D 0D 07     		sta PlayerAnimCtrl
00DCBD  1  B9 8A DA     		lda PlayerGfxTblOffsets,y
00DCC0  1  60           		rts
00DCC1  1               loc_BD19:
00DCC1  1               
00DCC1  1  A0 04        		ldy #4
00DCC3  1  20 1E DD     		jsr sub_BD76
00DCC6  1  4C EF DC     		jmp sub_BD47
00DCC9  1               loc_BD21:
00DCC9  1               
00DCC9  1  A0 04        		ldy #4
00DCCB  1  20 1E DD     		jsr sub_BD76
00DCCE  1  4C F5 DC     		jmp loc_BD4D
00DCD1  1               loc_BD29:
00DCD1  1               
00DCD1  1  A0 05        		ldy #5
00DCD3  1  A5 9F        		lda Player_Y_Speed
00DCD5  1  F0 DE        		beq loc_BD0D
00DCD7  1  20 1E DD     		jsr sub_BD76
00DCDA  1  4C FA DC     		jmp loc_BD52
00DCDD  1               loc_BD35:
00DCDD  1               
00DCDD  1  A0 01        		ldy #1
00DCDF  1  20 1E DD     		jsr sub_BD76
00DCE2  1  AD 82 07     		lda JumpSwimTimer
00DCE5  1  0D 0D 07     		ora PlayerAnimCtrl
00DCE8  1  D0 0B        		bne loc_BD4D
00DCEA  1  A5 0A        		lda A_B_Buttons
00DCEC  1  0A           		asl
00DCED  1  B0 06        		bcs loc_BD4D
00DCEF  1               sub_BD47:
00DCEF  1               
00DCEF  1  AD 0D 07     		lda PlayerAnimCtrl
00DCF2  1  4C 5D DD     		jmp loc_BDB5
00DCF5  1               loc_BD4D:
00DCF5  1               
00DCF5  1  A9 03        		lda #3
00DCF7  1  4C FC DC     		jmp loc_BD54
00DCFA  1               loc_BD52:
00DCFA  1               
00DCFA  1  A9 02        		lda #2
00DCFC  1               loc_BD54:
00DCFC  1               
00DCFC  1  85 00        		sta TMP_0
00DCFE  1  20 EF DC     		jsr sub_BD47
00DD01  1  48           		pha
00DD02  1  AD 81 07     		lda PlayerAnimTimer
00DD05  1  D0 15        		bne loc_BD74
00DD07  1  AD 0C 07     		lda PlayerAnimTimerSet
00DD0A  1  8D 81 07     		sta PlayerAnimTimer
00DD0D  1  AD 0D 07     		lda PlayerAnimCtrl
00DD10  1  18           		clc
00DD11  1  69 01        		adc #1
00DD13  1  C5 00        		cmp TMP_0
00DD15  1  90 02        		bcc loc_BD71
00DD17  1  A9 00        		lda #0
00DD19  1               loc_BD71:
00DD19  1               
00DD19  1  8D 0D 07     		sta PlayerAnimCtrl
00DD1C  1               loc_BD74:
00DD1C  1               
00DD1C  1  68           		pla
00DD1D  1  60           		rts
00DD1E  1               sub_BD76:
00DD1E  1               
00DD1E  1  AD 54 07     		lda PlayerSize
00DD21  1  F0 05        		beq locret_BD80
00DD23  1  98           		tya
00DD24  1  18           		clc
00DD25  1  69 08        		adc #8
00DD27  1  A8           		tay
00DD28  1               locret_BD80:
00DD28  1               
00DD28  1  60           		rts
00DD29  1               ChangeSizeOffsetAdder:
00DD29  1  00           		.byte 0
00DD2A  1  01           		.byte 1
00DD2B  1  00           		.byte 0
00DD2C  1  01           		.byte 1
00DD2D  1  00           		.byte 0
00DD2E  1  01           		.byte 1
00DD2F  1  02           		.byte 2
00DD30  1  00           		.byte 0
00DD31  1  01           		.byte 1
00DD32  1  02           		.byte 2
00DD33  1  02           		.byte 2
00DD34  1  00           		.byte 0
00DD35  1  02           		.byte 2
00DD36  1  00           		.byte 0
00DD37  1  02           		.byte 2
00DD38  1  00           		.byte 0
00DD39  1  02           		.byte 2
00DD3A  1  00           		.byte 0
00DD3B  1  02           		.byte 2
00DD3C  1  00           		.byte 0
00DD3D  1               sub_BD95:
00DD3D  1               
00DD3D  1  AC 0D 07     		ldy PlayerAnimCtrl
00DD40  1  A5 09        		lda FrameCounter
00DD42  1  29 03        		and #3
00DD44  1  D0 0D        		bne loc_BDAB
00DD46  1  C8           		iny
00DD47  1  C0 0A        		cpy #$A
00DD49  1  90 05        		bcc loc_BDA8
00DD4B  1  A0 00        		ldy #0
00DD4D  1  8C 0B 07     		sty PlayerChangeSizeFlag
00DD50  1               loc_BDA8:
00DD50  1               
00DD50  1  8C 0D 07     		sty PlayerAnimCtrl
00DD53  1               loc_BDAB:
00DD53  1               
00DD53  1  AD 54 07     		lda PlayerSize
00DD56  1  D0 0C        		bne loc_BDBC
00DD58  1  B9 29 DD     		lda ChangeSizeOffsetAdder,y
00DD5B  1  A0 0F        		ldy #$F
00DD5D  1               loc_BDB5:
00DD5D  1               
00DD5D  1  0A           		asl
00DD5E  1  0A           		asl
00DD5F  1  0A           		asl
00DD60  1  79 8A DA     		adc PlayerGfxTblOffsets,y
00DD63  1  60           		rts
00DD64  1               loc_BDBC:
00DD64  1               
00DD64  1  98           		tya
00DD65  1  18           		clc
00DD66  1  69 0A        		adc #$A
00DD68  1  AA           		tax
00DD69  1  A0 09        		ldy #9
00DD6B  1  BD 29 DD     		lda ChangeSizeOffsetAdder,x
00DD6E  1  D0 02        		bne loc_BDCA
00DD70  1  A0 01        		ldy #1
00DD72  1               loc_BDCA:
00DD72  1               
00DD72  1  B9 8A DA     		lda PlayerGfxTblOffsets,y
00DD75  1  60           		rts
00DD76  1               ChkForPlayerAttrib:
00DD76  1               
00DD76  1  AC E4 06     		ldy Player_SprDataOffset
00DD79  1  A5 0E        		lda GameEngineSubroutine
00DD7B  1  C9 0B        		cmp #$B
00DD7D  1  F0 13        		beq loc_BDEA
00DD7F  1  AD D5 06     		lda PlayerGfxOffset
00DD82  1  C9 50        		cmp #$50
00DD84  1  F0 1E        		beq loc_BDFC
00DD86  1  C9 B8        		cmp #$B8
00DD88  1  F0 1A        		beq loc_BDFC
00DD8A  1  C9 C0        		cmp #$C0
00DD8C  1  F0 16        		beq loc_BDFC
00DD8E  1  C9 C8        		cmp #$C8
00DD90  1  D0 24        		bne locret_BE0E
00DD92  1               loc_BDEA:
00DD92  1               
00DD92  1  B9 12 02     		lda $212,y
00DD95  1  29 3F        		and #$3F
00DD97  1  99 12 02     		sta $212,y
00DD9A  1  B9 16 02     		lda $216,y
00DD9D  1  29 3F        		and #$3F
00DD9F  1  09 40        		ora #$40
00DDA1  1  99 16 02     		sta $216,y
00DDA4  1               loc_BDFC:
00DDA4  1               
00DDA4  1  B9 1A 02     		lda $21A,y
00DDA7  1  29 3F        		and #$3F
00DDA9  1  99 1A 02     		sta $21A,y
00DDAC  1  B9 1E 02     		lda $21E,y
00DDAF  1  29 3F        		and #$3F
00DDB1  1  09 40        		ora #$40
00DDB3  1  99 1E 02     		sta $21E,y
00DDB6  1               locret_BE0E:
00DDB6  1               
00DDB6  1  60           		rts
00DDB7  1               RelativePlayerPosition:
00DDB7  1               
00DDB7  1  A2 00        		ldx #0
00DDB9  1  A0 00        		ldy #0
00DDBB  1  4C CF DD     		jmp RelWOfs
00DDBE  1               loc_BE16:
00DDBE  1               
00DDBE  1  A0 01        		ldy #1
00DDC0  1  20 35 DE     		jsr GetProperObjOffset
00DDC3  1  A0 03        		ldy #3
00DDC5  1  4C CF DD     		jmp RelWOfs
00DDC8  1               RelativeFireballPosition:
00DDC8  1               
00DDC8  1  A0 00        		ldy #0
00DDCA  1  20 35 DE     		jsr GetProperObjOffset
00DDCD  1  A0 02        		ldy #2
00DDCF  1               RelWOfs:
00DDCF  1               
00DDCF  1  20 FE DD     		jsr GetObjRelativePosition
00DDD2  1  A6 08        		ldx ObjectOffset
00DDD4  1  60           		rts
00DDD5  1               RelativeMiscPosition:
00DDD5  1               
00DDD5  1  A0 02        		ldy #2
00DDD7  1  20 35 DE     		jsr GetProperObjOffset
00DDDA  1  A0 06        		ldy #6
00DDDC  1  4C CF DD     		jmp RelWOfs
00DDDF  1               RelativeEnemyPosition:
00DDDF  1               
00DDDF  1  A9 01        		lda #1
00DDE1  1  A0 01        		ldy #1
00DDE3  1  4C F2 DD     		jmp loc_BE4A
00DDE6  1               loc_BE3E:
00DDE6  1               
00DDE6  1  A9 09        		lda #9
00DDE8  1  A0 04        		ldy #4
00DDEA  1  20 F2 DD     		jsr loc_BE4A
00DDED  1  E8           		inx
00DDEE  1  E8           		inx
00DDEF  1  A9 09        		lda #9
00DDF1  1  C8           		iny
00DDF2  1               loc_BE4A:
00DDF2  1               
00DDF2  1  86 00        		stx TMP_0
00DDF4  1  18           		clc
00DDF5  1  65 00        		adc TMP_0
00DDF7  1  AA           		tax
00DDF8  1  20 FE DD     		jsr GetObjRelativePosition
00DDFB  1  A6 08        		ldx ObjectOffset
00DDFD  1  60           		rts
00DDFE  1               GetObjRelativePosition:
00DDFE  1               
00DDFE  1  B5 CE        		lda SprObject_Y_Position,x
00DE00  1  99 B8 03     		sta Player_Rel_YPos,y
00DE03  1  B5 86        		lda Player_X_Position,x
00DE05  1  38           		sec
00DE06  1  ED 1C 07     		sbc ScreenLeft_X_Pos
00DE09  1  99 AD 03     		sta Player_Rel_XPos,y
00DE0C  1  60           		rts
00DE0D  1               GetPlayerOffscreenBits:
00DE0D  1               
00DE0D  1  A2 00        		ldx #0
00DE0F  1  A0 00        		ldy #0
00DE11  1  4C 4D DE     		jmp GetOffScreenBitsSet
00DE14  1               GetFireballOffscreenBits:
00DE14  1               
00DE14  1  A0 00        		ldy #0
00DE16  1  20 35 DE     		jsr GetProperObjOffset
00DE19  1  A0 02        		ldy #2
00DE1B  1  4C 4D DE     		jmp GetOffScreenBitsSet
00DE1E  1               sub_BE76:
00DE1E  1               
00DE1E  1  A0 01        		ldy #1
00DE20  1  20 35 DE     		jsr GetProperObjOffset
00DE23  1  A0 03        		ldy #3
00DE25  1  4C 4D DE     		jmp GetOffScreenBitsSet
00DE28  1               GetMiscOffscreenBits:
00DE28  1               
00DE28  1  A0 02        		ldy #2
00DE2A  1  20 35 DE     		jsr GetProperObjOffset
00DE2D  1  A0 06        		ldy #6
00DE2F  1  4C 4D DE     		jmp GetOffScreenBitsSet
00DE32  1               ObjOffsetData:
00DE32  1  07           		.byte 7
00DE33  1  16           		.byte $16
00DE34  1  0D           		.byte $D
00DE35  1               GetProperObjOffset:
00DE35  1               
00DE35  1  8A           		txa
00DE36  1  18           		clc
00DE37  1  79 32 DE     		adc ObjOffsetData,y
00DE3A  1  AA           		tax
00DE3B  1  60           		rts
00DE3C  1               GetEnemyOffscreenBits:
00DE3C  1               
00DE3C  1  A9 01        		lda #1
00DE3E  1  A0 01        		ldy #1
00DE40  1  4C 47 DE     		jmp SetOffscrBitsOffset
00DE43  1               loc_BE9B:
00DE43  1               
00DE43  1  A9 09        		lda #9
00DE45  1  A0 04        		ldy #4
00DE47  1               SetOffscrBitsOffset:
00DE47  1               
00DE47  1  86 00        		stx TMP_0
00DE49  1  18           		clc
00DE4A  1  65 00        		adc TMP_0
00DE4C  1  AA           		tax
00DE4D  1               GetOffScreenBitsSet:
00DE4D  1               
00DE4D  1  98           		tya
00DE4E  1  48           		pha
00DE4F  1  20 64 DE     		jsr sub_BEBC
00DE52  1  0A           		asl
00DE53  1  0A           		asl
00DE54  1  0A           		asl
00DE55  1  0A           		asl
00DE56  1  05 00        		ora TMP_0
00DE58  1  85 00        		sta TMP_0
00DE5A  1  68           		pla
00DE5B  1  A8           		tay
00DE5C  1  A5 00        		lda TMP_0
00DE5E  1  99 D0 03     		sta Player_OffscreenBits,y
00DE61  1  A6 08        		ldx ObjectOffset
00DE63  1  60           		rts
00DE64  1               sub_BEBC:
00DE64  1               
00DE64  1  20 83 DE     		jsr GetXOffscreenBits
00DE67  1  4A           		lsr
00DE68  1  4A           		lsr
00DE69  1  4A           		lsr
00DE6A  1  4A           		lsr
00DE6B  1  85 00        		sta TMP_0
00DE6D  1  4C C6 DE     		jmp GetYOffscreenBits
00DE70  1               XOffscreenBitsData:
00DE70  1  7F           		.byte $7F
00DE71  1  3F           		.byte $3F
00DE72  1  1F           		.byte $1F
00DE73  1  0F           		.byte $F
00DE74  1  07           		.byte 7
00DE75  1  03           		.byte 3
00DE76  1  01           		.byte 1
00DE77  1  00           		.byte 0
00DE78  1  80           		.byte $80
00DE79  1  C0           		.byte $C0
00DE7A  1  E0           		.byte $E0
00DE7B  1  F0           		.byte $F0
00DE7C  1  F8           		.byte $F8
00DE7D  1  FC           		.byte $FC
00DE7E  1  FE           		.byte $FE
00DE7F  1  FF           		.byte $FF
00DE80  1               DefaultXOnscreenOfs:
00DE80  1  07           		.byte 7
00DE81  1  0F           		.byte $F
00DE82  1  07           		.byte 7
00DE83  1               GetXOffscreenBits:
00DE83  1               
00DE83  1  86 04        		stx byte_4
00DE85  1  A0 01        		ldy #1
00DE87  1               loc_BEDF:
00DE87  1               
00DE87  1  B9 1C 07     		lda ScreenLeft_X_Pos,y
00DE8A  1  38           		sec
00DE8B  1  F5 86        		sbc Player_X_Position,x
00DE8D  1  85 07        		sta unk_7
00DE8F  1  B9 1A 07     		lda ScreenLeft_PageLoc,y
00DE92  1  F5 6D        		sbc Player_PageLoc,x
00DE94  1  BE 80 DE     		ldx DefaultXOnscreenOfs,y
00DE97  1  C9 00        		cmp #0
00DE99  1  30 10        		bmi loc_BF03
00DE9B  1  BE 81 DE     		ldx DefaultXOnscreenOfs+1,y
00DE9E  1  C9 01        		cmp #1
00DEA0  1  10 09        		bpl loc_BF03
00DEA2  1  A9 38        		lda #$38
00DEA4  1  85 06        		sta byte_6
00DEA6  1  A9 08        		lda #8
00DEA8  1  20 FA DE     		jsr DividePDiff
00DEAB  1               loc_BF03:
00DEAB  1               
00DEAB  1  BD 70 DE     		lda XOffscreenBitsData,x
00DEAE  1  A6 04        		ldx byte_4
00DEB0  1  C9 00        		cmp #0
00DEB2  1  D0 03        		bne locret_BF0F
00DEB4  1  88           		dey
00DEB5  1  10 D0        		bpl loc_BEDF
00DEB7  1               locret_BF0F:
00DEB7  1               
00DEB7  1  60           		rts
00DEB8  1               YOffscreenBitsData:
00DEB8  1  0F           		.byte $F
00DEB9  1  07           		.byte 7
00DEBA  1  03           		.byte 3
00DEBB  1  01           		.byte 1
00DEBC  1  00           		.byte 0
00DEBD  1               word_BF15:
00DEBD  1  08 0C        		.word $C08
00DEBF  1  0E           		.byte $E
00DEC0  1  00           		.byte 0
00DEC1  1               DefaultYOnscreenOfs:
00DEC1  1  04           		.byte 4
00DEC2  1  00           		.byte 0
00DEC3  1  04           		.byte 4
00DEC4  1               HighPosUnitData:
00DEC4  1  00           		.byte 0
00DEC5  1  FF           		.byte $FF
00DEC6  1               GetYOffscreenBits:
00DEC6  1               
00DEC6  1  86 04        		stx byte_4
00DEC8  1  A0 01        		ldy #1
00DECA  1               loc_BF22:
00DECA  1               
00DECA  1  B9 C4 DE     		lda HighPosUnitData,y
00DECD  1  38           		sec
00DECE  1  F5 CE        		sbc SprObject_Y_Position,x
00DED0  1  85 07        		sta unk_7
00DED2  1  A9 01        		lda #1
00DED4  1  F5 B5        		sbc Player_Y_HighPos,x
00DED6  1  BE C1 DE     		ldx DefaultYOnscreenOfs,y
00DED9  1  C9 00        		cmp #0
00DEDB  1  30 10        		bmi loc_BF45
00DEDD  1  BE C2 DE     		ldx DefaultYOnscreenOfs+1,y
00DEE0  1  C9 01        		cmp #1
00DEE2  1  10 09        		bpl loc_BF45
00DEE4  1  A9 20        		lda #$20
00DEE6  1  85 06        		sta byte_6
00DEE8  1  A9 04        		lda #4
00DEEA  1  20 FA DE     		jsr DividePDiff
00DEED  1               loc_BF45:
00DEED  1               
00DEED  1  BD B8 DE     		lda YOffscreenBitsData,x
00DEF0  1  A6 04        		ldx byte_4
00DEF2  1  C9 00        		cmp #0
00DEF4  1  D0 03        		bne locret_BF51
00DEF6  1  88           		dey
00DEF7  1  10 D1        		bpl loc_BF22
00DEF9  1               locret_BF51:
00DEF9  1               
00DEF9  1  60           		rts
00DEFA  1               DividePDiff:
00DEFA  1               
00DEFA  1  85 05        		sta byte_5
00DEFC  1  A5 07        		lda unk_7
00DEFE  1  C5 06        		cmp byte_6
00DF00  1  B0 0C        		bcs locret_BF66
00DF02  1  4A           		lsr
00DF03  1  4A           		lsr
00DF04  1  4A           		lsr
00DF05  1  29 07        		and #7
00DF07  1  C0 01        		cpy #1
00DF09  1  B0 02        		bcs loc_BF65
00DF0B  1  65 05        		adc byte_5
00DF0D  1               loc_BF65:
00DF0D  1               
00DF0D  1  AA           		tax
00DF0E  1               locret_BF66:
00DF0E  1               
00DF0E  1  60           		rts
00DF0F  1               DrawSpriteObject:
00DF0F  1               
00DF0F  1  A5 03        		lda byte_3
00DF11  1  4A           		lsr
00DF12  1  4A           		lsr
00DF13  1  A5 00        		lda TMP_0
00DF15  1  90 0C        		bcc loc_BF7B
00DF17  1  99 05 02     		sta $205,y
00DF1A  1  A5 01        		lda TMP_1
00DF1C  1  99 01 02     		sta $201,y
00DF1F  1  A9 40        		lda #$40
00DF21  1  D0 0A        		bne loc_BF85
00DF23  1               loc_BF7B:
00DF23  1               
00DF23  1  99 01 02     		sta $201,y
00DF26  1  A5 01        		lda TMP_1
00DF28  1  99 05 02     		sta $205,y
00DF2B  1  A9 00        		lda #0
00DF2D  1               loc_BF85:
00DF2D  1               
00DF2D  1  05 04        		ora byte_4
00DF2F  1  99 02 02     		sta $202,y
00DF32  1  99 06 02     		sta $206,y
00DF35  1  A5 02        		lda byte_2
00DF37  1  99 00 02     		sta $200,y
00DF3A  1  99 04 02     		sta $204,y
00DF3D  1  A5 05        		lda byte_5
00DF3F  1  99 03 02     		sta $203,y
00DF42  1  18           		clc
00DF43  1  69 08        		adc #8
00DF45  1  99 07 02     		sta $207,y
00DF48  1  A5 02        		lda byte_2
00DF4A  1  18           		clc
00DF4B  1  69 08        		adc #8
00DF4D  1  85 02        		sta byte_2
00DF4F  1  98           		tya
00DF50  1  18           		clc
00DF51  1  69 08        		adc #8
00DF53  1  A8           		tay
00DF54  1  E8           		inx
00DF55  1  E8           		inx
00DF56  1  60           		rts
00DF57  1  FF           		.byte $FF
00DF58  1               
00DF58  1               TitleScreenMode:
00DF58  1  AD 72 07     		lda OperMode_Task
00DF5B  1  20 FC 8C     		jsr JumpEngine
00DF5E  1  EF DF        		.word TitleInitializeFdsLoads
00DF60  1  8D E0        		.word PrepareDrawTitleScreen
00DF62  1  8E 85        		.word ScreenRoutines
00DF64  1  A8 E0        		.word PrimaryGameSetup
00DF66  1  83 DF        		.word RunTitleScreen
00DF68  1  CA DF        		.word FinalizeTitleScreen
00DF6A  1               
00DF6A  1               IsBigWorld:
00DF6A  1  01 00 01 00  		.byte 1, 0, 1, 0
00DF6E  1  01 01 00 00  		.byte 1, 1, 0, 0
00DF72  1  00           		.byte 0
00DF73  1  01 01 00 00  		.byte 1, 1, 0, 0
00DF77  1               
00DF77  1               NoGoTime:
00DF77  1  A9 00        		lda #0
00DF79  1  8D EC 07     		sta IsWindy
00DF7C  1  8D FC 06     		sta SavedJoypad1Bits
00DF7F  1  20 41 9A     		jsr GameCoreRoutine_RW
00DF82  1  60           		rts
00DF83  1               
00DF83  1               RunTitleScreen:
00DF83  1  20 58 FE     		jsr Enter_PracticeTitleMenu
00DF86  1  AD 72 07     		lda OperMode_Task
00DF89  1  C9 05        		cmp #5
00DF8B  1  D0 EA        		bne NoGoTime
00DF8D  1  AE 5C 07     		ldx LevelNumber
00DF90  1  AC 5F 07     		ldy WorldNumber
00DF93  1  B9 6A DF     		lda IsBigWorld, y
00DF96  1  F0 05        		beq @save_area
00DF98  1  E0 02        		cpx #2
00DF9A  1  30 01        		bmi @save_area
00DF9C  1  E8           		inx
00DF9D  1               @save_area:
00DF9D  1  8E 60 07     		stx AreaNumber
00DFA0  1               
00DFA0  1  A9 00        		lda #$00
00DFA2  1  8D F7 07     		sta WorldsCompleted
00DFA5  1  C0 09        		cpy #$09
00DFA7  1  30 09        		bmi @not_extended
00DFA9  1  98           		tya
00DFAA  1  38           		sec
00DFAB  1  E9 09        		sbc #9
00DFAD  1  8D 5F 07     		sta WorldNumber
00DFB0  1  A9 01        		lda #$01
00DFB2  1               @not_extended:
00DFB2  1  8D FB 07     		sta IsPlayingExtendedWorlds
00DFB5  1  20 B8 FE     		jsr Enter_LL_WriteHalfwayPages
00DFB8  1               		;
00DFB8  1               		; Start it...
00DFB8  1               		;
00DFB8  1  20 B0 FE     		jsr Enter_LL_LoadAreaPointer
00DFBB  1  EE 5D 07     		inc Hidden1UpFlag
00DFBE  1  EE 57 07     		inc FetchNewGameTimerFlag
00DFC1  1  EE 70 07     		inc OperMode
00DFC4  1  A9 00        		lda #$00
00DFC6  1  8D 72 07     		sta OperMode_Task
00DFC9  1               @not_running:
00DFC9  1  60           		rts
00DFCA  1               
00DFCA  1               FinalizeTitleScreen:
00DFCA  1  AD FC 07     		lda FdsOperTask
00DFCD  1  20 FC 8C     		jsr JumpEngine
00DFD0  1  49 E0        		.word PrepareFdsLoad
00DFD2  1  DA DF        		.word SwapToGameData
00DFD4  1  59 E0        		.word WaitFDSReady
00DFD6  1  65 E0        		.word MoreFDSStuff
00DFD8  1  68 E0        		.word FDSResetZero
00DFDA  1               
00DFDA  1               SwapToGameData:
00DFDA  1               		;
00DFDA  1               		; Unresolved : This does bank shit based on isextended
00DFDA  1               		;
00DFDA  1  20 B0 FE     		jsr Enter_LL_LoadAreaPointer
00DFDD  1  EE 5D 07     		inc Hidden1UpFlag
00DFE0  1  EE 57 07     		inc FetchNewGameTimerFlag
00DFE3  1  EE 70 07     		inc OperMode
00DFE6  1  A9 00        		lda #0
00DFE8  1  8D FC 07     		sta FdsOperTask
00DFEB  1  8D 72 07     		sta OperMode_Task
00DFEE  1  60           		rts
00DFEF  1               
00DFEF  1               TitleInitializeFdsLoads:
00DFEF  1  AD FC 07     		lda FdsOperTask
00DFF2  1  20 FC 8C     		jsr JumpEngine
00DFF5  1  49 E0        		.word PrepareFdsLoad
00DFF7  1  FF DF        		.word LoadCorrectWorldFiles
00DFF9  1  59 E0        		.word WaitFDSReady
00DFFB  1  65 E0        		.word MoreFDSStuff
00DFFD  1  68 E0        		.word FDSResetZero
00DFFF  1               
00DFFF  1               LoadCorrectWorldFiles:
00DFFF  1  4C 12 E0     		jmp FdsOperationDone
00E002  1               
00E002  1               LoadCorrectData:
00E002  1  AD FC 07     		lda FdsOperTask
00E005  1  20 FC 8C     		jsr JumpEngine
00E008  1  49 E0        		.word PrepareFdsLoad
00E00A  1  12 E0        		.word LoadBaseOnWorld
00E00C  1  59 E0        		.word WaitFDSReady
00E00E  1  65 E0        		.word MoreFDSStuff
00E010  1  68 E0        		.word FDSResetZero
00E012  1               
00E012  1               LoadBaseOnWorld:
00E012  1               FdsOperationDone:
00E012  1  A9 00        		lda #0
00E014  1  8D FC 07     		sta FdsOperTask
00E017  1               Increase_OperMode_Task:
00E017  1  EE 72 07     		inc OperMode_Task
00E01A  1  60           		rts
00E01B  1               
00E01B  1               InitializeWorldEndTimer:
00E01B  1  A9 10        		lda #$10
00E01D  1  8D A1 07     		sta WorldEndTimer
00E020  1  D0 F5        		bne Increase_OperMode_Task
00E022  1               
00E022  1               CheckWorldEndTimer:
00E022  1  AD A1 07     		lda WorldEndTimer
00E025  1  F0 F0        		beq Increase_OperMode_Task
00E027  1  60           		rts
00E028  1               
00E028  1               FdsLoadFile_SM2DATA3:
00E028  1  AD FC 07     		lda FdsOperTask
00E02B  1  20 FC 8C     		jsr JumpEngine
00E02E  1  49 E0        		.word PrepareFdsLoad
00E030  1  38 E0        		.word LoadFdsFileIndex2
00E032  1  59 E0        		.word WaitFDSReady
00E034  1  65 E0        		.word MoreFDSStuff
00E036  1  68 E0        		.word FDSResetZero
00E038  1               
00E038  1               LoadFdsFileIndex2:
00E038  1  20 11 8D     		jsr InitializeNameTables
00E03B  1  20 12 E0     		jsr FdsOperationDone
00E03E  1  4C FD E6     		jmp SetMarioName
00E041  1               
00E041  1               
00E041  1               byte_C10B:
00E041  1  3F           		.byte $3F
00E042  1  00           		.byte 0
00E043  1  04           		.byte 4
00E044  1  0F           		.byte $F
00E045  1  30           		.byte $30
00E046  1  30           		.byte $30
00E047  1  0F           		.byte $F
00E048  1  00           		.byte 0
00E049  1               
00E049  1               PrepareFdsLoad:
00E049  1  A9 00        		lda #0
00E04B  1               ;		sta Mirror_PPU_CTRL_REG2
00E04B  1               ;		sta PPU_CTRL_REG2
00E04B  1  8D 22 07     		sta IRQUpdateFlag
00E04E  1  EE 74 07     		inc DisableScreenFlag
00E051  1  A9 1A        		lda #$1A
00E053  1  8D 73 07     		sta VRAM_Buffer_AddrCtrl
00E056  1  4C 61 E0     		jmp TitleNextTask
00E059  1               
00E059  1               WaitFDSReady:
00E059  1               		;
00E059  1               		; TODO: This entire callback can be killed.
00E059  1               		;
00E059  1  A9 00        		lda #0
00E05B  1  8D 7A 07     		sta UseNtBase2400
00E05E  1  8D 74 07     		sta DisableScreenFlag
00E061  1               TitleNextTask:
00E061  1  EE FC 07     		inc FdsOperTask
00E064  1               TitleExitNow:
00E064  1  60           		rts
00E065  1               
00E065  1               MoreFDSStuff:
00E065  1               		; used to wait for drive status
00E065  1  4C 61 E0     		jmp TitleNextTask
00E068  1               
00E068  1               FDSResetZero:
00E068  1  A9 00        		lda #0
00E06A  1  8D FC 07     		sta FdsOperTask
00E06D  1  60           		rts
00E06E  1               
00E06E  1               SWAPDATA_AreaDataOfsLoopback:
00E06E  1  0C           		.byte $C
00E06F  1  0C           		.byte $C
00E070  1  42           		.byte $42
00E071  1  42           		.byte $42
00E072  1  10           		.byte $10
00E073  1  10           		.byte $10
00E074  1  30           		.byte $30
00E075  1  30           		.byte $30
00E076  1  06           		.byte 6
00E077  1  0C           		.byte $C
00E078  1  54           		.byte $54
00E079  1  06           		.byte 6
00E07A  1               
00E07A  1               GameMenuRoutine_NEW:
00E07A  1               GameMenuRoutineInner_NEW:
00E07A  1  60           		rts
00E07B  1               
00E07B  1               NothingOrMushroomTile:
00E07B  1  CE           		.byte $CE
00E07C  1  24           		.byte $24
00E07D  1  CE           		.byte $CE
00E07E  1               
00E07E  1               ShortNextOprTask:
00E07E  1  4C EA 83     		jmp Next_OperMode_Task
00E081  1               
00E081  1               ClearBuffersDrawIcon:
00E081  1  AD 70 07     		lda OperMode
00E084  1  D0 F8        		bne ShortNextOprTask
00E086  1  EE 3C 07     		inc ScreenRoutineTask
00E089  1  60           		rts
00E08A  1               
00E08A  1               WriteTopScore:
00E08A  1  4C EA 83     		jmp Next_OperMode_Task
00E08D  1               
00E08D  1               PrepareDrawTitleScreen:
00E08D  1  A9 00        		lda #0
00E08F  1  8D FB 07     		sta IsPlayingExtendedWorlds
00E092  1  8D 53 07     		sta IsPlayingLuigi
00E095  1  A0 6F        		ldy #$6F
00E097  1  20 5A 8F     		jsr InitializeMemory
00E09A  1  A0 1F        		ldy #$1F
00E09C  1               loc_C5CA:
00E09C  1  99 B0 07     		sta $7B0,y
00E09F  1  88           		dey
00E0A0  1  10 FA        		bpl loc_C5CA
00E0A2  1               
00E0A2  1               PrepareInitializeArea:
00E0A2  1  20 B0 FE     		jsr Enter_LL_LoadAreaPointer
00E0A5  1  4C 84 8E     		jmp InitializeArea
00E0A8  1               
00E0A8  1               PrimaryGameSetup:
00E0A8  1  A9 01        		lda #1
00E0AA  1  8D 57 07     		sta FetchNewGameTimerFlag
00E0AD  1  8D 54 07     		sta PlayerSize
00E0B0  1  4C 04 8F     		jmp SecondaryGameSetup
00E0B3  1               
00E0B3  1               MarioOrLuigiColors:
00E0B3  1  22 16 27 18  		.byte $22, $16, $27, $18 ; Mario
00E0B7  1  22 30 27 19  		.byte $22, $30, $27, $19 ; Luigi
00E0BB  1               NameOffsets:
00E0BB  1  04           		.byte 4
00E0BC  1  09           		.byte 9
00E0BD  1               
00E0BD  1               PatchToMarioOrLuigi:
00E0BD  1  AC 53 07     		ldy IsPlayingLuigi
00E0C0  1  B9 BB E0     		lda NameOffsets,y
00E0C3  1  48           		pha
00E0C4  1  C8           		iny
00E0C5  1  84 00        		sty TMP_0
00E0C7  1               loc_C609:
00E0C7  1  68           		pla
00E0C8  1  38           		sec
00E0C9  1  E5 00        		sbc TMP_0
00E0CB  1  A8           		tay
00E0CC  1  A2 03        		ldx #3
00E0CE  1               loc_C620:
00E0CE  1               
00E0CE  1  B9 B3 E0     		lda MarioOrLuigiColors,y
00E0D1  1  9D 17 64     		sta WRAM_PlayerColors,x
00E0D4  1  88           		dey
00E0D5  1  CA           		dex
00E0D6  1  10 F6        		bpl loc_C620
00E0D8  1  60           		rts
00E0D9  1               
00E0D9  1               TitleScreenData:
00E0D9  1  20 84        		.byte $20, $84
00E0DB  1  01           		.byte $01
00E0DC  1  44           		.byte $44
00E0DD  1               
00E0DD  1  20 85        		.byte $20, $85
00E0DF  1  57           		.byte $57
00E0E0  1  48           		.byte $48
00E0E1  1               
00E0E1  1  20 9C        		.byte $20, $9C
00E0E3  1  01           		.byte $01
00E0E4  1  49           		.byte $49
00E0E5  1               
00E0E5  1  20 A4        		.byte $20, $A4
00E0E7  1  C9           		.byte $C9
00E0E8  1  46           		.byte $46
00E0E9  1               
00E0E9  1  20 A5        		.byte $20, $A5
00E0EB  1  57           		.byte $57
00E0EC  1  26           		.byte $26
00E0ED  1               
00E0ED  1  20 BC        		.byte $20, $BC
00E0EF  1  C9           		.byte $C9
00E0F0  1  4A           		.byte $4A
00E0F1  1               
00E0F1  1  20 A5        		.byte $20, $A5
00E0F3  1  0A           		.byte $0A
00E0F4  1  D0 D1 D8 D8  		.byte $D0, $D1, $D8, $D8, $DE, $D1, $D0, $DA, $DE, $D1
00E0F8  1  DE D1 D0 DA  
00E0FC  1  DE D1        
00E0FE  1               
00E0FE  1  20 C5        		.byte $20, $C5
00E100  1  17           		.byte $17
00E101  1  D2 D3 DB DB  		.byte $D2, $D3, $DB, $DB, $DB, $D9, $DB, $DC
00E105  1  DB D9 DB DC  
00E109  1  DB DF 26 26  		.byte $DB, $DF, $26, $26, $26, $26, $26, $26
00E10D  1  26 26 26 26  
00E111  1  26 26 26 26  		.byte $26, $26, $26, $26, $26, $26, $26
00E115  1  26 26 26     
00E118  1               
00E118  1  20 E5        		.byte $20, $E5
00E11A  1  17           		.byte $17
00E11B  1  D4 D5 D4 D9  		.byte $D4, $D5, $D4, $D9, $DB, $E2, $D4, $DA
00E11F  1  DB E2 D4 DA  
00E123  1  DB E0 26 26  		.byte $DB, $E0, $26, $26, $26, $26, $26, $26
00E127  1  26 26 26 26  
00E12B  1  26 26 26 26  		.byte $26, $26, $26, $26, $26, $26, $26
00E12F  1  26 26 26     
00E132  1               
00E132  1  21 05        		.byte $21, $05
00E134  1  57           		.byte $57
00E135  1  26           		.byte $26
00E136  1               
00E136  1  21 05        		.byte $21, $05
00E138  1  0A           		.byte $0A
00E139  1  D6 D7 D6 D7  		.byte $D6, $D7, $D6, $D7, $E1, $26, $D6, $DD, $E1, $E1
00E13D  1  E1 26 D6 DD  
00E141  1  E1 E1        
00E143  1               
00E143  1  21 25        		.byte $21, $25
00E145  1  17           		.byte $17
00E146  1  D0 E8 D1 D0  		.byte $D0, $E8, $D1, $D0, $D1, $DE, $D1, $D8
00E14A  1  D1 DE D1 D8  
00E14E  1  D0 D1 26 DE  		.byte $D0, $D1, $26, $DE, $D1, $DE, $D1, $D0
00E152  1  D1 DE D1 D0  
00E156  1  D1 D0 D1 26  		.byte $D1, $D0, $D1, $26, $26, $D0, $D1
00E15A  1  26 D0 D1     
00E15D  1               
00E15D  1  21 45        		.byte $21, $45
00E15F  1  17           		.byte $17
00E160  1  DB 42 42 DB  		.byte $DB, $42, $42, $DB, $42, $DB, $42, $DB
00E164  1  42 DB 42 DB  
00E168  1  DB 42 26 DB  		.byte $DB, $42, $26, $DB, $42, $DB, $42, $DB
00E16C  1  42 DB 42 DB  
00E170  1  42 DB 42 26  		.byte $42, $DB, $42, $26, $26, $DB, $42
00E174  1  26 DB 42     
00E177  1               
00E177  1  21 65        		.byte $21, $65
00E179  1  46           		.byte $46
00E17A  1  DB           		.byte $DB
00E17B  1               
00E17B  1  21 6B        		.byte $21, $6B
00E17D  1  11           		.byte $11
00E17E  1  DF DB DB DB  		.byte $DF, $DB, $DB, $DB, $26, $DB, $DF, $DB
00E182  1  26 DB DF DB  
00E186  1  DF DB DB E4  		.byte $DF, $DB, $DB, $E4, $E5, $26, $26, $EC
00E18A  1  E5 26 26 EC  
00E18E  1  ED           		.byte $ED
00E18F  1               
00E18F  1  21 85        		.byte $21, $85
00E191  1  17           		.byte $17
00E192  1  DB DB DB DE  		.byte $DB, $DB, $DB, $DE, $43, $DB, $E0, $DB
00E196  1  43 DB E0 DB  
00E19A  1  DB DB 26 DB  		.byte $DB, $DB, $26, $DB, $E3, $DB, $E0, $DB
00E19E  1  E3 DB E0 DB  
00E1A2  1  DB E6 E3 26  		.byte $DB, $E6, $E3, $26, $26, $EE, $EF
00E1A6  1  26 EE EF     
00E1A9  1               
00E1A9  1  21 A5        		.byte $21, $A5
00E1AB  1  17           		.byte $17
00E1AC  1  DB DB DB DB  		.byte $DB, $DB, $DB, $DB, $42, $DB, $DB, $DB
00E1B0  1  42 DB DB DB  
00E1B4  1  D4 D9 26 DB  		.byte $D4, $D9, $26, $DB, $D9, $DB, $DB, $D4
00E1B8  1  D9 DB DB D4  
00E1BC  1  D9 D4 D9 E7  		.byte $D9, $D4, $D9, $E7, $26, $DE, $DA
00E1C0  1  26 DE DA     
00E1C3  1               
00E1C3  1  21 C4        		.byte $21, $C4
00E1C5  1  19           		.byte $19
00E1C6  1  5F 95 95 95  		.byte $5F, $95, $95, $95, $95, $95, $95, $95
00E1CA  1  95 95 95 95  
00E1CE  1  95 97 98 78  		.byte $95, $97, $98, $78, $95, $96, $95, $95
00E1D2  1  95 96 95 95  
00E1D6  1  97 98 97 98  		.byte $97, $98, $97, $98, $95, $78, $95, $F0
00E1DA  1  95 78 95 F0  
00E1DE  1  7A           		.byte $7A
00E1DF  1               
00E1DF  1  21 EF        		.byte $21, $EF
00E1E1  1  0E           		.byte $0E
00E1E2  1  CF 01 09 08  		.byte $CF, $01, $09, $08, $06, $24, $17, $12
00E1E6  1  06 24 17 12  
00E1EA  1  17 1D 0E 17  		.byte $17, $1D, $0E, $17, $0D, $18
00E1EE  1  0D 18        
00E1F0  1               
00E1F0  1  23 C9        		.byte $23, $C9
00E1F2  1  47           		.byte $47
00E1F3  1  55           		.byte $55
00E1F4  1               
00E1F4  1  23 D1        		.byte $23, $D1
00E1F6  1  47           		.byte $47
00E1F7  1  55           		.byte $55
00E1F8  1               
00E1F8  1  23 D9        		.byte $23, $D9
00E1FA  1  47           		.byte $47
00E1FB  1  55           		.byte $55
00E1FC  1               
00E1FC  1  23 CC        		.byte $23, $CC
00E1FE  1  43           		.byte $43
00E1FF  1  F5           		.byte $F5
00E200  1               
00E200  1  23 D6        		.byte $23, $D6
00E202  1  01           		.byte $01
00E203  1  DD           		.byte $DD
00E204  1  23           		.byte $23
00E205  1  DE           		.byte $DE
00E206  1  01           		.byte 1
00E207  1  5D           		.byte $5D
00E208  1  23           		.byte $23
00E209  1  E2           		.byte $E2
00E20A  1  04           		.byte 4
00E20B  1  55           		.byte $55
00E20C  1  AA           		.byte $AA
00E20D  1  AA           		.byte $AA
00E20E  1  AA           		.byte $AA
00E20F  1  23           		.byte $23
00E210  1  EA           		.byte $EA
00E211  1  04           		.byte 4
00E212  1  95           		.byte $95
00E213  1  AA           		.byte $AA
00E214  1  AA           		.byte $AA
00E215  1  2A           		.byte $2A
00E216  1  00           		.byte 0
00E217  1  FF           		.byte $FF
00E218  1  FF           		.byte $FF
00E219  1               
00E219  1               VerticalPipeUpsideDown:
00E219  1  A9 01        		lda #1
00E21B  1  48           		pha
00E21C  1  D0 03        		bne do_create_it_or_something
00E21E  1               VerticalPipeUpsideDown_4:
00E21E  1  A9 04        		lda #4
00E220  1  48           		pha
00E221  1               do_create_it_or_something:
00E221  1  20 5B 97     		jsr GetPipeHeight
00E224  1  68           		pla
00E225  1  85 07        		sta $07
00E227  1  98           		tya
00E228  1  48           		pha
00E229  1  BC 30 07     		ldy AreaObjectLength,x
00E22C  1  F0 23        		beq loc_C4A8
00E22E  1  20 8B 97     		jsr FindEmptyEnemySlot
00E231  1  B0 1E        		bcs loc_C4A8
00E233  1  A9 04        		lda #4
00E235  1  20 6C 97     		jsr InitPiranhaPlant
00E238  1  A5 06        		lda byte_6
00E23A  1  0A           		asl
00E23B  1  0A           		asl
00E23C  1  0A           		asl
00E23D  1  0A           		asl
00E23E  1  18           		clc
00E23F  1  75 CF        		adc Enemy_Y_Position,x
00E241  1  38           		sec
00E242  1  E9 0A        		sbc #$A
00E244  1  95 CF        		sta Enemy_Y_Position,x
00E246  1  9D 34 04     		sta PiranhaPlantDownYPos,x
00E249  1  18           		clc
00E24A  1  69 18        		adc #$18
00E24C  1  9D 17 04     		sta PiranhaPlantUpYPos,x
00E24F  1  F6 A0        		inc ExplosionTimerCounter,x
00E251  1               loc_C4A8:
00E251  1  68           		pla
00E252  1  A8           		tay
00E253  1  48           		pha
00E254  1  A6 07        		ldx $07
00E256  1  B9 25 97     		lda VerticalPipeDataOff2,y
00E259  1  A4 06        		ldy byte_6
00E25B  1  88           		dey
00E25C  1  20 C0 99     		jsr RenderUnderPart
00E25F  1  68           		pla
00E260  1  A8           		tay
00E261  1  B9 23 97     		lda VerticalPipeData,y
00E264  1  9D A1 06     		sta MetatileBuffer,x
00E267  1  60           		rts
00E268  1               
00E268  1               MoveUpsideDownPiranhaPlant:
00E268  1  B5 1E        		lda Enemy_State,x
00E26A  1  D0 39        		bne locret_C4FD
00E26C  1  BD 8A 07     		lda EnemyFrameTimer,x
00E26F  1  D0 34        		bne locret_C4FD
00E271  1  B5 A0        		lda ExplosionTimerCounter,x
00E273  1  D0 0B        		bne loc_C4D8
00E275  1               loc_C4CD:
00E275  1  B5 58        		lda ExplosionGfxCounter,x
00E277  1  49 FF        		eor #$FF
00E279  1  18           		clc
00E27A  1  69 01        		adc #1
00E27C  1  95 58        		sta ExplosionGfxCounter,x
00E27E  1  F6 A0        		inc ExplosionTimerCounter,x
00E280  1               loc_C4D8:
00E280  1  BD 17 04     		lda PiranhaPlantUpYPos,x
00E283  1  B4 58        		ldy ExplosionGfxCounter,x
00E285  1  10 03        		bpl loc_C4E2
00E287  1  BD 34 04     		lda PiranhaPlantDownYPos,x
00E28A  1               loc_C4E2:
00E28A  1  85 00        		sta $00
00E28C  1  AD 47 07     		lda TimerControl
00E28F  1  D0 14        		bne locret_C4FD
00E291  1  B5 CF        		lda Enemy_Y_Position,x
00E293  1  18           		clc
00E294  1  75 58        		adc ExplosionGfxCounter,x
00E296  1  95 CF        		sta Enemy_Y_Position,x
00E298  1  C5 00        		cmp $00
00E29A  1  D0 09        		bne locret_C4FD
00E29C  1  A9 00        		lda #0
00E29E  1  95 A0        		sta ExplosionTimerCounter,x
00E2A0  1  A9 20        		lda #$20
00E2A2  1  9D 8A 07     		sta EnemyFrameTimer,x
00E2A5  1               locret_C4FD:
00E2A5  1  60           		rts
00E2A6  1               
00E2A6  1               LeafSprites:
00E2A6  1  7B           		.byte $7B
00E2A7  1  7B           		.byte $7B
00E2A8  1  7B           		.byte $7B
00E2A9  1  7B           		.byte $7B
00E2AA  1  7A           		.byte $7A
00E2AB  1  7A           		.byte $7A
00E2AC  1  7B           		.byte $7B
00E2AD  1  7B           		.byte $7B
00E2AE  1  7B           		.byte $7B
00E2AF  1  7A           		.byte $7A
00E2B0  1  7B           		.byte $7B
00E2B1  1  7A           		.byte $7A
00E2B2  1               
00E2B2  1               MakeItWindy:
00E2B2  1  A9 01        		lda #1
00E2B4  1  D0 02        		bne SetWindState
00E2B6  1               MakeItNotWindy:
00E2B6  1  A9 00        		lda #0
00E2B8  1               SetWindState:
00E2B8  1  8D EC 07     		sta IsWindy
00E2BB  1  60           		rts
00E2BC  1               
00E2BC  1               RunWindStuff:
00E2BC  1  AD EC 07     		lda IsWindy
00E2BF  1  F0 33        		beq @nothingtodo
00E2C1  1  A9 04        		lda #4
00E2C3  1  85 FD        		sta NoiseSoundQueue
00E2C5  1  20 0D E3     		jsr UpdateLeafPositions
00E2C8  1  A2 00        		ldx #0
00E2CA  1  AC EB 06     		ldy byte_6EB ; Leaf sprite offset or something...?
00E2CD  1               @update_leaf:
00E2CD  1  BD FF 63     		lda WRAM_LeafY,x
00E2D0  1  99 00 02     		sta $200,y
00E2D3  1  BD A6 E2     		lda LeafSprites,x
00E2D6  1  99 01 02     		sta $201,y
00E2D9  1  A9 41        		lda #$41
00E2DB  1  99 02 02     		sta $202,y
00E2DE  1  BD 0B 64     		lda WRAM_LeafX,x
00E2E1  1  99 03 02     		sta $203,y
00E2E4  1  C8           		iny
00E2E5  1  C8           		iny
00E2E6  1  C8           		iny
00E2E7  1  C8           		iny
00E2E8  1  E8           		inx
00E2E9  1  E0 06        		cpx #6
00E2EB  1  D0 03        		bne @xnotsix
00E2ED  1  AC EC 06     		ldy Alt_SprDataOffset
00E2F0  1               @xnotsix:
00E2F0  1  E0 0C        		cpx #$C
00E2F2  1  D0 D9        		bne @update_leaf
00E2F4  1               @nothingtodo:
00E2F4  1  60           		rts
00E2F5  1               
00E2F5  1               LeafSpeed: ; TODO : This is longer than the game uses...?
00E2F5  1  57           		.byte $57
00E2F6  1  57           		.byte $57
00E2F7  1  56           		.byte $56
00E2F8  1  56           		.byte $56
00E2F9  1  58           		.byte $58
00E2FA  1  58           		.byte $58
00E2FB  1  56           		.byte $56
00E2FC  1  56           		.byte $56
00E2FD  1  57           		.byte $57
00E2FE  1  58           		.byte $58
00E2FF  1  57           		.byte $57
00E300  1  58           		.byte $58
00E301  1  59           		.byte $59
00E302  1  59           		.byte $59
00E303  1  58           		.byte $58
00E304  1  58           		.byte $58
00E305  1  5A           		.byte $5A
00E306  1  5A           		.byte $5A
00E307  1  58           		.byte $58
00E308  1  58           		.byte $58
00E309  1  59           		.byte $59
00E30A  1  5A           		.byte $5A
00E30B  1  59           		.byte $59
00E30C  1  5A           		.byte $5A
00E30D  1               
00E30D  1               UpdateLeafPositions:
00E30D  1  A2 0B        		ldx #$B
00E30F  1               @update_next:
00E30F  1  BD 0B 64     		lda WRAM_LeafX,x
00E312  1  18           		clc
00E313  1  7D F5 E2     		adc LeafSpeed,x
00E316  1  7D F5 E2     		adc LeafSpeed,x
00E319  1  9D 0B 64     		sta WRAM_LeafX,x
00E31C  1  BD FF 63     		lda WRAM_LeafY,x
00E31F  1  18           		clc
00E320  1  7D F5 E2     		adc LeafSpeed,x
00E323  1  9D FF 63     		sta WRAM_LeafY,x
00E326  1  CA           		dex
00E327  1  10 E6        		bpl @update_next
00E329  1  60           		rts
00E32A  1               
00E32A  1               StaticFrame_0E:
00E32A  1  23           		.byte $23
00E32B  1  C0           		.byte $C0
00E32C  1  48           		.byte $48
00E32D  1  55           		.byte $55
00E32E  1  23           		.byte $23
00E32F  1  C2           		.byte $C2
00E330  1  01           		.byte 1
00E331  1  D5           		.byte $D5
00E332  1  00           		.byte 0
00E333  1               SomePalette_0F:
00E333  1  3F           		.byte $3F
00E334  1  00           		.byte 0
00E335  1  10           		.byte $10
00E336  1  0F           		.byte $F
00E337  1  0F           		.byte $F
00E338  1  0F           		.byte $F
00E339  1  0F           		.byte $F
00E33A  1  0F           		.byte $F
00E33B  1  30           		.byte $30
00E33C  1  10           		.byte $10
00E33D  1  00           		.byte 0
00E33E  1  0F           		.byte $F
00E33F  1  21           		.byte $21
00E340  1  12           		.byte $12
00E341  1  02           		.byte 2
00E342  1  0F           		.byte $F
00E343  1  27           		.byte $27
00E344  1  17           		.byte $17
00E345  1  00           		.byte 0
00E346  1  00           		.byte 0
00E347  1               StaticFrame_10:
00E347  1  20           		.byte $20
00E348  1  E8           		.byte $E8
00E349  1  10           		.byte $10
00E34A  1  1D           		.byte $1D
00E34B  1  11           		.byte $11
00E34C  1  0A           		.byte $A
00E34D  1  17           		.byte $17
00E34E  1  14           		.byte $14
00E34F  1  24           		.byte $24
00E350  1  22           		.byte $22
00E351  1  18           		.byte $18
00E352  1  1E           		.byte $1E
00E353  1  24           		.byte $24
00E354  1               unk_C8A0:
00E354  1  16           		.byte $16
00E355  1  0A           		.byte $A
00E356  1  1B           		.byte $1B
00E357  1  12           		.byte $12
00E358  1  18           		.byte $18
00E359  1  2B           		.byte $2B
00E35A  1  23           		.byte $23
00E35B  1  C8           		.byte $C8
00E35C  1  48           		.byte $48
00E35D  1  05           		.byte 5
00E35E  1  00           		.byte 0
00E35F  1               StaticFrame_11:
00E35F  1  21           		.byte $21
00E360  1  09           		.byte 9
00E361  1  0E           		.byte $E
00E362  1  19           		.byte $19
00E363  1  0E           		.byte $E
00E364  1  0A           		.byte $A
00E365  1  0C           		.byte $C
00E366  1  0E           		.byte $E
00E367  1  24           		.byte $24
00E368  1  12           		.byte $12
00E369  1  1C           		.byte $1C
00E36A  1  24           		.byte $24
00E36B  1  19           		.byte $19
00E36C  1  0A           		.byte $A
00E36D  1  1F           		.byte $1F
00E36E  1  0E           		.byte $E
00E36F  1  0D           		.byte $D
00E370  1  23           		.byte $23
00E371  1  D0           		.byte $D0
00E372  1  58           		.byte $58
00E373  1  AA           		.byte $AA
00E374  1  00           		.byte 0
00E375  1               StaticFrame_12:
00E375  1  21           		.byte $21
00E376  1  47           		.byte $47
00E377  1  12           		.byte $12
00E378  1  20           		.byte $20
00E379  1  12           		.byte $12
00E37A  1  1D           		.byte $1D
00E37B  1  11           		.byte $11
00E37C  1  24           		.byte $24
00E37D  1  14           		.byte $14
00E37E  1  12           		.byte $12
00E37F  1  17           		.byte $17
00E380  1  10           		.byte $10
00E381  1  0D           		.byte $D
00E382  1  18           		.byte $18
00E383  1  16           		.byte $16
00E384  1  24           		.byte $24
00E385  1  1C           		.byte $1C
00E386  1  0A           		.byte $A
00E387  1  1F           		.byte $1F
00E388  1  0E           		.byte $E
00E389  1  0D           		.byte $D
00E38A  1  00           		.byte 0
00E38B  1               StaticFrame_13:
00E38B  1  21           		.byte $21
00E38C  1  89           		.byte $89
00E38D  1  10           		.byte $10
00E38E  1  11           		.byte $11
00E38F  1  1E           		.byte $1E
00E390  1  1B           		.byte $1B
00E391  1  1B           		.byte $1B
00E392  1  0A           		.byte $A
00E393  1  11           		.byte $11
00E394  1  24           		.byte $24
00E395  1  1D           		.byte $1D
00E396  1  18           		.byte $18
00E397  1  24           		.byte $24
00E398  1  24           		.byte $24
00E399  1               unk_C8E5:
00E399  1  16           		.byte $16
00E39A  1  0A           		.byte $A
00E39B  1  1B           		.byte $1B
00E39C  1  12           		.byte $12
00E39D  1  18           		.byte $18
00E39E  1  00           		.byte 0
00E39F  1               StaticFrame_14:
00E39F  1  21           		.byte $21
00E3A0  1  CA           		.byte $CA
00E3A1  1  0D           		.byte $D
00E3A2  1  18           		.byte $18
00E3A3  1  1E           		.byte $1E
00E3A4  1  1B           		.byte $1B
00E3A5  1  24           		.byte $24
00E3A6  1  18           		.byte $18
00E3A7  1  17           		.byte $17
00E3A8  1  15           		.byte $15
00E3A9  1  22           		.byte $22
00E3AA  1  24           		.byte $24
00E3AB  1  11           		.byte $11
00E3AC  1  0E           		.byte $E
00E3AD  1  1B           		.byte $1B
00E3AE  1  18           		.byte $18
00E3AF  1  00           		.byte 0
00E3B0  1               StaticFrame_15:
00E3B0  1  22           		.byte $22
00E3B1  1  07           		.byte 7
00E3B2  1  13           		.byte $13
00E3B3  1  1D           		.byte $1D
00E3B4  1  11           		.byte $11
00E3B5  1  12           		.byte $12
00E3B6  1  1C           		.byte $1C
00E3B7  1  24           		.byte $24
00E3B8  1  0E           		.byte $E
00E3B9  1  17           		.byte $17
00E3BA  1  0D           		.byte $D
00E3BB  1  1C           		.byte $1C
00E3BC  1  24           		.byte $24
00E3BD  1  22           		.byte $22
00E3BE  1  18           		.byte $18
00E3BF  1  1E           		.byte $1E
00E3C0  1  1B           		.byte $1B
00E3C1  1  24           		.byte $24
00E3C2  1  1D           		.byte $1D
00E3C3  1  1B           		.byte $1B
00E3C4  1  12           		.byte $12
00E3C5  1  19           		.byte $19
00E3C6  1  00           		.byte 0
00E3C7  1               StaticFrame_16:
00E3C7  1  22           		.byte $22
00E3C8  1  46           		.byte $46
00E3C9  1  14           		.byte $14
00E3CA  1  18           		.byte $18
00E3CB  1  0F           		.byte $F
00E3CC  1  24           		.byte $24
00E3CD  1  0A           		.byte $A
00E3CE  1  24           		.byte $24
00E3CF  1  15           		.byte $15
00E3D0  1  18           		.byte $18
00E3D1  1  17           		.byte $17
00E3D2  1  10           		.byte $10
00E3D3  1  24           		.byte $24
00E3D4  1  0F           		.byte $F
00E3D5  1  1B           		.byte $1B
00E3D6  1  12           		.byte $12
00E3D7  1  0E           		.byte $E
00E3D8  1  17           		.byte $17
00E3D9  1  0D           		.byte $D
00E3DA  1  1C           		.byte $1C
00E3DB  1  11           		.byte $11
00E3DC  1  12           		.byte $12
00E3DD  1  19           		.byte $19
00E3DE  1  00           		.byte 0
00E3DF  1               StaticFrame_17:
00E3DF  1  22           		.byte $22
00E3E0  1  88           		.byte $88
00E3E1  1  10           		.byte $10
00E3E2  1  01           		.byte 1
00E3E3  1  00           		.byte 0
00E3E4  1  00           		.byte 0
00E3E5  1  00           		.byte 0
00E3E6  1  00           		.byte 0
00E3E7  1  00           		.byte 0
00E3E8  1  24           		.byte $24
00E3E9  1  19           		.byte $19
00E3EA  1  1D           		.byte $1D
00E3EB  1  1C           		.byte $1C
00E3EC  1  AF           		.byte $AF
00E3ED  1  0A           		.byte $A
00E3EE  1  0D           		.byte $D
00E3EF  1  0D           		.byte $D
00E3F0  1  0E           		.byte $E
00E3F1  1  0D           		.byte $D
00E3F2  1  23           		.byte $23
00E3F3  1  E8           		.byte $E8
00E3F4  1  48           		.byte $48
00E3F5  1  FF           		.byte $FF
00E3F6  1  00           		.byte 0
00E3F7  1               StaticFrame_18:
00E3F7  1  22           		.byte $22
00E3F8  1  A6           		.byte $A6
00E3F9  1  15           		.byte $15
00E3FA  1  0F           		.byte $F
00E3FB  1  18           		.byte $18
00E3FC  1  1B           		.byte $1B
00E3FD  1  24           		.byte $24
00E3FE  1  0E           		.byte $E
00E3FF  1  0A           		.byte $A
00E400  1  0C           		.byte $C
00E401  1  11           		.byte $11
00E402  1  24           		.byte $24
00E403  1  19           		.byte $19
00E404  1  15           		.byte $15
00E405  1  0A           		.byte $A
00E406  1  22           		.byte $22
00E407  1  0E           		.byte $E
00E408  1  1B           		.byte $1B
00E409  1  24           		.byte $24
00E40A  1  15           		.byte $15
00E40B  1  0E           		.byte $E
00E40C  1  0F           		.byte $F
00E40D  1  1D           		.byte $1D
00E40E  1  AF           		.byte $AF
00E40F  1  00           		.byte 0
00E410  1               StaticFrame_1B:
00E410  1  20           		.byte $20
00E411  1  80           		.byte $80
00E412  1  60           		.byte $60
00E413  1  5E           		.byte $5E
00E414  1  20           		.byte $20
00E415  1  A0           		.byte $A0
00E416  1  60           		.byte $60
00E417  1  5D           		.byte $5D
00E418  1  23           		.byte $23
00E419  1  40           		.byte $40
00E41A  1  60           		.byte $60
00E41B  1  5E           		.byte $5E
00E41C  1  23           		.byte $23
00E41D  1  60           		.byte $60
00E41E  1  60           		.byte $60
00E41F  1  5D           		.byte $5D
00E420  1  23           		.byte $23
00E421  1  80           		.byte $80
00E422  1  60           		.byte $60
00E423  1  5E           		.byte $5E
00E424  1  23           		.byte $23
00E425  1  A0           		.byte $A0
00E426  1  60           		.byte $60
00E427  1  5D           		.byte $5D
00E428  1  23           		.byte $23
00E429  1  C0           		.byte $C0
00E42A  1  50           		.byte $50
00E42B  1  55           		.byte $55
00E42C  1  23           		.byte $23
00E42D  1  F0           		.byte $F0
00E42E  1  50           		.byte $50
00E42F  1  55           		.byte $55
00E430  1  00           		.byte 0
00E431  1               WePresentFantasyWorld:
00E431  1  22           		.byte $22
00E432  1  24           		.byte $24
00E433  1  18           		.byte $18
00E434  1  20           		.byte $20
00E435  1  0E           		.byte $E
00E436  1  24           		.byte $24
00E437  1  19           		.byte $19
00E438  1  1B           		.byte $1B
00E439  1  0E           		.byte $E
00E43A  1  1C           		.byte $1C
00E43B  1  0E           		.byte $E
00E43C  1  17           		.byte $17
00E43D  1  1D           		.byte $1D
00E43E  1  24           		.byte $24
00E43F  1  0F           		.byte $F
00E440  1  0A           		.byte $A
00E441  1  17           		.byte $17
00E442  1  1D           		.byte $1D
00E443  1  0A           		.byte $A
00E444  1  1C           		.byte $1C
00E445  1  22           		.byte $22
00E446  1  24           		.byte $24
00E447  1  20           		.byte $20
00E448  1  18           		.byte $18
00E449  1  1B           		.byte $1B
00E44A  1  15           		.byte $15
00E44B  1  0D           		.byte $D
00E44C  1  22           		.byte $22
00E44D  1  66           		.byte $66
00E44E  1  13           		.byte $13
00E44F  1  15           		.byte $15
00E450  1  0E           		.byte $E
00E451  1  1D           		.byte $1D
00E452  1  F2           		.byte $F2
00E453  1  1C           		.byte $1C
00E454  1  24           		.byte $24
00E455  1  1D           		.byte $1D
00E456  1  1B           		.byte $1B
00E457  1  22           		.byte $22
00E458  1  24           		.byte $24
00E459  1  76           		.byte $76
00E45A  1  09           		.byte 9
00E45B  1  24           		.byte $24
00E45C  1  20           		.byte $20
00E45D  1  18           		.byte $18
00E45E  1  1B           		.byte $1B
00E45F  1  15           		.byte $15
00E460  1  0D           		.byte $D
00E461  1  75           		.byte $75
00E462  1  22           		.byte $22
00E463  1  A9           		.byte $A9
00E464  1  0E           		.byte $E
00E465  1  20           		.byte $20
00E466  1  12           		.byte $12
00E467  1  1D           		.byte $1D
00E468  1  11           		.byte $11
00E469  1  24           		.byte $24
00E46A  1  18           		.byte $18
00E46B  1  17           		.byte $17
00E46C  1  0E           		.byte $E
00E46D  1  24           		.byte $24
00E46E  1  10           		.byte $10
00E46F  1  0A           		.byte $A
00E470  1  16           		.byte $16
00E471  1  0E           		.byte $E
00E472  1  AF           		.byte $AF
00E473  1  00           		.byte 0
00E474  1               YouAreSuperPlayer:
00E474  1  21           		.byte $21
00E475  1  E0           		.byte $E0
00E476  1  60           		.byte $60
00E477  1  24           		.byte $24
00E478  1  22           		.byte $22
00E479  1  40           		.byte $40
00E47A  1  60           		.byte $60
00E47B  1  24           		.byte $24
00E47C  1  22           		.byte $22
00E47D  1  25           		.byte $25
00E47E  1  16           		.byte $16
00E47F  1  22           		.byte $22
00E480  1  18           		.byte $18
00E481  1  1E           		.byte $1E
00E482  1  F2           		.byte $F2
00E483  1  1B           		.byte $1B
00E484  1  0E           		.byte $E
00E485  1  24           		.byte $24
00E486  1  0A           		.byte $A
00E487  1  24           		.byte $24
00E488  1  1C           		.byte $1C
00E489  1  1E           		.byte $1E
00E48A  1  19           		.byte $19
00E48B  1  0E           		.byte $E
00E48C  1  1B           		.byte $1B
00E48D  1  24           		.byte $24
00E48E  1  19           		.byte $19
00E48F  1  15           		.byte $15
00E490  1  0A           		.byte $A
00E491  1  22           		.byte $22
00E492  1  0E           		.byte $E
00E493  1  1B           		.byte $1B
00E494  1  2B           		.byte $2B
00E495  1  22           		.byte $22
00E496  1  69           		.byte $69
00E497  1  0D           		.byte $D
00E498  1  20           		.byte $20
00E499  1  0E           		.byte $E
00E49A  1  24           		.byte $24
00E49B  1  11           		.byte $11
00E49C  1  18           		.byte $18
00E49D  1  19           		.byte $19
00E49E  1  0E           		.byte $E
00E49F  1  24           		.byte $24
00E4A0  1  20           		.byte $20
00E4A1  1  0E           		.byte $E
00E4A2  1  F2           		.byte $F2
00E4A3  1  15           		.byte $15
00E4A4  1  15           		.byte $15
00E4A5  1  22           		.byte $22
00E4A6  1  A9           		.byte $A9
00E4A7  1  0E           		.byte $E
00E4A8  1  1C           		.byte $1C
00E4A9  1  0E           		.byte $E
00E4AA  1  0E           		.byte $E
00E4AB  1  24           		.byte $24
00E4AC  1  22           		.byte $22
00E4AD  1  18           		.byte $18
00E4AE  1  1E           		.byte $1E
00E4AF  1  24           		.byte $24
00E4B0  1  0A           		.byte $A
00E4B1  1  10           		.byte $10
00E4B2  1  0A           		.byte $A
00E4B3  1  12           		.byte $12
00E4B4  1  17           		.byte $17
00E4B5  1  AF           		.byte $AF
00E4B6  1  22           		.byte $22
00E4B7  1  E8           		.byte $E8
00E4B8  1  10           		.byte $10
00E4B9  1  16           		.byte $16
00E4BA  1  0A           		.byte $A
00E4BB  1  1B           		.byte $1B
00E4BC  1  12           		.byte $12
00E4BD  1  18           		.byte $18
00E4BE  1  24           		.byte $24
00E4BF  1  0A           		.byte $A
00E4C0  1  17           		.byte $17
00E4C1  1  0D           		.byte $D
00E4C2  1  24           		.byte $24
00E4C3  1  1C           		.byte $1C
00E4C4  1  1D           		.byte $1D
00E4C5  1  0A           		.byte $A
00E4C6  1  0F           		.byte $F
00E4C7  1  0F           		.byte $F
00E4C8  1  AF           		.byte $AF
00E4C9  1  00           		.byte 0
00E4CA  1               
00E4CA  1               PrepareInitScreen:
00E4CA  1  AD 70 07     		lda OperMode
00E4CD  1  C9 03        		cmp #3
00E4CF  1  F0 1B        		beq @playerdead
00E4D1  1  AD F5 07     		lda byte_7F5
00E4D4  1  D0 0D        		bne @wait
00E4D6  1  A9 1D        		lda #$1D
00E4D8  1  8D 73 07     		sta VRAM_Buffer_AddrCtrl
00E4DB  1  A9 10        		lda #$10
00E4DD  1  8D A0 07     		sta ScreenTimer
00E4E0  1  EE F5 07     		inc byte_7F5
00E4E3  1               @wait:
00E4E3  1  A9 00        		lda #0
00E4E5  1  8D 74 07     		sta DisableScreenFlag
00E4E8  1  EE 3C 07     		inc ScreenRoutineTask
00E4EB  1  60           		rts
00E4EC  1               @playerdead:
00E4EC  1  A9 20        		lda #$20
00E4EE  1  8D A0 07     		sta ScreenTimer
00E4F1  1  A9 1E        		lda #$1E
00E4F3  1  8D 73 07     		sta VRAM_Buffer_AddrCtrl
00E4F6  1  EE 72 07     		inc OperMode_Task
00E4F9  1  60           		rts
00E4FA  1               
00E4FA  1               AlternateInitScreen:
00E4FA  1  AD 3C 07     		lda ScreenRoutineTask
00E4FD  1  20 FC 8C     		jsr JumpEngine
00E500  1  BF 85        		.word InitializeScreeNoSpritesNoNt
00E502  1  6B 86        		.word WriteTopStatusLine
00E504  1  73 86        		.word WriteBottomStatusLine
00E506  1  0E E5        		.word SetEndingFrameBuffer
00E508  1  EB 85        		.word GetAreaPalette
00E50A  1  03 86        		.word GetBackgroundColor
00E50C  1  1C E5        		.word PrintAndPatchSoundEngine
00E50E  1               
00E50E  1               SetEndingFrameBuffer:
00E50E  1  A9 1B        		lda #$1B
00E510  1  8D 73 07     		sta VRAM_Buffer_AddrCtrl
00E513  1  A9 00        		lda #0
00E515  1  8D 22 07     		sta IRQUpdateFlag
00E518  1  EE 3C 07     		inc ScreenRoutineTask
00E51B  1  60           		rts
00E51C  1               
00E51C  1               PrintAndPatchSoundEngine:
00E51C  1               		;lda #$A2
00E51C  1               		;jsr PrintStatusBarNumbers
00E51C  1               
00E51C  1               		;lda #$CC
00E51C  1               		;sta VOLDST_PatchSoundEngineHigh
00E51C  1               		;lda #$5F
00E51C  1               		;sta VOLDST_PatchSoundEngineLow
00E51C  1  A9 01        		lda #1
00E51E  1  85 FB        		sta AreaMusicQueue
00E520  1  A9 00        		lda #0
00E522  1  85 0C        		sta Left_Right_Buttons
00E524  1  8D 7A 07     		sta NumberOfPlayers
00E527  1  8D 74 07     		sta DisableScreenFlag
00E52A  1  EE 22 07     		inc IRQUpdateFlag
00E52D  1  EE 72 07     		inc OperMode_Task
00E530  1  60           		rts
00E531  1               
00E531  1               AlternatePrintVictoryMessages:
00E531  1  AD 49 07     		lda SecondaryMsgCounter
00E534  1  D0 19        		bne @has_Secondary
00E536  1  AC 19 07     		ldy PrimaryMsgCounter
00E539  1  C0 0A        		cpy #$A
00E53B  1  B0 24        		bcs @set_endtimer
00E53D  1  C8           		iny
00E53E  1  C8           		iny
00E53F  1  C8           		iny
00E540  1  C0 05        		cpy #5
00E542  1  D0 04        		bne @noeventmusic
00E544  1  A9 04        		lda #4
00E546  1  85 FC        		sta EventMusicQueue
00E548  1               @noeventmusic:
00E548  1  98           		tya
00E549  1  18           		clc
00E54A  1  69 0C        		adc #$C
00E54C  1  8D 73 07     		sta VRAM_Buffer_AddrCtrl
00E54F  1               @has_Secondary:
00E54F  1  AD 49 07     		lda SecondaryMsgCounter
00E552  1  18           		clc
00E553  1  69 04        		adc #4
00E555  1  8D 49 07     		sta SecondaryMsgCounter
00E558  1  AD 19 07     		lda PrimaryMsgCounter
00E55B  1  69 00        		adc #0
00E55D  1  8D 19 07     		sta PrimaryMsgCounter
00E560  1  60           		rts
00E561  1               @set_endtimer:
00E561  1  A9 0C        		lda #$C
00E563  1  8D A1 07     		sta WorldEndTimer
00E566  1               loc_C677:
00E566  1  EE 72 07     		inc OperMode_Task
00E569  1               sub_C67A:
00E569  1  A9 00        		lda #0
00E56B  1  8D 61 07     		sta OffScr_NumberofLives
00E56E  1  8D 62 07     		sta OffScr_HalfwayPage
00E571  1  8D 63 07     		sta OffScr_LevelNumber
00E574  1               locret_C685:
00E574  1  60           		rts
00E575  1               
00E575  1               AlternatePlayerEndWorld:
00E575  1  AD A1 07     		lda WorldEndTimer
00E578  1  D0 FA        		bne locret_C685
00E57A  1  4C 66 E5     		jmp loc_C677
00E57D  1               .ifdef END_OF_WORLD_LIFES
00E57D  1               		lda NumberofLives
00E57D  1               		bmi loc_C677
00E57D  1               		lda SelectTimer
00E57D  1               		bne locret_C685
00E57D  1               		lda #$30
00E57D  1               		sta SelectTimer
00E57D  1               		lda #$40
00E57D  1               		sta Square2SoundQueue
00E57D  1               		dec NumberofLives
00E57D  1               		lda #1
00E57D  1               		sta unk_135
00E57D  1               		rts
00E57D  1               .endif
00E57D  1               
00E57D  1               byte_C6A9:
00E57D  1  3F           		.byte $3F
00E57E  1  00           		.byte 0
00E57F  1  10           		.byte $10
00E580  1  0F           		.byte $F
00E581  1  30           		.byte $30
00E582  1  0F           		.byte $F
00E583  1  0F           		.byte $F
00E584  1  0F           		.byte $F
00E585  1  30           		.byte $30
00E586  1  10           		.byte $10
00E587  1  00           		.byte 0
00E588  1  0F           		.byte $F
00E589  1  21           		.byte $21
00E58A  1  12           		.byte $12
00E58B  1  21           		.byte $21
00E58C  1  0F           		.byte $F
00E58D  1  27           		.byte $27
00E58E  1  17           		.byte $17
00E58F  1  00           		.byte 0
00E590  1  00           		.byte 0
00E591  1               unk_C6BD:
00E591  1  01           		.byte 1
00E592  1  02           		.byte 2
00E593  1  11           		.byte $11
00E594  1  21           		.byte $21
00E595  1               unk_C6C1:
00E595  1  22           		.byte $22
00E596  1  86           		.byte $86
00E597  1  55           		.byte $55
00E598  1  24           		.byte $24
00E599  1  22           		.byte $22
00E59A  1  A6           		.byte $A6
00E59B  1  55           		.byte $55
00E59C  1  24           		.byte $24
00E59D  1  00           		.byte 0
00E59E  1               
00E59E  1               UNK_C6CA:
00E59E  1  EE 61 07     		inc OffScr_NumberofLives
00E5A1  1  AD 63 07     		lda OffScr_LevelNumber
00E5A4  1  D0 0D        		bne loc_C6DF
00E5A6  1  AD 61 07     		lda OffScr_NumberofLives
00E5A9  1  29 FF        		and #$FF
00E5AB  1  D0 36        		bne locret_C70F
00E5AD  1  EE 63 07     		inc OffScr_LevelNumber
00E5B0  1  4C BA E5     		jmp loc_C6E6
00E5B3  1               loc_C6DF:
00E5B3  1  AD 61 07     		lda OffScr_NumberofLives
00E5B6  1  29 0F        		and #$F
00E5B8  1  D0 29        		bne locret_C70F
00E5BA  1               loc_C6E6:
00E5BA  1  A2 13        		ldx #$13
00E5BC  1               loc_C6E8:
00E5BC  1  BD 7D E5     		lda byte_C6A9,x
00E5BF  1  9D 01 03     		sta VRAM_Buffer1,x
00E5C2  1  CA           		dex
00E5C3  1  10 F7        		bpl loc_C6E8
00E5C5  1  A2 0C        		ldx #$C
00E5C7  1  AC 62 07     		ldy OffScr_HalfwayPage
00E5CA  1               loc_C6F6:
00E5CA  1  B9 91 E5     		lda unk_C6BD,y
00E5CD  1  9D 04 03     		sta VRAM_Buffer1+3,x
00E5D0  1  CA           		dex
00E5D1  1  CA           		dex
00E5D2  1  CA           		dex
00E5D3  1  CA           		dex
00E5D4  1  10 F4        		bpl loc_C6F6
00E5D6  1  EE 62 07     		inc OffScr_HalfwayPage
00E5D9  1  AD 62 07     		lda OffScr_HalfwayPage
00E5DC  1  C9 04        		cmp #4
00E5DE  1  D0 03        		bne locret_C70F
00E5E0  1  EE 72 07     		inc OperMode_Task
00E5E3  1               locret_C70F:
00E5E3  1  60           		rts
00E5E4  1               
00E5E4  1               XXX_CopySomethingAndReset:
00E5E4  1  A2 08        		ldx #8
00E5E6  1               loc_C712:
00E5E6  1  BD 95 E5     		lda unk_C6C1,x
00E5E9  1  9D 01 03     		sta VRAM_Buffer1,x
00E5EC  1  CA           		dex
00E5ED  1  10 F7        		bpl loc_C712
00E5EF  1  EE 72 07     		inc OperMode_Task
00E5F2  1  20 69 E5     		jsr sub_C67A
00E5F5  1  A9 60        		lda #$60
00E5F7  1  8D 64 07     		sta OffScr_Hidden1UpFlag
00E5FA  1  60           		rts
00E5FB  1               
00E5FB  1               XXX_SomethingOrOther:
00E5FB  1  20 62 E6     		jsr MoveShitheads
00E5FE  1  AD 08 06     		lda $608
00E601  1  D0 08        		bne locret_C737
00E603  1  AD FB 07     		lda IsPlayingExtendedWorlds
00E606  1  D0 14        		bne RestoreSoundEngine
00E608  1  EE 72 07     		inc OperMode_Task
00E60B  1               locret_C737:
00E60B  1  60           		rts
00E60C  1               
00E60C  1               FdsWriteFile_SM2SAVE:
00E60C  1  AD FC 07     		lda FdsOperTask
00E60F  1  20 FC 8C     		jsr JumpEngine
00E612  1  49 E0        		.word PrepareFdsLoad
00E614  1  1C E6        		.word FdsWriteSaveFile
00E616  1  59 E0        		.word WaitFDSReady
00E618  1  65 E0        		.word MoreFDSStuff
00E61A  1  68 E0        		.word FDSResetZero
00E61C  1               
00E61C  1               FdsWriteSaveFile:
00E61C  1               RestoreSoundEngine:
00E61C  1               		; lda #$D2
00E61C  1               		; sta VOLDST_PatchSoundEngineHigh
00E61C  1               		; lda #$A0
00E61C  1               		; sta VOLDST_PatchSoundEngineLow
00E61C  1  A9 00        		lda #0
00E61E  1  8D FC 07     		sta FdsOperTask
00E621  1  8D 72 07     		sta OperMode_Task
00E624  1  AD FB 07     		lda IsPlayingExtendedWorlds
00E627  1  D0 07        		bne @isextended
00E629  1  AD F7 07     		lda WorldsCompleted
00E62C  1  C9 FF        		cmp #$FF
00E62E  1  F0 0B        		beq loc_C793
00E630  1               @isextended:
00E630  1  A9 00        		lda #0
00E632  1  8D F7 07     		sta WorldsCompleted
00E635  1  8D 70 07     		sta OperMode
00E638  1  4C 58 DF     		jmp TitleScreenMode
00E63B  1               loc_C793:
00E63B  1  A9 00        		lda #0
00E63D  1  8D F7 07     		sta WorldsCompleted
00E640  1  8D F5 07     		sta byte_7F5
00E643  1  4C 9B 84     		jmp PlayerEndWorld_Force
00E646  1               
00E646  1               unk_C7A1:
00E646  1  50           		.byte $50
00E647  1  B0           		.byte $B0
00E648  1  E0           		.byte $E0
00E649  1  68           		.byte $68
00E64A  1  98           		.byte $98
00E64B  1  C8           		.byte $C8
00E64C  1               unk_C7A7:
00E64C  1  80           		.byte $80
00E64D  1  50           		.byte $50
00E64E  1  68           		.byte $68
00E64F  1  80           		.byte $80
00E650  1  98           		.byte $98
00E651  1  B0           		.byte $B0
00E652  1  C8           		.byte $C8
00E653  1               unk_C7AE:
00E653  1  E0           		.byte $E0
00E654  1  B8           		.byte $B8
00E655  1  90           		.byte $90
00E656  1  70           		.byte $70
00E657  1  68           		.byte $68
00E658  1  70           		.byte $70
00E659  1  90           		.byte $90
00E65A  1               unk_C7B5:
00E65A  1  B8           		.byte $B8
00E65B  1  38           		.byte $38
00E65C  1  48           		.byte $48
00E65D  1  60           		.byte $60
00E65E  1  80           		.byte $80
00E65F  1  A0           		.byte $A0
00E660  1  B8           		.byte $B8
00E661  1  C8           		.byte $C8
00E662  1               MoveShitheads:
00E662  1  AD 64 07     		lda OffScr_Hidden1UpFlag
00E665  1  F0 04        		beq loc_C7C6
00E667  1  CE 64 07     		dec OffScr_Hidden1UpFlag
00E66A  1  60           		rts
00E66B  1               loc_C7C6:
00E66B  1  20 4E 83     		jsr MoveSpritesOffscreen
00E66E  1  AE 62 07     		ldx OffScr_HalfwayPage
00E671  1  E0 07        		cpx #7
00E673  1  F0 11        		beq loc_C7E1
00E675  1  AD 61 07     		lda OffScr_NumberofLives
00E678  1  29 1F        		and #$1F
00E67A  1  D0 20        		bne loc_C7F7
00E67C  1  EE 62 07     		inc OffScr_HalfwayPage
00E67F  1  A9 01        		lda #1
00E681  1  85 FE        		sta Square2SoundQueue
00E683  1  4C 9C E6     		jmp loc_C7F7
00E686  1               loc_C7E1:
00E686  1  AD 61 07     		lda OffScr_NumberofLives
00E689  1  29 1F        		and #$1F
00E68B  1  D0 0F        		bne loc_C7F7
00E68D  1  EE 63 07     		inc OffScr_LevelNumber
00E690  1  AD 63 07     		lda OffScr_LevelNumber
00E693  1  C9 0B        		cmp #$B
00E695  1  90 05        		bcc loc_C7F7
00E697  1  A9 04        		lda #4
00E699  1  8D 63 07     		sta OffScr_LevelNumber
00E69C  1               loc_C7F7:
00E69C  1  EE 61 07     		inc OffScr_NumberofLives
00E69F  1  AD 5F 07     		lda WorldNumber
00E6A2  1  48           		pha
00E6A3  1  AD 62 07     		lda OffScr_HalfwayPage
00E6A6  1  48           		pha
00E6A7  1  AA           		tax
00E6A8  1               loc_C803:
00E6A8  1  AD 63 07     		lda OffScr_LevelNumber
00E6AB  1  C9 04        		cmp #4
00E6AD  1  90 0B        		bcc loc_C815
00E6AF  1  E9 04        		sbc #4
00E6B1  1  A8           		tay
00E6B2  1  B9 46 E6     		lda unk_C7A1,y
00E6B5  1  DD 4C E6     		cmp unk_C7A7,x
00E6B8  1  F0 1F        		beq loc_C834
00E6BA  1               loc_C815:
00E6BA  1  BC 4C E6     		ldy unk_C7A7,x
00E6BD  1  8C E5 06     		sty Enemy_SprDataOffset
00E6C0  1  A9 35        		lda #$35
00E6C2  1  85 16        		sta Enemy_ID
00E6C4  1  BD 53 E6     		lda unk_C7AE,x
00E6C7  1  85 CF        		sta Enemy_Y_Position
00E6C9  1  BD 5A E6     		lda unk_C7B5,x
00E6CC  1  8D AE 03     		sta Enemy_Rel_XPos
00E6CF  1  A2 00        		ldx #0
00E6D1  1  8E 5F 07     		stx WorldNumber
00E6D4  1  86 08        		stx $08
00E6D6  1  20 D4 D4     		jsr EnemyGfxHandler
00E6D9  1               loc_C834:
00E6D9  1  CE 62 07     		dec OffScr_HalfwayPage
00E6DC  1  AE 62 07     		ldx OffScr_HalfwayPage
00E6DF  1  D0 C7        		bne loc_C803
00E6E1  1  68           		pla
00E6E2  1  8D 62 07     		sta OffScr_HalfwayPage
00E6E5  1  68           		pla
00E6E6  1  8D 5F 07     		sta WorldNumber
00E6E9  1  A9 30        		lda #$30
00E6EB  1  8D E5 06     		sta Enemy_SprDataOffset
00E6EE  1  A9 B8        		lda #$B8
00E6F0  1  85 CF        		sta Enemy_Y_Position
00E6F2  1  60           		rts
00E6F3  1               
00E6F3  1               
00E6F3  1               byte_C84E:
00E6F3  1  16           		.byte $16
00E6F4  1  0A           		.byte  $a
00E6F5  1  1B           		.byte $1b
00E6F6  1  12           		.byte $12
00E6F7  1  18           		.byte $18
00E6F8  1  15           		.byte $15
00E6F9  1  1E           		.byte $1e
00E6FA  1  12           		.byte $12
00E6FB  1  10           		.byte $10
00E6FC  1  12           		.byte $12
00E6FD  1               
00E6FD  1               SetMarioName:
00E6FD  1  A9 00        		lda #0
00E6FF  1  8D 3C 07     		sta ScreenRoutineTask
00E702  1               		; Remove patching.
00E702  1  60           		rts
00E703  1               
00E703  1               .include "utils.inc"
00E703  2               .ifndef __UTILS_INC_DEF__
00E703  2               .define __UTILS_INC_DEF__
00E703  2               
00E703  2               AdvanceRandom:
00E703  2  AD A7 07         lda PseudoRandomBitReg    ;get first memory location of LSFR bytes
00E706  2  29 02            and #%00000010            ;mask out all but d1
00E708  2  85 00            sta $00                   ;save here
00E70A  2  AD A8 07         lda PseudoRandomBitReg+1  ;get second memory location
00E70D  2  29 02            and #%00000010            ;mask out all but d1
00E70F  2  45 00            eor $00                   ;perform exclusive-OR on d1 from first and second bytes
00E711  2  18               clc                       ;if neither or both are set, carry will be clear
00E712  2  F0 01            beq RotPRandomBit
00E714  2  38               sec                       ;if one or the other is set, carry will be set
00E715  2               RotPRandomBit:
00E715  2  6E A7 07         ror PseudoRandomBitReg+0  ;rotate carry into d7, and rotate last bit into carry
00E718  2  6E A8 07         ror PseudoRandomBitReg+1  ;rotate carry into d7, and rotate last bit into carry
00E71B  2  6E A9 07         ror PseudoRandomBitReg+2  ;rotate carry into d7, and rotate last bit into carry
00E71E  2  6E AA 07         ror PseudoRandomBitReg+3  ;rotate carry into d7, and rotate last bit into carry
00E721  2  6E AB 07         ror PseudoRandomBitReg+4  ;rotate carry into d7, and rotate last bit into carry
00E724  2  6E AC 07         ror PseudoRandomBitReg+5  ;rotate carry into d7, and rotate last bit into carry
00E727  2  6E AD 07         ror PseudoRandomBitReg+6  ;rotate carry into d7, and rotate last bit into carry
00E72A  2  60               rts
00E72B  2               
00E72B  2               MulByTen:
00E72B  2  0A               asl
00E72C  2  85 00            sta $0
00E72E  2  0A               asl
00E72F  2  0A               asl
00E730  2  18               clc
00E731  2  65 00            adc $0
00E733  2  60               rts
00E734  2               
00E734  2               .include "div10.inc"
00E734  3               .ifndef __DIV10_INC_DEF__
00E734  3               .define __DIV10_INC_DEF__
00E734  3               
00E734  3               DivByTen:
00E734  3  A2 00            ldx #$00
00E736  3               DivMore:
00E736  3  C9 0A            cmp #$0a
00E738  3  90 06            bcc DivByTenDone
00E73A  3  E9 0A            sbc #$0a
00E73C  3  E8               inx
00E73D  3  38               sec
00E73E  3  B0 F6            bcs DivMore
00E740  3               DivByTenDone:
00E740  3  60               rts
00E741  3               
00E741  3               .endif
00E741  3               
00E741  2               
00E741  2               .endif
00E741  2               
00E741  1               
00E741  1  EA EA EA EA  practice_callgate
00E745  1  EA EA EA EA  
00E749  1  EA EA EA EA  
00FEC0  1  EA EA EA EA  control_bank
00FEC4  1  EA EA EA EA  
00FEC8  1  EA EA EA EA  
00FEC0  1               
