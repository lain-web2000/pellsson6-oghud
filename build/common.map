ca65 V2.19 - Git b993d8833
Main file   : common/common.asm
Current file: common/common.asm

000000r 1               
000000r 1               	.include "shared.inc"
000000r 2               BANK_SELECTED = $07ff
000000r 2               
000000r 2               .define PF_SockMode $01 ; Todo move elsewhere...
000000r 2               .define PF_SaveState $02
000000r 2               .define PF_LoadState $04
000000r 2               .define PF_RestartLevel $08
000000r 2               .define PF_LevelEntrySaved $10
000000r 2               .define PF_DisablePracticeInfo $20
000000r 2               .define PF_EnableInputDisplay $40
000000r 2               
000000r 2               .macro PF_SetToLevelEnd_A
000000r 2               	lda WRAM_PracticeFlags
000000r 2               	and #(PF_LevelEntrySaved^$FF)
000000r 2               	sta WRAM_PracticeFlags
000000r 2               .endmacro
000000r 2               
000000r 2               .macro MACRO_ThrowFrameImpl
000000r 2               ThrowFrame:
000000r 2               		lda Mirror_PPU_CTRL_REG2
000000r 2               		sta PPU_CTRL_REG2
000000r 2               		lda Mirror_PPU_CTRL_REG1
000000r 2               		and #$FC
000000r 2               		sta Mirror_PPU_CTRL_REG1
000000r 2               		sta PPU_CTRL_REG1 ; Force NT-0 (in case no button was pressed)
000000r 2               
000000r 2               		;
000000r 2               		; Wait for sprite 0
000000r 2               		;
000000r 2               		lda Sprite0HitDetectFlag  ;check for flag here
000000r 2               		beq @SkipSprite0
000000r 2               		ldx #0
000000r 2               		stx PPU_SPR_ADDR
000000r 2               		lda Sprite0Data
000000r 2               		sta PPU_SPR_DATA
000000r 2               		lda Sprite0Data+1
000000r 2               		sta PPU_SPR_DATA
000000r 2               		lda Sprite0Data+2
000000r 2               		sta PPU_SPR_DATA
000000r 2               		lda Sprite0Data+3
000000r 2               		sta PPU_SPR_DATA
000000r 2               		lda PPU_STATUS
000000r 2               		stx PPU_SCROLL_REG
000000r 2               		stx PPU_SCROLL_REG
000000r 2               @Sprite0Clr:
000000r 2               		lda PPU_STATUS
000000r 2               		and #$40
000000r 2               		bne @Sprite0Clr
000000r 2               @Sprite0Hit:
000000r 2               		lda PPU_STATUS
000000r 2               		and #$40
000000r 2               		beq @Sprite0Hit
000000r 2               		ldy #$14
000000r 2               @HBlankDelay:
000000r 2               		dey
000000r 2               		bne @HBlankDelay
000000r 2               @SkipSprite0:
000000r 2               		lda PPU_STATUS
000000r 2               		lda HorizontalScroll
000000r 2               		sta PPU_SCROLL_REG
000000r 2               		lda VerticalScroll
000000r 2               		sta PPU_SCROLL_REG
000000r 2               
000000r 2               		lda ScreenLeft_PageLoc
000000r 2               		lsr Mirror_PPU_CTRL_REG1
000000r 2               		and #$01
000000r 2               		ror
000000r 2               		rol Mirror_PPU_CTRL_REG1
000000r 2               		lda Mirror_PPU_CTRL_REG1
000000r 2               		sta PPU_CTRL_REG1
000000r 2               
000000r 2               		lda WRAM_SlowMotion
000000r 2               		cmp #4
000000r 2               		bne @done
000000r 2               		;
000000r 2               		; Latch controllers.
000000r 2               		;
000000r 2               		ldx #1
000000r 2               		stx $4016
000000r 2               		dex
000000r 2               		stx $4016
000000r 2               		;
000000r 2               		; Check A
000000r 2               		;
000000r 2               		lda $4017
000000r 2               		lsr
000000r 2               		bcs @done ; A pressed. Advance next frame
000000r 2               		lda $4017 ; B
000000r 2               		lda $4017 ; Select
000000r 2               		lda $4017 ; Start
000000r 2               		lsr
000000r 2               		bcc @VBlank0
000000r 2               		;
000000r 2               		; Start pressed - Exit frame advance mode.
000000r 2               		;
000000r 2               		stx WRAM_SlowMotion
000000r 2               		jmp @done ; Exit out of this.
000000r 2               @VBlank0:
000000r 2               		lda PPU_STATUS ; Wait for VBlank
000000r 2               		bpl @VBlank0
000000r 2               		jmp ThrowFrame
000000r 2               @done:
000000r 2               		lda Mirror_PPU_CTRL_REG1
000000r 2               		ora #$80 ; NMI
000000r 2               		sta PPU_CTRL_REG1
000000r 2               		jmp Enter_SoundEngine
000000r 2               .endmacro
000000r 2               
000000r 2               .macro MACRO_RunSlowMo gm
000000r 2               		dec WRAM_SlowMotionLeft
000000r 2               		bmi @allow_frame
000000r 2               		lda DisableScreenFlag
000000r 2               		bne @allow_frame
000000r 2               		lda GamePauseStatus
000000r 2               		and #3
000000r 2               		bne @allow_frame
000000r 2               		ldx OperMode
000000r 2               		dex
000000r 2               		bne @allow_frame
000000r 2               		lda OperMode_Task
000000r 2               		cmp #gm
000000r 2               		bne @allow_frame
000000r 2               		jsr ThrowFrame
000000r 2               		rti
000000r 2               @allow_frame:
000000r 2               		lda WRAM_SlowMotion
000000r 2               		sta WRAM_SlowMotionLeft
000000r 2               .endmacro
000000r 2               
000000r 2               .define MMC5_MAKE_PRGBANK(id) ((id)*4)
000000r 2               .define MAKE_MMC5_CHRBANK(id) ((id)*1)
000000r 2               
000000r 2               TITLE_INIT		= $01
000000r 2               
000000r 2               BANK_LOADER		= MMC5_MAKE_PRGBANK(0)
000000r 2               BANK_CHR		= MMC5_MAKE_PRGBANK(1)
000000r 2               BANK_ORG		= MMC5_MAKE_PRGBANK(2)
000000r 2               BANK_COMMON		= MMC5_MAKE_PRGBANK(3)
000000r 2               BANK_SCEN		= MMC5_MAKE_PRGBANK(4)
000000r 2               BANK_SCEN_DATA	= MMC5_MAKE_PRGBANK(5)
000000r 2               BANK_SMBLL		= MMC5_MAKE_PRGBANK(6)
000000r 2               BANK_LLDATA		= MMC5_MAKE_PRGBANK(7)
000000r 2               
000000r 2               
000000r 2               CHR_ORG_SPR = MAKE_MMC5_CHRBANK(0)
000000r 2               CHR_ORG_BG = MAKE_MMC5_CHRBANK(1)
000000r 2               CHR_ORG_BG_ALTFONT = MAKE_MMC5_CHRBANK(2)
000000r 2               CHR_LOST_SPR = MAKE_MMC5_CHRBANK(3)
000000r 2               CHR_LOST_BG = MAKE_MMC5_CHRBANK(4)
000000r 2               CHR_LOST_BG_ALTFONT = MAKE_MMC5_CHRBANK(5)
000000r 2               CHR_PEACH_SPR = MAKE_MMC5_CHRBANK(6)
000000r 2               CHR_INTRO_BG = MAKE_MMC5_CHRBANK(7)
000000r 2               CHR_INTRO_SPR0 = MAKE_MMC5_CHRBANK(8)
000000r 2               
000000r 2               CHR_SET_BANK = $A000
000000r 2               
000000r 2               SavedRule = $07d9
000000r 2               RuleIndex = $0717 ; Previously DemoAction (can be changed to temp?)
000000r 2               PowerUps = $07e3 ; Previously unused
000000r 2               CurrentRule = $7df
000000r 2               
000000r 2               .ifndef RESTART_LEVEL_BUTTONS
000000r 2               	.define RESTART_LEVEL_BUTTONS Select_Button|Up_Dir
000000r 2               .endif
000000r 2               
000000r 2               .ifndef RESTART_GAME_BUTTONS
000000r 2               	.define RESTART_GAME_BUTTONS Select_Button|Down_Dir
000000r 2               .endif
000000r 2               
000000r 2               .ifndef SAVE_STATE_BUTTONS
000000r 2               	.define SAVE_STATE_BUTTONS Select_Button|Right_Dir
000000r 2               .endif
000000r 2               
000000r 2               .ifndef LOAD_STATE_BUTTONS
000000r 2               	.define LOAD_STATE_BUTTONS Select_Button|Left_Dir
000000r 2               .endif
000000r 2               
000000r 2               
000000r 1               	.include "mario.inc"
000000r 2               PPU_CTRL_REG1         = $2000
000000r 2               PPU_CTRL_REG2         = $2001
000000r 2               PPU_STATUS            = $2002
000000r 2               PPU_SPR_ADDR          = $2003
000000r 2               PPU_SPR_DATA          = $2004
000000r 2               PPU_SCROLL_REG        = $2005
000000r 2               PPU_ADDRESS           = $2006
000000r 2               PPU_DATA              = $2007
000000r 2               
000000r 2               SND_REGISTER          = $4000
000000r 2               SND_SQUARE1_REG       = $4000
000000r 2               SND_SQUARE2_REG       = $4004
000000r 2               SND_TRIANGLE_REG      = $4008
000000r 2               SND_NOISE_REG         = $400c
000000r 2               SND_DELTA_REG         = $4010
000000r 2               SND_MASTERCTRL_REG    = $4015
000000r 2               SND_VOLENV_REG        = $4080
000000r 2               SND_FDS0_REG          = $4040
000000r 2               SND_FDS1_REG          = $4041
000000r 2               SND_PULSE_4002_REG    = $4002
000000r 2               SND_PULSE_4003_REG    = $4003
000000r 2               SND_PULSE_4004_REG    = $4004
000000r 2               SND_PULSE_4005_REG    = $4005
000000r 2               SND_PULSE_4006_REG    = $4006
000000r 2               SND_TRIANGLE_400A_REG = $400A
000000r 2               SND_TRIANGLE_400B_REG = $400B
000000r 2               SND_NOISE_400E_REG    = $400E
000000r 2               SND_NOISE_400F_REG    = $400F
000000r 2               
000000r 2               SPR_DMA               = $4014
000000r 2               JOYPAD_PORT           = $4016
000000r 2               JOYPAD_PORT1          = $4016
000000r 2               JOYPAD_PORT2          = $4017
000000r 2               
000000r 2               ; GAME SPECIFIC DEFINES
000000r 2               
000000r 2               ObjectOffset          = $08
000000r 2               
000000r 2               FrameCounter          = $09
000000r 2               
000000r 2               SavedJoypadBits       = $06fc
000000r 2               SavedJoypad1Bits      = $06fc
000000r 2               SavedJoypad2Bits      = $06fd
000000r 2               JoypadBitMask         = $074a
000000r 2               JoypadOverride        = $0758
000000r 2               
000000r 2               A_B_Buttons           = $0a
000000r 2               PreviousA_B_Buttons   = $0d
000000r 2               Up_Down_Buttons       = $0b
000000r 2               Left_Right_Buttons    = $0c
000000r 2               
000000r 2               GameEngineSubroutine  = $0e
000000r 2               
000000r 2               Mirror_PPU_CTRL_REG1  = $0778
000000r 2               Mirror_PPU_CTRL_REG2  = $0779
000000r 2               
000000r 2               OperMode              = $0770
000000r 2               OperMode_Task         = $0772
000000r 2               ScreenRoutineTask     = $073c
000000r 2               
000000r 2               GamePauseStatus       = $0776
000000r 2               GamePauseTimer        = $0777
000000r 2               
000000r 2               DemoAction            = $0717
000000r 2               DemoActionTimer       = $0718
000000r 2               
000000r 2               TimerControl          = $0747
000000r 2               IntervalTimerControl  = $077f
000000r 2               
000000r 2               Timers                = $0780
000000r 2               SelectTimer           = $0780
000000r 2               PlayerAnimTimer       = $0781
000000r 2               JumpSwimTimer         = $0782
000000r 2               RunningTimer          = $0783
000000r 2               BlockBounceTimer      = $0784
000000r 2               SideCollisionTimer    = $0785
000000r 2               JumpspringTimer       = $0786
000000r 2               GameTimerCtrlTimer    = $0787
000000r 2               ClimbSideTimer        = $0789
000000r 2               EnemyFrameTimer       = $078a
000000r 2               FrenzyEnemyTimer      = $078f
000000r 2               BowserFireBreathTimer = $0790
000000r 2               StompTimer            = $0791
000000r 2               AirBubbleTimer        = $0792
000000r 2               ScrollIntervalTimer   = $0795
000000r 2               EnemyIntervalTimer    = $0796
000000r 2               BrickCoinTimer        = $079d
000000r 2               InjuryTimer           = $079e
000000r 2               StarInvincibleTimer   = $079f
000000r 2               ScreenTimer           = $07a0
000000r 2               WorldEndTimer         = $07a1
000000r 2               DemoTimer             = $07a2
000000r 2               
000000r 2               Sprite_Data           = $0200
000000r 2               
000000r 2               Sprite_Y_Position     = $0200
000000r 2               Sprite_Tilenumber     = $0201
000000r 2               Sprite_Attributes     = $0202
000000r 2               Sprite_X_Position     = $0203
000000r 2               
000000r 2               ScreenEdge_PageLoc    = $071a
000000r 2               ScreenEdge_X_Pos      = $071c
000000r 2               ScreenLeft_PageLoc    = $071a
000000r 2               ScreenRight_PageLoc   = $071b
000000r 2               ScreenLeft_X_Pos      = $071c
000000r 2               ScreenRight_X_Pos     = $071d
000000r 2               
000000r 2               PlayerFacingDir       = $33
000000r 2               DestinationPageLoc    = $34
000000r 2               VictoryWalkControl    = $35
000000r 2               ScrollFractional      = $0768
000000r 2               PrimaryMsgCounter     = $0719
000000r 2               SecondaryMsgCounter   = $0749
000000r 2               
000000r 2               HorizontalScroll      = $073f
000000r 2               VerticalScroll        = $0740
000000r 2               ScrollLock            = $0723
000000r 2               ScrollThirtyTwo       = $073d
000000r 2               Player_X_Scroll       = $06ff
000000r 2               Player_Pos_ForScroll  = $0755
000000r 2               ScrollAmount          = $0775
000000r 2               
000000r 2               AreaData              = $e7
000000r 2               AreaDataLow           = $e7
000000r 2               AreaDataHigh          = $e8
000000r 2               EnemyData             = $e9
000000r 2               EnemyDataLow          = $e9
000000r 2               EnemyDataHigh         = $ea
000000r 2               
000000r 2               AreaParserTaskNum     = $071f
000000r 2               ColumnSets            = $071e
000000r 2               CurrentPageLoc        = $0725
000000r 2               CurrentColumnPos      = $0726
000000r 2               BackloadingFlag       = $0728
000000r 2               BehindAreaParserFlag  = $0729
000000r 2               AreaObjectPageLoc     = $072a
000000r 2               AreaObjectPageSel     = $072b
000000r 2               AreaDataOffset        = $072c
000000r 2               AreaObjOffsetBuffer   = $072d
000000r 2               AreaObjectLength      = $0730
000000r 2               StaircaseControl      = $0734
000000r 2               AreaObjectHeight      = $0735
000000r 2               MushroomLedgeHalfLen  = $0736
000000r 2               EnemyDataOffset       = $0739
000000r 2               EnemyObjectPageLoc    = $073a
000000r 2               EnemyObjectPageSel    = $073b
000000r 2               MetatileBuffer        = $06a1
000000r 2               BlockBufferColumnPos  = $06a0
000000r 2               CurrentNTAddr_Low     = $0721
000000r 2               CurrentNTAddr_High    = $0720
000000r 2               AttributeBuffer       = $03f9
000000r 2               
000000r 2               LoopCommand           = $0745
000000r 2               
000000r 2               DisplayDigits         = $07d7
000000r 2               TopScoreDisplay       = $07d7
000000r 2               ScoreAndCoinDisplay   = $07dd
000000r 2               PlayerScoreDisplay    = $07dd
000000r 2               GameTimerDisplay      = $07f8
000000r 2               DigitModifier         = $0134
000000r 2               
000000r 2               VerticalFlipFlag      = $0109
000000r 2               FloateyNum_Control    = $0110
000000r 2               ShellChainCounter     = $0125
000000r 2               FloateyNum_Timer      = $012c
000000r 2               FloateyNum_X_Pos      = $0117
000000r 2               FloateyNum_Y_Pos      = $011e
000000r 2               FlagpoleFNum_Y_Pos    = $010d
000000r 2               FlagpoleFNum_YMFDummy = $010e
000000r 2               FlagpoleScore         = $010f
000000r 2               FlagpoleCollisionYPos = $070f
000000r 2               StompChainCounter     = $0484
000000r 2               
000000r 2               VRAM_Buffer1_Offset   = $0300
000000r 2               VRAM_Buffer1          = $0301
000000r 2               VRAM_Buffer2_Offset   = $0340
000000r 2               VRAM_Buffer2          = $0341
000000r 2               VRAM_Buffer_AddrCtrl  = $0773
000000r 2               Sprite0HitDetectFlag  = $0722
000000r 2               IRQUpdateFlag         = $0722
000000r 2               IRQAckFlag            = $077b
000000r 2               DisableScreenFlag     = $0774
000000r 2               DisableIntermediate   = $0769
000000r 2               ColorRotateOffset     = $06d4
000000r 2               
000000r 2               TerrainControl        = $0727
000000r 2               AreaStyle             = $0733
000000r 2               ForegroundScenery     = $0741
000000r 2               BackgroundScenery     = $0742
000000r 2               CloudTypeOverride     = $0743
000000r 2               BackgroundColorCtrl   = $0744
000000r 2               AreaType              = $074e
000000r 2               AreaAddrsLOffset      = $074f
000000r 2               AreaPointer           = $0750
000000r 2               
000000r 2               PlayerEntranceCtrl    = $0710
000000r 2               GameTimerSetting      = $0715
000000r 2               AltEntranceControl    = $0752
000000r 2               EntrancePage          = $0751
000000r 2               NumberOfPlayers       = $077a
000000r 2               UseNtBase2400 		  = $077a
000000r 2               WarpZoneControl       = $06d6
000000r 2               ChangeAreaTimer       = $06de
000000r 2               
000000r 2               MultiLoopCorrectCntr  = $06d9
000000r 2               MultiLoopPassCntr     = $06da
000000r 2               
000000r 2               FetchNewGameTimerFlag = $0757
000000r 2               GameTimerExpiredFlag  = $0759
000000r 2               
000000r 2               PrimaryHardMode       = $076a
000000r 2               SecondaryHardMode     = $06cc
000000r 2               WorldSelectNumber     = $076b
000000r 2               WorldSelectEnableFlag = $07fc
000000r 2               ContinueWorld         = $07fd
000000r 2               
000000r 2               .define IsPlayingLuigi CurrentPlayer
000000r 2               
000000r 2               CurrentPlayer         = $0753
000000r 2               PlayerSize            = $0754
000000r 2               PlayerStatus          = $0756
000000r 2               
000000r 2               ;OnscreenPlayerInfo    = $075a
000000r 2               ;NumberofLives         = $075a ;used by current player
000000r 2               HalfwayPage           = $075b
000000r 2               LevelNumber           = $075c ;the actual dash number
000000r 2               Hidden1UpFlag         = $075d
000000r 2               CoinTally             = $075e
000000r 2               WorldNumber           = $075f
000000r 2               AreaNumber            = $0760 ;internal number used to find areas
000000r 2               
000000r 2               CoinTallyFor1Ups      = $0748
000000r 2               
000000r 2               OffscreenPlayerInfo   = $0761
000000r 2               OffScr_NumberofLives  = $0761 ;used by offscreen player
000000r 2               OffScr_HalfwayPage    = $0762
000000r 2               OffScr_LevelNumber    = $0763
000000r 2               OffScr_Hidden1UpFlag  = $0764
000000r 2               OffScr_CoinTally      = $0765
000000r 2               OffScr_WorldNumber    = $0766
000000r 2               OffScr_AreaNumber     = $0767
000000r 2               
000000r 2               BalPlatformAlignment  = $03a0
000000r 2               Platform_X_Scroll     = $03a1
000000r 2               PlatformCollisionFlag = $03a2
000000r 2               YPlatformTopYPos      = $0401
000000r 2               YPlatformCenterYPos   = $58
000000r 2               
000000r 2               BrickCoinTimerFlag    = $06bc
000000r 2               StarFlagTaskControl   = $0746
000000r 2               
000000r 2               PseudoRandomBitReg    = $07a7
000000r 2               
000000r 2               SprShuffleAmtOffset   = $06e0
000000r 2               SprShuffleAmt         = $06e1
000000r 2               SprDataOffset         = $06e4
000000r 2               Player_SprDataOffset  = $06e4
000000r 2               Enemy_SprDataOffset   = $06e5
000000r 2               Block_SprDataOffset   = $06ec
000000r 2               Alt_SprDataOffset     = $06ec
000000r 2               Bubble_SprDataOffset  = $06ee
000000r 2               FBall_SprDataOffset   = $06f1
000000r 2               Misc_SprDataOffset    = $06f3
000000r 2               SprDataOffset_Ctrl    = $03ee
000000r 2               
000000r 2               Player_State          = $1d
000000r 2               Enemy_State           = $1e
000000r 2               Fireball_State        = $24
000000r 2               Block_State           = $26
000000r 2               Misc_State            = $2a
000000r 2               
000000r 2               Player_MovingDir      = $45
000000r 2               Enemy_MovingDir       = $46
000000r 2               
000000r 2               SprObject_X_Speed     = $57
000000r 2               Player_X_Speed        = $57
000000r 2               Enemy_X_Speed         = $58
000000r 2               Fireball_X_Speed      = $5e
000000r 2               Block_X_Speed         = $60
000000r 2               Misc_X_Speed          = $64
000000r 2               
000000r 2               Jumpspring_FixedYPos  = $58
000000r 2               JumpspringAnimCtrl    = $070e
000000r 2               JumpspringForce       = $06db
000000r 2               
000000r 2               SprObject_PageLoc     = $6d
000000r 2               Player_PageLoc        = $6d
000000r 2               Enemy_PageLoc         = $6e
000000r 2               Fireball_PageLoc      = $74
000000r 2               Block_PageLoc         = $76
000000r 2               Misc_PageLoc          = $7a
000000r 2               Bubble_PageLoc        = $83
000000r 2               
000000r 2               SprObject_X_Position  = $86
000000r 2               Player_X_Position     = $86
000000r 2               Enemy_X_Position      = $87
000000r 2               Fireball_X_Position   = $8d
000000r 2               Block_X_Position      = $8f
000000r 2               Misc_X_Position       = $93
000000r 2               Bubble_X_Position     = $9c
000000r 2               
000000r 2               SprObject_Y_Speed     = $9f
000000r 2               Player_Y_Speed        = $9f
000000r 2               Enemy_Y_Speed         = $a0
000000r 2               Fireball_Y_Speed      = $a6
000000r 2               Block_Y_Speed         = $a8
000000r 2               Misc_Y_Speed          = $ac
000000r 2               
000000r 2               SprObject_Y_HighPos   = $b5
000000r 2               Player_Y_HighPos      = $b5
000000r 2               Enemy_Y_HighPos       = $b6
000000r 2               Fireball_Y_HighPos    = $bc
000000r 2               Block_Y_HighPos       = $be
000000r 2               Misc_Y_HighPos        = $c2
000000r 2               Bubble_Y_HighPos      = $cb
000000r 2               
000000r 2               SprObject_Y_Position  = $ce
000000r 2               Player_Y_Position     = $ce
000000r 2               Enemy_Y_Position      = $cf
000000r 2               Fireball_Y_Position   = $d5
000000r 2               Block_Y_Position      = $d7
000000r 2               Misc_Y_Position       = $db
000000r 2               Bubble_Y_Position     = $e4
000000r 2               
000000r 2               SprObject_Rel_XPos    = $03ad
000000r 2               Player_Rel_XPos       = $03ad
000000r 2               Enemy_Rel_XPos        = $03ae
000000r 2               Fireball_Rel_XPos     = $03af
000000r 2               Bubble_Rel_XPos       = $03b0
000000r 2               Block_Rel_XPos        = $03b1
000000r 2               Misc_Rel_XPos         = $03b3
000000r 2               
000000r 2               SprObject_Rel_YPos    = $03b8
000000r 2               Player_Rel_YPos       = $03b8
000000r 2               Enemy_Rel_YPos        = $03b9
000000r 2               Fireball_Rel_YPos     = $03ba
000000r 2               Bubble_Rel_YPos       = $03bb
000000r 2               Block_Rel_YPos        = $03bc
000000r 2               Misc_Rel_YPos         = $03be
000000r 2               
000000r 2               SprObject_SprAttrib   = $03c4
000000r 2               Player_SprAttrib      = $03c4
000000r 2               Enemy_SprAttrib       = $03c5
000000r 2               
000000r 2               SprObject_X_MoveForce = $0400
000000r 2               Enemy_X_MoveForce     = $0401
000000r 2               
000000r 2               SprObject_YMF_Dummy   = $0416
000000r 2               Player_YMF_Dummy      = $0416
000000r 2               Enemy_YMF_Dummy       = $0417
000000r 2               Bubble_YMF_Dummy      = $042c
000000r 2               
000000r 2               SprObject_Y_MoveForce = $0433
000000r 2               Player_Y_MoveForce    = $0433
000000r 2               Enemy_Y_MoveForce     = $0434
000000r 2               Block_Y_MoveForce     = $043c
000000r 2               
000000r 2               DisableCollisionDet   = $0716
000000r 2               Player_CollisionBits  = $0490
000000r 2               Enemy_CollisionBits   = $0491
000000r 2               
000000r 2               SprObj_BoundBoxCtrl   = $0499
000000r 2               Player_BoundBoxCtrl   = $0499
000000r 2               Enemy_BoundBoxCtrl    = $049a
000000r 2               Fireball_BoundBoxCtrl = $04a0
000000r 2               Misc_BoundBoxCtrl     = $04a2
000000r 2               
000000r 2               EnemyFrenzyBuffer     = $06cb
000000r 2               EnemyFrenzyQueue      = $06cd
000000r 2               Enemy_Flag            = $0f
000000r 2               Enemy_ID              = $16
000000r 2               
000000r 2               PlayerGfxOffset       = $06d5
000000r 2               Player_XSpeedAbsolute = $0700
000000r 2               FrictionAdderHigh     = $0701
000000r 2               FrictionAdderLow      = $0702
000000r 2               RunningSpeed          = $0703
000000r 2               SwimmingFlag          = $0704
000000r 2               Player_X_MoveForce    = $0705
000000r 2               DiffToHaltJump        = $0706
000000r 2               JumpOrigin_Y_HighPos  = $0707
000000r 2               JumpOrigin_Y_Position = $0708
000000r 2               VerticalForce         = $0709
000000r 2               VerticalForceDown     = $070a
000000r 2               PlayerChangeSizeFlag  = $070b
000000r 2               PlayerAnimTimerSet    = $070c
000000r 2               PlayerAnimCtrl        = $070d
000000r 2               DeathMusicLoaded      = $0712
000000r 2               FlagpoleSoundQueue    = $0713
000000r 2               CrouchingFlag         = $0714
000000r 2               MaximumLeftSpeed      = $0450
000000r 2               MaximumRightSpeed     = $0456
000000r 2               
000000r 2               SprObject_OffscrBits  = $03d0
000000r 2               Player_OffscreenBits  = $03d0
000000r 2               Enemy_OffscreenBits   = $03d1
000000r 2               FBall_OffscreenBits   = $03d2
000000r 2               Bubble_OffscreenBits  = $03d3
000000r 2               Block_OffscreenBits   = $03d4
000000r 2               Misc_OffscreenBits    = $03d6
000000r 2               EnemyOffscrBitsMasked = $03d8
000000r 2               
000000r 2               Cannon_Offset         = $046a
000000r 2               Cannon_PageLoc        = $046b
000000r 2               Cannon_X_Position     = $0471
000000r 2               Cannon_Y_Position     = $0477
000000r 2               Cannon_Timer          = $047d
000000r 2               
000000r 2               Whirlpool_Offset      = $046a
000000r 2               Whirlpool_PageLoc     = $046b
000000r 2               Whirlpool_LeftExtent  = $0471
000000r 2               Whirlpool_Length      = $0477
000000r 2               Whirlpool_Flag        = $047d
000000r 2               
000000r 2               VineFlagOffset        = $0398
000000r 2               VineHeight            = $0399
000000r 2               VineObjOffset         = $039a
000000r 2               VineStart_Y_Position  = $039d
000000r 2               
000000r 2               Block_Orig_YPos       = $03e4
000000r 2               Block_BBuf_Low        = $03e6
000000r 2               Block_Metatile        = $03e8
000000r 2               Block_PageLoc2        = $03ea
000000r 2               Block_RepFlag         = $03ec
000000r 2               Block_ResidualCounter = $03f0
000000r 2               Block_Orig_XPos       = $03f1
000000r 2               
000000r 2               BoundingBox_UL_XPos   = $04ac
000000r 2               BoundingBox_UL_YPos   = $04ad
000000r 2               BoundingBox_DR_XPos   = $04ae
000000r 2               BoundingBox_DR_YPos   = $04af
000000r 2               BoundingBox_UL_Corner = $04ac
000000r 2               BoundingBox_LR_Corner = $04ae
000000r 2               EnemyBoundingBoxCoord = $04b0
000000r 2               
000000r 2               PowerUpType           = $39
000000r 2               
000000r 2               FireballBouncingFlag  = $3a
000000r 2               FireballCounter       = $06ce
000000r 2               FireballThrowingTimer = $0711
000000r 2               
000000r 2               HammerEnemyOffset     = $06ae
000000r 2               JumpCoinMiscOffset    = $06b7
000000r 2               
000000r 2               Block_Buffer_1        = $0500
000000r 2               Block_Buffer_2        = $05d0
000000r 2               
000000r 2               HammerThrowingTimer   = $03a2
000000r 2               HammerBroJumpTimer    = $3c
000000r 2               Misc_Collision_Flag   = $06be
000000r 2               
000000r 2               RedPTroopaOrigXPos    = $0401
000000r 2               RedPTroopaCenterYPos  = $58
000000r 2               
000000r 2               XMovePrimaryCounter   = $a0
000000r 2               XMoveSecondaryCounter = $58
000000r 2               
000000r 2               CheepCheepMoveMFlag   = $58
000000r 2               CheepCheepOrigYPos    = $0434
000000r 2               BitMFilter            = $06dd
000000r 2               
000000r 2               LakituReappearTimer   = $06d1
000000r 2               LakituMoveSpeed       = $58
000000r 2               LakituMoveDirection   = $a0
000000r 2               
000000r 2               FirebarSpinState_Low  = $58
000000r 2               FirebarSpinState_High = $a0
000000r 2               FirebarSpinSpeed      = $0388
000000r 2               FirebarSpinDirection  = $34
000000r 2               
000000r 2               DuplicateObj_Offset   = $06cf
000000r 2               NumberofGroupEnemies  = $06d3
000000r 2               
000000r 2               BlooperMoveCounter    = $a0
000000r 2               BlooperMoveSpeed      = $58
000000r 2               
000000r 2               BowserBodyControls    = $0363
000000r 2               BowserFeetCounter     = $0364
000000r 2               BowserMovementSpeed   = $0365
000000r 2               BowserOrigXPos        = $0366
000000r 2               BowserFlameTimerCtrl  = $0367
000000r 2               BowserFront_Offset    = $0368
000000r 2               BridgeCollapseOffset  = $0369
000000r 2               BowserGfxFlag         = $036a
000000r 2               BowserHitPoints       = $0483
000000r 2               MaxRangeFromOrigin    = $06dc
000000r 2               
000000r 2               BowserFlamePRandomOfs = $0417
000000r 2               
000000r 2               PiranhaPlantUpYPos    = $0417
000000r 2               PiranhaPlantDownYPos  = $0434
000000r 2               PiranhaPlant_Y_Speed  = $58
000000r 2               PiranhaPlant_MoveFlag = $a0
000000r 2               
000000r 2               FireworksCounter      = $06d7
000000r 2               ExplosionGfxCounter   = $58
000000r 2               ExplosionTimerCounter = $a0
000000r 2               
000000r 2               ;sound related defines
000000r 2               Squ2_NoteLenBuffer    = $07b3
000000r 2               Squ2_NoteLenCounter   = $07b4
000000r 2               Squ2_EnvelopeDataCtrl = $07b5
000000r 2               Squ1_NoteLenCounter   = $07b6
000000r 2               Squ1_EnvelopeDataCtrl = $07b7
000000r 2               Tri_NoteLenBuffer     = $07b8
000000r 2               Tri_NoteLenCounter    = $07b9
000000r 2               Noise_BeatLenCounter  = $07ba
000000r 2               Squ1_SfxLenCounter    = $07bb
000000r 2               Squ2_SfxLenCounter    = $07bd
000000r 2               Sfx_SecondaryCounter  = $07be
000000r 2               Noise_SfxLenCounter   = $07bf
000000r 2               
000000r 2               PauseSoundQueue       = $fa
000000r 2               Square1SoundQueue     = $ff
000000r 2               Square2SoundQueue     = $fe
000000r 2               NoiseSoundQueue       = $fd
000000r 2               AreaMusicQueue        = $fb
000000r 2               EventMusicQueue       = $fc
000000r 2               
000000r 2               Square1SoundBuffer    = $f1
000000r 2               Square2SoundBuffer    = $f2
000000r 2               NoiseSoundBuffer      = $f3
000000r 2               AreaMusicBuffer       = $f4
000000r 2               EventMusicBuffer      = $07b1
000000r 2               PauseSoundBuffer      = $07b2
000000r 2               
000000r 2               MusicData             = $f5
000000r 2               MusicDataLow          = $f5
000000r 2               MusicDataHigh         = $f6
000000r 2               MusicOffset_Square2   = $f7
000000r 2               MusicOffset_Square1   = $f8
000000r 2               MusicOffset_Triangle  = $f9
000000r 2               MusicOffset_Noise     = $07b0
000000r 2               
000000r 2               NoteLenLookupTblOfs   = $f0
000000r 2               DAC_Counter           = $07c0
000000r 2               NoiseDataLoopbackOfs  = $07c1
000000r 2               NoteLengthTblAdder    = $07c4
000000r 2               AreaMusicBuffer_Alt   = $07c5
000000r 2               PauseModeFlag         = $07c6
000000r 2               GroundMusicHeaderOfs  = $07c7
000000r 2               AltRegContentFlag     = $07ca
000000r 2               
000000r 2               ;-------------------------------------------------------------------------------------
000000r 2               ;CONSTANTS
000000r 2               
000000r 2               ;sound effects constants
000000r 2               Sfx_SmallJump         = %10000000
000000r 2               Sfx_Flagpole          = %01000000
000000r 2               Sfx_Fireball          = %00100000
000000r 2               Sfx_PipeDown_Injury   = %00010000
000000r 2               Sfx_EnemySmack        = %00001000
000000r 2               Sfx_EnemyStomp        = %00000100
000000r 2               Sfx_Bump              = %00000010
000000r 2               Sfx_BigJump           = %00000001
000000r 2               
000000r 2               Sfx_BowserFall        = %10000000
000000r 2               Sfx_ExtraLife         = %01000000
000000r 2               Sfx_PowerUpGrab       = %00100000
000000r 2               Sfx_TimerTick         = %00010000
000000r 2               Sfx_Blast             = %00001000
000000r 2               Sfx_GrowVine          = %00000100
000000r 2               Sfx_GrowPowerUp       = %00000010
000000r 2               Sfx_CoinGrab          = %00000001
000000r 2               
000000r 2               Sfx_BowserFlame       = %00000010
000000r 2               Sfx_BrickShatter      = %00000001
000000r 2               
000000r 2               ;music constants
000000r 2               Silence               = %10000000
000000r 2               
000000r 2               StarPowerMusic        = %01000000
000000r 2               PipeIntroMusic        = %00100000
000000r 2               CloudMusic            = %00010000
000000r 2               CastleMusic           = %00001000
000000r 2               UndergroundMusic      = %00000100
000000r 2               WaterMusic            = %00000010
000000r 2               GroundMusic           = %00000001
000000r 2               
000000r 2               TimeRunningOutMusic   = %01000000
000000r 2               EndOfLevelMusic       = %00100000
000000r 2               AltGameOverMusic      = %00010000
000000r 2               EndOfCastleMusic      = %00001000
000000r 2               VictoryMusic          = %00000100
000000r 2               GameOverMusic         = %00000010
000000r 2               DeathMusic            = %00000001
000000r 2               
000000r 2               ;enemy object constants
000000r 2               GreenKoopa            = $00
000000r 2               BuzzyBeetle           = $02
000000r 2               RedKoopa              = $03
000000r 2               HammerBro             = $05
000000r 2               Goomba                = $06
000000r 2               Bloober               = $07
000000r 2               BulletBill_FrenzyVar  = $08
000000r 2               GreyCheepCheep        = $0a
000000r 2               RedCheepCheep         = $0b
000000r 2               Podoboo               = $0c
000000r 2               PiranhaPlant          = $0d
000000r 2               GreenParatroopaJump   = $0e
000000r 2               RedParatroopa         = $0f
000000r 2               GreenParatroopaFly    = $10
000000r 2               Lakitu                = $11
000000r 2               Spiny                 = $12
000000r 2               FlyCheepCheepFrenzy   = $14
000000r 2               FlyingCheepCheep      = $14
000000r 2               BowserFlame           = $15
000000r 2               Fireworks             = $16
000000r 2               BBill_CCheep_Frenzy   = $17
000000r 2               Stop_Frenzy           = $18
000000r 2               Bowser                = $2d
000000r 2               PowerUpObject         = $2e
000000r 2               VineObject            = $2f
000000r 2               FlagpoleFlagObject    = $30
000000r 2               StarFlagObject        = $31
000000r 2               JumpspringObject      = $32
000000r 2               BulletBill_CannonVar  = $33
000000r 2               RetainerObject        = $35
000000r 2               TallEnemy             = $09
000000r 2               
000000r 2               ;other constants
000000r 2               World1 = 0
000000r 2               World2 = 1
000000r 2               World3 = 2
000000r 2               World4 = 3
000000r 2               World5 = 4
000000r 2               World6 = 5
000000r 2               World7 = 6
000000r 2               World8 = 7
000000r 2               Level1 = 0
000000r 2               Level2 = 1
000000r 2               Level3 = 2
000000r 2               Level4 = 3
000000r 2               
000000r 2               WarmBootOffset        = <$07d6
000000r 2               ColdBootOffset        = <$07fe
000000r 2               TitleScreenDataOffset = $1ec0
000000r 2               SoundMemory           = $07b0
000000r 2               
000000r 2               .define SwimTileRepOffset		PlayerGraphicsTable + $9e
000000r 2               .define MusicHeaderOffsetData	MusicHeaderData - 1
000000r 2               .define MHD 					MusicHeaderData
000000r 2               
000000r 2               A_Button              = %10000000
000000r 2               B_Button              = %01000000
000000r 2               Select_Button         = %00100000
000000r 2               Start_Button          = %00010000
000000r 2               Up_Dir                = %00001000
000000r 2               Down_Dir              = %00000100
000000r 2               Left_Dir              = %00000010
000000r 2               Right_Dir             = %00000001
000000r 2               
000000r 2               TitleScreenModeValue  = 0
000000r 2               GameModeValue         = 1
000000r 2               VictoryModeValue      = 2
000000r 2               GameOverModeValue     = 3
000000r 2               
000000r 1               	.include "macros.inc"
000000r 2               .macro lsr_by n
000000r 2               	.repeat n, i
000000r 2               		lsr
000000r 2               	.endrep
000000r 2               .endmacro
000000r 2               
000000r 2               .macro DoUpdateSockHash
000000r 2               		.local @dont_render
000000r 2               		lda WRAM_PracticeFlags
000000r 2               		and #PF_SockMode
000000r 2               		bne @dont_render
000000r 2               		lda IntervalTimerControl
000000r 2               		and #3
000000r 2               		cmp #2
000000r 2               		bne @dont_render
000000r 2               		jsr Enter_ForceUpdateSockHash
000000r 2               	@dont_render:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro practice_callgate
000000r 2               	.res $FE00 - *, $EA
000000r 2               
000000r 2               	Enter_EndOfCastle:
000000r 2               		lda #BANK_COMMON
000000r 2               		jsr SetBankFromA
000000r 2               		jmp EndOfCastle
000000r 2               
000000r 2               	Enter_RenderIntermediateTime:
000000r 2               		lda #BANK_COMMON
000000r 2               		jsr SetBankFromA
000000r 2               		jmp RenderIntermediateTime
000000r 2               
000000r 2               	Enter_FrameToTime:
000000r 2               		lda #BANK_COMMON
000000r 2               		jsr SetBankFromA
000000r 2               		jmp FrameToTime
000000r 2               
000000r 2               	Enter_UpdateGameTimer:
000000r 2               		lda #BANK_COMMON
000000r 2               		jsr SetBankFromA
000000r 2               		jmp UpdateGameTimer
000000r 2               
000000r 2               	Enter_InitializeWRAM:
000000r 2               		lda #BANK_COMMON
000000r 2               		jsr SetBankFromA
000000r 2               		jmp InitializeWRAM
000000r 2               
000000r 2               	Enter_SetDefaultWRAM:
000000r 2               		lda #BANK_COMMON
000000r 2               		jsr SetBankFromA
000000r 2               		jmp SetDefaultWRAM
000000r 2               
000000r 2               	Enter_FactoryResetWRAM:
000000r 2               		lda #BANK_COMMON
000000r 2               		jsr SetBankFromA
000000r 2               		jmp FactoryResetWRAM
000000r 2               
000000r 2               	Enter_RedrawSockTimer:
000000r 2               		lda #BANK_COMMON
000000r 2               		jsr SetBankFromA
000000r 2               		jmp RedrawSockTimer
000000r 2               
000000r 2               	Enter_PracticeInit:
000000r 2               		lda #BANK_COMMON
000000r 2               		jsr SetBankFromA
000000r 2               		jmp PracticeInit
000000r 2               
000000r 2               	Enter_ForceUpdateSockHash:
000000r 2               		lda #BANK_COMMON
000000r 2               		jsr SetBankFromA
000000r 2               		jmp ForceUpdateSockHash
000000r 2               
000000r 2               	Enter_PracticeOnFrame:
000000r 2               		lda #BANK_COMMON
000000r 2               		jsr SetBankFromA
000000r 2               		jmp PracticeOnFrame
000000r 2               
000000r 2               	Enter_PracticeTitleMenu:
000000r 2               		lda #BANK_COMMON
000000r 2               		jsr SetBankFromA
000000r 2               		jmp PracticeTitleMenu
000000r 2               
000000r 2               	Enter_UpdateFrameRule:
000000r 2               		lda #BANK_COMMON
000000r 2               		jsr SetBankFromA
000000r 2               		jmp UpdateFrameRule
000000r 2               
000000r 2               	Enter_WritePracticeTop:
000000r 2               		lda #BANK_COMMON
000000r 2               		jsr SetBankFromA
000000r 2               		jmp WritePracticeTop
000000r 2               
000000r 2               	Enter_RedrawUserVars:
000000r 2               		lda #BANK_COMMON
000000r 2               		jsr SetBankFromA
000000r 2               		jmp RedrawUserVars
000000r 2               
000000r 2               	Enter_RedrawAll:
000000r 2               		lda #BANK_COMMON
000000r 2               		jsr SetBankFromA
000000r 2               		jmp RedrawAll
000000r 2               
000000r 2               	Enter_RedrawFrameNumbers:
000000r 2               		lda #BANK_COMMON
000000r 2               		jsr SetBankFromA
000000r 2               		jmp RedrawFrameNumbers
000000r 2               
000000r 2               	Enter_ProcessLevelLoad:
000000r 2               		lda #BANK_COMMON
000000r 2               		jsr SetBankFromA
000000r 2               		jmp ProcessLevelLoad
000000r 2               
000000r 2               	Enter_LoadPhysicsData:
000000r 2               		lda #BANK_COMMON
000000r 2               		jsr SetBankFromA
000000r 2               		jmp LoadPhysicsData
000000r 2               
000000r 2               	Enter_LoadMarioPhysics:
000000r 2               		lda #BANK_COMMON
000000r 2               		jsr SetBankFromA
000000r 2               		jmp LoadMarioPhysics
000000r 2               
000000r 2               	Enter_LL_LoadWarpzone:
000000r 2               		lda #BANK_LLDATA
000000r 2               		jsr SetBankFromA
000000r 2               		jmp LoadWarpzone
000000r 2               
000000r 2               	Enter_LL_GetAreaDataAddrs:
000000r 2               		lda #BANK_LLDATA
000000r 2               		jsr SetBankFromA
000000r 2               		jmp GetAreaDataAddrs
000000r 2               
000000r 2               	Enter_LL_LoadAreaPointer:
000000r 2               		lda #BANK_LLDATA
000000r 2               		jsr SetBankFromA
000000r 2               		jmp LoadAreaPointer
000000r 2               
000000r 2               	Enter_LL_WriteHalfwayPages:
000000r 2               		lda #BANK_LLDATA
000000r 2               		jsr SetBankFromA
000000r 2               		jmp WriteHalfwayPages
000000r 2               
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro scenarios_callgate
000000r 2               	.res $FE00 - *, $EA
000000r 2               	Enter_ScenLoadArea:
000000r 2               		lda #BANK_SCEN_DATA
000000r 2               		jsr SetBankFromA
000000r 2               		jmp ScenLoadArea
000000r 2               
000000r 2               	Enter_ScenReset:
000000r 2               		lda #BANK_SCEN_DATA
000000r 2               		jsr SetBankFromA
000000r 2               		jmp ScenReset
000000r 2               
000000r 2               	Enter_ScenUpdateSelected:
000000r 2               		lda #BANK_SCEN_DATA
000000r 2               		jsr SetBankFromA
000000r 2               		jmp ScenUpdateSelected
000000r 2               
000000r 2               	Enter_ScenValidate:
000000r 2               		lda #BANK_SCEN_DATA
000000r 2               		jsr SetBankFromA
000000r 2               		jmp ScenValidate
000000r 2               
000000r 2               .endmacro
000000r 2               
000000r 2               MMC5_PRGMode          = $5100
000000r 2               MMC5_CHRMode          = $5101
000000r 2               MMC5_RAMProtect1      = $5102
000000r 2               MMC5_RAMProtect2      = $5103
000000r 2               MMC5_ExRamMode        = $5104
000000r 2               MMC5_Nametables       = $5105
000000r 2               MMC5_FillTile         = $5106
000000r 2               MMC5_CHRBank          = $5120
000000r 2               MMC5_PRGBank          = $5113
000000r 2               MMC5_VSplitMode       = $5200
000000r 2               MMC5_VSplitScroll     = $5201
000000r 2               MMC5_VSplitBank       = $5202
000000r 2               MMC5_SLCompare        = $5203
000000r 2               MMC5_SLIRQ            = $5204
000000r 2               MMC5_ExRamOfs         = $3C00
000000r 2               
000000r 2               ;
000000r 2               ; Lower banks
000000r 2               ;
000000r 2               .macro control_bank
000000r 2               	.res $FF00 - *, $EA
000000r 2               
000000r 2               	Enter_SoundEngine:
000000r 2               		lda #BANK_COMMON
000000r 2               		jsr SetBankFromA
000000r 2               		jmp SoundEngineExternal
000000r 2               
000000r 2               	ReturnBank:
000000r 2               		lda BANK_SELECTED
000000r 2               		jmp SetBankFromA
000000r 2               
000000r 2               	SetChrBank0FromA:
000000r 2               		sta MMC5_CHRBank+3
000000r 2               		rts
000000r 2               
000000r 2               	SetChrBank1FromA:
000000r 2               		sta MMC5_CHRBank+7
000000r 2               		rts
000000r 2               
000000r 2               	SetChrBanksFromAX:
000000r 2               		jsr SetChrBank0FromA
000000r 2               		txa
000000r 2               		jmp SetChrBank1FromA
000000r 2               
000000r 2               	SetBankFromA:
000000r 2               		clc
000000r 2               		ora #$82			; mark as prg-rom
000000r 2               		sta MMC5_PRGBank+4
000000r 2               		rts
000000r 2               
000000r 2               	MapperReset:
000000r 2               		;
000000r 2               		; clear mapper state
000000r 2               		;
000000r 2               		sei
000000r 2               		cld ;absolutely useless :)
000000r 2               		ldx #$FF
000000r 2               		txs
000000r 2               		lda #%01000000         ; disable apu irq
000000r 2               		sta $4017
000000r 2               		lda #%10
000000r 2               		sta MMC5_RAMProtect1
000000r 2               		lda #%01
000000r 2               		sta MMC5_RAMProtect2
000000r 2               		lda #1
000000r 2               		sta MMC5_CHRMode       ; use 1kb chr banking
000000r 2               		lda #0
000000r 2               		sta MMC5_PRGMode       ; use 32kb prg banking
000000r 2               		lsr a
000000r 2               		sta MMC5_PRGBank       ; use bank 0 for prg-ram
000000r 2               		lda #%11
000000r 2               		sta MMC5_ExRamMode
000000r 2               		lda #BANK_LOADER
000000r 2               		sta BANK_SELECTED
000000r 2               		jsr SetBankFromA       ; set startup bank
000000r 2               		lda #$44
000000r 2               		sta MMC5_Nametables    ; set vertical mirroring
000000r 2               		jmp $8000
000000r 2               
000000r 2               	StartBank:
000000r 2               		;
000000r 2               		; 0 Bank selected
000000r 2               		;
000000r 2               		sta BANK_SELECTED
000000r 2               		ldx #$00
000000r 2               		stx PPU_CTRL_REG1
000000r 2               		stx PPU_CTRL_REG2
000000r 2               		jsr SetBankFromA
000000r 2               		jmp Start
000000r 2               
000000r 2               	IRQ:
000000r 2               		sei
000000r 2               		php
000000r 2               		pha
000000r 2               		lda MMC5_SLIRQ
000000r 2               		lda Mirror_PPU_CTRL_REG1      ; waste some time to get to the end of the scanline
000000r 2               		lda Mirror_PPU_CTRL_REG1      ; waste some time to get to the end of the scanline
000000r 2               		lda Mirror_PPU_CTRL_REG1      ; waste some time to get to the end of the scanline
000000r 2               		lda Mirror_PPU_CTRL_REG1
000000r 2               		and #%11110110           ;mask out sprite address and nametable
000000r 2               		ora UseNtBase2400
000000r 2               		sta Mirror_PPU_CTRL_REG1      ;update the register and its mirror
000000r 2               		sta PPU_CTRL_REG1
000000r 2               		lda HorizontalScroll
000000r 2               		sta PPU_SCROLL_REG           ;set scroll regs for the screen under the status bar
000000r 2               		lda #$00
000000r 2               		sta PPU_SCROLL_REG
000000r 2               		sta IRQAckFlag           ;indicate IRQ was acknowledged
000000r 2               		tya                      ; waste some time to match 2j irq
000000r 2               		ldy #$18                 ; ...
000000r 2               	:   dey                      ; ...
000000r 2               		bne :-                   ; ...
000000r 2               		tay                      ; ...
000000r 2               		pla
000000r 2               		plp
000000r 2               		cli
000000r 2               		rti
000000r 2               
000000r 2               		.res $FFFA - *, $ea
000000r 2               		;
000000r 2               		; Interrupt table
000000r 2               		;
000000r 2               		.word NonMaskableInterrupt
000000r 2               		.word MapperReset
000000r 2               		.word IRQ
000000r 2               
000000r 2               .endmacro
000000r 2               
000000r 1               	.include "text.inc"
000000r 2               .ifndef __TEXT_INC_DEF__
000000r 2               .define __TEXT_INC_DEF__
000000r 2               
000000r 2               .charmap '0', 0
000000r 2               .charmap '1', 1
000000r 2               .charmap '2', 2
000000r 2               .charmap '3', 3
000000r 2               .charmap '4', 4
000000r 2               .charmap '5', 5
000000r 2               .charmap '6', 6
000000r 2               .charmap '7', 7
000000r 2               .charmap '8', 8
000000r 2               .charmap '9', 9
000000r 2               .charmap 'A', $0A
000000r 2               .charmap 'B', $0B
000000r 2               .charmap 'C', $0C
000000r 2               .charmap 'D', $0D
000000r 2               .charmap 'E', $0E
000000r 2               .charmap 'F', $0F
000000r 2               .charmap 'G', $10
000000r 2               .charmap 'H', $11
000000r 2               .charmap 'I', $12
000000r 2               .charmap 'J', $13
000000r 2               .charmap 'K', $14
000000r 2               .charmap 'L', $15
000000r 2               .charmap 'M', $16
000000r 2               .charmap 'N', $17
000000r 2               .charmap 'O', $18
000000r 2               .charmap 'P', $19
000000r 2               .charmap 'Q', $1a
000000r 2               .charmap 'R', $1b
000000r 2               .charmap 'S', $1c
000000r 2               .charmap 'T', $1d
000000r 2               .charmap 'U', $1e
000000r 2               .charmap 'V', $1f
000000r 2               .charmap 'W', $20
000000r 2               .charmap 'X', $21
000000r 2               .charmap 'Y', $22
000000r 2               .charmap 'Z', $23
000000r 2               .charmap '-', $28
000000r 2               .charmap '!', $2b
000000r 2               .charmap '*', $29
000000r 2               .charmap ' ', $24
000000r 2               .charmap '.', $2a
000000r 2               .charmap ':', $28
000000r 2               
000000r 2               .macro text_block at, txt
000000r 2               	.byte at >> 8
000000r 2               	.byte at & $ff
000000r 2               	.byte .strlen(txt)
000000r 2               	.byte txt
000000r 2               .endmacro
000000r 2               
000000r 2               .macro inline_write_block name
000000r 2               	.local @more_bytes
000000r 2               	ldx #0
000000r 2               	ldy VRAM_Buffer1_Offset
000000r 2               @more_bytes:
000000r 2               	lda name, x
000000r 2               	sta VRAM_Buffer1, y
000000r 2               	inx
000000r 2               	iny
000000r 2               	cmp #0
000000r 2               	bne @more_bytes
000000r 2               	dey
000000r 2               	sty VRAM_Buffer1_Offset
000000r 2               .endmacro
000000r 2               
000000r 2               .endif
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 1               
000000r 1               	.org $8000
008000  1               	.segment "bank4"
008000  1               
008000  1               	.ifndef ENABLE_SFX
008000  1                     .define ENABLE_SFX 1
008000  1                   .endif
008000  1               
008000  1                   .ifndef ENABLE_MUSIC
008000  1                     .define ENABLE_MUSIC 1
008000  1                   .endif
008000  1               
008000  1               Start:	; Dummy
008000  1               NonMaskableInterrupt: ; Dummy
008000  1               
008000  1               	.include "utils.inc"
008000  2               .ifndef __UTILS_INC_DEF__
008000  2               .define __UTILS_INC_DEF__
008000  2               
008000  2               AdvanceRandom:
008000  2  AD A7 07         lda PseudoRandomBitReg    ;get first memory location of LSFR bytes
008003  2  29 02            and #%00000010            ;mask out all but d1
008005  2  85 00            sta $00                   ;save here
008007  2  AD A8 07         lda PseudoRandomBitReg+1  ;get second memory location
00800A  2  29 02            and #%00000010            ;mask out all but d1
00800C  2  45 00            eor $00                   ;perform exclusive-OR on d1 from first and second bytes
00800E  2  18               clc                       ;if neither or both are set, carry will be clear
00800F  2  F0 01            beq RotPRandomBit
008011  2  38               sec                       ;if one or the other is set, carry will be set
008012  2               RotPRandomBit:
008012  2  6E A7 07         ror PseudoRandomBitReg+0  ;rotate carry into d7, and rotate last bit into carry
008015  2  6E A8 07         ror PseudoRandomBitReg+1  ;rotate carry into d7, and rotate last bit into carry
008018  2  6E A9 07         ror PseudoRandomBitReg+2  ;rotate carry into d7, and rotate last bit into carry
00801B  2  6E AA 07         ror PseudoRandomBitReg+3  ;rotate carry into d7, and rotate last bit into carry
00801E  2  6E AB 07         ror PseudoRandomBitReg+4  ;rotate carry into d7, and rotate last bit into carry
008021  2  6E AC 07         ror PseudoRandomBitReg+5  ;rotate carry into d7, and rotate last bit into carry
008024  2  6E AD 07         ror PseudoRandomBitReg+6  ;rotate carry into d7, and rotate last bit into carry
008027  2  60               rts
008028  2               
008028  2               MulByTen:
008028  2  0A               asl
008029  2  85 00            sta $0
00802B  2  0A               asl
00802C  2  0A               asl
00802D  2  18               clc
00802E  2  65 00            adc $0
008030  2  60               rts
008031  2               
008031  2               .include "div10.inc"
008031  3               .ifndef __DIV10_INC_DEF__
008031  3               .define __DIV10_INC_DEF__
008031  3               
008031  3               DivByTen:
008031  3  A2 00            ldx #$00
008033  3               DivMore:
008033  3  C9 0A            cmp #$0a
008035  3  90 06            bcc DivByTenDone
008037  3  E9 0A            sbc #$0a
008039  3  E8               inx
00803A  3  38               sec
00803B  3  B0 F6            bcs DivMore
00803D  3               DivByTenDone:
00803D  3  60               rts
00803E  3               
00803E  3               .endif
00803E  3               
00803E  2               
00803E  2               .endif
00803E  2               
00803E  1               	.include "sound.asm"
00803E  2               
00803E  2               ;
00803E  2               ; Bank for all sound-related stuff
00803E  2               ;
00803E  2               SoundEngineExternal:
00803E  2  20 44 80             jsr SoundEngine
008041  2  4C 08 FF             jmp ReturnBank
008044  2               
008044  2               SoundEngine:
008044  2  AD 70 07              lda OperMode              ;are we in title screen mode?
008047  2  D0 04                 bne SndOn
008049  2  8D 15 40              sta SND_MASTERCTRL_REG    ;if so, disable sound and leave
00804C  2  60                    rts
00804D  2  A9 FF        SndOn:   lda #$ff
00804F  2  8D 17 40              sta JOYPAD_PORT2          ;disable irqs and set frame counter mode???
008052  2  A9 0F                 lda #$0f
008054  2  8D 15 40              sta SND_MASTERCTRL_REG    ;enable first four channels
008057  2  AD C6 07              lda PauseModeFlag         ;is sound already in pause mode?
00805A  2  D0 06                 bne InPause
00805C  2  A5 FA                 lda PauseSoundQueue       ;if not, check pause sfx queue
00805E  2  C9 01                 cmp #$01
008060  2  D0 5D                 bne RunSoundSubroutines   ;if queue is empty, skip pause mode routine
008062  2  AD B2 07     InPause: lda PauseSoundBuffer      ;check pause sfx buffer
008065  2  D0 23                 bne ContPau
008067  2  A5 FA                 lda PauseSoundQueue       ;check pause queue
008069  2  F0 70                 beq SkipSoundSubroutines
00806B  2  8D B2 07              sta PauseSoundBuffer      ;if queue full, store in buffer and activate
00806E  2  8D C6 07              sta PauseModeFlag         ;pause mode to interrupt game sounds
008071  2  A9 00                 lda #$00                  ;disable sound and clear sfx buffers
008073  2  8D 15 40              sta SND_MASTERCTRL_REG
008076  2  85 F1                 sta Square1SoundBuffer
008078  2  85 F2                 sta Square2SoundBuffer
00807A  2  85 F3                 sta NoiseSoundBuffer
00807C  2  A9 0F                 lda #$0f
00807E  2  8D 15 40              sta SND_MASTERCTRL_REG    ;enable sound again
008081  2  A9 2A                 lda #$2a                  ;store length of sound in pause counter
008083  2  8D BB 07              sta Squ1_SfxLenCounter
008086  2  A9 44        PTone1F: lda #$44                  ;play first tone
008088  2  D0 11                 bne PTRegC                ;unconditional branch
00808A  2  AD BB 07     ContPau: lda Squ1_SfxLenCounter    ;check pause length left
00808D  2  C9 24                 cmp #$24                  ;time to play second?
00808F  2  F0 08                 beq PTone2F
008091  2  C9 1E                 cmp #$1e                  ;time to play first again?
008093  2  F0 F1                 beq PTone1F
008095  2  C9 18                 cmp #$18                  ;time to play second again?
008097  2  D0 09                 bne DecPauC               ;only load regs during times, otherwise skip
008099  2  A9 64        PTone2F: lda #$64                  ;store reg contents and play the pause sfx
00809B  2  A2 84        PTRegC:  ldx #$84
00809D  2  A0 7F                 ldy #$7f
00809F  2  20 06 81              jsr PlaySqu1Sfx
0080A2  2  CE BB 07     DecPauC: dec Squ1_SfxLenCounter    ;decrement pause sfx counter
0080A5  2  D0 34                 bne SkipSoundSubroutines
0080A7  2  A9 00                 lda #$00                  ;disable sound if in pause mode and
0080A9  2  8D 15 40              sta SND_MASTERCTRL_REG    ;not currently playing the pause sfx
0080AC  2  AD B2 07              lda PauseSoundBuffer      ;if no longer playing pause sfx, check to see
0080AF  2  C9 02                 cmp #$02                  ;if we need to be playing sound again
0080B1  2  D0 05                 bne SkipPIn
0080B3  2  A9 00                 lda #$00                  ;clear pause mode to allow game sounds again
0080B5  2  8D C6 07              sta PauseModeFlag
0080B8  2  A9 00        SkipPIn: lda #$00                  ;clear pause sfx buffer
0080BA  2  8D B2 07              sta PauseSoundBuffer
0080BD  2  F0 1C                 beq SkipSoundSubroutines
0080BF  2               
0080BF  2               RunSoundSubroutines:
0080BF  2  AD 0D 60              lda WRAM_DisableSound
0080C2  2  D0 09                 bne @nosound
0080C4  2  20 99 81              jsr Square1SfxHandler  ;play sfx on square channel 1
0080C7  2  20 FA 82              jsr Square2SfxHandler  ; ''  ''  '' square channel 2
0080CA  2  20 E5 83              jsr NoiseSfxHandler    ; ''  ''  '' noise channel
0080CD  2               @nosound:
0080CD  2  AD 0C 60              lda WRAM_DisableMusic
0080D0  2  D0 03                 bne @nomusic
0080D2  2  20 12 84              jsr MusicHandler       ;play music on all channels
0080D5  2               @nomusic:
0080D5  2  A9 00                 lda #$00               ;clear the music queues
0080D7  2  85 FB                 sta AreaMusicQueue
0080D9  2  85 FC                 sta EventMusicQueue
0080DB  2               
0080DB  2               SkipSoundSubroutines:
0080DB  2  A9 00                  lda #$00               ;clear the sound effects queues
0080DD  2  85 FF                  sta Square1SoundQueue
0080DF  2  85 FE                  sta Square2SoundQueue
0080E1  2  85 FD                  sta NoiseSoundQueue
0080E3  2  85 FA                  sta PauseSoundQueue
0080E5  2  AC C0 07               ldy DAC_Counter        ;load some sort of counter
0080E8  2  A5 F4                  lda AreaMusicBuffer
0080EA  2  29 03                  and #%00000011         ;check for specific music
0080EC  2  F0 07                  beq NoIncDAC
0080EE  2  EE C0 07               inc DAC_Counter        ;increment and check counter
0080F1  2  C0 30                  cpy #$30
0080F3  2  90 06                  bcc StrWave            ;if not there yet, just store it
0080F5  2  98           NoIncDAC: tya
0080F6  2  F0 03                  beq StrWave            ;if we are at zero, do not decrement
0080F8  2  CE C0 07               dec DAC_Counter        ;decrement counter
0080FB  2  8C 11 40     StrWave:  sty SND_DELTA_REG+1    ;store into DMC load register (??)
0080FE  2  60                     rts                    ;we are done here
0080FF  2               
0080FF  2               Dump_Squ1_Regs:
0080FF  2  8C 01 40           sty SND_SQUARE1_REG+1  ;dump the contents of X and Y into square 1's control regs
008102  2  8E 00 40           stx SND_SQUARE1_REG
008105  2  60                 rts
008106  2               
008106  2               PlaySqu1Sfx:
008106  2  20 FF 80           jsr Dump_Squ1_Regs     ;do sub to set ctrl regs for square 1, then set frequency regs
008109  2               
008109  2               SetFreq_Squ1:
008109  2  A2 00              ldx #$00               ;set frequency reg offset for square 1 sound channel
00810B  2               
00810B  2               Dump_Freq_Regs:
00810B  2  A8                   tay
00810C  2  B9 7F 8C             lda FreqRegLookupTbl+1,y  ;use previous contents of A for sound reg offset
00810F  2  F0 0B                beq NoTone                ;if zero, then do not load
008111  2  9D 02 40             sta SND_REGISTER+2,x      ;first byte goes into LSB of frequency divider
008114  2  B9 7E 8C             lda FreqRegLookupTbl,y    ;second byte goes into 3 MSB plus extra bit for
008117  2  09 08                ora #%00001000            ;length counter
008119  2  9D 03 40             sta SND_REGISTER+3,x
00811C  2  60           NoTone: rts
00811D  2               
00811D  2               Dump_Sq2_Regs:
00811D  2  8E 04 40           stx SND_SQUARE2_REG    ;dump the contents of X and Y into square 2's control regs
008120  2  8C 05 40           sty SND_SQUARE2_REG+1
008123  2  60                 rts
008124  2               
008124  2               PlaySqu2Sfx:
008124  2  20 1D 81           jsr Dump_Sq2_Regs      ;do sub to set ctrl regs for square 2, then set frequency regs
008127  2               
008127  2               SetFreq_Squ2:
008127  2  A2 04              ldx #$04               ;set frequency reg offset for square 2 sound channel
008129  2  D0 E0              bne Dump_Freq_Regs     ;unconditional branch
00812B  2               
00812B  2               SetFreq_Tri:
00812B  2  A2 08              ldx #$08               ;set frequency reg offset for triangle sound channel
00812D  2  D0 DC              bne Dump_Freq_Regs     ;unconditional branch
00812F  2               
00812F  2               ;--------------------------------
00812F  2               SwimStompEnvelopeData:
00812F  2  9F 9B 98 96        .byte $9f, $9b, $98, $96, $95, $94, $92, $90
008133  2  95 94 92 90  
008137  2  90 9A 97 95        .byte $90, $9a, $97, $95, $93, $92
00813B  2  93 92        
00813D  2               
00813D  2               PlayFlagpoleSlide:
00813D  2  A9 40               lda #$40               ;store length of flagpole sound
00813F  2  8D BB 07            sta Squ1_SfxLenCounter
008142  2  A9 62               lda #$62               ;load part of reg contents for flagpole sound
008144  2  20 09 81            jsr SetFreq_Squ1
008147  2  A2 99               ldx #$99               ;now load the rest
008149  2  D0 25               bne FPS2nd
00814B  2               
00814B  2               PlaySmallJump:
00814B  2  A9 26               lda #$26               ;branch here for small mario jumping sound
00814D  2  D0 02               bne JumpRegContents
00814F  2               
00814F  2               PlayBigJump:
00814F  2  A9 18               lda #$18               ;branch here for big mario jumping sound
008151  2               
008151  2               JumpRegContents:
008151  2  A2 82               ldx #$82               ;note that small and big jump borrow each others' reg contents
008153  2  A0 A7               ldy #$a7               ;anyway, this loads the first part of mario's jumping sound
008155  2  20 06 81            jsr PlaySqu1Sfx
008158  2  A9 28               lda #$28               ;store length of sfx for both jumping sounds
00815A  2  8D BB 07            sta Squ1_SfxLenCounter ;then continue on here
00815D  2               
00815D  2               ContinueSndJump:
00815D  2  AD BB 07               lda Squ1_SfxLenCounter ;jumping sounds seem to be composed of three parts
008160  2  C9 25                  cmp #$25               ;check for time to play second part yet
008162  2  D0 06                  bne N2Prt
008164  2  A2 5F                  ldx #$5f               ;load second part
008166  2  A0 F6                  ldy #$f6
008168  2  D0 08                  bne DmpJpFPS           ;unconditional branch
00816A  2  C9 20        N2Prt:    cmp #$20               ;check for third part
00816C  2  D0 29                  bne DecJpFPS
00816E  2  A2 48                  ldx #$48               ;load third part
008170  2  A0 BC        FPS2nd:   ldy #$bc               ;the flagpole slide sound shares part of third part
008172  2  20 FF 80     DmpJpFPS: jsr Dump_Squ1_Regs
008175  2  D0 20                  bne DecJpFPS           ;unconditional branch outta here
008177  2               
008177  2               PlayFireballThrow:
008177  2  A9 05                lda #$05
008179  2  A0 99                ldy #$99                 ;load reg contents for fireball throw sound
00817B  2  D0 04                bne Fthrow               ;unconditional branch
00817D  2               
00817D  2               PlayBump:
00817D  2  A9 0A                  lda #$0a                ;load length of sfx and reg contents for bump sound
00817F  2  A0 93                  ldy #$93
008181  2  A2 9E        Fthrow:   ldx #$9e                ;the fireball sound shares reg contents with the bump sound
008183  2  8D BB 07               sta Squ1_SfxLenCounter
008186  2  A9 0C                  lda #$0c                ;load offset for bump sound
008188  2  20 06 81               jsr PlaySqu1Sfx
00818B  2               
00818B  2               ContinueBumpThrow:
00818B  2  AD BB 07               lda Squ1_SfxLenCounter  ;check for second part of bump sound
00818E  2  C9 06                  cmp #$06
008190  2  D0 05                  bne DecJpFPS
008192  2  A9 BB                  lda #$bb                ;load second part directly
008194  2  8D 01 40               sta SND_SQUARE1_REG+1
008197  2  D0 60        DecJpFPS: bne BranchToDecLength1  ;unconditional branch
008199  2               
008199  2               
008199  2               Square1SfxHandler:
008199  2  A4 FF               ldy Square1SoundQueue   ;check for sfx in queue
00819B  2  F0 20               beq CheckSfx1Buffer
00819D  2  84 F1               sty Square1SoundBuffer  ;if found, put in buffer
00819F  2  30 AA               bmi PlaySmallJump       ;small jump
0081A1  2  46 FF               lsr Square1SoundQueue
0081A3  2  B0 AA               bcs PlayBigJump         ;big jump
0081A5  2  46 FF               lsr Square1SoundQueue
0081A7  2  B0 D4               bcs PlayBump            ;bump
0081A9  2  46 FF               lsr Square1SoundQueue
0081AB  2  B0 2C               bcs PlaySwimStomp       ;swim/stomp
0081AD  2  46 FF               lsr Square1SoundQueue
0081AF  2  B0 4A               bcs PlaySmackEnemy      ;smack enemy
0081B1  2  46 FF               lsr Square1SoundQueue
0081B3  2  B0 7F               bcs PlayPipeDownInj     ;pipedown/injury
0081B5  2  46 FF               lsr Square1SoundQueue
0081B7  2  B0 BE               bcs PlayFireballThrow   ;fireball throw
0081B9  2  46 FF               lsr Square1SoundQueue
0081BB  2  B0 80               bcs PlayFlagpoleSlide   ;slide flagpole
0081BD  2               
0081BD  2               CheckSfx1Buffer:
0081BD  2  A5 F1               lda Square1SoundBuffer   ;check for sfx in buffer
0081BF  2  F0 17               beq ExS1H                ;if not found, exit sub
0081C1  2  30 9A               bmi ContinueSndJump      ;small mario jump
0081C3  2  4A                  lsr
0081C4  2  B0 97               bcs ContinueSndJump      ;big mario jump
0081C6  2  4A                  lsr
0081C7  2  B0 C2               bcs ContinueBumpThrow    ;bump
0081C9  2  4A                  lsr
0081CA  2  B0 1B               bcs ContinueSwimStomp    ;swim/stomp
0081CC  2  4A                  lsr
0081CD  2  B0 3C               bcs ContinueSmackEnemy   ;smack enemy
0081CF  2  4A                  lsr
0081D0  2  B0 67               bcs ContinuePipeDownInj  ;pipedown/injury
0081D2  2  4A                  lsr
0081D3  2  B0 B6               bcs ContinueBumpThrow    ;fireball throw
0081D5  2  4A                  lsr
0081D6  2  B0 48               bcs DecrementSfx1Length  ;slide flagpole
0081D8  2  60           ExS1H: rts
0081D9  2               
0081D9  2               PlaySwimStomp:
0081D9  2  A9 0E              lda #$0e               ;store length of swim/stomp sound
0081DB  2  8D BB 07           sta Squ1_SfxLenCounter
0081DE  2  A0 9C              ldy #$9c               ;store reg contents for swim/stomp sound
0081E0  2  A2 9E              ldx #$9e
0081E2  2  A9 26              lda #$26
0081E4  2  20 06 81           jsr PlaySqu1Sfx
0081E7  2               
0081E7  2               ContinueSwimStomp:
0081E7  2  AC BB 07           ldy Squ1_SfxLenCounter        ;look up reg contents in data section based on
0081EA  2  B9 2E 81           lda SwimStompEnvelopeData-1,y ;length of sound left, used to control sound's
0081ED  2  8D 00 40           sta SND_SQUARE1_REG           ;envelope
0081F0  2  C0 06              cpy #$06
0081F2  2  D0 05              bne BranchToDecLength1
0081F4  2  A9 9E              lda #$9e                      ;when the length counts down to a certain point, put this
0081F6  2  8D 02 40           sta SND_SQUARE1_REG+2         ;directly into the LSB of square 1's frequency divider
0081F9  2               
0081F9  2               BranchToDecLength1:
0081F9  2  D0 25              bne DecrementSfx1Length  ;unconditional branch (regardless of how we got here)
0081FB  2               
0081FB  2               PlaySmackEnemy:
0081FB  2  A9 0E              lda #$0e                 ;store length of smack enemy sound
0081FD  2  A0 CB              ldy #$cb
0081FF  2  A2 9F              ldx #$9f
008201  2  8D BB 07           sta Squ1_SfxLenCounter
008204  2  A9 28              lda #$28                 ;store reg contents for smack enemy sound
008206  2  20 06 81           jsr PlaySqu1Sfx
008209  2  D0 15              bne DecrementSfx1Length  ;unconditional branch
00820B  2               
00820B  2               ContinueSmackEnemy:
00820B  2  AC BB 07             ldy Squ1_SfxLenCounter  ;check about halfway through
00820E  2  C0 08                cpy #$08
008210  2  D0 09                bne SmSpc
008212  2  A9 A0                lda #$a0                ;if we're at the about-halfway point, make the second tone
008214  2  8D 02 40             sta SND_SQUARE1_REG+2   ;in the smack enemy sound
008217  2  A9 9F                lda #$9f
008219  2  D0 02                bne SmTick
00821B  2  A9 90        SmSpc:  lda #$90                ;this creates spaces in the sound, giving it its distinct noise
00821D  2  8D 00 40     SmTick: sta SND_SQUARE1_REG
008220  2               
008220  2               DecrementSfx1Length:
008220  2  CE BB 07           dec Squ1_SfxLenCounter    ;decrement length of sfx
008223  2  D0 0E              bne ExSfx1
008225  2               
008225  2               StopSquare1Sfx:
008225  2  A2 00                ldx #$00                ;if end of sfx reached, clear buffer
008227  2  86 F1                stx $f1                 ;and stop making the sfx
008229  2  A2 0E                ldx #$0e
00822B  2  8E 15 40             stx SND_MASTERCTRL_REG
00822E  2  A2 0F                ldx #$0f
008230  2  8E 15 40             stx SND_MASTERCTRL_REG
008233  2  60           ExSfx1: rts
008234  2               
008234  2               PlayPipeDownInj:
008234  2  A9 2F              lda #$2f                ;load length of pipedown sound
008236  2  8D BB 07           sta Squ1_SfxLenCounter
008239  2               
008239  2               ContinuePipeDownInj:
008239  2  AD BB 07              lda Squ1_SfxLenCounter  ;some bitwise logic, forces the regs
00823C  2  4A                    lsr                     ;to be written to only during six specific times
00823D  2  B0 10                 bcs NoPDwnL             ;during which d3 must be set and d1-0 must be clear
00823F  2  4A                    lsr
008240  2  B0 0D                 bcs NoPDwnL
008242  2  29 02                 and #%00000010
008244  2  F0 09                 beq NoPDwnL
008246  2  A0 91                 ldy #$91                ;and this is where it actually gets written in
008248  2  A2 9A                 ldx #$9a
00824A  2  A9 44                 lda #$44
00824C  2  20 06 81              jsr PlaySqu1Sfx
00824F  2  4C 20 82     NoPDwnL: jmp DecrementSfx1Length
008252  2               
008252  2               ;--------------------------------
008252  2               
008252  2               ExtraLifeFreqData:
008252  2  58 02 54 56        .byte $58, $02, $54, $56, $4e, $44
008256  2  4E 44        
008258  2               
008258  2               PowerUpGrabFreqData:
008258  2  4C 52 4C 48        .byte $4c, $52, $4c, $48, $3e, $36, $3e, $36, $30
00825C  2  3E 36 3E 36  
008260  2  30           
008261  2  28 4A 50 4A        .byte $28, $4a, $50, $4a, $64, $3c, $32, $3c, $32
008265  2  64 3C 32 3C  
008269  2  32           
00826A  2  2C 24 3A 64        .byte $2c, $24, $3a, $64, $3a, $34, $2c, $22, $2c
00826E  2  3A 34 2C 22  
008272  2  2C           
008273  2               
008273  2               ;residual frequency data
008273  2  22 1C 14           .byte $22, $1c, $14
008276  2               
008276  2               PUp_VGrow_FreqData:
008276  2  14 04 22 24        .byte $14, $04, $22, $24, $16, $04, $24, $26 ;used by both
00827A  2  16 04 24 26  
00827E  2  18 04 26 28        .byte $18, $04, $26, $28, $1a, $04, $28, $2a
008282  2  1A 04 28 2A  
008286  2  1C 04 2A 2C        .byte $1c, $04, $2a, $2c, $1e, $04, $2c, $2e ;used by vinegrow
00828A  2  1E 04 2C 2E  
00828E  2  20 04 2E 30        .byte $20, $04, $2e, $30, $22, $04, $30, $32
008292  2  22 04 30 32  
008296  2               
008296  2               PlayCoinGrab:
008296  2  A9 35                lda #$35             ;load length of coin grab sound
008298  2  A2 8D                ldx #$8d             ;and part of reg contents
00829A  2  D0 04                bne CGrab_TTickRegL
00829C  2               
00829C  2               PlayTimerTick:
00829C  2  A9 06                lda #$06             ;load length of timer tick sound
00829E  2  A2 98                ldx #$98             ;and part of reg contents
0082A0  2               
0082A0  2               CGrab_TTickRegL:
0082A0  2  8D BD 07             sta Squ2_SfxLenCounter
0082A3  2  A0 7F                ldy #$7f                ;load the rest of reg contents
0082A5  2  A9 42                lda #$42                ;of coin grab and timer tick sound
0082A7  2  20 24 81             jsr PlaySqu2Sfx
0082AA  2               
0082AA  2               ContinueCGrabTTick:
0082AA  2  AD BD 07             lda Squ2_SfxLenCounter  ;check for time to play second tone yet
0082AD  2  C9 30                cmp #$30                ;timer tick sound also executes this, not sure why
0082AF  2  D0 05                bne N2Tone
0082B1  2  A9 54                lda #$54                ;if so, load the tone directly into the reg
0082B3  2  8D 06 40             sta SND_SQUARE2_REG+2
0082B6  2  D0 2E        N2Tone: bne DecrementSfx2Length
0082B8  2               
0082B8  2               PlayBlast:
0082B8  2  A9 20                lda #$20                ;load length of fireworks/gunfire sound
0082BA  2  8D BD 07             sta Squ2_SfxLenCounter
0082BD  2  A0 94                ldy #$94                ;load reg contents of fireworks/gunfire sound
0082BF  2  A9 5E                lda #$5e
0082C1  2  D0 0B                bne SBlasJ
0082C3  2               
0082C3  2               ContinueBlast:
0082C3  2  AD BD 07             lda Squ2_SfxLenCounter  ;check for time to play second part
0082C6  2  C9 18                cmp #$18
0082C8  2  D0 1C                bne DecrementSfx2Length
0082CA  2  A0 93                ldy #$93                ;load second part reg contents then
0082CC  2  A9 18                lda #$18
0082CE  2  D0 7F        SBlasJ: bne BlstSJp             ;unconditional branch to load rest of reg contents
0082D0  2               
0082D0  2               PlayPowerUpGrab:
0082D0  2  A9 36                lda #$36                    ;load length of power-up grab sound
0082D2  2  8D BD 07             sta Squ2_SfxLenCounter
0082D5  2               
0082D5  2               ContinuePowerUpGrab:
0082D5  2  AD BD 07             lda Squ2_SfxLenCounter      ;load frequency reg based on length left over
0082D8  2  4A                   lsr                         ;divide by 2
0082D9  2  B0 0B                bcs DecrementSfx2Length     ;alter frequency every other frame
0082DB  2  A8                   tay
0082DC  2  B9 57 82             lda PowerUpGrabFreqData-1,y ;use length left over / 2 for frequency offset
0082DF  2  A2 5D                ldx #$5d                    ;store reg contents of power-up grab sound
0082E1  2  A0 7F                ldy #$7f
0082E3  2               
0082E3  2               LoadSqu2Regs:
0082E3  2  20 24 81             jsr PlaySqu2Sfx
0082E6  2               
0082E6  2               DecrementSfx2Length:
0082E6  2  CE BD 07             dec Squ2_SfxLenCounter   ;decrement length of sfx
0082E9  2  D0 0E                bne ExSfx2
0082EB  2               
0082EB  2               EmptySfx2Buffer:
0082EB  2  A2 00                ldx #$00                ;initialize square 2's sound effects buffer
0082ED  2  86 F2                stx Square2SoundBuffer
0082EF  2               
0082EF  2               StopSquare2Sfx:
0082EF  2  A2 0D                ldx #$0d                ;stop playing the sfx
0082F1  2  8E 15 40             stx SND_MASTERCTRL_REG
0082F4  2  A2 0F                ldx #$0f
0082F6  2  8E 15 40             stx SND_MASTERCTRL_REG
0082F9  2  60           ExSfx2: rts
0082FA  2               
0082FA  2               Square2SfxHandler:
0082FA  2  A5 F2                lda Square2SoundBuffer ;special handling for the 1-up sound to keep it
0082FC  2  29 40                and #Sfx_ExtraLife     ;from being interrupted by other sounds on square 2
0082FE  2  D0 65                bne ContinueExtraLife
008300  2  A4 FE                ldy Square2SoundQueue  ;check for sfx in queue
008302  2  F0 20                beq CheckSfx2Buffer
008304  2  84 F2                sty Square2SoundBuffer ;if found, put in buffer and check for the following
008306  2  30 3E                bmi PlayBowserFall     ;bowser fall
008308  2  46 FE                lsr Square2SoundQueue
00830A  2  B0 8A                bcs PlayCoinGrab       ;coin grab
00830C  2  46 FE                lsr Square2SoundQueue
00830E  2  B0 6A                bcs PlayGrowPowerUp    ;power-up reveal
008310  2  46 FE                lsr Square2SoundQueue
008312  2  B0 6A                bcs PlayGrowVine       ;vine grow
008314  2  46 FE                lsr Square2SoundQueue
008316  2  B0 A0                bcs PlayBlast          ;fireworks/gunfire
008318  2  46 FE                lsr Square2SoundQueue
00831A  2  B0 80                bcs PlayTimerTick      ;timer tick
00831C  2  46 FE                lsr Square2SoundQueue
00831E  2  B0 B0                bcs PlayPowerUpGrab    ;power-up grab
008320  2  46 FE                lsr Square2SoundQueue
008322  2  B0 3C                bcs PlayExtraLife      ;1-up
008324  2               
008324  2               CheckSfx2Buffer:
008324  2  A5 F2                lda Square2SoundBuffer   ;check for sfx in buffer
008326  2  F0 17                beq ExS2H                ;if not found, exit sub
008328  2  30 27                bmi ContinueBowserFall   ;bowser fall
00832A  2  4A                   lsr
00832B  2  B0 13                bcs Cont_CGrab_TTick     ;coin grab
00832D  2  4A                   lsr
00832E  2  B0 5D                bcs ContinueGrowItems    ;power-up reveal
008330  2  4A                   lsr
008331  2  B0 5A                bcs ContinueGrowItems    ;vine grow
008333  2  4A                   lsr
008334  2  B0 8D                bcs ContinueBlast        ;fireworks/gunfire
008336  2  4A                   lsr
008337  2  B0 07                bcs Cont_CGrab_TTick     ;timer tick
008339  2  4A                   lsr
00833A  2  B0 99                bcs ContinuePowerUpGrab  ;power-up grab
00833C  2  4A                   lsr
00833D  2  B0 26                bcs ContinueExtraLife    ;1-up
00833F  2  60           ExS2H:  rts
008340  2               
008340  2               Cont_CGrab_TTick:
008340  2  4C AA 82             jmp ContinueCGrabTTick
008343  2               
008343  2               JumpToDecLength2:
008343  2  4C E6 82             jmp DecrementSfx2Length
008346  2               
008346  2               PlayBowserFall:
008346  2  A9 38                 lda #$38                ;load length of bowser defeat sound
008348  2  8D BD 07              sta Squ2_SfxLenCounter
00834B  2  A0 C4                 ldy #$c4                ;load contents of reg for bowser defeat sound
00834D  2  A9 18                 lda #$18
00834F  2  D0 0B        BlstSJp: bne PBFRegs
008351  2               
008351  2               ContinueBowserFall:
008351  2  AD BD 07               lda Squ2_SfxLenCounter   ;check for almost near the end
008354  2  C9 08                  cmp #$08
008356  2  D0 8E                  bne DecrementSfx2Length
008358  2  A0 A4                  ldy #$a4                 ;if so, load the rest of reg contents for bowser defeat sound
00835A  2  A9 5A                  lda #$5a
00835C  2  A2 9F        PBFRegs:  ldx #$9f                 ;the fireworks/gunfire sound shares part of reg contents here
00835E  2  D0 83        EL_LRegs: bne LoadSqu2Regs         ;this is an unconditional branch outta here
008360  2               
008360  2               PlayExtraLife:
008360  2  A9 30                lda #$30                  ;load length of 1-up sound
008362  2  8D BD 07             sta Squ2_SfxLenCounter
008365  2               
008365  2               ContinueExtraLife:
008365  2  AD BD 07               lda Squ2_SfxLenCounter
008368  2  A2 03                  ldx #$03                  ;load new tones only every eight frames
00836A  2  4A           DivLLoop: lsr
00836B  2  B0 D6                  bcs JumpToDecLength2      ;if any bits set here, branch to dec the length
00836D  2  CA                     dex
00836E  2  D0 FA                  bne DivLLoop              ;do this until all bits checked, if none set, continue
008370  2  A8                     tay
008371  2  B9 51 82               lda ExtraLifeFreqData-1,y ;load our reg contents
008374  2  A2 82                  ldx #$82
008376  2  A0 7F                  ldy #$7f
008378  2  D0 E4                  bne EL_LRegs              ;unconditional branch
00837A  2               
00837A  2               PlayGrowPowerUp:
00837A  2  A9 10                lda #$10                ;load length of power-up reveal sound
00837C  2  D0 02                bne GrowItemRegs
00837E  2               
00837E  2               PlayGrowVine:
00837E  2  A9 20                lda #$20                ;load length of vine grow sound
008380  2               
008380  2               GrowItemRegs:
008380  2  8D BD 07             sta Squ2_SfxLenCounter
008383  2  A9 7F                lda #$7f                  ;load contents of reg for both sounds directly
008385  2  8D 05 40             sta SND_SQUARE2_REG+1
008388  2  A9 00                lda #$00                  ;start secondary counter for both sounds
00838A  2  8D BE 07             sta Sfx_SecondaryCounter
00838D  2               
00838D  2               ContinueGrowItems:
00838D  2  EE BE 07             inc Sfx_SecondaryCounter  ;increment secondary counter for both sounds
008390  2  AD BE 07             lda Sfx_SecondaryCounter  ;this sound doesn't decrement the usual counter
008393  2  4A                   lsr                       ;divide by 2 to get the offset
008394  2  A8                   tay
008395  2  CC BD 07             cpy Squ2_SfxLenCounter    ;have we reached the end yet?
008398  2  F0 0C                beq StopGrowItems         ;if so, branch to jump, and stop playing sounds
00839A  2  A9 9D                lda #$9d                  ;load contents of other reg directly
00839C  2  8D 04 40             sta SND_SQUARE2_REG
00839F  2  B9 76 82             lda PUp_VGrow_FreqData,y  ;use secondary counter / 2 as offset for frequency regs
0083A2  2  20 27 81             jsr SetFreq_Squ2
0083A5  2  60                   rts
0083A6  2               
0083A6  2               StopGrowItems:
0083A6  2  4C EB 82             jmp EmptySfx2Buffer       ;branch to stop playing sounds
0083A9  2               
0083A9  2               ;--------------------------------
0083A9  2               
0083A9  2               BrickShatterFreqData:
0083A9  2  01 0E 0E 0D          .byte $01, $0e, $0e, $0d, $0b, $06, $0c, $0f
0083AD  2  0B 06 0C 0F  
0083B1  2  0A 09 03 0D          .byte $0a, $09, $03, $0d, $08, $0d, $06, $0c
0083B5  2  08 0D 06 0C  
0083B9  2               
0083B9  2               PlayBrickShatter:
0083B9  2  A9 20                lda #$20                 ;load length of brick shatter sound
0083BB  2  8D BF 07             sta Noise_SfxLenCounter
0083BE  2               
0083BE  2               ContinueBrickShatter:
0083BE  2  AD BF 07             lda Noise_SfxLenCounter
0083C1  2  4A                   lsr                         ;divide by 2 and check for bit set to use offset
0083C2  2  90 12                bcc DecrementSfx3Length
0083C4  2  A8                   tay
0083C5  2  BE A9 83             ldx BrickShatterFreqData,y  ;load reg contents of brick shatter sound
0083C8  2  B9 68 8D             lda BrickShatterEnvData,y
0083CB  2               
0083CB  2               PlayNoiseSfx:
0083CB  2  8D 0C 40             sta SND_NOISE_REG        ;play the sfx
0083CE  2  8E 0E 40             stx SND_NOISE_REG+2
0083D1  2  A9 18                lda #$18
0083D3  2  8D 0F 40             sta SND_NOISE_REG+3
0083D6  2               
0083D6  2               DecrementSfx3Length:
0083D6  2  CE BF 07             dec Noise_SfxLenCounter  ;decrement length of sfx
0083D9  2  D0 09                bne ExSfx3
0083DB  2  A9 F0                lda #$f0                 ;if done, stop playing the sfx
0083DD  2  8D 0C 40             sta SND_NOISE_REG
0083E0  2  A9 00                lda #$00
0083E2  2  85 F3                sta NoiseSoundBuffer
0083E4  2  60           ExSfx3: rts
0083E5  2               
0083E5  2               NoiseSfxHandler:
0083E5  2  A4 FD                ldy NoiseSoundQueue   ;check for sfx in queue
0083E7  2  F0 0A                beq CheckNoiseBuffer
0083E9  2  84 F3                sty NoiseSoundBuffer  ;if found, put in buffer
0083EB  2  46 FD                lsr NoiseSoundQueue
0083ED  2  B0 CA                bcs PlayBrickShatter  ;brick shatter
0083EF  2  46 FD                lsr NoiseSoundQueue
0083F1  2  B0 0B                bcs PlayBowserFlame   ;bowser flame
0083F3  2               
0083F3  2               CheckNoiseBuffer:
0083F3  2  A5 F3                lda NoiseSoundBuffer      ;check for sfx in buffer
0083F5  2  F0 06                beq ExNH                  ;if not found, exit sub
0083F7  2  4A                   lsr
0083F8  2  B0 C4                bcs ContinueBrickShatter  ;brick shatter
0083FA  2  4A                   lsr
0083FB  2  B0 06                bcs ContinueBowserFlame   ;bowser flame
0083FD  2  60           ExNH:   rts
0083FE  2               
0083FE  2               PlayBowserFlame:
0083FE  2  A9 40                lda #$40                    ;load length of bowser flame sound
008400  2  8D BF 07             sta Noise_SfxLenCounter
008403  2               
008403  2               ContinueBowserFlame:
008403  2  AD BF 07             lda Noise_SfxLenCounter
008406  2  4A                   lsr
008407  2  A8                   tay
008408  2  A2 0F                ldx #$0f                    ;load reg contents of bowser flame sound
00840A  2  B9 47 8D             lda BowserFlameEnvData-1,y
00840D  2  D0 BC                bne PlayNoiseSfx            ;unconditional branch here
00840F  2               
00840F  2               ;--------------------------------
00840F  2               
00840F  2               ContinueMusic:
00840F  2  4C B8 84             jmp HandleSquare2Music  ;if we have music, start with square 2 channel
008412  2               
008412  2               MusicHandler:
008412  2  A5 FC                lda EventMusicQueue     ;check event music queue
008414  2  D0 0C                bne LoadEventMusic
008416  2  A5 FB                lda AreaMusicQueue      ;check area music queue
008418  2  D0 2C                bne LoadAreaMusic
00841A  2  AD B1 07             lda EventMusicBuffer    ;check both buffers
00841D  2  05 F4                ora AreaMusicBuffer
00841F  2  D0 EE                bne ContinueMusic
008421  2  60                   rts                     ;no music, then leave
008422  2               
008422  2               LoadEventMusic:
008422  2  8D B1 07                sta EventMusicBuffer      ;copy event music queue contents to buffer
008425  2  C9 01                   cmp #DeathMusic           ;is it death music?
008427  2  D0 06                   bne NoStopSfx             ;if not, jump elsewhere
008429  2  20 25 82                jsr StopSquare1Sfx        ;stop sfx in square 1 and 2
00842C  2  20 EF 82                jsr StopSquare2Sfx        ;but clear only square 1's sfx buffer
00842F  2  A6 F4        NoStopSfx: ldx AreaMusicBuffer
008431  2  8E C5 07                stx AreaMusicBuffer_Alt   ;save current area music buffer to be re-obtained later
008434  2  A0 00                   ldy #$00
008436  2  8C C4 07                sty NoteLengthTblAdder    ;default value for additional length byte offset
008439  2  84 F4                   sty AreaMusicBuffer       ;clear area music buffer
00843B  2  C9 40                   cmp #TimeRunningOutMusic  ;is it time running out music?
00843D  2  D0 30                   bne FindEventMusicHeader
00843F  2  A2 08                   ldx #$08                  ;load offset to be added to length byte of header
008441  2  8E C4 07                stx NoteLengthTblAdder
008444  2  D0 29                   bne FindEventMusicHeader  ;unconditional branch
008446  2               
008446  2               LoadAreaMusic:
008446  2  C9 04                 cmp #$04                  ;is it underground music?
008448  2  D0 03                 bne NoStop1               ;no, do not stop square 1 sfx
00844A  2  20 25 82              jsr StopSquare1Sfx
00844D  2  A0 10        NoStop1: ldy #$10                  ;start counter used only by ground level music
00844F  2  8C C7 07     GMLoopB: sty GroundMusicHeaderOfs
008452  2               
008452  2               HandleAreaMusicLoopB:
008452  2  A0 00                 ldy #$00                  ;clear event music buffer
008454  2  8C B1 07              sty EventMusicBuffer
008457  2  85 F4                 sta AreaMusicBuffer       ;copy area music queue contents to buffer
008459  2  C9 01                 cmp #$01                  ;is it ground level music?
00845B  2  D0 0E                 bne FindAreaMusicHeader
00845D  2  EE C7 07              inc GroundMusicHeaderOfs  ;increment but only if playing ground level music
008460  2  AC C7 07              ldy GroundMusicHeaderOfs  ;is it time to loopback ground level music?
008463  2  C0 32                 cpy #$32
008465  2  D0 0C                 bne LoadHeader            ;branch ahead with alternate offset
008467  2  A0 11                 ldy #$11
008469  2  D0 E4                 bne GMLoopB               ;unconditional branch
00846B  2               
00846B  2               FindAreaMusicHeader:
00846B  2  A0 08                ldy #$08                   ;load Y for offset of area music
00846D  2  84 F7                sty MusicOffset_Square2    ;residual instruction here
00846F  2               
00846F  2               FindEventMusicHeader:
00846F  2  C8                   iny                       ;increment Y pointer based on previously loaded queue contents
008470  2  4A                   lsr                       ;bit shift and increment until we find a set bit for music
008471  2  90 FC                bcc FindEventMusicHeader
008473  2               
008473  2               LoadHeader:
008473  2  B9 8A 86             lda MusicHeaderOffsetData,y  ;load offset for header
008476  2  A8                   tay
008477  2  B9 8B 86             lda MusicHeaderData,y        ;now load the header
00847A  2  85 F0                sta NoteLenLookupTblOfs
00847C  2  B9 8C 86             lda MusicHeaderData+1,y
00847F  2  85 F5                sta MusicDataLow
008481  2  B9 8D 86             lda MusicHeaderData+2,y
008484  2  85 F6                sta MusicDataHigh
008486  2  B9 8E 86             lda MusicHeaderData+3,y
008489  2  85 F9                sta MusicOffset_Triangle
00848B  2  B9 8F 86             lda MusicHeaderData+4,y
00848E  2  85 F8                sta MusicOffset_Square1
008490  2  B9 90 86             lda MusicHeaderData+5,y
008493  2  8D B0 07             sta MusicOffset_Noise
008496  2  8D C1 07             sta NoiseDataLoopbackOfs
008499  2  A9 01                lda #$01                     ;initialize music note counters
00849B  2  8D B4 07             sta Squ2_NoteLenCounter
00849E  2  8D B6 07             sta Squ1_NoteLenCounter
0084A1  2  8D B9 07             sta Tri_NoteLenCounter
0084A4  2  8D BA 07             sta Noise_BeatLenCounter
0084A7  2  A9 00                lda #$00                     ;initialize music data offset for square 2
0084A9  2  85 F7                sta MusicOffset_Square2
0084AB  2  8D CA 07             sta AltRegContentFlag        ;initialize alternate control reg data used by square 1
0084AE  2  A9 0B                lda #$0b                     ;disable triangle channel and reenable it
0084B0  2  8D 15 40             sta SND_MASTERCTRL_REG
0084B3  2  A9 0F                lda #$0f
0084B5  2  8D 15 40             sta SND_MASTERCTRL_REG
0084B8  2               
0084B8  2               HandleSquare2Music:
0084B8  2  CE B4 07             dec Squ2_NoteLenCounter  ;decrement square 2 note length
0084BB  2  D0 5F                bne MiscSqu2MusicTasks   ;is it time for more data?  if not, branch to end tasks
0084BD  2  A4 F7                ldy MusicOffset_Square2  ;increment square 2 music offset and fetch data
0084BF  2  E6 F7                inc MusicOffset_Square2
0084C1  2  B1 F5                lda (MusicData),y
0084C3  2  F0 04                beq EndOfMusicData       ;if zero, the data is a null terminator
0084C5  2  10 3D                bpl Squ2NoteHandler      ;if non-negative, data is a note
0084C7  2  D0 2F                bne Squ2LengthHandler    ;otherwise it is length data
0084C9  2               
0084C9  2               EndOfMusicData:
0084C9  2  AD B1 07             lda EventMusicBuffer     ;check secondary buffer for time running out music
0084CC  2  C9 40                cmp #TimeRunningOutMusic
0084CE  2  D0 05                bne NotTRO
0084D0  2  AD C5 07             lda AreaMusicBuffer_Alt  ;load previously saved contents of primary buffer
0084D3  2  D0 1D                bne MusicLoopBack        ;and start playing the song again if there is one
0084D5  2  29 04        NotTRO: and #VictoryMusic        ;check for victory music (the only secondary that loops)
0084D7  2  D0 1C                bne VictoryMLoopBack
0084D9  2  A5 F4                lda AreaMusicBuffer      ;check primary buffer for any music except pipe intro
0084DB  2  29 5F                and #%01011111
0084DD  2  D0 13                bne MusicLoopBack        ;if any area music except pipe intro, music loops
0084DF  2  A9 00                lda #$00                 ;clear primary and secondary buffers and initialize
0084E1  2  85 F4                sta AreaMusicBuffer      ;control regs of square and triangle channels
0084E3  2  8D B1 07             sta EventMusicBuffer
0084E6  2  8D 08 40             sta SND_TRIANGLE_REG
0084E9  2  A9 90                lda #$90
0084EB  2  8D 00 40             sta SND_SQUARE1_REG
0084EE  2  8D 04 40             sta SND_SQUARE2_REG
0084F1  2  60                   rts
0084F2  2               
0084F2  2               MusicLoopBack:
0084F2  2  4C 52 84             jmp HandleAreaMusicLoopB
0084F5  2               
0084F5  2               VictoryMLoopBack:
0084F5  2  4C 22 84             jmp LoadEventMusic
0084F8  2               
0084F8  2               Squ2LengthHandler:
0084F8  2  20 49 86             jsr ProcessLengthData    ;store length of note
0084FB  2  8D B3 07             sta Squ2_NoteLenBuffer
0084FE  2  A4 F7                ldy MusicOffset_Square2  ;fetch another byte (MUST NOT BE LENGTH BYTE!)
008500  2  E6 F7                inc MusicOffset_Square2
008502  2  B1 F5                lda (MusicData),y
008504  2               
008504  2               Squ2NoteHandler:
008504  2  A6 F2                  ldx Square2SoundBuffer     ;is there a sound playing on this channel?
008506  2  D0 0E                  bne SkipFqL1
008508  2  20 27 81               jsr SetFreq_Squ2           ;no, then play the note
00850B  2  F0 03                  beq Rest                   ;check to see if note is rest
00850D  2  20 56 86               jsr LoadControlRegs        ;if not, load control regs for square 2
008510  2  8D B5 07     Rest:     sta Squ2_EnvelopeDataCtrl  ;save contents of A
008513  2  20 1D 81               jsr Dump_Sq2_Regs          ;dump X and Y into square 2 control regs
008516  2  AD B3 07     SkipFqL1: lda Squ2_NoteLenBuffer     ;save length in square 2 note counter
008519  2  8D B4 07               sta Squ2_NoteLenCounter
00851C  2               
00851C  2               MiscSqu2MusicTasks:
00851C  2  A5 F2                   lda Square2SoundBuffer     ;is there a sound playing on square 2?
00851E  2  D0 1A                   bne HandleSquare1Music
008520  2  AD B1 07                lda EventMusicBuffer       ;check for death music or d4 set on secondary buffer
008523  2  29 91                   and #%10010001             ;note that regs for death music or d4 are loaded by default
008525  2  D0 13                   bne HandleSquare1Music
008527  2  AC B5 07                ldy Squ2_EnvelopeDataCtrl  ;check for contents saved from LoadControlRegs
00852A  2  F0 03                   beq NoDecEnv1
00852C  2  CE B5 07                dec Squ2_EnvelopeDataCtrl  ;decrement unless already zero
00852F  2  20 72 86     NoDecEnv1: jsr LoadEnvelopeData       ;do a load of envelope data to replace default
008532  2  8D 04 40                sta SND_SQUARE2_REG        ;based on offset set by first load unless playing
008535  2  A2 7F                   ldx #$7f                   ;death music or d4 set on secondary buffer
008537  2  8E 05 40                stx SND_SQUARE2_REG+1
00853A  2               
00853A  2               HandleSquare1Music:
00853A  2  A4 F8                ldy MusicOffset_Square1    ;is there a nonzero offset here?
00853C  2  F0 5A                beq HandleTriangleMusic    ;if not, skip ahead to the triangle channel
00853E  2  CE B6 07             dec Squ1_NoteLenCounter    ;decrement square 1 note length
008541  2  D0 32                bne MiscSqu1MusicTasks     ;is it time for more data?
008543  2               
008543  2               FetchSqu1MusicData:
008543  2  A4 F8                ldy MusicOffset_Square1    ;increment square 1 music offset and fetch data
008545  2  E6 F8                inc MusicOffset_Square1
008547  2  B1 F5                lda (MusicData),y
008549  2  D0 0F                bne Squ1NoteHandler        ;if nonzero, then skip this part
00854B  2  A9 83                lda #$83
00854D  2  8D 00 40             sta SND_SQUARE1_REG        ;store some data into control regs for square 1
008550  2  A9 94                lda #$94                   ;and fetch another byte of data, used to give
008552  2  8D 01 40             sta SND_SQUARE1_REG+1      ;death music its unique sound
008555  2  8D CA 07             sta AltRegContentFlag
008558  2  D0 E9                bne FetchSqu1MusicData     ;unconditional branch
00855A  2               
00855A  2               Squ1NoteHandler:
00855A  2  20 43 86                jsr AlternateLengthHandler
00855D  2  8D B6 07                sta Squ1_NoteLenCounter    ;save contents of A in square 1 note counter
008560  2  A4 F1                   ldy Square1SoundBuffer     ;is there a sound playing on square 1?
008562  2  D0 34                   bne HandleTriangleMusic
008564  2  8A                      txa
008565  2  29 3E                   and #%00111110             ;change saved data to appropriate note format
008567  2  20 09 81                jsr SetFreq_Squ1           ;play the note
00856A  2  F0 03                   beq SkipCtrlL
00856C  2  20 56 86                jsr LoadControlRegs
00856F  2  8D B7 07     SkipCtrlL: sta Squ1_EnvelopeDataCtrl  ;save envelope offset
008572  2  20 FF 80                jsr Dump_Squ1_Regs
008575  2               
008575  2               MiscSqu1MusicTasks:
008575  2  A5 F1                      lda Square1SoundBuffer     ;is there a sound playing on square 1?
008577  2  D0 1F                      bne HandleTriangleMusic
008579  2  AD B1 07                   lda EventMusicBuffer       ;check for death music or d4 set on secondary buffer
00857C  2  29 91                      and #%10010001
00857E  2  D0 0E                      bne DeathMAltReg
008580  2  AC B7 07                   ldy Squ1_EnvelopeDataCtrl  ;check saved envelope offset
008583  2  F0 03                      beq NoDecEnv2
008585  2  CE B7 07                   dec Squ1_EnvelopeDataCtrl  ;decrement unless already zero
008588  2  20 72 86     NoDecEnv2:    jsr LoadEnvelopeData       ;do a load of envelope data
00858B  2  8D 00 40                   sta SND_SQUARE1_REG        ;based on offset set by first load
00858E  2  AD CA 07     DeathMAltReg: lda AltRegContentFlag      ;check for alternate control reg data
008591  2  D0 02                      bne DoAltLoad
008593  2  A9 7F                      lda #$7f                   ;load this value if zero, the alternate value
008595  2  8D 01 40     DoAltLoad:    sta SND_SQUARE1_REG+1      ;if nonzero, and let's move on
008598  2               
008598  2               HandleTriangleMusic:
008598  2  A5 F9                lda MusicOffset_Triangle
00859A  2  CE B9 07             dec Tri_NoteLenCounter    ;decrement triangle note length
00859D  2  D0 4C                bne HandleNoiseMusic      ;is it time for more data?
00859F  2  A4 F9                ldy MusicOffset_Triangle  ;increment square 1 music offset and fetch data
0085A1  2  E6 F9                inc MusicOffset_Triangle
0085A3  2  B1 F5                lda (MusicData),y
0085A5  2  F0 41                beq LoadTriCtrlReg        ;if zero, skip all this and move on to noise
0085A7  2  10 13                bpl TriNoteHandler        ;if non-negative, data is note
0085A9  2  20 49 86             jsr ProcessLengthData     ;otherwise, it is length data
0085AC  2  8D B8 07             sta Tri_NoteLenBuffer     ;save contents of A
0085AF  2  A9 1F                lda #$1f
0085B1  2  8D 08 40             sta SND_TRIANGLE_REG      ;load some default data for triangle control reg
0085B4  2  A4 F9                ldy MusicOffset_Triangle  ;fetch another byte
0085B6  2  E6 F9                inc MusicOffset_Triangle
0085B8  2  B1 F5                lda (MusicData),y
0085BA  2  F0 2C                beq LoadTriCtrlReg        ;check once more for nonzero data
0085BC  2               
0085BC  2               TriNoteHandler:
0085BC  2  20 2B 81               jsr SetFreq_Tri
0085BF  2  AE B8 07               ldx Tri_NoteLenBuffer   ;save length in triangle note counter
0085C2  2  8E B9 07               stx Tri_NoteLenCounter
0085C5  2  AD B1 07               lda EventMusicBuffer
0085C8  2  29 6E                  and #%01101110          ;check for death music or d4 set on secondary buffer
0085CA  2  D0 06                  bne NotDOrD4            ;if playing any other secondary, skip primary buffer check
0085CC  2  A5 F4                  lda AreaMusicBuffer     ;check primary buffer for water or castle level music
0085CE  2  29 0A                  and #%00001010
0085D0  2  F0 19                  beq HandleNoiseMusic    ;if playing any other primary, or death or d4, go on to noise routine
0085D2  2  8A           NotDOrD4: txa                     ;if playing water or castle music or any secondary
0085D3  2  C9 12                  cmp #$12                ;besides death music or d4 set, check length of note
0085D5  2  B0 0F                  bcs LongN
0085D7  2  AD B1 07               lda EventMusicBuffer    ;check for win castle music again if not playing a long note
0085DA  2  29 08                  and #EndOfCastleMusic
0085DC  2  F0 04                  beq MediN
0085DE  2  A9 0F                  lda #$0f                ;load value $0f if playing the win castle music and playing a short
0085E0  2  D0 06                  bne LoadTriCtrlReg      ;note, load value $1f if playing water or castle level music or any
0085E2  2  A9 1F        MediN:    lda #$1f                ;secondary besides death and d4 except win castle or win castle and playing
0085E4  2  D0 02                  bne LoadTriCtrlReg      ;a short note, and load value $ff if playing a long note on water, castle
0085E6  2  A9 FF        LongN:    lda #$ff                ;or any secondary (including win castle) except death and d4
0085E8  2               
0085E8  2               LoadTriCtrlReg:
0085E8  2  8D 08 40             sta SND_TRIANGLE_REG      ;save final contents of A into control reg for triangle
0085EB  2               
0085EB  2               HandleNoiseMusic:
0085EB  2  A5 F4                lda AreaMusicBuffer       ;check if playing underground or castle music
0085ED  2  29 F3                and #%11110011
0085EF  2  F0 51                beq ExitMusicHandler      ;if so, skip the noise routine
0085F1  2  CE BA 07             dec Noise_BeatLenCounter  ;decrement noise beat length
0085F4  2  D0 4C                bne ExitMusicHandler      ;is it time for more data?
0085F6  2               
0085F6  2               FetchNoiseBeatData:
0085F6  2  AC B0 07             ldy MusicOffset_Noise       ;increment noise beat offset and fetch data
0085F9  2  EE B0 07             inc MusicOffset_Noise
0085FC  2  B1 F5                lda (MusicData),y           ;get noise beat data, if nonzero, branch to handle
0085FE  2  D0 08                bne NoiseBeatHandler
008600  2  AD C1 07             lda NoiseDataLoopbackOfs    ;if data is zero, reload original noise beat offset
008603  2  8D B0 07             sta MusicOffset_Noise       ;and loopback next time around
008606  2  D0 EE                bne FetchNoiseBeatData      ;unconditional branch
008608  2               
008608  2               NoiseBeatHandler:
008608  2  20 43 86             jsr AlternateLengthHandler
00860B  2  8D BA 07             sta Noise_BeatLenCounter    ;store length in noise beat counter
00860E  2  8A                   txa
00860F  2  29 3E                and #%00111110              ;reload data and erase length bits
008611  2  F0 24                beq SilentBeat              ;if no beat data, silence
008613  2  C9 30                cmp #$30                    ;check the beat data and play the appropriate
008615  2  F0 18                beq LongBeat                ;noise accordingly
008617  2  C9 20                cmp #$20
008619  2  F0 0C                beq StrongBeat
00861B  2  29 10                and #%00010000
00861D  2  F0 18                beq SilentBeat
00861F  2  A9 1C                lda #$1c        ;short beat data
008621  2  A2 03                ldx #$03
008623  2  A0 18                ldy #$18
008625  2  D0 12                bne PlayBeat
008627  2               
008627  2               StrongBeat:
008627  2  A9 1C                lda #$1c        ;strong beat data
008629  2  A2 0C                ldx #$0c
00862B  2  A0 18                ldy #$18
00862D  2  D0 0A                bne PlayBeat
00862F  2               
00862F  2               LongBeat:
00862F  2  A9 1C                lda #$1c        ;long beat data
008631  2  A2 03                ldx #$03
008633  2  A0 58                ldy #$58
008635  2  D0 02                bne PlayBeat
008637  2               
008637  2               SilentBeat:
008637  2  A9 10                lda #$10        ;silence
008639  2               
008639  2               PlayBeat:
008639  2  8D 0C 40             sta SND_NOISE_REG    ;load beat data into noise regs
00863C  2  8E 0E 40             stx SND_NOISE_REG+2
00863F  2  8C 0F 40             sty SND_NOISE_REG+3
008642  2               
008642  2               ExitMusicHandler:
008642  2  60                   rts
008643  2               
008643  2               AlternateLengthHandler:
008643  2  AA                   tax            ;save a copy of original byte into X
008644  2  6A                   ror            ;save LSB from original byte into carry
008645  2  8A                   txa            ;reload original byte and rotate three times
008646  2  2A                   rol            ;turning xx00000x into 00000xxx, with the
008647  2  2A                   rol            ;bit in carry as the MSB here
008648  2  2A                   rol
008649  2               
008649  2               ProcessLengthData:
008649  2  29 07                and #%00000111              ;clear all but the three LSBs
00864B  2  18                   clc
00864C  2  65 F0                adc $f0                     ;add offset loaded from first header byte
00864E  2  6D C4 07             adc NoteLengthTblAdder      ;add extra if time running out music
008651  2  A8                   tay
008652  2  B9 E4 8C             lda MusicLengthLookupTbl,y  ;load length
008655  2  60                   rts
008656  2               
008656  2               LoadControlRegs:
008656  2  AD B1 07                lda EventMusicBuffer  ;check secondary buffer for win castle music
008659  2  29 08                   and #EndOfCastleMusic
00865B  2  F0 04                   beq NotECstlM
00865D  2  A9 04                   lda #$04              ;this value is only used for win castle music
00865F  2  D0 0C                   bne AllMus            ;unconditional branch
008661  2  A5 F4        NotECstlM: lda AreaMusicBuffer
008663  2  29 7D                   and #%01111101        ;check primary buffer for water music
008665  2  F0 04                   beq WaterMus
008667  2  A9 08                   lda #$08              ;this is the default value for all other music
008669  2  D0 02                   bne AllMus
00866B  2  A9 28        WaterMus:  lda #$28              ;this value is used for water music and all other event music
00866D  2  A2 82        AllMus:    ldx #$82              ;load contents of other sound regs for square 2
00866F  2  A0 7F                   ldy #$7f
008671  2  60                      rts
008672  2               
008672  2               LoadEnvelopeData:
008672  2  AD B1 07             lda EventMusicBuffer           ;check secondary buffer for win castle music
008675  2  29 08                and #EndOfCastleMusic
008677  2  F0 04                beq LoadUsualEnvData
008679  2  B9 14 8D             lda EndOfCastleMusicEnvData,y  ;load data from offset for win castle music
00867C  2  60                   rts
00867D  2               
00867D  2               LoadUsualEnvData:
00867D  2  A5 F4                lda AreaMusicBuffer            ;check primary buffer for water music
00867F  2  29 7D                and #%01111101
008681  2  F0 04                beq LoadWaterEventMusEnvData
008683  2  B9 18 8D             lda AreaMusicEnvData,y         ;load default data from offset for all other music
008686  2  60                   rts
008687  2               
008687  2               LoadWaterEventMusEnvData:
008687  2  B9 20 8D             lda WaterEventMusEnvData,y     ;load data from offset for water music and all other event music
00868A  2  60                   rts
00868B  2               
00868B  2               ;--------------------------------
00868B  2               
00868B  2               ;music header offsets
00868B  2               
00868B  2               MusicHeaderData:
00868B  2  A5                 .byte DeathMusHdr-MHD           ;event music
00868C  2  59                 .byte GameOverMusHdr-MHD
00868D  2  54                 .byte VictoryMusHdr-MHD
00868E  2  64                 .byte WinCastleMusHdr-MHD
00868F  2  59                 .byte GameOverMusHdr-MHD
008690  2  3C                 .byte EndOfLevelMusHdr-MHD
008691  2  31                 .byte TimeRunningOutHdr-MHD
008692  2  4B                 .byte SilenceHdr-MHD
008693  2               
008693  2  69                 .byte GroundLevelPart1Hdr-MHD   ;area music
008694  2  5E                 .byte WaterMusHdr-MHD
008695  2  46                 .byte UndergroundMusHdr-MHD
008696  2  4F                 .byte CastleMusHdr-MHD
008697  2  36                 .byte Star_CloudHdr-MHD
008698  2  8D                 .byte GroundLevelLeadInHdr-MHD
008699  2  36                 .byte Star_CloudHdr-MHD
00869A  2  4B                 .byte SilenceHdr-MHD
00869B  2               
00869B  2  8D                 .byte GroundLevelLeadInHdr-MHD  ;ground level music layout
00869C  2  69 69              .byte GroundLevelPart1Hdr-MHD, GroundLevelPart1Hdr-MHD
00869E  2  6F 75 6F 7B        .byte GroundLevelPart2AHdr-MHD, GroundLevelPart2BHdr-MHD, GroundLevelPart2AHdr-MHD, GroundLevelPart2CHdr-MHD
0086A2  2  6F 75 6F 7B        .byte GroundLevelPart2AHdr-MHD, GroundLevelPart2BHdr-MHD, GroundLevelPart2AHdr-MHD, GroundLevelPart2CHdr-MHD
0086A6  2  81 87 81 8D        .byte GroundLevelPart3AHdr-MHD, GroundLevelPart3BHdr-MHD, GroundLevelPart3AHdr-MHD, GroundLevelLeadInHdr-MHD
0086AA  2  69 69              .byte GroundLevelPart1Hdr-MHD, GroundLevelPart1Hdr-MHD
0086AC  2  93 99 93 9F        .byte GroundLevelPart4AHdr-MHD, GroundLevelPart4BHdr-MHD, GroundLevelPart4AHdr-MHD, GroundLevelPart4CHdr-MHD
0086B0  2  93 99 93 9F        .byte GroundLevelPart4AHdr-MHD, GroundLevelPart4BHdr-MHD, GroundLevelPart4AHdr-MHD, GroundLevelPart4CHdr-MHD
0086B4  2  81 87 81 8D        .byte GroundLevelPart3AHdr-MHD, GroundLevelPart3BHdr-MHD, GroundLevelPart3AHdr-MHD, GroundLevelLeadInHdr-MHD
0086B8  2  93 99 93 9F        .byte GroundLevelPart4AHdr-MHD, GroundLevelPart4BHdr-MHD, GroundLevelPart4AHdr-MHD, GroundLevelPart4CHdr-MHD
0086BC  2               
0086BC  2               ;music headers
0086BC  2               ;header format is as follows:
0086BC  2               ;1 byte - length byte offset
0086BC  2               ;2 bytes -  music data address
0086BC  2               ;1 byte - triangle data offset
0086BC  2               ;1 byte - square 1 data offset
0086BC  2               ;1 byte - noise data offset (not used by secondary music)
0086BC  2               
0086BC  2  08 F0 89 27  TimeRunningOutHdr:    .byte $08, <TimeRunOutMusData, >TimeRunOutMusData, $27, $18
0086C0  2  18           
0086C1  2  20 36 87 2E  Star_CloudHdr:        .byte $20, <Star_CloudMData, >Star_CloudMData, $2e, $1a, $40
0086C5  2  1A 40        
0086C7  2  20 2E 8A 3D  EndOfLevelMusHdr:     .byte $20, <WinLevelMusData, >WinLevelMusData, $3d, $21
0086CB  2  21           
0086CC  2  20 C4 FC 3F  ResidualHeaderData:   .byte $20, $c4, $fc, $3f, $1d
0086D0  2  1D           
0086D1  2  18 8F 8A 00  UndergroundMusHdr:    .byte $18, <UndergroundMusData, >UndergroundMusData, $00, $00
0086D5  2  00           
0086D6  2  08 9A 87 00  SilenceHdr:           .byte $08, <SilenceData, >SilenceData, $00
0086DA  2  00 22 89 93  CastleMusHdr:         .byte $00, <CastleMusData, >CastleMusData, $93, $62
0086DE  2  62           
0086DF  2  10 46 8C 24  VictoryMusHdr:        .byte $10, <VictoryMusData, >VictoryMusData, $24, $14
0086E3  2  14           
0086E4  2  18 C3 89 1E  GameOverMusHdr:       .byte $18, <GameOverMusData, >GameOverMusData, $1e, $14
0086E8  2  14           
0086E9  2  08 D0 8A A0  WaterMusHdr:          .byte $08, <WaterMusData, >WaterMusData, $a0, $70, $68
0086ED  2  70 68        
0086EF  2  08 CF 8B 4C  WinCastleMusHdr:      .byte $08, <EndOfCastleMusData, >EndOfCastleMusData, $4c, $24
0086F3  2  24           
0086F4  2  18 7F 87 2D  GroundLevelPart1Hdr:  .byte $18, <GroundM_P1Data, >GroundM_P1Data, $2d, $1c, $b8
0086F8  2  1C B8        
0086FA  2  18 C7 87 20  GroundLevelPart2AHdr: .byte $18, <GroundM_P2AData, >GroundM_P2AData, $20, $12, $70
0086FE  2  12 70        
008700  2  18 F3 87 1B  GroundLevelPart2BHdr: .byte $18, <GroundM_P2BData, >GroundM_P2BData, $1b, $10, $44
008704  2  10 44        
008706  2  18 1B 88 11  GroundLevelPart2CHdr: .byte $18, <GroundM_P2CData, >GroundM_P2CData, $11, $0a, $1c
00870A  2  0A 1C        
00870C  2  18 40 88 2D  GroundLevelPart3AHdr: .byte $18, <GroundM_P3AData, >GroundM_P3AData, $2d, $10, $58
008710  2  10 58        
008712  2  18 59 88 14  GroundLevelPart3BHdr: .byte $18, <GroundM_P3BData, >GroundM_P3BData, $14, $0d, $3f
008716  2  0D 3F        
008718  2  18 77 88 15  GroundLevelLeadInHdr: .byte $18, <GroundMLdInData, >GroundMLdInData, $15, $0d, $21
00871C  2  0D 21        
00871E  2  18 A3 88 18  GroundLevelPart4AHdr: .byte $18, <GroundM_P4AData, >GroundM_P4AData, $18, $10, $7a
008722  2  10 7A        
008724  2  18 C9 88 19  GroundLevelPart4BHdr: .byte $18, <GroundM_P4BData, >GroundM_P4BData, $19, $0f, $54
008728  2  0F 54        
00872A  2  18 F2 88 1E  GroundLevelPart4CHdr: .byte $18, <GroundM_P4CData, >GroundM_P4CData, $1e, $12, $2b
00872E  2  12 2B        
008730  2  18 F0 88 1E  DeathMusHdr:          .byte $18, <DeathMusData, >DeathMusData, $1e, $0f, $2d
008734  2  0F 2D        
008736  2               
008736  2               ;--------------------------------
008736  2               
008736  2               ;MUSIC DATA
008736  2               ;square 2/triangle format
008736  2               ;d7 - length byte flag (0-note, 1-length)
008736  2               ;if d7 is set to 0 and d6-d0 is nonzero:
008736  2               ;d6-d0 - note offset in frequency look-up table (must be even)
008736  2               ;if d7 is set to 1:
008736  2               ;d6-d3 - unused
008736  2               ;d2-d0 - length offset in length look-up table
008736  2               ;value of $00 in square 2 data is used as null terminator, affects all sound channels
008736  2               ;value of $00 in triangle data causes routine to skip note
008736  2               
008736  2               ;square 1 format
008736  2               ;d7-d6, d0 - length offset in length look-up table (bit order is d0,d7,d6)
008736  2               ;d5-d1 - note offset in frequency look-up table
008736  2               ;value of $00 in square 1 data is flag alternate control reg data to be loaded
008736  2               
008736  2               ;noise format
008736  2               ;d7-d6, d0 - length offset in length look-up table (bit order is d0,d7,d6)
008736  2               ;d5-d4 - beat type (0 - rest, 1 - short, 2 - strong, 3 - long)
008736  2               ;d3-d1 - unused
008736  2               ;value of $00 in noise data is used as null terminator, affects only noise
008736  2               
008736  2               ;all music data is organized into sections (unless otherwise stated):
008736  2               ;square 2, square 1, triangle, noise
008736  2               
008736  2               Star_CloudMData:
008736  2  84 2C 2C 2C        .byte $84, $2c, $2c, $2c, $82, $04, $2c, $04, $85, $2c, $84, $2c, $2c
00873A  2  82 04 2C 04  
00873E  2  85 2C 84 2C  
008743  2  2A 2A 2A 82        .byte $2a, $2a, $2a, $82, $04, $2a, $04, $85, $2a, $84, $2a, $2a, $00
008747  2  04 2A 04 85  
00874B  2  2A 84 2A 2A  
008750  2               
008750  2  1F 1F 1F 98        .byte $1f, $1f, $1f, $98, $1f, $1f, $98, $9e, $98, $1f
008754  2  1F 1F 98 9E  
008758  2  98 1F        
00875A  2  1D 1D 1D 94        .byte $1d, $1d, $1d, $94, $1d, $1d, $94, $9c, $94, $1d
00875E  2  1D 1D 94 9C  
008762  2  94 1D        
008764  2               
008764  2  86 18 85 26        .byte $86, $18, $85, $26, $30, $84, $04, $26, $30
008768  2  30 84 04 26  
00876C  2  30           
00876D  2  86 14 85 22        .byte $86, $14, $85, $22, $2c, $84, $04, $22, $2c
008771  2  2C 84 04 22  
008775  2  2C           
008776  2               
008776  2  21 D0 C4 D0        .byte $21, $d0, $c4, $d0, $31, $d0, $c4, $d0, $00
00877A  2  31 D0 C4 D0  
00877E  2  00           
00877F  2               
00877F  2               GroundM_P1Data:
00877F  2  85 2C 22 1C        .byte $85, $2c, $22, $1c, $84, $26, $2a, $82, $28, $26, $04
008783  2  84 26 2A 82  
008787  2  28 26 04     
00878A  2  87 22 34 3A        .byte $87, $22, $34, $3a, $82, $40, $04, $36, $84, $3a, $34
00878E  2  82 40 04 36  
008792  2  84 3A 34     
008795  2  82 2C 30 85        .byte $82, $2c, $30, $85, $2a
008799  2  2A           
00879A  2               
00879A  2               SilenceData:
00879A  2  00                 .byte $00
00879B  2               
00879B  2  5D 55 4D 15        .byte $5d, $55, $4d, $15, $19, $96, $15, $d5, $e3, $eb
00879F  2  19 96 15 D5  
0087A3  2  E3 EB        
0087A5  2  2D A6 2B 27        .byte $2d, $a6, $2b, $27, $9c, $9e, $59
0087A9  2  9C 9E 59     
0087AC  2               
0087AC  2  85 22 1C 14        .byte $85, $22, $1c, $14, $84, $1e, $22, $82, $20, $1e, $04, $87
0087B0  2  84 1E 22 82  
0087B4  2  20 1E 04 87  
0087B8  2  1C 2C 34 82        .byte $1c, $2c, $34, $82, $36, $04, $30, $34, $04, $2c, $04, $26
0087BC  2  36 04 30 34  
0087C0  2  04 2C 04 26  
0087C4  2  2A 85 22           .byte $2a, $85, $22
0087C7  2               
0087C7  2               GroundM_P2AData:
0087C7  2  84 04 82 3A        .byte $84, $04, $82, $3a, $38, $36, $32, $04, $34
0087CB  2  38 36 32 04  
0087CF  2  34           
0087D0  2  04 24 26 2C        .byte $04, $24, $26, $2c, $04, $26, $2c, $30, $00
0087D4  2  04 26 2C 30  
0087D8  2  00           
0087D9  2               
0087D9  2  05 B4 B2 B0        .byte $05, $b4, $b2, $b0, $2b, $ac, $84
0087DD  2  2B AC 84     
0087E0  2  9C 9E A2 84        .byte $9c, $9e, $a2, $84, $94, $9c, $9e
0087E4  2  94 9C 9E     
0087E7  2               
0087E7  2  85 14 22 84        .byte $85, $14, $22, $84, $2c, $85, $1e
0087EB  2  2C 85 1E     
0087EE  2  82 2C 84 2C        .byte $82, $2c, $84, $2c, $1e
0087F2  2  1E           
0087F3  2               
0087F3  2               GroundM_P2BData:
0087F3  2  84 04 82 3A        .byte $84, $04, $82, $3a, $38, $36, $32, $04, $34
0087F7  2  38 36 32 04  
0087FB  2  34           
0087FC  2  04 64 04 64        .byte $04, $64, $04, $64, $86, $64, $00
008800  2  86 64 00     
008803  2               
008803  2  05 B4 B2 B0        .byte $05, $b4, $b2, $b0, $2b, $ac, $84
008807  2  2B AC 84     
00880A  2  37 B6 B6 45        .byte $37, $b6, $b6, $45
00880E  2               
00880E  2  85 14 1C 82        .byte $85, $14, $1c, $82, $22, $84, $2c
008812  2  22 84 2C     
008815  2  4E 82 4E 84        .byte $4e, $82, $4e, $84, $4e, $22
008819  2  4E 22        
00881B  2               
00881B  2               GroundM_P2CData:
00881B  2  84 04 85 32        .byte $84, $04, $85, $32, $85, $30, $86, $2c, $04, $00
00881F  2  85 30 86 2C  
008823  2  04 00        
008825  2               
008825  2  05 A4 05 9E        .byte $05, $a4, $05, $9e, $05, $9d, $85
008829  2  05 9D 85     
00882C  2               
00882C  2  84 14 85 24        .byte $84, $14, $85, $24, $28, $2c, $82
008830  2  28 2C 82     
008833  2  22 84 22 14        .byte $22, $84, $22, $14
008837  2               
008837  2  21 D0 C4 D0        .byte $21, $d0, $c4, $d0, $31, $d0, $c4, $d0, $00
00883B  2  31 D0 C4 D0  
00883F  2  00           
008840  2               
008840  2               GroundM_P3AData:
008840  2  82 2C 84 2C        .byte $82, $2c, $84, $2c, $2c, $82, $2c, $30
008844  2  2C 82 2C 30  
008848  2  04 34 2C 04        .byte $04, $34, $2c, $04, $26, $86, $22, $00
00884C  2  26 86 22 00  
008850  2               
008850  2  A4 25 25 A4        .byte $a4, $25, $25, $a4, $29, $a2, $1d, $9c, $95
008854  2  29 A2 1D 9C  
008858  2  95           
008859  2               
008859  2               GroundM_P3BData:
008859  2  82 2C 2C 04        .byte $82, $2c, $2c, $04, $2c, $04, $2c, $30, $85, $34, $04, $04, $00
00885D  2  2C 04 2C 30  
008861  2  85 34 04 04  
008866  2               
008866  2  A4 25 25 A4        .byte $a4, $25, $25, $a4, $a8, $63, $04
00886A  2  A8 63 04     
00886D  2               
00886D  2               ;triangle data used by both sections of third part
00886D  2  85 0E 1A 84        .byte $85, $0e, $1a, $84, $24, $85, $22, $14, $84, $0c
008871  2  24 85 22 14  
008875  2  84 0C        
008877  2               
008877  2               GroundMLdInData:
008877  2  82 34 84 34        .byte $82, $34, $84, $34, $34, $82, $2c, $84, $34, $86, $3a, $04, $00
00887B  2  34 82 2C 84  
00887F  2  34 86 3A 04  
008884  2               
008884  2  A0 21 21 A0        .byte $a0, $21, $21, $a0, $21, $2b, $05, $a3
008888  2  21 2B 05 A3  
00888C  2               
00888C  2  82 18 84 18        .byte $82, $18, $84, $18, $18, $82, $18, $18, $04, $86, $3a, $22
008890  2  18 82 18 18  
008894  2  04 86 3A 22  
008898  2               
008898  2               ;noise data used by lead-in and third part sections
008898  2  31 90 31 90        .byte $31, $90, $31, $90, $31, $71, $31, $90, $90, $90, $00
00889C  2  31 71 31 90  
0088A0  2  90 90 00     
0088A3  2               
0088A3  2               GroundM_P4AData:
0088A3  2  82 34 84 2C        .byte $82, $34, $84, $2c, $85, $22, $84, $24
0088A7  2  85 22 84 24  
0088AB  2  82 26 36 04        .byte $82, $26, $36, $04, $36, $86, $26, $00
0088AF  2  36 86 26 00  
0088B3  2               
0088B3  2  AC 27 5D 1D        .byte $ac, $27, $5d, $1d, $9e, $2d, $ac, $9f
0088B7  2  9E 2D AC 9F  
0088BB  2               
0088BB  2  85 14 82 20        .byte $85, $14, $82, $20, $84, $22, $2c
0088BF  2  84 22 2C     
0088C2  2  1E 1E 82 2C        .byte $1e, $1e, $82, $2c, $2c, $1e, $04
0088C6  2  2C 1E 04     
0088C9  2               
0088C9  2               GroundM_P4BData:
0088C9  2  87 2A 40 40        .byte $87, $2a, $40, $40, $40, $3a, $36
0088CD  2  40 3A 36     
0088D0  2  82 34 2C 04        .byte $82, $34, $2c, $04, $26, $86, $22, $00
0088D4  2  26 86 22 00  
0088D8  2               
0088D8  2  E3 F7 F7 F7        .byte $e3, $f7, $f7, $f7, $f5, $f1, $ac, $27, $9e, $9d
0088DC  2  F5 F1 AC 27  
0088E0  2  9E 9D        
0088E2  2               
0088E2  2  85 18 82 1E        .byte $85, $18, $82, $1e, $84, $22, $2a
0088E6  2  84 22 2A     
0088E9  2  22 22 82 2C        .byte $22, $22, $82, $2c, $2c, $22, $04
0088ED  2  2C 22 04     
0088F0  2               
0088F0  2               DeathMusData:
0088F0  2  86 04              .byte $86, $04 ;death music share data with fourth part c of ground level music
0088F2  2               
0088F2  2               GroundM_P4CData:
0088F2  2  82 2A 36 04        .byte $82, $2a, $36, $04, $36, $87, $36, $34, $30, $86, $2c, $04, $00
0088F6  2  36 87 36 34  
0088FA  2  30 86 2C 04  
0088FF  2               
0088FF  2  00 68 6A 6C        .byte $00, $68, $6a, $6c, $45 ;death music only
008903  2  45           
008904  2               
008904  2  A2 31 B0 F1        .byte $a2, $31, $b0, $f1, $ed, $eb, $a2, $1d, $9c, $95
008908  2  ED EB A2 1D  
00890C  2  9C 95        
00890E  2               
00890E  2  86 04              .byte $86, $04 ;death music only
008910  2               
008910  2  85 22 82 22        .byte $85, $22, $82, $22, $87, $22, $26, $2a, $84, $2c, $22, $86, $14
008914  2  87 22 26 2A  
008918  2  84 2C 22 86  
00891D  2               
00891D  2               ;noise data used by fourth part sections
00891D  2  51 90 31 11        .byte $51, $90, $31, $11, $00
008921  2  00           
008922  2               
008922  2               CastleMusData:
008922  2  80 22 28 22        .byte $80, $22, $28, $22, $26, $22, $24, $22, $26
008926  2  26 22 24 22  
00892A  2  26           
00892B  2  22 28 22 2A        .byte $22, $28, $22, $2a, $22, $28, $22, $26
00892F  2  22 28 22 26  
008933  2  22 28 22 26        .byte $22, $28, $22, $26, $22, $24, $22, $26
008937  2  22 24 22 26  
00893B  2  22 28 22 2A        .byte $22, $28, $22, $2a, $22, $28, $22, $26
00893F  2  22 28 22 26  
008943  2  20 26 20 24        .byte $20, $26, $20, $24, $20, $26, $20, $28
008947  2  20 26 20 28  
00894B  2  20 26 20 28        .byte $20, $26, $20, $28, $20, $26, $20, $24
00894F  2  20 26 20 24  
008953  2  20 26 20 24        .byte $20, $26, $20, $24, $20, $26, $20, $28
008957  2  20 26 20 28  
00895B  2  20 26 20 28        .byte $20, $26, $20, $28, $20, $26, $20, $24
00895F  2  20 26 20 24  
008963  2  28 30 28 32        .byte $28, $30, $28, $32, $28, $30, $28, $2e
008967  2  28 30 28 2E  
00896B  2  28 30 28 2E        .byte $28, $30, $28, $2e, $28, $2c, $28, $2e
00896F  2  28 2C 28 2E  
008973  2  28 30 28 32        .byte $28, $30, $28, $32, $28, $30, $28, $2e
008977  2  28 30 28 2E  
00897B  2  28 30 28 2E        .byte $28, $30, $28, $2e, $28, $2c, $28, $2e, $00
00897F  2  28 2C 28 2E  
008983  2  00           
008984  2               
008984  2  04 70 6E 6C        .byte $04, $70, $6e, $6c, $6e, $70, $72, $70, $6e
008988  2  6E 70 72 70  
00898C  2  6E           
00898D  2  70 6E 6C 6E        .byte $70, $6e, $6c, $6e, $70, $72, $70, $6e
008991  2  70 72 70 6E  
008995  2  6E 6C 6E 70        .byte $6e, $6c, $6e, $70, $6e, $70, $6e, $6c
008999  2  6E 70 6E 6C  
00899D  2  6E 6C 6E 70        .byte $6e, $6c, $6e, $70, $6e, $70, $6e, $6c
0089A1  2  6E 70 6E 6C  
0089A5  2  76 78 76 74        .byte $76, $78, $76, $74, $76, $74, $72, $74
0089A9  2  76 74 72 74  
0089AD  2  76 78 76 74        .byte $76, $78, $76, $74, $76, $74, $72, $74
0089B1  2  76 74 72 74  
0089B5  2               
0089B5  2  84 1A 83 18        .byte $84, $1a, $83, $18, $20, $84, $1e, $83, $1c, $28
0089B9  2  20 84 1E 83  
0089BD  2  1C 28        
0089BF  2  26 1C 1A 1C        .byte $26, $1c, $1a, $1c
0089C3  2               
0089C3  2               GameOverMusData:
0089C3  2  82 2C 04 04        .byte $82, $2c, $04, $04, $22, $04, $04, $84, $1c, $87
0089C7  2  22 04 04 84  
0089CB  2  1C 87        
0089CD  2  26 2A 26 84        .byte $26, $2a, $26, $84, $24, $28, $24, $80, $22, $00
0089D1  2  24 28 24 80  
0089D5  2  22 00        
0089D7  2               
0089D7  2  9C 05 94 05        .byte $9c, $05, $94, $05, $0d, $9f, $1e, $9c, $98, $9d
0089DB  2  0D 9F 1E 9C  
0089DF  2  98 9D        
0089E1  2               
0089E1  2  82 22 04 04        .byte $82, $22, $04, $04, $1c, $04, $04, $84, $14
0089E5  2  1C 04 04 84  
0089E9  2  14           
0089EA  2  86 1E 80 16        .byte $86, $1e, $80, $16, $80, $14
0089EE  2  80 14        
0089F0  2               
0089F0  2               TimeRunOutMusData:
0089F0  2  81 1C 30 04        .byte $81, $1c, $30, $04, $30, $30, $04, $1e, $32, $04, $32, $32
0089F4  2  30 30 04 1E  
0089F8  2  32 04 32 32  
0089FC  2  04 20 34 04        .byte $04, $20, $34, $04, $34, $34, $04, $36, $04, $84, $36, $00
008A00  2  34 34 04 36  
008A04  2  04 84 36 00  
008A08  2               
008A08  2  46 A4 64 A4        .byte $46, $a4, $64, $a4, $48, $a6, $66, $a6, $4a, $a8, $68, $a8
008A0C  2  48 A6 66 A6  
008A10  2  4A A8 68 A8  
008A14  2  6A 44 2B           .byte $6a, $44, $2b
008A17  2               
008A17  2  81 2A 42 04        .byte $81, $2a, $42, $04, $42, $42, $04, $2c, $64, $04, $64, $64
008A1B  2  42 42 04 2C  
008A1F  2  64 04 64 64  
008A23  2  04 2E 46 04        .byte $04, $2e, $46, $04, $46, $46, $04, $22, $04, $84, $22
008A27  2  46 46 04 22  
008A2B  2  04 84 22     
008A2E  2               
008A2E  2               WinLevelMusData:
008A2E  2  87 04 06 0C        .byte $87, $04, $06, $0c, $14, $1c, $22, $86, $2c, $22
008A32  2  14 1C 22 86  
008A36  2  2C 22        
008A38  2  87 04 60 0E        .byte $87, $04, $60, $0e, $14, $1a, $24, $86, $2c, $24
008A3C  2  14 1A 24 86  
008A40  2  2C 24        
008A42  2  87 04 08 10        .byte $87, $04, $08, $10, $18, $1e, $28, $86, $30, $30
008A46  2  18 1E 28 86  
008A4A  2  30 30        
008A4C  2  80 64 00           .byte $80, $64, $00
008A4F  2               
008A4F  2  CD D5 DD E3        .byte $cd, $d5, $dd, $e3, $ed, $f5, $bb, $b5, $cf, $d5
008A53  2  ED F5 BB B5  
008A57  2  CF D5        
008A59  2  DB E5 ED F3        .byte $db, $e5, $ed, $f3, $bd, $b3, $d1, $d9, $df, $e9
008A5D  2  BD B3 D1 D9  
008A61  2  DF E9        
008A63  2  F1 F7 BF FF        .byte $f1, $f7, $bf, $ff, $ff, $ff, $34
008A67  2  FF FF 34     
008A6A  2  00                 .byte $00 ;unused byte
008A6B  2               
008A6B  2  86 04 87 14        .byte $86, $04, $87, $14, $1c, $22, $86, $34, $84, $2c
008A6F  2  1C 22 86 34  
008A73  2  84 2C        
008A75  2  04 04 04 87        .byte $04, $04, $04, $87, $14, $1a, $24, $86, $32, $84
008A79  2  14 1A 24 86  
008A7D  2  32 84        
008A7F  2  2C 04 86 04        .byte $2c, $04, $86, $04, $87, $18, $1e, $28, $86, $36
008A83  2  87 18 1E 28  
008A87  2  86 36        
008A89  2  87 30 30 30        .byte $87, $30, $30, $30, $80, $2c
008A8D  2  80 2C        
008A8F  2               
008A8F  2               ;square 2 and triangle use the same data, square 1 is unused
008A8F  2               UndergroundMusData:
008A8F  2  82 14 2C 62        .byte $82, $14, $2c, $62, $26, $10, $28, $80, $04
008A93  2  26 10 28 80  
008A97  2  04           
008A98  2  82 14 2C 62        .byte $82, $14, $2c, $62, $26, $10, $28, $80, $04
008A9C  2  26 10 28 80  
008AA0  2  04           
008AA1  2  82 08 1E 5E        .byte $82, $08, $1e, $5e, $18, $60, $1a, $80, $04
008AA5  2  18 60 1A 80  
008AA9  2  04           
008AAA  2  82 08 1E 5E        .byte $82, $08, $1e, $5e, $18, $60, $1a, $86, $04
008AAE  2  18 60 1A 86  
008AB2  2  04           
008AB3  2  83 1A 18 16        .byte $83, $1a, $18, $16, $84, $14, $1a, $18, $0e, $0c
008AB7  2  84 14 1A 18  
008ABB  2  0E 0C        
008ABD  2  16 83 14 20        .byte $16, $83, $14, $20, $1e, $1c, $28, $26, $87
008AC1  2  1E 1C 28 26  
008AC5  2  87           
008AC6  2  24 1A 12 10        .byte $24, $1a, $12, $10, $62, $0e, $80, $04, $04
008ACA  2  62 0E 80 04  
008ACE  2  04           
008ACF  2  00                 .byte $00
008AD0  2               
008AD0  2               ;noise data directly follows square 2 here unlike in other songs
008AD0  2               WaterMusData:
008AD0  2  82 18 1C 20        .byte $82, $18, $1c, $20, $22, $26, $28
008AD4  2  22 26 28     
008AD7  2  81 2A 2A 2A        .byte $81, $2a, $2a, $2a, $04, $2a, $04, $83, $2a, $82, $22
008ADB  2  04 2A 04 83  
008ADF  2  2A 82 22     
008AE2  2  86 34 32 34        .byte $86, $34, $32, $34, $81, $04, $22, $26, $2a, $2c, $30
008AE6  2  81 04 22 26  
008AEA  2  2A 2C 30     
008AED  2  86 34 83 32        .byte $86, $34, $83, $32, $82, $36, $84, $34, $85, $04, $81, $22
008AF1  2  82 36 84 34  
008AF5  2  85 04 81 22  
008AF9  2  86 30 2E 30        .byte $86, $30, $2e, $30, $81, $04, $22, $26, $2a, $2c, $2e
008AFD  2  81 04 22 26  
008B01  2  2A 2C 2E     
008B04  2  86 30 83 22        .byte $86, $30, $83, $22, $82, $36, $84, $34, $85, $04, $81, $22
008B08  2  82 36 84 34  
008B0C  2  85 04 81 22  
008B10  2  86 3A 3A 3A        .byte $86, $3a, $3a, $3a, $82, $3a, $81, $40, $82, $04, $81, $3a
008B14  2  82 3A 81 40  
008B18  2  82 04 81 3A  
008B1C  2  86 36 36 36        .byte $86, $36, $36, $36, $82, $36, $81, $3a, $82, $04, $81, $36
008B20  2  82 36 81 3A  
008B24  2  82 04 81 36  
008B28  2  86 34 82 26        .byte $86, $34, $82, $26, $2a, $36
008B2C  2  2A 36        
008B2E  2  81 34 34 85        .byte $81, $34, $34, $85, $34, $81, $2a, $86, $2c, $00
008B32  2  34 81 2A 86  
008B36  2  2C 00        
008B38  2               
008B38  2  84 90 B0 84        .byte $84, $90, $b0, $84, $50, $50, $b0, $00
008B3C  2  50 50 B0 00  
008B40  2               
008B40  2  98 96 94 92        .byte $98, $96, $94, $92, $94, $96, $58, $58, $58, $44
008B44  2  94 96 58 58  
008B48  2  58 44        
008B4A  2  5C 44 9F A3        .byte $5c, $44, $9f, $a3, $a1, $a3, $85, $a3, $e0, $a6
008B4E  2  A1 A3 85 A3  
008B52  2  E0 A6        
008B54  2  23 C4 9F 9D        .byte $23, $c4, $9f, $9d, $9f, $85, $9f, $d2, $a6, $23
008B58  2  9F 85 9F D2  
008B5C  2  A6 23        
008B5E  2  C4 B5 B1 AF        .byte $c4, $b5, $b1, $af, $85, $b1, $af, $ad, $85, $95
008B62  2  85 B1 AF AD  
008B66  2  85 95        
008B68  2  9E A2 AA 6A        .byte $9e, $a2, $aa, $6a, $6a, $6b, $5e, $9d
008B6C  2  6A 6B 5E 9D  
008B70  2               
008B70  2  84 04 04 82        .byte $84, $04, $04, $82, $22, $86, $22
008B74  2  22 86 22     
008B77  2  82 14 22 2C        .byte $82, $14, $22, $2c, $12, $22, $2a, $14, $22, $2c
008B7B  2  12 22 2A 14  
008B7F  2  22 2C        
008B81  2  1C 22 2C 14        .byte $1c, $22, $2c, $14, $22, $2c, $12, $22, $2a, $14
008B85  2  22 2C 12 22  
008B89  2  2A 14        
008B8B  2  22 2C 1C 22        .byte $22, $2c, $1c, $22, $2c, $18, $22, $2a, $16, $20
008B8F  2  2C 18 22 2A  
008B93  2  16 20        
008B95  2  28 18 22 2A        .byte $28, $18, $22, $2a, $12, $22, $2a, $18, $22, $2a
008B99  2  12 22 2A 18  
008B9D  2  22 2A        
008B9F  2  12 22 2A 14        .byte $12, $22, $2a, $14, $22, $2c, $0c, $22, $2c, $14, $22, $34, $12
008BA3  2  22 2C 0C 22  
008BA7  2  2C 14 22 34  
008BAC  2  22 30 10 22        .byte $22, $30, $10, $22, $2e, $16, $22, $34, $18, $26
008BB0  2  2E 16 22 34  
008BB4  2  18 26        
008BB6  2  36 16 26 36        .byte $36, $16, $26, $36, $14, $26, $36, $12, $22, $36
008BBA  2  14 26 36 12  
008BBE  2  22 36        
008BC0  2  5C 22 34 0C        .byte $5c, $22, $34, $0c, $22, $22, $81, $1e, $1e, $85, $1e
008BC4  2  22 22 81 1E  
008BC8  2  1E 85 1E     
008BCB  2  81 12 86 14        .byte $81, $12, $86, $14
008BCF  2               
008BCF  2               EndOfCastleMusData:
008BCF  2  81 2C 22 1C        .byte $81, $2c, $22, $1c, $2c, $22, $1c, $85, $2c, $04
008BD3  2  2C 22 1C 85  
008BD7  2  2C 04        
008BD9  2  81 2E 24 1E        .byte $81, $2e, $24, $1e, $2e, $24, $1e, $85, $2e, $04
008BDD  2  2E 24 1E 85  
008BE1  2  2E 04        
008BE3  2  81 32 28 22        .byte $81, $32, $28, $22, $32, $28, $22, $85, $32
008BE7  2  32 28 22 85  
008BEB  2  32           
008BEC  2  87 36 36 36        .byte $87, $36, $36, $36, $84, $3a, $00
008BF0  2  84 3A 00     
008BF3  2               
008BF3  2  5C 54 4C 5C        .byte $5c, $54, $4c, $5c, $54, $4c
008BF7  2  54 4C        
008BF9  2  5C 1C 1C 5C        .byte $5c, $1c, $1c, $5c, $5c, $5c, $5c
008BFD  2  5C 5C 5C     
008C00  2  5E 56 4E 5E        .byte $5e, $56, $4e, $5e, $56, $4e
008C04  2  56 4E        
008C06  2  5E 1E 1E 5E        .byte $5e, $1e, $1e, $5e, $5e, $5e, $5e
008C0A  2  5E 5E 5E     
008C0D  2  62 5A 50 62        .byte $62, $5a, $50, $62, $5a, $50
008C11  2  5A 50        
008C13  2  62 22 22 62        .byte $62, $22, $22, $62, $e7, $e7, $e7, $2b
008C17  2  E7 E7 E7 2B  
008C1B  2               
008C1B  2  86 14 81 14        .byte $86, $14, $81, $14, $80, $14, $14, $81, $14, $14, $14, $14
008C1F  2  80 14 14 81  
008C23  2  14 14 14 14  
008C27  2  86 16 81 16        .byte $86, $16, $81, $16, $80, $16, $16, $81, $16, $16, $16, $16
008C2B  2  80 16 16 81  
008C2F  2  16 16 16 16  
008C33  2  81 28 22 1A        .byte $81, $28, $22, $1a, $28, $22, $1a, $28, $80, $28, $28
008C37  2  28 22 1A 28  
008C3B  2  80 28 28     
008C3E  2  81 28 87 2C        .byte $81, $28, $87, $2c, $2c, $2c, $84, $30
008C42  2  2C 2C 84 30  
008C46  2               
008C46  2               VictoryMusData:
008C46  2  83 04 84 0C        .byte $83, $04, $84, $0c, $83, $62, $10, $84, $12
008C4A  2  83 62 10 84  
008C4E  2  12           
008C4F  2  83 1C 22 1E        .byte $83, $1c, $22, $1e, $22, $26, $18, $1e, $04, $1c, $00
008C53  2  22 26 18 1E  
008C57  2  04 1C 00     
008C5A  2               
008C5A  2  E3 E1 E3 1D        .byte $e3, $e1, $e3, $1d, $de, $e0, $23
008C5E  2  DE E0 23     
008C61  2  EC 75 74 F0        .byte $ec, $75, $74, $f0, $f4, $f6, $ea, $31, $2d
008C65  2  F4 F6 EA 31  
008C69  2  2D           
008C6A  2               
008C6A  2  83 12 14 04        .byte $83, $12, $14, $04, $18, $1a, $1c, $14
008C6E  2  18 1A 1C 14  
008C72  2  26 22 1E 1C        .byte $26, $22, $1e, $1c, $18, $1e, $22, $0c, $14
008C76  2  18 1E 22 0C  
008C7A  2  14           
008C7B  2               
008C7B  2               ;unused space
008C7B  2  FF FF FF           .byte $ff, $ff, $ff
008C7E  2               
008C7E  2               FreqRegLookupTbl:
008C7E  2  00 88 00 2F        .byte $00, $88, $00, $2f, $00, $00
008C82  2  00 00        
008C84  2  02 A6 02 80        .byte $02, $a6, $02, $80, $02, $5c, $02, $3a
008C88  2  02 5C 02 3A  
008C8C  2  02 1A 01 DF        .byte $02, $1a, $01, $df, $01, $c4, $01, $ab
008C90  2  01 C4 01 AB  
008C94  2  01 93 01 7C        .byte $01, $93, $01, $7c, $01, $67, $01, $53
008C98  2  01 67 01 53  
008C9C  2  01 40 01 2E        .byte $01, $40, $01, $2e, $01, $1d, $01, $0d
008CA0  2  01 1D 01 0D  
008CA4  2  00 FE 00 EF        .byte $00, $fe, $00, $ef, $00, $e2, $00, $d5
008CA8  2  00 E2 00 D5  
008CAC  2  00 C9 00 BE        .byte $00, $c9, $00, $be, $00, $b3, $00, $a9
008CB0  2  00 B3 00 A9  
008CB4  2  00 A0 00 97        .byte $00, $a0, $00, $97, $00, $8e, $00, $86
008CB8  2  00 8E 00 86  
008CBC  2  00 77 00 7E        .byte $00, $77, $00, $7e, $00, $71, $00, $54
008CC0  2  00 71 00 54  
008CC4  2  00 64 00 5F        .byte $00, $64, $00, $5f, $00, $59, $00, $50
008CC8  2  00 59 00 50  
008CCC  2  00 47 00 43        .byte $00, $47, $00, $43, $00, $3b, $00, $35
008CD0  2  00 3B 00 35  
008CD4  2  00 2A 00 23        .byte $00, $2a, $00, $23, $04, $75, $03, $57
008CD8  2  04 75 03 57  
008CDC  2  02 F9 02 CF        .byte $02, $f9, $02, $cf, $01, $fc, $00, $6a
008CE0  2  01 FC 00 6A  
008CE4  2               
008CE4  2               MusicLengthLookupTbl:
008CE4  2  05 0A 14 28        .byte $05, $0a, $14, $28, $50, $1e, $3c, $02
008CE8  2  50 1E 3C 02  
008CEC  2  04 08 10 20        .byte $04, $08, $10, $20, $40, $18, $30, $0c
008CF0  2  40 18 30 0C  
008CF4  2  03 06 0C 18        .byte $03, $06, $0c, $18, $30, $12, $24, $08
008CF8  2  30 12 24 08  
008CFC  2  36 03 09 06        .byte $36, $03, $09, $06, $12, $1b, $24, $0c
008D00  2  12 1B 24 0C  
008D04  2  24 02 06 04        .byte $24, $02, $06, $04, $0c, $12, $18, $08
008D08  2  0C 12 18 08  
008D0C  2  12 01 03 02        .byte $12, $01, $03, $02, $06, $09, $0c, $04
008D10  2  06 09 0C 04  
008D14  2               
008D14  2               EndOfCastleMusicEnvData:
008D14  2  98 99 9A 9B        .byte $98, $99, $9a, $9b
008D18  2               
008D18  2               AreaMusicEnvData:
008D18  2  90 94 94 95        .byte $90, $94, $94, $95, $95, $96, $97, $98
008D1C  2  95 96 97 98  
008D20  2               
008D20  2               WaterEventMusEnvData:
008D20  2  90 91 92 92        .byte $90, $91, $92, $92, $93, $93, $93, $94
008D24  2  93 93 93 94  
008D28  2  94 94 94 94        .byte $94, $94, $94, $94, $94, $95, $95, $95
008D2C  2  94 95 95 95  
008D30  2  95 95 95 96        .byte $95, $95, $95, $96, $96, $96, $96, $96
008D34  2  96 96 96 96  
008D38  2  96 96 96 96        .byte $96, $96, $96, $96, $96, $96, $96, $96
008D3C  2  96 96 96 96  
008D40  2  96 96 96 96        .byte $96, $96, $96, $96, $95, $95, $94, $93
008D44  2  95 95 94 93  
008D48  2               
008D48  2               BowserFlameEnvData:
008D48  2  15 16 16 17        .byte $15, $16, $16, $17, $17, $18, $19, $19
008D4C  2  17 18 19 19  
008D50  2  1A 1A 1C 1D        .byte $1a, $1a, $1c, $1d, $1d, $1e, $1e, $1f
008D54  2  1D 1E 1E 1F  
008D58  2  1F 1F 1F 1E        .byte $1f, $1f, $1f, $1e, $1d, $1c, $1e, $1f
008D5C  2  1D 1C 1E 1F  
008D60  2  1F 1E 1D 1C        .byte $1f, $1e, $1d, $1c, $1a, $18, $16, $14
008D64  2  1A 18 16 14  
008D68  2               
008D68  2               BrickShatterEnvData:
008D68  2  15 16 16 17        .byte $15, $16, $16, $17, $17, $18, $19, $19
008D6C  2  17 18 19 19  
008D70  2  1A 1A 1C 1D        .byte $1a, $1a, $1c, $1d, $1d, $1e, $1e, $1f
008D74  2  1D 1E 1E 1F  
008D78  2               
008D78  2               
008D78  1               	.include "sound-ll.asm"
008D78  2               ;
008D78  2               ; Bank for all sound-related stuff
008D78  2               ;
008D78  2               LL_SoundEngine:
008D78  2  AD 70 07         lda OperMode
008D7B  2  D0 04            bne @SndOn
008D7D  2  8D 15 40         sta SND_MASTERCTRL_REG
008D80  2  60               rts
008D81  2               @SndOn:
008D81  2  A9 FF            lda #$FF
008D83  2  8D 17 40         sta JOYPAD_PORT2
008D86  2  A9 0F            lda #$F
008D88  2  8D 15 40         sta SND_MASTERCTRL_REG
008D8B  2  AD C6 07         lda PauseModeFlag
008D8E  2  D0 06            bne @InPause
008D90  2  A5 FA            lda PauseSoundQueue
008D92  2  C9 01            cmp #1
008D94  2  D0 5D            bne LL_RunSoundSubroutines
008D96  2               @InPause:
008D96  2  AD B2 07         lda PauseSoundBuffer
008D99  2  D0 23            bne @ContPau
008D9B  2  A5 FA            lda PauseSoundQueue
008D9D  2  F0 70            beq LL_SkipSoundSubroutines
008D9F  2  8D B2 07         sta PauseSoundBuffer
008DA2  2  8D C6 07         sta PauseModeFlag
008DA5  2  A9 00            lda #0
008DA7  2  8D 15 40         sta SND_MASTERCTRL_REG
008DAA  2  85 F1            sta Square1SoundBuffer
008DAC  2  85 F2            sta Square2SoundBuffer
008DAE  2  85 F3            sta NoiseSoundBuffer
008DB0  2  A9 0F            lda #$F
008DB2  2  8D 15 40         sta SND_MASTERCTRL_REG
008DB5  2  A9 2A            lda #$2A
008DB7  2  8D BB 07         sta Squ1_SfxLenCounter
008DBA  2               @loc_D2E2:
008DBA  2  A9 44            lda #$44
008DBC  2  D0 11            bne loc_D2F7
008DBE  2               @ContPau:
008DBE  2  AD BB 07         lda Squ1_SfxLenCounter
008DC1  2  C9 24            cmp #$24
008DC3  2  F0 08            beq loc_D2F5
008DC5  2  C9 1E            cmp #$1E
008DC7  2  F0 F1            beq @loc_D2E2
008DC9  2  C9 18            cmp #$18
008DCB  2  D0 09            bne loc_D2FE
008DCD  2               loc_D2F5:
008DCD  2               
008DCD  2  A9 64            lda #$64
008DCF  2               loc_D2F7:
008DCF  2               
008DCF  2  A2 84            ldx #$84
008DD1  2  A0 7F            ldy #$7F
008DD3  2  20 3A 8E         jsr sub_D358
008DD6  2               loc_D2FE:
008DD6  2               
008DD6  2  CE BB 07         dec Squ1_SfxLenCounter
008DD9  2  D0 34            bne LL_SkipSoundSubroutines
008DDB  2  A9 00            lda #0
008DDD  2  8D 15 40         sta SND_MASTERCTRL_REG
008DE0  2  AD B2 07         lda PauseSoundBuffer
008DE3  2  C9 02            cmp #2
008DE5  2  D0 05            bne loc_D314
008DE7  2  A9 00            lda #0
008DE9  2  8D C6 07         sta PauseModeFlag
008DEC  2               loc_D314:
008DEC  2               
008DEC  2  A9 00            lda #0
008DEE  2  8D B2 07         sta PauseSoundBuffer
008DF1  2               loc_D319:
008DF1  2               
008DF1  2  F0 1C            beq LL_SkipSoundSubroutines
008DF3  2               LL_RunSoundSubroutines:
008DF3  2  AD 0D 60         lda WRAM_DisableSound
008DF6  2  D0 09            bne @nosound
008DF8  2  20 CD 8E         jsr sub_D3EB
008DFB  2  20 2E 90         jsr sub_D54C
008DFE  2  20 59 91         jsr sub_D677
008E01  2               @nosound:
008E01  2  AD 0C 60         lda WRAM_DisableMusic
008E04  2  D0 03            bne @nomusic
008E06  2  20 B2 91         jsr LL_MusicHandler
008E09  2               @nomusic:
008E09  2  A9 00            lda #0
008E0B  2  85 FB            sta AreaMusicQueue
008E0D  2  85 FC            sta EventMusicQueue
008E0F  2               LL_SkipSoundSubroutines:
008E0F  2  A9 00            lda #0
008E11  2  85 FF            sta Square1SoundQueue
008E13  2  85 FE            sta Square2SoundQueue
008E15  2  85 FD            sta NoiseSoundQueue
008E17  2  85 FA            sta PauseSoundQueue
008E19  2  AC C0 07         ldy DAC_Counter
008E1C  2  A5 F4            lda AreaMusicBuffer
008E1E  2  29 03            and #3
008E20  2  F0 07            beq loc_D347
008E22  2  EE C0 07         inc DAC_Counter
008E25  2  C0 30            cpy #$30
008E27  2  90 06            bcc loc_D34D
008E29  2               loc_D347:
008E29  2               
008E29  2  98               tya
008E2A  2  F0 03            beq loc_D34D
008E2C  2  CE C0 07         dec DAC_Counter
008E2F  2               loc_D34D:
008E2F  2               
008E2F  2  8C 11 40         sty SND_DELTA_REG+1
008E32  2  60               rts
008E33  2               sub_D351:
008E33  2               
008E33  2  8C 01 40         sty SND_SQUARE1_REG+1
008E36  2  8E 00 40         stx SND_SQUARE1_REG
008E39  2  60               rts
008E3A  2               sub_D358:
008E3A  2               
008E3A  2  20 33 8E         jsr sub_D351
008E3D  2               sub_D35B:
008E3D  2               
008E3D  2  A2 00            ldx #0
008E3F  2               loc_D35D:
008E3F  2               
008E3F  2  A8               tay
008E40  2  B9 E3 99         lda unk_DF01,y
008E43  2  F0 0B            beq locret_D36E
008E45  2  9D 02 40         sta SND_PULSE_4002_REG,x
008E48  2  B9 E2 99         lda unk_DF00,y
008E4B  2  09 08            ora #8
008E4D  2  9D 03 40         sta SND_PULSE_4003_REG,x
008E50  2               locret_D36E:
008E50  2               
008E50  2  60               rts
008E51  2               sub_D36F:
008E51  2               
008E51  2  8E 04 40         stx SND_SQUARE2_REG
008E54  2  8C 05 40         sty SND_PULSE_4005_REG
008E57  2  60               rts
008E58  2               sub_D376:
008E58  2               
008E58  2  20 51 8E         jsr sub_D36F
008E5B  2               loc_D379:
008E5B  2               
008E5B  2  A2 04            ldx #4
008E5D  2  D0 E0            bne loc_D35D
008E5F  2               loc_D37D:
008E5F  2               
008E5F  2  A2 08            ldx #8
008E61  2               loc_D37F:
008E61  2               
008E61  2  D0 DC            bne loc_D35D
008E63  2               LL_SwimStompEnvelopeData:
008E63  2  9F               .byte $9F
008E64  2  9B               .byte $9B
008E65  2  98               .byte $98
008E66  2  96               .byte $96
008E67  2  95               .byte $95
008E68  2  94               .byte $94
008E69  2  92               .byte $92
008E6A  2  90               .byte $90
008E6B  2  90               .byte $90
008E6C  2  9A               .byte $9A
008E6D  2  97               .byte $97
008E6E  2  95               .byte $95
008E6F  2  93               .byte $93
008E70  2  92               .byte $92
008E71  2               loc_D38F:
008E71  2               
008E71  2  A9 40            lda #$40
008E73  2  8D BB 07         sta Squ1_SfxLenCounter
008E76  2  A9 62            lda #$62
008E78  2  20 3D 8E         jsr sub_D35B
008E7B  2  A2 99            ldx #$99
008E7D  2  D0 25            bne loc_D3C2
008E7F  2               loc_D39D:
008E7F  2               
008E7F  2  A9 26            lda #$26
008E81  2  D0 02            bne loc_D3A3
008E83  2               loc_D3A1:
008E83  2               
008E83  2  A9 18            lda #$18
008E85  2               loc_D3A3:
008E85  2               
008E85  2  A2 82            ldx #$82
008E87  2  A0 A7            ldy #$A7
008E89  2  20 3A 8E         jsr sub_D358
008E8C  2  A9 28            lda #$28
008E8E  2  8D BB 07         sta Squ1_SfxLenCounter
008E91  2               loc_D3AF:
008E91  2               
008E91  2  AD BB 07         lda Squ1_SfxLenCounter
008E94  2  C9 25            cmp #$25
008E96  2  D0 06            bne loc_D3BC
008E98  2  A2 5F            ldx #$5F
008E9A  2  A0 F6            ldy #$F6
008E9C  2  D0 08            bne loc_D3C4
008E9E  2               loc_D3BC:
008E9E  2               
008E9E  2  C9 20            cmp #$20
008EA0  2  D0 29            bne loc_D3E9
008EA2  2  A2 48            ldx #$48
008EA4  2               loc_D3C2:
008EA4  2               
008EA4  2  A0 BC            ldy #$BC
008EA6  2               loc_D3C4:
008EA6  2               
008EA6  2  20 33 8E         jsr sub_D351
008EA9  2  D0 20            bne loc_D3E9
008EAB  2               loc_D3C9:
008EAB  2               
008EAB  2  A9 05            lda #5
008EAD  2  A0 99            ldy #$99
008EAF  2  D0 04            bne loc_D3D3
008EB1  2               loc_D3CF:
008EB1  2               
008EB1  2  A9 0A            lda #$A
008EB3  2  A0 93            ldy #$93
008EB5  2               loc_D3D3:
008EB5  2               
008EB5  2  A2 9E            ldx #$9E
008EB7  2  8D BB 07         sta Squ1_SfxLenCounter
008EBA  2  A9 0C            lda #$C
008EBC  2  20 3A 8E         jsr sub_D358
008EBF  2               loc_D3DD:
008EBF  2               
008EBF  2  AD BB 07         lda Squ1_SfxLenCounter
008EC2  2  C9 06            cmp #6
008EC4  2  D0 05            bne loc_D3E9
008EC6  2  A9 BB            lda #$BB
008EC8  2  8D 01 40         sta SND_SQUARE1_REG+1
008ECB  2               loc_D3E9:
008ECB  2               
008ECB  2  D0 60            bne loc_D44B
008ECD  2               sub_D3EB:
008ECD  2               
008ECD  2  A4 FF            ldy Square1SoundQueue
008ECF  2  F0 20            beq loc_D40F
008ED1  2  84 F1            sty Square1SoundBuffer
008ED3  2  30 AA            bmi loc_D39D
008ED5  2  46 FF            lsr Square1SoundQueue
008ED7  2  B0 AA            bcs loc_D3A1
008ED9  2  46 FF            lsr Square1SoundQueue
008EDB  2  B0 D4            bcs loc_D3CF
008EDD  2  46 FF            lsr Square1SoundQueue
008EDF  2  B0 2C            bcs loc_D42B
008EE1  2  46 FF            lsr Square1SoundQueue
008EE3  2  B0 4A            bcs loc_D44D
008EE5  2  46 FF            lsr Square1SoundQueue
008EE7  2  B0 7F            bcs loc_D486
008EE9  2  46 FF            lsr Square1SoundQueue
008EEB  2  B0 BE            bcs loc_D3C9
008EED  2  46 FF            lsr Square1SoundQueue
008EEF  2  B0 80            bcs loc_D38F
008EF1  2               loc_D40F:
008EF1  2               
008EF1  2  A5 F1            lda Square1SoundBuffer
008EF3  2  F0 17            beq locret_D42A
008EF5  2  30 9A            bmi loc_D3AF
008EF7  2  4A               lsr
008EF8  2  B0 97            bcs loc_D3AF
008EFA  2  4A               lsr
008EFB  2  B0 C2            bcs loc_D3DD
008EFD  2  4A               lsr
008EFE  2  B0 1B            bcs loc_D439
008F00  2  4A               lsr
008F01  2  B0 3C            bcs loc_D45D
008F03  2  4A               lsr
008F04  2  B0 67            bcs loc_D48B
008F06  2  4A               lsr
008F07  2  B0 B6            bcs loc_D3DD
008F09  2  4A               lsr
008F0A  2  B0 48            bcs loc_D472
008F0C  2               locret_D42A:
008F0C  2               
008F0C  2  60               rts
008F0D  2               loc_D42B:
008F0D  2               
008F0D  2  A9 0E            lda #$E
008F0F  2  8D BB 07         sta Squ1_SfxLenCounter
008F12  2  A0 9C            ldy #$9C
008F14  2  A2 9E            ldx #$9E
008F16  2  A9 26            lda #$26
008F18  2  20 3A 8E         jsr sub_D358
008F1B  2               loc_D439:
008F1B  2               
008F1B  2  AC BB 07         ldy Squ1_SfxLenCounter
008F1E  2  B9 62 8E         lda LL_SwimStompEnvelopeData-1,y
008F21  2  8D 00 40         sta SND_SQUARE1_REG
008F24  2  C0 06            cpy #6
008F26  2  D0 05            bne loc_D44B
008F28  2  A9 9E            lda #$9E
008F2A  2  8D 02 40         sta SND_PULSE_4002_REG
008F2D  2               loc_D44B:
008F2D  2               
008F2D  2  D0 25            bne loc_D472
008F2F  2               loc_D44D:
008F2F  2               
008F2F  2  A9 0E            lda #$E
008F31  2  A0 CB            ldy #$CB
008F33  2  A2 9F            ldx #$9F
008F35  2  8D BB 07         sta Squ1_SfxLenCounter
008F38  2  A9 28            lda #$28
008F3A  2  20 3A 8E         jsr sub_D358
008F3D  2  D0 15            bne loc_D472
008F3F  2               loc_D45D:
008F3F  2               
008F3F  2  AC BB 07         ldy Squ1_SfxLenCounter
008F42  2  C0 08            cpy #8
008F44  2  D0 09            bne loc_D46D
008F46  2  A9 A0            lda #$A0
008F48  2  8D 02 40         sta SND_PULSE_4002_REG
008F4B  2  A9 9F            lda #$9F
008F4D  2  D0 02            bne loc_D46F
008F4F  2               loc_D46D:
008F4F  2               
008F4F  2  A9 90            lda #$90
008F51  2               loc_D46F:
008F51  2               
008F51  2  8D 00 40         sta SND_SQUARE1_REG
008F54  2               loc_D472:
008F54  2               
008F54  2  CE BB 07         dec Squ1_SfxLenCounter
008F57  2  D0 0E            bne locret_D485
008F59  2               sub_D477:
008F59  2               
008F59  2  A2 00            ldx #0
008F5B  2  86 F1            stx Square1SoundBuffer
008F5D  2  A2 0E            ldx #$E
008F5F  2  8E 15 40         stx SND_MASTERCTRL_REG
008F62  2  A2 0F            ldx #$F
008F64  2  8E 15 40         stx SND_MASTERCTRL_REG
008F67  2               locret_D485:
008F67  2               
008F67  2  60               rts
008F68  2               loc_D486:
008F68  2               
008F68  2  A9 2F            lda #$2F
008F6A  2  8D BB 07         sta Squ1_SfxLenCounter
008F6D  2               loc_D48B:
008F6D  2               
008F6D  2  AD BB 07         lda Squ1_SfxLenCounter
008F70  2  4A               lsr
008F71  2  B0 10            bcs loc_D4A1
008F73  2  4A               lsr
008F74  2  B0 0D            bcs loc_D4A1
008F76  2  29 02            and #2
008F78  2  F0 09            beq loc_D4A1
008F7A  2  A0 91            ldy #$91
008F7C  2  A2 9A            ldx #$9A
008F7E  2  A9 44            lda #$44
008F80  2  20 3A 8E         jsr sub_D358
008F83  2               loc_D4A1:
008F83  2               
008F83  2  4C 54 8F         jmp loc_D472
008F86  2               LL_ExtraLifeFreqData:
008F86  2  58               .byte $58
008F87  2  02               .byte 2
008F88  2  54               .byte $54
008F89  2  56               .byte $56
008F8A  2  4E               .byte $4E
008F8B  2  44               .byte $44
008F8C  2               LL_PowerUpGrabFreqData:
008F8C  2  4C               .byte $4C
008F8D  2  52               .byte $52
008F8E  2  4C               .byte $4C
008F8F  2  48               .byte $48
008F90  2  3E               .byte $3E
008F91  2  36               .byte $36
008F92  2  3E               .byte $3E
008F93  2  36               .byte $36
008F94  2  30               .byte $30
008F95  2  28               .byte $28
008F96  2  4A               .byte $4A
008F97  2  50               .byte $50
008F98  2  4A               .byte $4A
008F99  2  64               .byte $64
008F9A  2  3C               .byte $3C
008F9B  2  32               .byte $32
008F9C  2  3C               .byte $3C
008F9D  2  32               .byte $32
008F9E  2  2C               .byte $2C
008F9F  2  24               .byte $24
008FA0  2  3A               .byte $3A
008FA1  2  64               .byte $64
008FA2  2  3A               .byte $3A
008FA3  2  34               .byte $34
008FA4  2  2C               .byte $2C
008FA5  2  22               .byte $22
008FA6  2  2C               .byte $2C
008FA7  2  22               .byte $22
008FA8  2  1C               .byte $1C
008FA9  2  14               .byte $14
008FAA  2               LL_PUp_VGrow_FreqData:
008FAA  2  14               .byte $14
008FAB  2  04               .byte 4
008FAC  2  22               .byte $22
008FAD  2  24               .byte $24
008FAE  2  16               .byte $16
008FAF  2  04               .byte 4
008FB0  2  24               .byte $24
008FB1  2  26               .byte $26
008FB2  2  18               .byte $18
008FB3  2  04               .byte 4
008FB4  2  26               .byte $26
008FB5  2  28               .byte $28
008FB6  2  1A               .byte $1A
008FB7  2  04               .byte 4
008FB8  2  28               .byte $28
008FB9  2  2A               .byte $2A
008FBA  2  1C               .byte $1C
008FBB  2  04               .byte 4
008FBC  2  2A               .byte $2A
008FBD  2  2C               .byte $2C
008FBE  2  1E               .byte $1E
008FBF  2  04               .byte 4
008FC0  2  2C               .byte $2C
008FC1  2  2E               .byte $2E
008FC2  2  20               .byte $20
008FC3  2  04               .byte 4
008FC4  2  2E               .byte $2E
008FC5  2  30               .byte $30
008FC6  2  22               .byte $22
008FC7  2  04               .byte 4
008FC8  2  30               .byte $30
008FC9  2  32               .byte $32
008FCA  2               
008FCA  2               LL_PlayCoinGrab:
008FCA  2  A9 35            lda #$35
008FCC  2  A2 8D            ldx #$8D
008FCE  2  D0 04            bne loc_D4F2
008FD0  2               LL_PlayTimerTick:
008FD0  2  A9 06            lda #6
008FD2  2  A2 98            ldx #$98
008FD4  2               loc_D4F2:
008FD4  2  8D BD 07         sta Squ2_SfxLenCounter
008FD7  2  A0 7F            ldy #$7F
008FD9  2  A9 42            lda #$42
008FDB  2  20 58 8E         jsr sub_D376
008FDE  2               loc_D4FC:
008FDE  2  AD BD 07         lda Squ2_SfxLenCounter
008FE1  2  C9 30            cmp #$30
008FE3  2  D0 05            bne loc_D508
008FE5  2  A9 54            lda #$54
008FE7  2  8D 06 40         sta SND_PULSE_4006_REG
008FEA  2               loc_D508:
008FEA  2  D0 2E            bne LL_DecrementSfx2Length
008FEC  2               loc_D50A:
008FEC  2  A9 20            lda #$20
008FEE  2  8D BD 07         sta Squ2_SfxLenCounter
008FF1  2  A0 94            ldy #$94
008FF3  2  A9 5E            lda #$5E
008FF5  2  D0 0B            bne LL_SBlasJ
008FF7  2               LL_ContinueBlast:
008FF7  2  AD BD 07         lda Squ2_SfxLenCounter
008FFA  2  C9 18            cmp #$18
008FFC  2  D0 1C            bne LL_DecrementSfx2Length
008FFE  2  A0 93            ldy #$93
009000  2  A9 18            lda #$18
009002  2               LL_SBlasJ:
009002  2  D0 7F            bne loc_D5A1
009004  2               LL_PlayPowerUpGrab:
009004  2  A9 36            lda #$36
009006  2  8D BD 07         sta Squ2_SfxLenCounter
009009  2               LL_ContinuePowerUpGrab:
009009  2  AD BD 07         lda Squ2_SfxLenCounter
00900C  2  4A               lsr
00900D  2  B0 0B            bcs LL_DecrementSfx2Length
00900F  2  A8               tay
009010  2  B9 8B 8F         lda LL_PowerUpGrabFreqData-1,y
009013  2  A2 5D            ldx #$5D
009015  2  A0 7F            ldy #$7F
009017  2               loc_D535:
009017  2               
009017  2  20 58 8E         jsr sub_D376
00901A  2               LL_DecrementSfx2Length:
00901A  2               
00901A  2  CE BD 07         dec Squ2_SfxLenCounter
00901D  2  D0 0E            bne locret_D54B
00901F  2               LL_EmptySfx2Buffer:
00901F  2               
00901F  2  A2 00            ldx #0
009021  2  86 F2            stx Square2SoundBuffer
009023  2               sub_D541:
009023  2               
009023  2  A2 0D            ldx #$D
009025  2  8E 15 40         stx SND_MASTERCTRL_REG
009028  2  A2 0F            ldx #$F
00902A  2  8E 15 40         stx SND_MASTERCTRL_REG
00902D  2               locret_D54B:
00902D  2               
00902D  2  60               rts
00902E  2               sub_D54C:
00902E  2               
00902E  2  A5 F2            lda Square2SoundBuffer
009030  2  29 40            and #$40
009032  2  D0 65            bne loc_D5B7
009034  2  A4 FE            ldy Square2SoundQueue
009036  2  F0 20            beq loc_D576
009038  2  84 F2            sty Square2SoundBuffer
00903A  2  30 3E            bmi loc_D598
00903C  2  46 FE            lsr Square2SoundQueue
00903E  2  B0 8A            bcs LL_PlayCoinGrab
009040  2  46 FE            lsr Square2SoundQueue
009042  2  B0 6A            bcs loc_D5CC
009044  2  46 FE            lsr Square2SoundQueue
009046  2  B0 6A            bcs loc_D5D0
009048  2  46 FE            lsr Square2SoundQueue
00904A  2  B0 A0            bcs loc_D50A
00904C  2  46 FE            lsr Square2SoundQueue
00904E  2  B0 80            bcs LL_PlayTimerTick
009050  2  46 FE            lsr Square2SoundQueue
009052  2  B0 B0            bcs LL_PlayPowerUpGrab
009054  2  46 FE            lsr Square2SoundQueue
009056  2  B0 3C            bcs loc_D5B2
009058  2               loc_D576:
009058  2               
009058  2  A5 F2            lda Square2SoundBuffer
00905A  2  F0 17            beq locret_D591
00905C  2  30 27            bmi loc_D5A3
00905E  2  4A               lsr
00905F  2  B0 13            bcs loc_D592
009061  2  4A               lsr
009062  2  B0 5D            bcs loc_D5DF
009064  2  4A               lsr
009065  2  B0 5A            bcs loc_D5DF
009067  2  4A               lsr
009068  2  B0 8D            bcs LL_ContinueBlast
00906A  2  4A               lsr
00906B  2  B0 07            bcs loc_D592
00906D  2  4A               lsr
00906E  2  B0 99            bcs LL_ContinuePowerUpGrab
009070  2  4A               lsr
009071  2  B0 26            bcs loc_D5B7
009073  2               locret_D591:
009073  2               
009073  2  60               rts
009074  2               loc_D592:
009074  2               
009074  2  4C DE 8F         jmp loc_D4FC
009077  2               loc_D595:
009077  2               
009077  2  4C 1A 90         jmp LL_DecrementSfx2Length
00907A  2               loc_D598:
00907A  2               
00907A  2  A9 38            lda #$38
00907C  2  8D BD 07         sta Squ2_SfxLenCounter
00907F  2  A0 C4            ldy #$C4
009081  2  A9 18            lda #$18
009083  2               loc_D5A1:
009083  2               
009083  2  D0 0B            bne loc_D5AE
009085  2               loc_D5A3:
009085  2               
009085  2  AD BD 07         lda Squ2_SfxLenCounter
009088  2  C9 08            cmp #8
00908A  2  D0 8E            bne LL_DecrementSfx2Length
00908C  2  A0 A4            ldy #$A4
00908E  2  A9 5A            lda #$5A
009090  2               loc_D5AE:
009090  2               
009090  2  A2 9F            ldx #$9F
009092  2               loc_D5B0:
009092  2               
009092  2  D0 83            bne loc_D535
009094  2               loc_D5B2:
009094  2               
009094  2  A9 30            lda #$30
009096  2  8D BD 07         sta Squ2_SfxLenCounter
009099  2               loc_D5B7:
009099  2               
009099  2  AD BD 07         lda Squ2_SfxLenCounter
00909C  2  A2 03            ldx #3
00909E  2               loc_D5BC:
00909E  2               
00909E  2  4A               lsr
00909F  2  B0 D6            bcs loc_D595
0090A1  2  CA               dex
0090A2  2  D0 FA            bne loc_D5BC
0090A4  2  A8               tay
0090A5  2  B9 85 8F         lda LL_ExtraLifeFreqData-1,y
0090A8  2  A2 82            ldx #$82
0090AA  2  A0 7F            ldy #$7F
0090AC  2  D0 E4            bne loc_D5B0
0090AE  2               loc_D5CC:
0090AE  2               
0090AE  2  A9 10            lda #$10
0090B0  2  D0 02            bne loc_D5D2
0090B2  2               loc_D5D0:
0090B2  2               
0090B2  2  A9 20            lda #$20
0090B4  2               loc_D5D2:
0090B4  2               
0090B4  2  8D BD 07         sta Squ2_SfxLenCounter
0090B7  2  A9 7F            lda #$7F
0090B9  2  8D 05 40         sta SND_PULSE_4005_REG
0090BC  2  A9 00            lda #0
0090BE  2  8D BE 07         sta Sfx_SecondaryCounter
0090C1  2               loc_D5DF:
0090C1  2               
0090C1  2  EE BE 07         inc Sfx_SecondaryCounter
0090C4  2  AD BE 07         lda Sfx_SecondaryCounter
0090C7  2  4A               lsr
0090C8  2  A8               tay
0090C9  2  CC BD 07         cpy Squ2_SfxLenCounter
0090CC  2  F0 0C            beq loc_D5F8
0090CE  2  A9 9D            lda #$9D
0090D0  2  8D 04 40         sta SND_SQUARE2_REG
0090D3  2  B9 AA 8F         lda LL_PUp_VGrow_FreqData,y
0090D6  2  20 5B 8E         jsr loc_D379
0090D9  2  60               rts
0090DA  2               loc_D5F8:
0090DA  2               
0090DA  2  4C 1F 90         jmp LL_EmptySfx2Buffer
0090DD  2               byte_D5FB:
0090DD  2  37               .byte $37
0090DE  2  46               .byte $46
0090DF  2  55               .byte $55
0090E0  2  64               .byte $64
0090E1  2  74               .byte $74
0090E2  2  83               .byte $83
0090E3  2  93               .byte $93
0090E4  2  A2               .byte $A2
0090E5  2  B1               .byte $B1
0090E6  2  C0               .byte $C0
0090E7  2  D0               .byte $D0
0090E8  2  E0               .byte $E0
0090E9  2  F1               .byte $F1
0090EA  2  F1               .byte $F1
0090EB  2  F2               .byte $F2
0090EC  2  E2               .byte $E2
0090ED  2  E2               .byte $E2
0090EE  2  C3               .byte $C3
0090EF  2  A3               .byte $A3
0090F0  2  84               .byte $84
0090F1  2  64               .byte $64
0090F2  2  44               .byte $44
0090F3  2  35               .byte $35
0090F4  2  25               .byte $25
0090F5  2               unk_D613:
0090F5  2  01               .byte 1
0090F6  2  0E               .byte $E
0090F7  2  0E               .byte $E
0090F8  2  0D               .byte $D
0090F9  2  0B               .byte $B
0090FA  2  06               .byte 6
0090FB  2  0C               .byte $C
0090FC  2  0F               .byte $F
0090FD  2  0A               .byte $A
0090FE  2  09               .byte 9
0090FF  2  03               .byte 3
009100  2  0D               .byte $D
009101  2  08               .byte 8
009102  2  0D               .byte $D
009103  2  06               .byte 6
009104  2               unk_D622:
009104  2  0C               .byte $C
009105  2  47               .byte $47
009106  2  49               .byte $49
009107  2  42               .byte $42
009108  2  4A               .byte $4A
009109  2  43               .byte $43
00910A  2  4B               .byte $4B
00910B  2               loc_D629:
00910B  2               
00910B  2  84 F3            sty NoiseSoundBuffer
00910D  2  A9 06            lda #6
00910F  2  8D BF 07         sta Noise_SfxLenCounter
009112  2               loc_D630:
009112  2               
009112  2  AD BF 07         lda Noise_SfxLenCounter
009115  2  A8               tay
009116  2  B9 04 91         lda unk_D622,y
009119  2  8D 0A 40         sta SND_TRIANGLE_400A_REG
00911C  2  A9 18            lda #$18
00911E  2  8D 08 40         sta SND_TRIANGLE_REG
009121  2  8D 0B 40         sta SND_TRIANGLE_400B_REG
009124  2  D0 1F            bne loc_D663
009126  2               loc_D644:
009126  2               
009126  2  84 F3            sty NoiseSoundBuffer
009128  2  A9 20            lda #$20
00912A  2  8D BF 07         sta Noise_SfxLenCounter
00912D  2               loc_D64B:
00912D  2               
00912D  2  AD BF 07         lda Noise_SfxLenCounter
009130  2  4A               lsr
009131  2  90 12            bcc loc_D663
009133  2  A8               tay
009134  2  BE F5 90         ldx unk_D613,y
009137  2  B9 CC 9A         lda unk_DFEA,y
00913A  2               loc_D658:
00913A  2               
00913A  2  8D 0C 40         sta SND_NOISE_REG
00913D  2  8E 0E 40         stx $400E
009140  2  A9 18            lda #$18
009142  2  8D 0F 40         sta $400F
009145  2               loc_D663:
009145  2               
009145  2  CE BF 07         dec Noise_SfxLenCounter
009148  2  D0 0E            bne locret_D676
00914A  2  A9 F0            lda #$F0
00914C  2  8D 0C 40         sta SND_NOISE_REG
00914F  2  A9 00            lda #0
009151  2  8D 08 40         sta SND_TRIANGLE_REG
009154  2  A9 00            lda #0
009156  2  85 F3            sta NoiseSoundBuffer
009158  2               locret_D676:
009158  2               
009158  2  60               rts
009159  2               sub_D677:
009159  2               
009159  2  A5 F3            lda NoiseSoundBuffer
00915B  2  30 B5            bmi loc_D630
00915D  2  A4 FD            ldy NoiseSoundQueue
00915F  2  30 AA            bmi loc_D629
009161  2  46 FD            lsr NoiseSoundQueue
009163  2  B0 C1            bcs loc_D644
009165  2  4A               lsr
009166  2  B0 C5            bcs loc_D64B
009168  2  46 FD            lsr NoiseSoundQueue
00916A  2  B0 0B            bcs loc_D695
00916C  2  4A               lsr
00916D  2  B0 0F            bcs loc_D69C
00916F  2  4A               lsr
009170  2  B0 1F            bcs loc_D6AF
009172  2  46 FD            lsr NoiseSoundQueue
009174  2  B0 14            bcs loc_D6A8
009176  2  60               rts
009177  2               loc_D695:
009177  2               
009177  2  84 F3            sty NoiseSoundBuffer
009179  2  A9 40            lda #$40
00917B  2  8D BF 07         sta Noise_SfxLenCounter
00917E  2               loc_D69C:
00917E  2               
00917E  2  AD BF 07         lda Noise_SfxLenCounter
009181  2  4A               lsr
009182  2  A8               tay
009183  2  A2 0F            ldx #$F
009185  2  B9 AB 9A         lda unk_DFC9,y
009188  2               loc_D6A6:
009188  2               
009188  2  D0 B0            bne loc_D658
00918A  2               loc_D6A8:
00918A  2               
00918A  2  84 F3            sty NoiseSoundBuffer
00918C  2  A9 C0            lda #$C0
00918E  2  8D BF 07         sta Noise_SfxLenCounter
009191  2               loc_D6AF:
009191  2               
009191  2  46 FD            lsr NoiseSoundQueue
009193  2  90 C3            bcc locret_D676
009195  2  AD BF 07         lda Noise_SfxLenCounter
009198  2  4A               lsr
009199  2  4A               lsr
00919A  2  4A               lsr
00919B  2  A8               tay
00919C  2  B9 DD 90         lda byte_D5FB,y
00919F  2  29 0F            and #$F
0091A1  2  09 10            ora #$10
0091A3  2  AA               tax
0091A4  2  B9 DD 90         lda byte_D5FB,y
0091A7  2  4A               lsr
0091A8  2  4A               lsr
0091A9  2  4A               lsr
0091AA  2  4A               lsr
0091AB  2  09 10            ora #$10
0091AD  2  D0 D9            bne loc_D6A6
0091AF  2               loc_D6CD:
0091AF  2  4C 58 92         jmp loc_D776
0091B2  2               
0091B2  2               LL_MusicHandler:
0091B2  2  A5 FC            lda EventMusicQueue
0091B4  2  D0 0C            bne LL_LoadEventMusic
0091B6  2  A5 FB            lda AreaMusicQueue
0091B8  2  D0 2C            bne loc_D704
0091BA  2  AD B1 07         lda EventMusicBuffer
0091BD  2  05 F4            ora AreaMusicBuffer
0091BF  2  D0 EE            bne loc_D6CD
0091C1  2  60               rts
0091C2  2               LL_LoadEventMusic:
0091C2  2  8D B1 07         sta EventMusicBuffer
0091C5  2  C9 01            cmp #1
0091C7  2  D0 06            bne loc_D6ED
0091C9  2  20 59 8F         jsr sub_D477
0091CC  2  20 23 90         jsr sub_D541
0091CF  2               loc_D6ED:
0091CF  2               
0091CF  2  A6 F4            ldx AreaMusicBuffer
0091D1  2  8E C5 07         stx AreaMusicBuffer_Alt
0091D4  2  A0 00            ldy #0
0091D6  2  8C C4 07         sty NoteLengthTblAdder
0091D9  2  84 F4            sty AreaMusicBuffer
0091DB  2  C9 40            cmp #$40
0091DD  2  D0 30            bne LL_FindEventMusicHeader
0091DF  2  A2 08            ldx #8
0091E1  2  8E C4 07         stx NoteLengthTblAdder
0091E4  2  D0 29            bne LL_FindEventMusicHeader
0091E6  2               loc_D704:
0091E6  2               
0091E6  2  C9 04            cmp #4
0091E8  2  D0 03            bne loc_D70B
0091EA  2  20 59 8F         jsr sub_D477
0091ED  2               loc_D70B:
0091ED  2               
0091ED  2  A0 10            ldy #$10
0091EF  2               loc_D70D:
0091EF  2               
0091EF  2  8C C7 07         sty GroundMusicHeaderOfs
0091F2  2               loc_D710:
0091F2  2               
0091F2  2  A0 00            ldy #0
0091F4  2  8C B1 07         sty EventMusicBuffer
0091F7  2  85 F4            sta AreaMusicBuffer
0091F9  2  C9 01            cmp #1
0091FB  2  D0 0E            bne LL_FindAreaMusicHeader
0091FD  2  EE C7 07         inc GroundMusicHeaderOfs
009200  2  AC C7 07         ldy GroundMusicHeaderOfs
009203  2  C0 32            cpy #$32
009205  2  D0 0C            bne LL_LoadHeader
009207  2  A0 11            ldy #$11
009209  2  D0 E4            bne loc_D70D
00920B  2               LL_FindAreaMusicHeader:
00920B  2  A0 08            ldy #8
00920D  2  84 F7            sty MusicOffset_Square2
00920F  2               LL_FindEventMusicHeader:
00920F  2  C8               iny
009210  2  4A               lsr
009211  2  90 FC            bcc LL_FindEventMusicHeader
009213  2               LL_LoadHeader:
009213  2  B9 2A 94         lda LL_MusicHeaderData-1,y
009216  2  A8               tay
009217  2  B9 2B 94         lda LL_MusicHeaderData,y
00921A  2  85 F0            sta NoteLenLookupTblOfs
00921C  2  B9 2C 94         lda LL_MusicHeaderData+1,y
00921F  2  85 F5            sta MusicDataLow
009221  2  B9 2D 94         lda LL_MusicHeaderData+2,y
009224  2  85 F6            sta MusicDataHigh
009226  2  B9 2E 94         lda LL_MusicHeaderData+3,y
009229  2  85 F9            sta MusicOffset_Triangle
00922B  2  B9 2F 94         lda LL_MusicHeaderData+4,y
00922E  2  85 F8            sta MusicOffset_Square1
009230  2  B9 30 94         lda LL_MusicHeaderData+5,y
009233  2  8D B0 07         sta MusicOffset_Noise
009236  2  8D C1 07         sta NoiseDataLoopbackOfs
009239  2  A9 01            lda #1
00923B  2  8D B4 07         sta Squ2_NoteLenCounter
00923E  2  8D B6 07         sta Squ1_NoteLenCounter
009241  2  8D B9 07         sta Tri_NoteLenCounter
009244  2  8D BA 07         sta Noise_BeatLenCounter
009247  2  A9 00            lda #0
009249  2  85 F7            sta MusicOffset_Square2
00924B  2  8D CA 07         sta AltRegContentFlag
00924E  2  A9 0B            lda #$B
009250  2  8D 15 40         sta SND_MASTERCTRL_REG
009253  2  A9 0F            lda #$F
009255  2  8D 15 40         sta SND_MASTERCTRL_REG
009258  2               loc_D776:
009258  2               
009258  2  CE B4 07         dec Squ2_NoteLenCounter
00925B  2  D0 5F            bne loc_D7DA
00925D  2  A4 F7            ldy MusicOffset_Square2
00925F  2  E6 F7            inc MusicOffset_Square2
009261  2  B1 F5            lda ($F5),y
009263  2  F0 04            beq loc_D787
009265  2  10 3D            bpl loc_D7C2
009267  2  D0 2F            bne loc_D7B6
009269  2               loc_D787:
009269  2               
009269  2  AD B1 07         lda EventMusicBuffer
00926C  2  C9 40            cmp #$40
00926E  2  D0 05            bne loc_D793
009270  2  AD C5 07         lda AreaMusicBuffer_Alt
009273  2  D0 1D            bne loc_D7B0
009275  2               loc_D793:
009275  2               
009275  2  29 04            and #VictoryMusic
009277  2  D0 1C            bne LL_VictoryMLoopBack
009279  2  A5 F4            lda AreaMusicBuffer
00927B  2  29 5F            and #$5F
00927D  2  D0 13            bne loc_D7B0
00927F  2  A9 00            lda #0
009281  2  85 F4            sta AreaMusicBuffer
009283  2  8D B1 07         sta EventMusicBuffer
009286  2  8D 08 40         sta SND_TRIANGLE_REG
009289  2  A9 90            lda #$90
00928B  2  8D 00 40         sta SND_SQUARE1_REG
00928E  2  8D 04 40         sta SND_SQUARE2_REG
009291  2  60               rts
009292  2               loc_D7B0:
009292  2               
009292  2  4C F2 91         jmp loc_D710
009295  2               LL_VictoryMLoopBack:
009295  2  4C C2 91         jmp LL_LoadEventMusic
009298  2               loc_D7B6:
009298  2               
009298  2  20 E9 93         jsr LL_ProcessLengthData
00929B  2  8D B3 07         sta Squ2_NoteLenBuffer
00929E  2  A4 F7            ldy MusicOffset_Square2
0092A0  2  E6 F7            inc MusicOffset_Square2
0092A2  2  B1 F5            lda ($F5),y
0092A4  2               loc_D7C2:
0092A4  2               
0092A4  2  A6 F2            ldx Square2SoundBuffer
0092A6  2  D0 0E            bne loc_D7D4
0092A8  2  20 5B 8E         jsr loc_D379
0092AB  2  F0 03            beq loc_D7CE
0092AD  2  20 F6 93         jsr LL_LoadControlRegs
0092B0  2               loc_D7CE:
0092B0  2               
0092B0  2  8D B5 07         sta Squ2_EnvelopeDataCtrl
0092B3  2  20 51 8E         jsr sub_D36F
0092B6  2               loc_D7D4:
0092B6  2               
0092B6  2  AD B3 07         lda Squ2_NoteLenBuffer
0092B9  2  8D B4 07         sta Squ2_NoteLenCounter
0092BC  2               loc_D7DA:
0092BC  2               
0092BC  2  A5 F2            lda Square2SoundBuffer
0092BE  2  D0 1A            bne loc_D7F8
0092C0  2  AD B1 07         lda EventMusicBuffer
0092C3  2  29 91            and #$91
0092C5  2  D0 13            bne loc_D7F8
0092C7  2  AC B5 07         ldy Squ2_EnvelopeDataCtrl
0092CA  2  F0 03            beq loc_D7ED
0092CC  2  CE B5 07         dec Squ2_EnvelopeDataCtrl
0092CF  2               loc_D7ED:
0092CF  2               
0092CF  2  20 12 94         jsr LL_LoadEnvelopeData
0092D2  2  8D 04 40         sta SND_SQUARE2_REG
0092D5  2  A2 7F            ldx #$7F
0092D7  2  8E 05 40         stx SND_PULSE_4005_REG
0092DA  2               loc_D7F8:
0092DA  2               
0092DA  2  A4 F8            ldy MusicOffset_Square1
0092DC  2  F0 5A            beq loc_D856
0092DE  2  CE B6 07         dec Squ1_NoteLenCounter
0092E1  2  D0 32            bne loc_D833
0092E3  2               loc_D801:
0092E3  2               
0092E3  2  A4 F8            ldy MusicOffset_Square1
0092E5  2  E6 F8            inc MusicOffset_Square1
0092E7  2  B1 F5            lda ($F5),y
0092E9  2  D0 0F            bne loc_D818
0092EB  2  A9 83            lda #$83
0092ED  2  8D 00 40         sta SND_SQUARE1_REG
0092F0  2  A9 94            lda #$94
0092F2  2  8D 01 40         sta SND_SQUARE1_REG+1
0092F5  2  8D CA 07         sta AltRegContentFlag
0092F8  2  D0 E9            bne loc_D801
0092FA  2               loc_D818:
0092FA  2               
0092FA  2  20 E3 93         jsr sub_D901
0092FD  2  8D B6 07         sta Squ1_NoteLenCounter
009300  2  A4 F1            ldy Square1SoundBuffer
009302  2  D0 34            bne loc_D856
009304  2  8A               txa
009305  2  29 3E            and #$3E
009307  2  20 3D 8E         jsr sub_D35B
00930A  2  F0 03            beq loc_D82D
00930C  2  20 F6 93         jsr LL_LoadControlRegs
00930F  2               loc_D82D:
00930F  2               
00930F  2  8D B7 07         sta Squ1_EnvelopeDataCtrl
009312  2  20 33 8E         jsr sub_D351
009315  2               loc_D833:
009315  2               
009315  2  A5 F1            lda Square1SoundBuffer
009317  2  D0 1F            bne loc_D856
009319  2  AD B1 07         lda EventMusicBuffer
00931C  2  29 91            and #$91
00931E  2  D0 0E            bne loc_D84C
009320  2  AC B7 07         ldy Squ1_EnvelopeDataCtrl
009323  2  F0 03            beq loc_D846
009325  2  CE B7 07         dec Squ1_EnvelopeDataCtrl
009328  2               loc_D846:
009328  2               
009328  2  20 12 94         jsr LL_LoadEnvelopeData
00932B  2  8D 00 40         sta SND_SQUARE1_REG
00932E  2               loc_D84C:
00932E  2               
00932E  2  AD CA 07         lda AltRegContentFlag
009331  2  D0 02            bne loc_D853
009333  2  A9 7F            lda #$7F
009335  2               loc_D853:
009335  2               
009335  2  8D 01 40         sta SND_SQUARE1_REG+1
009338  2               loc_D856:
009338  2               
009338  2  A5 F9            lda MusicOffset_Triangle
00933A  2  CE B9 07         dec Tri_NoteLenCounter
00933D  2  D0 4C            bne loc_D8A9
00933F  2  A4 F9            ldy MusicOffset_Triangle
009341  2  E6 F9            inc MusicOffset_Triangle
009343  2  B1 F5            lda ($F5),y
009345  2  F0 41            beq loc_D8A6
009347  2  10 13            bpl loc_D87A
009349  2  20 E9 93         jsr LL_ProcessLengthData
00934C  2  8D B8 07         sta Tri_NoteLenBuffer
00934F  2  A9 1F            lda #$1F
009351  2  8D 08 40         sta SND_TRIANGLE_REG
009354  2  A4 F9            ldy MusicOffset_Triangle
009356  2  E6 F9            inc MusicOffset_Triangle
009358  2  B1 F5            lda ($F5),y
00935A  2  F0 2C            beq loc_D8A6
00935C  2               loc_D87A:
00935C  2               
00935C  2  20 5F 8E         jsr loc_D37D
00935F  2  AE B8 07         ldx Tri_NoteLenBuffer
009362  2  8E B9 07         stx Tri_NoteLenCounter
009365  2  AD B1 07         lda EventMusicBuffer
009368  2  29 6E            and #$6E
00936A  2  D0 06            bne loc_D890
00936C  2  A5 F4            lda AreaMusicBuffer
00936E  2  29 0A            and #$A
009370  2  F0 19            beq loc_D8A9
009372  2               loc_D890:
009372  2               
009372  2  8A               txa
009373  2  C9 12            cmp #$12
009375  2  B0 0F            bcs loc_D8A4
009377  2  AD B1 07         lda EventMusicBuffer
00937A  2  29 08            and #8
00937C  2  F0 04            beq loc_D8A0
00937E  2  A9 0F            lda #$F
009380  2  D0 06            bne loc_D8A6
009382  2               loc_D8A0:
009382  2               
009382  2  A9 1F            lda #$1F
009384  2  D0 02            bne loc_D8A6
009386  2               loc_D8A4:
009386  2               
009386  2  A9 FF            lda #$FF
009388  2               loc_D8A6:
009388  2               
009388  2  8D 08 40         sta SND_TRIANGLE_REG
00938B  2               loc_D8A9:
00938B  2               
00938B  2  A5 F4            lda AreaMusicBuffer
00938D  2  29 F3            and #$F3
00938F  2  F0 51            beq locret_D900
009391  2  CE BA 07         dec Noise_BeatLenCounter
009394  2  D0 4C            bne locret_D900
009396  2               loc_D8B4:
009396  2               
009396  2  AC B0 07         ldy MusicOffset_Noise
009399  2  EE B0 07         inc MusicOffset_Noise
00939C  2  B1 F5            lda ($F5),y
00939E  2  D0 08            bne loc_D8C6
0093A0  2  AD C1 07         lda NoiseDataLoopbackOfs
0093A3  2  8D B0 07         sta MusicOffset_Noise
0093A6  2  D0 EE            bne loc_D8B4
0093A8  2               loc_D8C6:
0093A8  2               
0093A8  2  20 E3 93         jsr sub_D901
0093AB  2  8D BA 07         sta Noise_BeatLenCounter
0093AE  2  8A               txa
0093AF  2  29 3E            and #$3E
0093B1  2  F0 24            beq loc_D8F5
0093B3  2  C9 30            cmp #$30
0093B5  2  F0 18            beq loc_D8ED
0093B7  2  C9 20            cmp #$20
0093B9  2  F0 0C            beq loc_D8E5
0093BB  2  29 10            and #$10
0093BD  2  F0 18            beq loc_D8F5
0093BF  2  A9 1C            lda #$1C
0093C1  2  A2 03            ldx #3
0093C3  2  A0 18            ldy #$18
0093C5  2  D0 12            bne loc_D8F7
0093C7  2               loc_D8E5:
0093C7  2               
0093C7  2  A9 1C            lda #$1C
0093C9  2  A2 0C            ldx #$C
0093CB  2  A0 18            ldy #$18
0093CD  2  D0 0A            bne loc_D8F7
0093CF  2               loc_D8ED:
0093CF  2               
0093CF  2  A9 1C            lda #$1C
0093D1  2  A2 03            ldx #3
0093D3  2  A0 58            ldy #$58
0093D5  2  D0 02            bne loc_D8F7
0093D7  2               loc_D8F5:
0093D7  2               
0093D7  2  A9 10            lda #$10
0093D9  2               loc_D8F7:
0093D9  2               
0093D9  2  8D 0C 40         sta SND_NOISE_REG
0093DC  2  8E 0E 40         stx $400E
0093DF  2  8C 0F 40         sty $400F
0093E2  2               locret_D900:
0093E2  2               
0093E2  2  60               rts
0093E3  2               sub_D901:
0093E3  2               
0093E3  2  AA               tax
0093E4  2  6A               ror
0093E5  2  8A               txa
0093E6  2  2A               rol
0093E7  2  2A               rol
0093E8  2  2A               rol
0093E9  2               LL_ProcessLengthData:
0093E9  2               
0093E9  2  29 07            and #7
0093EB  2  18               clc
0093EC  2  65 F0            adc NoteLenLookupTblOfs
0093EE  2  6D C4 07         adc NoteLengthTblAdder
0093F1  2  A8               tay
0093F2  2  B9 48 9A         lda LL_MusicLengthLookupTbl,y
0093F5  2  60               rts
0093F6  2               LL_LoadControlRegs:
0093F6  2               
0093F6  2  AD B1 07         lda EventMusicBuffer
0093F9  2  29 08            and #8
0093FB  2  F0 04            beq loc_D91F
0093FD  2  A9 04            lda #4
0093FF  2  D0 0C            bne loc_D92B
009401  2               loc_D91F:
009401  2  A5 F4            lda AreaMusicBuffer
009403  2  29 7D            and #$7D
009405  2  F0 04            beq loc_D929
009407  2  A9 08            lda #8
009409  2  D0 02            bne loc_D92B
00940B  2               loc_D929:
00940B  2  A9 28            lda #$28
00940D  2               loc_D92B:
00940D  2  A2 82            ldx #$82
00940F  2  A0 7F            ldy #$7F
009411  2  60               rts
009412  2               
009412  2               LL_LoadEnvelopeData:
009412  2  AD B1 07         lda EventMusicBuffer
009415  2  29 08            and #8
009417  2  F0 04            beq LL_LoadUsualEnvData
009419  2  B9 78 9A         lda LL_EndOfCastleMusicEnvData,y
00941C  2  60               rts
00941D  2               
00941D  2               LL_LoadUsualEnvData:
00941D  2  A5 F4            lda AreaMusicBuffer
00941F  2  29 7D            and #$7D
009421  2  F0 04            beq LL_LoadWaterEventMusEnvData
009423  2  B9 7C 9A         lda LL_AreaMusicEnvData,y
009426  2  60               rts
009427  2               
009427  2               LL_LoadWaterEventMusEnvData:
009427  2  B9 84 9A         lda LL_WaterEventMusEnvData,y
00942A  2  60               rts
00942B  2               LL_MusicHeaderData:
00942B  2  A0               .byte $A0
00942C  2  54               .byte $54
00942D  2  54               .byte $54
00942E  2  5F               .byte $5F
00942F  2  54               .byte $54
009430  2  3C               .byte $3C
009431  2  31               .byte $31
009432  2  4B               .byte $4B
009433  2  64               .byte $64
009434  2  59               .byte $59
009435  2  46               .byte $46
009436  2  4F               .byte $4F
009437  2  36               .byte $36
009438  2  88               .byte $88
009439  2  36               .byte $36
00943A  2  4B               .byte $4B
00943B  2  88               .byte $88
00943C  2  64               .byte $64
00943D  2  64               .byte $64
00943E  2  6A               .byte $6A
00943F  2  70               .byte $70
009440  2  6A               .byte $6A
009441  2  76               .byte $76
009442  2  6A               .byte $6A
009443  2  70               .byte $70
009444  2  6A               .byte $6A
009445  2  76               .byte $76
009446  2  7C               .byte $7C
009447  2  82               .byte $82
009448  2  7C               .byte $7C
009449  2  88               .byte $88
00944A  2  64               .byte $64
00944B  2  64               .byte $64
00944C  2  8E               .byte $8E
00944D  2  94               .byte $94
00944E  2  8E               .byte $8E
00944F  2  9A               .byte $9A
009450  2  8E               .byte $8E
009451  2  94               .byte $94
009452  2  8E               .byte $8E
009453  2  9A               .byte $9A
009454  2  7C               .byte $7C
009455  2  82               .byte $82
009456  2  7C               .byte $7C
009457  2  88               .byte $88
009458  2  8E               .byte $8E
009459  2  94               .byte $94
00945A  2  8E               .byte $8E
00945B  2  9A               .byte $9A
00945C  2  08               .byte 8
00945D  2  8B 97            .word unk_DCA9
00945F  2  27               .byte $27
009460  2  18               .byte $18
009461  2  20               .byte $20
009462  2  D1 94            .word byte_D9EF
009464  2  2E               .byte $2E
009465  2  1A               .byte $1A
009466  2  40               .byte $40
009467  2  20               .byte $20
009468  2  C9 97            .word byte_DCE7
00946A  2  3D               .byte $3D
00946B  2  21               .byte $21
00946C  2  20               .byte $20
00946D  2  DD 97            .word unk_DCFB
00946F  2  3F               .byte $3F
009470  2  1D               .byte $1D
009471  2  18               .byte $18
009472  2  2A 98            .word unk_DD48
009474  2  00               .byte 0
009475  2  00               .byte 0
009476  2  08               .byte 8
009477  2  35 95            .word unk_DA53
009479  2  00               .byte 0
00947A  2  00               .byte 0
00947B  2  BD 96            .word unk_DBDB
00947D  2  93               .byte $93
00947E  2  62               .byte $62
00947F  2  18               .byte $18
009480  2  5E 97            .word unk_DC7C
009482  2  1E               .byte $1E
009483  2  14               .byte $14
009484  2  08               .byte 8
009485  2  6B 98            .word unk_DD89
009487  2  A0               .byte $A0
009488  2  70               .byte $70
009489  2  68               .byte $68
00948A  2  08               .byte 8
00948B  2  6A 99            .word unk_DE88
00948D  2  4C               .byte $4C
00948E  2  24               .byte $24
00948F  2  18               .byte $18
009490  2  1A 95            .word unk_DA38
009492  2  2D               .byte $2D
009493  2  1C               .byte $1C
009494  2  B8               .byte $B8
009495  2  18               .byte $18
009496  2  62 95            .word unk_DA80
009498  2  20               .byte $20
009499  2  12               .byte $12
00949A  2  70               .byte $70
00949B  2  18               .byte $18
00949C  2  8E 95            .word unk_DAAC
00949E  2  1B               .byte $1B
00949F  2  10               .byte $10
0094A0  2  44               .byte $44
0094A1  2  18               .byte $18
0094A2  2  B6 95            .word unk_DAD4
0094A4  2  11               .byte $11
0094A5  2  0A               .byte $A
0094A6  2  1C               .byte $1C
0094A7  2  18               .byte $18
0094A8  2  DB 95            .word unk_DAF9
0094AA  2  2D               .byte $2D
0094AB  2  10               .byte $10
0094AC  2  58               .byte $58
0094AD  2  18               .byte $18
0094AE  2  F4 95            .word unk_DB12
0094B0  2  14               .byte $14
0094B1  2  0D               .byte $D
0094B2  2  3F               .byte $3F
0094B3  2  18               .byte $18
0094B4  2  12 96            .word unk_DB30
0094B6  2  15               .byte $15
0094B7  2  0D               .byte $D
0094B8  2  21               .byte $21
0094B9  2  18               .byte $18
0094BA  2  3E 96            .word unk_DB5C
0094BC  2  18               .byte $18
0094BD  2  10               .byte $10
0094BE  2  7A               .byte $7A
0094BF  2  18               .byte $18
0094C0  2  64 96            .word unk_DB82
0094C2  2  19               .byte $19
0094C3  2  0F               .byte $F
0094C4  2  54               .byte $54
0094C5  2  18               .byte $18
0094C6  2  8D 96            .word unk_DBAB
0094C8  2  1E               .byte $1E
0094C9  2  12               .byte $12
0094CA  2  2B               .byte $2B
0094CB  2  18               .byte $18
0094CC  2  8B 96            .word unk_DBA9
0094CE  2  1E               .byte $1E
0094CF  2  0F               .byte $F
0094D0  2  2D               .byte $2D
0094D1  2               byte_D9EF:
0094D1  2  84               .byte $84
0094D2  2  2C               .byte $2C
0094D3  2  2C               .byte $2C
0094D4  2  2C               .byte $2C
0094D5  2  82               .byte $82
0094D6  2  04               .byte 4
0094D7  2  2C               .byte $2C
0094D8  2  04               .byte 4
0094D9  2  85               .byte $85
0094DA  2  2C               .byte $2C
0094DB  2  84               .byte $84
0094DC  2  2C               .byte $2C
0094DD  2  2C               .byte $2C
0094DE  2  2A               .byte $2A
0094DF  2  2A               .byte $2A
0094E0  2  2A               .byte $2A
0094E1  2  82               .byte $82
0094E2  2  04               .byte 4
0094E3  2  2A               .byte $2A
0094E4  2  04               .byte 4
0094E5  2  85               .byte $85
0094E6  2  2A               .byte $2A
0094E7  2  84               .byte $84
0094E8  2  2A               .byte $2A
0094E9  2  2A               .byte $2A
0094EA  2  00               .byte 0
0094EB  2  1F               .byte $1F
0094EC  2  1F               .byte $1F
0094ED  2  1F               .byte $1F
0094EE  2  98               .byte $98
0094EF  2  1F               .byte $1F
0094F0  2  1F               .byte $1F
0094F1  2  98               .byte $98
0094F2  2  9E               .byte $9E
0094F3  2  98               .byte $98
0094F4  2  1F               .byte $1F
0094F5  2  1D               .byte $1D
0094F6  2  1D               .byte $1D
0094F7  2  1D               .byte $1D
0094F8  2  94               .byte $94
0094F9  2  1D               .byte $1D
0094FA  2  1D               .byte $1D
0094FB  2  94               .byte $94
0094FC  2  9C               .byte $9C
0094FD  2  94               .byte $94
0094FE  2  1D               .byte $1D
0094FF  2  86               .byte $86
009500  2  18               .byte $18
009501  2  85               .byte $85
009502  2  26               .byte $26
009503  2  30               .byte $30
009504  2  84               .byte $84
009505  2  04               .byte 4
009506  2  26               .byte $26
009507  2  30               .byte $30
009508  2  86               .byte $86
009509  2  14               .byte $14
00950A  2  85               .byte $85
00950B  2  22               .byte $22
00950C  2  2C               .byte $2C
00950D  2  84               .byte $84
00950E  2  04               .byte 4
00950F  2  22               .byte $22
009510  2  2C               .byte $2C
009511  2  21               .byte $21
009512  2  D0               .byte $D0
009513  2  C4               .byte $C4
009514  2  D0               .byte $D0
009515  2  31               .byte $31
009516  2  D0               .byte $D0
009517  2  C4               .byte $C4
009518  2  D0               .byte $D0
009519  2  00               .byte 0
00951A  2               unk_DA38:
00951A  2  85               .byte $85
00951B  2  2C               .byte $2C
00951C  2  22               .byte $22
00951D  2  1C               .byte $1C
00951E  2  84               .byte $84
00951F  2  26               .byte $26
009520  2  2A               .byte $2A
009521  2  82               .byte $82
009522  2  28               .byte $28
009523  2  26               .byte $26
009524  2  04               .byte 4
009525  2  87               .byte $87
009526  2  22               .byte $22
009527  2  34               .byte $34
009528  2  3A               .byte $3A
009529  2  82               .byte $82
00952A  2  40               .byte $40
00952B  2  04               .byte 4
00952C  2  36               .byte $36
00952D  2  84               .byte $84
00952E  2  3A               .byte $3A
00952F  2  34               .byte $34
009530  2  82               .byte $82
009531  2  2C               .byte $2C
009532  2  30               .byte $30
009533  2  85               .byte $85
009534  2  2A               .byte $2A
009535  2               unk_DA53:
009535  2  00               .byte 0
009536  2  5D               .byte $5D
009537  2  55               .byte $55
009538  2  4D               .byte $4D
009539  2  15               .byte $15
00953A  2  19               .byte $19
00953B  2  96               .byte $96
00953C  2  15               .byte $15
00953D  2  D5               .byte $D5
00953E  2  E3               .byte $E3
00953F  2  EB               .byte $EB
009540  2  2D               .byte $2D
009541  2  A6               .byte $A6
009542  2  2B               .byte $2B
009543  2  27               .byte $27
009544  2  9C               .byte $9C
009545  2  9E               .byte $9E
009546  2  59               .byte $59
009547  2  85               .byte $85
009548  2  22               .byte $22
009549  2  1C               .byte $1C
00954A  2  14               .byte $14
00954B  2  84               .byte $84
00954C  2  1E               .byte $1E
00954D  2  22               .byte $22
00954E  2  82               .byte $82
00954F  2  20               .byte $20
009550  2  1E               .byte $1E
009551  2  04               .byte 4
009552  2  87               .byte $87
009553  2  1C               .byte $1C
009554  2  2C               .byte $2C
009555  2  34               .byte $34
009556  2  82               .byte $82
009557  2  36               .byte $36
009558  2  04               .byte 4
009559  2  30               .byte $30
00955A  2  34               .byte $34
00955B  2  04               .byte 4
00955C  2  2C               .byte $2C
00955D  2  04               .byte 4
00955E  2  26               .byte $26
00955F  2  2A               .byte $2A
009560  2  85               .byte $85
009561  2  22               .byte $22
009562  2               unk_DA80:
009562  2  84               .byte $84
009563  2  04               .byte 4
009564  2  82               .byte $82
009565  2  3A               .byte $3A
009566  2  38               .byte $38
009567  2  36               .byte $36
009568  2  32               .byte $32
009569  2  04               .byte 4
00956A  2  34               .byte $34
00956B  2  04               .byte 4
00956C  2  24               .byte $24
00956D  2  26               .byte $26
00956E  2  2C               .byte $2C
00956F  2  04               .byte 4
009570  2  26               .byte $26
009571  2  2C               .byte $2C
009572  2  30               .byte $30
009573  2  00               .byte 0
009574  2  05               .byte 5
009575  2  B4               .byte $B4
009576  2  B2               .byte $B2
009577  2  B0               .byte $B0
009578  2  2B               .byte $2B
009579  2  AC               .byte $AC
00957A  2  84               .byte $84
00957B  2  9C               .byte $9C
00957C  2  9E               .byte $9E
00957D  2  A2               .byte $A2
00957E  2  84               .byte $84
00957F  2  94               .byte $94
009580  2  9C               .byte $9C
009581  2  9E               .byte $9E
009582  2  85               .byte $85
009583  2  14               .byte $14
009584  2  22               .byte $22
009585  2  84               .byte $84
009586  2  2C               .byte $2C
009587  2  85               .byte $85
009588  2  1E               .byte $1E
009589  2  82               .byte $82
00958A  2  2C               .byte $2C
00958B  2  84               .byte $84
00958C  2  2C               .byte $2C
00958D  2  1E               .byte $1E
00958E  2               unk_DAAC:
00958E  2  84               .byte $84
00958F  2  04               .byte 4
009590  2  82               .byte $82
009591  2  3A               .byte $3A
009592  2  38               .byte $38
009593  2  36               .byte $36
009594  2  32               .byte $32
009595  2  04               .byte 4
009596  2  34               .byte $34
009597  2  04               .byte 4
009598  2  64               .byte $64
009599  2  04               .byte 4
00959A  2  64               .byte $64
00959B  2  86               .byte $86
00959C  2  64               .byte $64
00959D  2  00               .byte 0
00959E  2  05               .byte 5
00959F  2  B4               .byte $B4
0095A0  2  B2               .byte $B2
0095A1  2  B0               .byte $B0
0095A2  2  2B               .byte $2B
0095A3  2  AC               .byte $AC
0095A4  2  84               .byte $84
0095A5  2  37               .byte $37
0095A6  2  B6               .byte $B6
0095A7  2  B6               .byte $B6
0095A8  2  45               .byte $45
0095A9  2  85               .byte $85
0095AA  2  14               .byte $14
0095AB  2  1C               .byte $1C
0095AC  2  82               .byte $82
0095AD  2  22               .byte $22
0095AE  2  84               .byte $84
0095AF  2  2C               .byte $2C
0095B0  2  4E               .byte $4E
0095B1  2  82               .byte $82
0095B2  2  4E               .byte $4E
0095B3  2  84               .byte $84
0095B4  2  4E               .byte $4E
0095B5  2  22               .byte $22
0095B6  2               unk_DAD4:
0095B6  2  84               .byte $84
0095B7  2  04               .byte 4
0095B8  2  85               .byte $85
0095B9  2  32               .byte $32
0095BA  2  85               .byte $85
0095BB  2  30               .byte $30
0095BC  2  86               .byte $86
0095BD  2  2C               .byte $2C
0095BE  2  04               .byte 4
0095BF  2  00               .byte 0
0095C0  2  05               .byte 5
0095C1  2  A4               .byte $A4
0095C2  2  05               .byte 5
0095C3  2  9E               .byte $9E
0095C4  2  05               .byte 5
0095C5  2  9D               .byte $9D
0095C6  2  85               .byte $85
0095C7  2  84               .byte $84
0095C8  2  14               .byte $14
0095C9  2  85               .byte $85
0095CA  2  24               .byte $24
0095CB  2  28               .byte $28
0095CC  2  2C               .byte $2C
0095CD  2  82               .byte $82
0095CE  2  22               .byte $22
0095CF  2  84               .byte $84
0095D0  2  22               .byte $22
0095D1  2  14               .byte $14
0095D2  2  21               .byte $21
0095D3  2  D0               .byte $D0
0095D4  2  C4               .byte $C4
0095D5  2  D0               .byte $D0
0095D6  2  31               .byte $31
0095D7  2  D0               .byte $D0
0095D8  2  C4               .byte $C4
0095D9  2  D0               .byte $D0
0095DA  2  00               .byte 0
0095DB  2               unk_DAF9:
0095DB  2  82               .byte $82
0095DC  2  2C               .byte $2C
0095DD  2  84               .byte $84
0095DE  2  2C               .byte $2C
0095DF  2  2C               .byte $2C
0095E0  2  82               .byte $82
0095E1  2  2C               .byte $2C
0095E2  2  30               .byte $30
0095E3  2  04               .byte 4
0095E4  2  34               .byte $34
0095E5  2  2C               .byte $2C
0095E6  2  04               .byte 4
0095E7  2  26               .byte $26
0095E8  2  86               .byte $86
0095E9  2  22               .byte $22
0095EA  2  00               .byte 0
0095EB  2  A4               .byte $A4
0095EC  2  25               .byte $25
0095ED  2  25               .byte $25
0095EE  2  A4               .byte $A4
0095EF  2  29               .byte $29
0095F0  2  A2               .byte $A2
0095F1  2  1D               .byte $1D
0095F2  2  9C               .byte $9C
0095F3  2  95               .byte $95
0095F4  2               unk_DB12:
0095F4  2  82               .byte $82
0095F5  2  2C               .byte $2C
0095F6  2  2C               .byte $2C
0095F7  2  04               .byte 4
0095F8  2  2C               .byte $2C
0095F9  2  04               .byte 4
0095FA  2  2C               .byte $2C
0095FB  2  30               .byte $30
0095FC  2  85               .byte $85
0095FD  2  34               .byte $34
0095FE  2  04               .byte 4
0095FF  2  04               .byte 4
009600  2  00               .byte 0
009601  2  A4               .byte $A4
009602  2  25               .byte $25
009603  2  25               .byte $25
009604  2  A4               .byte $A4
009605  2  A8               .byte $A8
009606  2  63               .byte $63
009607  2  04               .byte 4
009608  2  85               .byte $85
009609  2  0E               .byte $E
00960A  2  1A               .byte $1A
00960B  2  84               .byte $84
00960C  2  24               .byte $24
00960D  2  85               .byte $85
00960E  2  22               .byte $22
00960F  2  14               .byte $14
009610  2  84               .byte $84
009611  2  0C               .byte $C
009612  2               unk_DB30:
009612  2  82               .byte $82
009613  2  34               .byte $34
009614  2  84               .byte $84
009615  2  34               .byte $34
009616  2  34               .byte $34
009617  2  82               .byte $82
009618  2  2C               .byte $2C
009619  2  84               .byte $84
00961A  2  34               .byte $34
00961B  2  86               .byte $86
00961C  2  3A               .byte $3A
00961D  2  04               .byte 4
00961E  2  00               .byte 0
00961F  2  A0               .byte $A0
009620  2  21               .byte $21
009621  2  21               .byte $21
009622  2  A0               .byte $A0
009623  2  21               .byte $21
009624  2  2B               .byte $2B
009625  2  05               .byte 5
009626  2  A3               .byte $A3
009627  2  82               .byte $82
009628  2  18               .byte $18
009629  2  84               .byte $84
00962A  2  18               .byte $18
00962B  2  18               .byte $18
00962C  2  82               .byte $82
00962D  2  18               .byte $18
00962E  2  18               .byte $18
00962F  2  04               .byte 4
009630  2  86               .byte $86
009631  2  3A               .byte $3A
009632  2  22               .byte $22
009633  2  31               .byte $31
009634  2  90               .byte $90
009635  2  31               .byte $31
009636  2  90               .byte $90
009637  2  31               .byte $31
009638  2  71               .byte $71
009639  2  31               .byte $31
00963A  2  90               .byte $90
00963B  2  90               .byte $90
00963C  2  90               .byte $90
00963D  2  00               .byte 0
00963E  2               unk_DB5C:
00963E  2  82               .byte $82
00963F  2  34               .byte $34
009640  2  84               .byte $84
009641  2  2C               .byte $2C
009642  2  85               .byte $85
009643  2  22               .byte $22
009644  2  84               .byte $84
009645  2  24               .byte $24
009646  2  82               .byte $82
009647  2  26               .byte $26
009648  2  36               .byte $36
009649  2  04               .byte 4
00964A  2  36               .byte $36
00964B  2  86               .byte $86
00964C  2  26               .byte $26
00964D  2  00               .byte 0
00964E  2  AC               .byte $AC
00964F  2  27               .byte $27
009650  2  5D               .byte $5D
009651  2  1D               .byte $1D
009652  2  9E               .byte $9E
009653  2  2D               .byte $2D
009654  2  AC               .byte $AC
009655  2  9F               .byte $9F
009656  2  85               .byte $85
009657  2  14               .byte $14
009658  2  82               .byte $82
009659  2  20               .byte $20
00965A  2  84               .byte $84
00965B  2  22               .byte $22
00965C  2  2C               .byte $2C
00965D  2  1E               .byte $1E
00965E  2  1E               .byte $1E
00965F  2  82               .byte $82
009660  2  2C               .byte $2C
009661  2  2C               .byte $2C
009662  2  1E               .byte $1E
009663  2  04               .byte 4
009664  2               unk_DB82:
009664  2  87               .byte $87
009665  2  2A               .byte $2A
009666  2  40               .byte $40
009667  2  40               .byte $40
009668  2  40               .byte $40
009669  2  3A               .byte $3A
00966A  2  36               .byte $36
00966B  2  82               .byte $82
00966C  2  34               .byte $34
00966D  2  2C               .byte $2C
00966E  2  04               .byte 4
00966F  2  26               .byte $26
009670  2  86               .byte $86
009671  2  22               .byte $22
009672  2  00               .byte 0
009673  2  E3               .byte $E3
009674  2  F7               .byte $F7
009675  2  F7               .byte $F7
009676  2  F7               .byte $F7
009677  2  F5               .byte $F5
009678  2  F1               .byte $F1
009679  2  AC               .byte $AC
00967A  2  27               .byte $27
00967B  2  9E               .byte $9E
00967C  2  9D               .byte $9D
00967D  2  85               .byte $85
00967E  2  18               .byte $18
00967F  2  82               .byte $82
009680  2  1E               .byte $1E
009681  2  84               .byte $84
009682  2  22               .byte $22
009683  2  2A               .byte $2A
009684  2  22               .byte $22
009685  2  22               .byte $22
009686  2  82               .byte $82
009687  2  2C               .byte $2C
009688  2  2C               .byte $2C
009689  2  22               .byte $22
00968A  2  04               .byte 4
00968B  2               unk_DBA9:
00968B  2  86               .byte $86
00968C  2  04               .byte 4
00968D  2               unk_DBAB:
00968D  2  82               .byte $82
00968E  2  2A               .byte $2A
00968F  2  36               .byte $36
009690  2  04               .byte 4
009691  2  36               .byte $36
009692  2  87               .byte $87
009693  2  36               .byte $36
009694  2  34               .byte $34
009695  2  30               .byte $30
009696  2  86               .byte $86
009697  2  2C               .byte $2C
009698  2  04               .byte 4
009699  2  00               .byte 0
00969A  2  00               .byte 0
00969B  2  68               .byte $68
00969C  2  6A               .byte $6A
00969D  2  6C               .byte $6C
00969E  2  45               .byte $45
00969F  2  A2               .byte $A2
0096A0  2  31               .byte $31
0096A1  2  B0               .byte $B0
0096A2  2  F1               .byte $F1
0096A3  2  ED               .byte $ED
0096A4  2  EB               .byte $EB
0096A5  2  A2               .byte $A2
0096A6  2  1D               .byte $1D
0096A7  2  9C               .byte $9C
0096A8  2  95               .byte $95
0096A9  2  86               .byte $86
0096AA  2  04               .byte 4
0096AB  2  85               .byte $85
0096AC  2  22               .byte $22
0096AD  2  82               .byte $82
0096AE  2  22               .byte $22
0096AF  2  87               .byte $87
0096B0  2  22               .byte $22
0096B1  2  26               .byte $26
0096B2  2  2A               .byte $2A
0096B3  2  84               .byte $84
0096B4  2  2C               .byte $2C
0096B5  2  22               .byte $22
0096B6  2  86               .byte $86
0096B7  2  14               .byte $14
0096B8  2  51               .byte $51
0096B9  2  90               .byte $90
0096BA  2  31               .byte $31
0096BB  2  11               .byte $11
0096BC  2  00               .byte 0
0096BD  2               unk_DBDB:
0096BD  2  80               .byte $80
0096BE  2  22               .byte $22
0096BF  2  28               .byte $28
0096C0  2  22               .byte $22
0096C1  2  26               .byte $26
0096C2  2  22               .byte $22
0096C3  2  24               .byte $24
0096C4  2  22               .byte $22
0096C5  2  26               .byte $26
0096C6  2  22               .byte $22
0096C7  2  28               .byte $28
0096C8  2  22               .byte $22
0096C9  2  2A               .byte $2A
0096CA  2  22               .byte $22
0096CB  2  28               .byte $28
0096CC  2  22               .byte $22
0096CD  2  26               .byte $26
0096CE  2  22               .byte $22
0096CF  2  28               .byte $28
0096D0  2  22               .byte $22
0096D1  2  26               .byte $26
0096D2  2  22               .byte $22
0096D3  2  24               .byte $24
0096D4  2  22               .byte $22
0096D5  2  26               .byte $26
0096D6  2  22               .byte $22
0096D7  2  28               .byte $28
0096D8  2  22               .byte $22
0096D9  2  2A               .byte $2A
0096DA  2  22               .byte $22
0096DB  2  28               .byte $28
0096DC  2  22               .byte $22
0096DD  2  26               .byte $26
0096DE  2  20               .byte $20
0096DF  2  26               .byte $26
0096E0  2  20               .byte $20
0096E1  2  24               .byte $24
0096E2  2  20               .byte $20
0096E3  2  26               .byte $26
0096E4  2  20               .byte $20
0096E5  2  28               .byte $28
0096E6  2  20               .byte $20
0096E7  2  26               .byte $26
0096E8  2  20               .byte $20
0096E9  2  28               .byte $28
0096EA  2  20               .byte $20
0096EB  2  26               .byte $26
0096EC  2  20               .byte $20
0096ED  2  24               .byte $24
0096EE  2  20               .byte $20
0096EF  2  26               .byte $26
0096F0  2  20               .byte $20
0096F1  2  24               .byte $24
0096F2  2  20               .byte $20
0096F3  2  26               .byte $26
0096F4  2  20               .byte $20
0096F5  2  28               .byte $28
0096F6  2  20               .byte $20
0096F7  2  26               .byte $26
0096F8  2  20               .byte $20
0096F9  2  28               .byte $28
0096FA  2  20               .byte $20
0096FB  2  26               .byte $26
0096FC  2  20               .byte $20
0096FD  2  24               .byte $24
0096FE  2  28               .byte $28
0096FF  2  30               .byte $30
009700  2  28               .byte $28
009701  2  32               .byte $32
009702  2  28               .byte $28
009703  2  30               .byte $30
009704  2  28               .byte $28
009705  2  2E               .byte $2E
009706  2  28               .byte $28
009707  2  30               .byte $30
009708  2  28               .byte $28
009709  2  2E               .byte $2E
00970A  2  28               .byte $28
00970B  2  2C               .byte $2C
00970C  2  28               .byte $28
00970D  2  2E               .byte $2E
00970E  2  28               .byte $28
00970F  2  30               .byte $30
009710  2  28               .byte $28
009711  2  32               .byte $32
009712  2  28               .byte $28
009713  2  30               .byte $30
009714  2  28               .byte $28
009715  2  2E               .byte $2E
009716  2  28               .byte $28
009717  2  30               .byte $30
009718  2  28               .byte $28
009719  2  2E               .byte $2E
00971A  2  28               .byte $28
00971B  2  2C               .byte $2C
00971C  2  28               .byte $28
00971D  2  2E               .byte $2E
00971E  2  00               .byte 0
00971F  2  04               .byte 4
009720  2  70               .byte $70
009721  2  6E               .byte $6E
009722  2  6C               .byte $6C
009723  2  6E               .byte $6E
009724  2  70               .byte $70
009725  2               byte_DC43:
009725  2  72               .byte $72
009726  2  70               .byte $70
009727  2  6E               .byte $6E
009728  2  70               .byte $70
009729  2  6E               .byte $6E
00972A  2  6C               .byte $6C
00972B  2  6E               .byte $6E
00972C  2  70               .byte $70
00972D  2  72               .byte $72
00972E  2  70               .byte $70
00972F  2  6E               .byte $6E
009730  2  6E               .byte $6E
009731  2  6C               .byte $6C
009732  2  6E               .byte $6E
009733  2  70               .byte $70
009734  2  6E               .byte $6E
009735  2  70               .byte $70
009736  2  6E               .byte $6E
009737  2  6C               .byte $6C
009738  2  6E               .byte $6E
009739  2  6C               .byte $6C
00973A  2  6E               .byte $6E
00973B  2  70               .byte $70
00973C  2  6E               .byte $6E
00973D  2  70               .byte $70
00973E  2  6E               .byte $6E
00973F  2  6C               .byte $6C
009740  2  76               .byte $76
009741  2  78               .byte $78
009742  2  76               .byte $76
009743  2  74               .byte $74
009744  2  76               .byte $76
009745  2  74               .byte $74
009746  2  72               .byte $72
009747  2  74               .byte $74
009748  2  76               .byte $76
009749  2  78               .byte $78
00974A  2  76               .byte $76
00974B  2  74               .byte $74
00974C  2  76               .byte $76
00974D  2  74               .byte $74
00974E  2  72               .byte $72
00974F  2  74               .byte $74
009750  2  84               .byte $84
009751  2  1A               .byte $1A
009752  2  83               .byte $83
009753  2  18               .byte $18
009754  2  20               .byte $20
009755  2  84               .byte $84
009756  2  1E               .byte $1E
009757  2  83               .byte $83
009758  2  1C               .byte $1C
009759  2  28               .byte $28
00975A  2  26               .byte $26
00975B  2  1C               .byte $1C
00975C  2  1A               .byte $1A
00975D  2  1C               .byte $1C
00975E  2               unk_DC7C:
00975E  2  82               .byte $82
00975F  2  2C               .byte $2C
009760  2  04               .byte 4
009761  2  04               .byte 4
009762  2  22               .byte $22
009763  2  04               .byte 4
009764  2  04               .byte 4
009765  2  84               .byte $84
009766  2  1C               .byte $1C
009767  2  87               .byte $87
009768  2  26               .byte $26
009769  2  2A               .byte $2A
00976A  2  26               .byte $26
00976B  2  84               .byte $84
00976C  2  24               .byte $24
00976D  2  28               .byte $28
00976E  2  24               .byte $24
00976F  2  80               .byte $80
009770  2  22               .byte $22
009771  2  00               .byte 0
009772  2  9C               .byte $9C
009773  2  05               .byte 5
009774  2  94               .byte $94
009775  2  05               .byte 5
009776  2  0D               .byte $D
009777  2  9F               .byte $9F
009778  2  1E               .byte $1E
009779  2  9C               .byte $9C
00977A  2  98               .byte $98
00977B  2  9D               .byte $9D
00977C  2  82               .byte $82
00977D  2  22               .byte $22
00977E  2  04               .byte 4
00977F  2  04               .byte 4
009780  2  1C               .byte $1C
009781  2  04               .byte 4
009782  2  04               .byte 4
009783  2  84               .byte $84
009784  2  14               .byte $14
009785  2  86               .byte $86
009786  2  1E               .byte $1E
009787  2  80               .byte $80
009788  2  16               .byte $16
009789  2  80               .byte $80
00978A  2  14               .byte $14
00978B  2               unk_DCA9:
00978B  2  81               .byte $81
00978C  2  1C               .byte $1C
00978D  2  30               .byte $30
00978E  2  04               .byte 4
00978F  2  30               .byte $30
009790  2  30               .byte $30
009791  2  04               .byte 4
009792  2  1E               .byte $1E
009793  2  32               .byte $32
009794  2  04               .byte 4
009795  2  32               .byte $32
009796  2  32               .byte $32
009797  2  04               .byte 4
009798  2  20               .byte $20
009799  2  34               .byte $34
00979A  2  04               .byte 4
00979B  2  34               .byte $34
00979C  2  34               .byte $34
00979D  2  04               .byte 4
00979E  2  36               .byte $36
00979F  2  04               .byte 4
0097A0  2  84               .byte $84
0097A1  2  36               .byte $36
0097A2  2  00               .byte 0
0097A3  2  46               .byte $46
0097A4  2  A4               .byte $A4
0097A5  2  64               .byte $64
0097A6  2  A4               .byte $A4
0097A7  2  48               .byte $48
0097A8  2  A6               .byte $A6
0097A9  2  66               .byte $66
0097AA  2  A6               .byte $A6
0097AB  2  4A               .byte $4A
0097AC  2  A8               .byte $A8
0097AD  2  68               .byte $68
0097AE  2  A8               .byte $A8
0097AF  2  6A               .byte $6A
0097B0  2  44               .byte $44
0097B1  2  2B               .byte $2B
0097B2  2  81               .byte $81
0097B3  2  2A               .byte $2A
0097B4  2  42               .byte $42
0097B5  2  04               .byte 4
0097B6  2  42               .byte $42
0097B7  2  42               .byte $42
0097B8  2  04               .byte 4
0097B9  2  2C               .byte $2C
0097BA  2  64               .byte $64
0097BB  2  04               .byte 4
0097BC  2  64               .byte $64
0097BD  2  64               .byte $64
0097BE  2  04               .byte 4
0097BF  2  2E               .byte $2E
0097C0  2  46               .byte $46
0097C1  2  04               .byte 4
0097C2  2  46               .byte $46
0097C3  2  46               .byte $46
0097C4  2  04               .byte 4
0097C5  2  22               .byte $22
0097C6  2  04               .byte 4
0097C7  2  84               .byte $84
0097C8  2  22               .byte $22
0097C9  2               byte_DCE7:
0097C9  2  87               .byte $87
0097CA  2  04               .byte 4
0097CB  2  06               .byte 6
0097CC  2  0C               .byte $C
0097CD  2  14               .byte $14
0097CE  2  1C               .byte $1C
0097CF  2               byte_DCED:
0097CF  2  22               .byte $22
0097D0  2  86               .byte $86
0097D1  2  2C               .byte $2C
0097D2  2  22               .byte $22
0097D3  2  87               .byte $87
0097D4  2  04               .byte 4
0097D5  2  60               .byte $60
0097D6  2  0E               .byte $E
0097D7  2  14               .byte $14
0097D8  2  1A               .byte $1A
0097D9  2  24               .byte $24
0097DA  2  86               .byte $86
0097DB  2  2C               .byte $2C
0097DC  2  24               .byte $24
0097DD  2               unk_DCFB:
0097DD  2  87               .byte $87
0097DE  2  04               .byte 4
0097DF  2  08               .byte 8
0097E0  2  10               .byte $10
0097E1  2  18               .byte $18
0097E2  2  1E               .byte $1E
0097E3  2  28               .byte $28
0097E4  2  86               .byte $86
0097E5  2  30               .byte $30
0097E6  2  30               .byte $30
0097E7  2  80               .byte $80
0097E8  2  64               .byte $64
0097E9  2  00               .byte 0
0097EA  2  CD               .byte $CD
0097EB  2  D5               .byte $D5
0097EC  2  DD               .byte $DD
0097ED  2  E3               .byte $E3
0097EE  2  ED               .byte $ED
0097EF  2  F5               .byte $F5
0097F0  2  BB               .byte $BB
0097F1  2  B5               .byte $B5
0097F2  2  CF               .byte $CF
0097F3  2  D5               .byte $D5
0097F4  2  DB               .byte $DB
0097F5  2  E5               .byte $E5
0097F6  2  ED               .byte $ED
0097F7  2  F3               .byte $F3
0097F8  2  BD               .byte $BD
0097F9  2  B3               .byte $B3
0097FA  2  D1               .byte $D1
0097FB  2  D9               .byte $D9
0097FC  2  DF               .byte $DF
0097FD  2  E9               .byte $E9
0097FE  2  F1               .byte $F1
0097FF  2  F7               .byte $F7
009800  2  BF               .byte $BF
009801  2  FF               .byte $FF
009802  2  FF               .byte $FF
009803  2  FF               .byte $FF
009804  2  34               .byte $34
009805  2  00               .byte 0
009806  2  86               .byte $86
009807  2  04               .byte 4
009808  2  87               .byte $87
009809  2  14               .byte $14
00980A  2  1C               .byte $1C
00980B  2  22               .byte $22
00980C  2  86               .byte $86
00980D  2  34               .byte $34
00980E  2  84               .byte $84
00980F  2  2C               .byte $2C
009810  2  04               .byte 4
009811  2  04               .byte 4
009812  2  04               .byte 4
009813  2  87               .byte $87
009814  2  14               .byte $14
009815  2  1A               .byte $1A
009816  2  24               .byte $24
009817  2  86               .byte $86
009818  2  32               .byte $32
009819  2  84               .byte $84
00981A  2  2C               .byte $2C
00981B  2  04               .byte 4
00981C  2  86               .byte $86
00981D  2  04               .byte 4
00981E  2  87               .byte $87
00981F  2  18               .byte $18
009820  2  1E               .byte $1E
009821  2  28               .byte $28
009822  2  86               .byte $86
009823  2  36               .byte $36
009824  2  87               .byte $87
009825  2  30               .byte $30
009826  2  30               .byte $30
009827  2  30               .byte $30
009828  2  80               .byte $80
009829  2  2C               .byte $2C
00982A  2               unk_DD48:
00982A  2  82               .byte $82
00982B  2  14               .byte $14
00982C  2  2C               .byte $2C
00982D  2  62               .byte $62
00982E  2  26               .byte $26
00982F  2  10               .byte $10
009830  2  28               .byte $28
009831  2  80               .byte $80
009832  2  04               .byte 4
009833  2  82               .byte $82
009834  2  14               .byte $14
009835  2  2C               .byte $2C
009836  2  62               .byte $62
009837  2  26               .byte $26
009838  2  10               .byte $10
009839  2  28               .byte $28
00983A  2  80               .byte $80
00983B  2  04               .byte 4
00983C  2  82               .byte $82
00983D  2  08               .byte 8
00983E  2  1E               .byte $1E
00983F  2  5E               .byte $5E
009840  2  18               .byte $18
009841  2  60               .byte $60
009842  2  1A               .byte $1A
009843  2  80               .byte $80
009844  2  04               .byte 4
009845  2  82               .byte $82
009846  2  08               .byte 8
009847  2  1E               .byte $1E
009848  2  5E               .byte $5E
009849  2  18               .byte $18
00984A  2  60               .byte $60
00984B  2  1A               .byte $1A
00984C  2  86               .byte $86
00984D  2  04               .byte 4
00984E  2  83               .byte $83
00984F  2  1A               .byte $1A
009850  2  18               .byte $18
009851  2  16               .byte $16
009852  2  84               .byte $84
009853  2  14               .byte $14
009854  2  1A               .byte $1A
009855  2  18               .byte $18
009856  2  0E               .byte $E
009857  2  0C               .byte $C
009858  2  16               .byte $16
009859  2  83               .byte $83
00985A  2  14               .byte $14
00985B  2  20               .byte $20
00985C  2  1E               .byte $1E
00985D  2  1C               .byte $1C
00985E  2  28               .byte $28
00985F  2  26               .byte $26
009860  2  87               .byte $87
009861  2  24               .byte $24
009862  2  1A               .byte $1A
009863  2  12               .byte $12
009864  2  10               .byte $10
009865  2  62               .byte $62
009866  2  0E               .byte $E
009867  2  80               .byte $80
009868  2  04               .byte 4
009869  2  04               .byte 4
00986A  2  00               .byte 0
00986B  2               unk_DD89:
00986B  2  82               .byte $82
00986C  2  18               .byte $18
00986D  2  1C               .byte $1C
00986E  2  20               .byte $20
00986F  2  22               .byte $22
009870  2  26               .byte $26
009871  2  28               .byte $28
009872  2  81               .byte $81
009873  2  2A               .byte $2A
009874  2  2A               .byte $2A
009875  2  2A               .byte $2A
009876  2  04               .byte 4
009877  2  2A               .byte $2A
009878  2  04               .byte 4
009879  2  83               .byte $83
00987A  2  2A               .byte $2A
00987B  2  82               .byte $82
00987C  2  22               .byte $22
00987D  2  86               .byte $86
00987E  2  34               .byte $34
00987F  2  32               .byte $32
009880  2  34               .byte $34
009881  2  81               .byte $81
009882  2  04               .byte 4
009883  2  22               .byte $22
009884  2  26               .byte $26
009885  2  2A               .byte $2A
009886  2  2C               .byte $2C
009887  2  30               .byte $30
009888  2  86               .byte $86
009889  2  34               .byte $34
00988A  2  83               .byte $83
00988B  2  32               .byte $32
00988C  2  82               .byte $82
00988D  2  36               .byte $36
00988E  2  84               .byte $84
00988F  2  34               .byte $34
009890  2  85               .byte $85
009891  2  04               .byte 4
009892  2  81               .byte $81
009893  2  22               .byte $22
009894  2  86               .byte $86
009895  2  30               .byte $30
009896  2  2E               .byte $2E
009897  2  30               .byte $30
009898  2  81               .byte $81
009899  2  04               .byte 4
00989A  2  22               .byte $22
00989B  2  26               .byte $26
00989C  2  2A               .byte $2A
00989D  2  2C               .byte $2C
00989E  2  2E               .byte $2E
00989F  2  86               .byte $86
0098A0  2  30               .byte $30
0098A1  2  83               .byte $83
0098A2  2  22               .byte $22
0098A3  2  82               .byte $82
0098A4  2  36               .byte $36
0098A5  2  84               .byte $84
0098A6  2  34               .byte $34
0098A7  2  85               .byte $85
0098A8  2  04               .byte 4
0098A9  2  81               .byte $81
0098AA  2  22               .byte $22
0098AB  2  86               .byte $86
0098AC  2  3A               .byte $3A
0098AD  2  3A               .byte $3A
0098AE  2  3A               .byte $3A
0098AF  2  82               .byte $82
0098B0  2  3A               .byte $3A
0098B1  2  81               .byte $81
0098B2  2  40               .byte $40
0098B3  2  82               .byte $82
0098B4  2  04               .byte 4
0098B5  2  81               .byte $81
0098B6  2  3A               .byte $3A
0098B7  2  86               .byte $86
0098B8  2  36               .byte $36
0098B9  2  36               .byte $36
0098BA  2  36               .byte $36
0098BB  2  82               .byte $82
0098BC  2  36               .byte $36
0098BD  2  81               .byte $81
0098BE  2  3A               .byte $3A
0098BF  2  82               .byte $82
0098C0  2  04               .byte 4
0098C1  2  81               .byte $81
0098C2  2  36               .byte $36
0098C3  2  86               .byte $86
0098C4  2  34               .byte $34
0098C5  2  82               .byte $82
0098C6  2  26               .byte $26
0098C7  2  2A               .byte $2A
0098C8  2  36               .byte $36
0098C9  2  81               .byte $81
0098CA  2  34               .byte $34
0098CB  2  34               .byte $34
0098CC  2  85               .byte $85
0098CD  2  34               .byte $34
0098CE  2  81               .byte $81
0098CF  2  2A               .byte $2A
0098D0  2  86               .byte $86
0098D1  2  2C               .byte $2C
0098D2  2  00               .byte 0
0098D3  2  84               .byte $84
0098D4  2  90               .byte $90
0098D5  2  B0               .byte $B0
0098D6  2  84               .byte $84
0098D7  2  50               .byte $50
0098D8  2  50               .byte $50
0098D9  2  B0               .byte $B0
0098DA  2  00               .byte 0
0098DB  2  98               .byte $98
0098DC  2  96               .byte $96
0098DD  2  94               .byte $94
0098DE  2  92               .byte $92
0098DF  2  94               .byte $94
0098E0  2  96               .byte $96
0098E1  2  58               .byte $58
0098E2  2  58               .byte $58
0098E3  2  58               .byte $58
0098E4  2  44               .byte $44
0098E5  2  5C               .byte $5C
0098E6  2  44               .byte $44
0098E7  2  9F               .byte $9F
0098E8  2  A3               .byte $A3
0098E9  2  A1               .byte $A1
0098EA  2  A3               .byte $A3
0098EB  2  85               .byte $85
0098EC  2  A3               .byte $A3
0098ED  2  E0               .byte $E0
0098EE  2  A6               .byte $A6
0098EF  2  23               .byte $23
0098F0  2  C4               .byte $C4
0098F1  2  9F               .byte $9F
0098F2  2  9D               .byte $9D
0098F3  2  9F               .byte $9F
0098F4  2  85               .byte $85
0098F5  2  9F               .byte $9F
0098F6  2  D2               .byte $D2
0098F7  2  A6               .byte $A6
0098F8  2  23               .byte $23
0098F9  2  C4               .byte $C4
0098FA  2  B5               .byte $B5
0098FB  2  B1               .byte $B1
0098FC  2  AF               .byte $AF
0098FD  2  85               .byte $85
0098FE  2  B1               .byte $B1
0098FF  2  AF               .byte $AF
009900  2  AD               .byte $AD
009901  2  85               .byte $85
009902  2  95               .byte $95
009903  2  9E               .byte $9E
009904  2  A2               .byte $A2
009905  2  AA               .byte $AA
009906  2  6A               .byte $6A
009907  2  6A               .byte $6A
009908  2  6B               .byte $6B
009909  2  5E               .byte $5E
00990A  2  9D               .byte $9D
00990B  2  84               .byte $84
00990C  2  04               .byte 4
00990D  2  04               .byte 4
00990E  2  82               .byte $82
00990F  2  22               .byte $22
009910  2  86               .byte $86
009911  2  22               .byte $22
009912  2  82               .byte $82
009913  2  14               .byte $14
009914  2  22               .byte $22
009915  2  2C               .byte $2C
009916  2  12               .byte $12
009917  2  22               .byte $22
009918  2  2A               .byte $2A
009919  2  14               .byte $14
00991A  2  22               .byte $22
00991B  2  2C               .byte $2C
00991C  2  1C               .byte $1C
00991D  2  22               .byte $22
00991E  2  2C               .byte $2C
00991F  2  14               .byte $14
009920  2  22               .byte $22
009921  2  2C               .byte $2C
009922  2  12               .byte $12
009923  2  22               .byte $22
009924  2  2A               .byte $2A
009925  2  14               .byte $14
009926  2  22               .byte $22
009927  2  2C               .byte $2C
009928  2  1C               .byte $1C
009929  2  22               .byte $22
00992A  2  2C               .byte $2C
00992B  2  18               .byte $18
00992C  2  22               .byte $22
00992D  2  2A               .byte $2A
00992E  2  16               .byte $16
00992F  2  20               .byte $20
009930  2  28               .byte $28
009931  2  18               .byte $18
009932  2  22               .byte $22
009933  2  2A               .byte $2A
009934  2  12               .byte $12
009935  2  22               .byte $22
009936  2  2A               .byte $2A
009937  2  18               .byte $18
009938  2  22               .byte $22
009939  2  2A               .byte $2A
00993A  2  12               .byte $12
00993B  2  22               .byte $22
00993C  2  2A               .byte $2A
00993D  2  14               .byte $14
00993E  2  22               .byte $22
00993F  2  2C               .byte $2C
009940  2  0C               .byte $C
009941  2  22               .byte $22
009942  2  2C               .byte $2C
009943  2  14               .byte $14
009944  2  22               .byte $22
009945  2  34               .byte $34
009946  2  12               .byte $12
009947  2  22               .byte $22
009948  2  30               .byte $30
009949  2  10               .byte $10
00994A  2  22               .byte $22
00994B  2  2E               .byte $2E
00994C  2  16               .byte $16
00994D  2  22               .byte $22
00994E  2  34               .byte $34
00994F  2  18               .byte $18
009950  2  26               .byte $26
009951  2  36               .byte $36
009952  2  16               .byte $16
009953  2  26               .byte $26
009954  2  36               .byte $36
009955  2  14               .byte $14
009956  2  26               .byte $26
009957  2  36               .byte $36
009958  2  12               .byte $12
009959  2  22               .byte $22
00995A  2  36               .byte $36
00995B  2  5C               .byte $5C
00995C  2  22               .byte $22
00995D  2  34               .byte $34
00995E  2  0C               .byte $C
00995F  2  22               .byte $22
009960  2  22               .byte $22
009961  2  81               .byte $81
009962  2  1E               .byte $1E
009963  2  1E               .byte $1E
009964  2  85               .byte $85
009965  2  1E               .byte $1E
009966  2  81               .byte $81
009967  2  12               .byte $12
009968  2  86               .byte $86
009969  2  14               .byte $14
00996A  2               unk_DE88:
00996A  2  81               .byte $81
00996B  2  2C               .byte $2C
00996C  2  22               .byte $22
00996D  2  1C               .byte $1C
00996E  2  2C               .byte $2C
00996F  2  22               .byte $22
009970  2  1C               .byte $1C
009971  2  85               .byte $85
009972  2  2C               .byte $2C
009973  2  04               .byte 4
009974  2  81               .byte $81
009975  2  2E               .byte $2E
009976  2  24               .byte $24
009977  2  1E               .byte $1E
009978  2  2E               .byte $2E
009979  2  24               .byte $24
00997A  2  1E               .byte $1E
00997B  2  85               .byte $85
00997C  2  2E               .byte $2E
00997D  2  04               .byte 4
00997E  2  81               .byte $81
00997F  2  32               .byte $32
009980  2  28               .byte $28
009981  2  22               .byte $22
009982  2  32               .byte $32
009983  2  28               .byte $28
009984  2  22               .byte $22
009985  2  85               .byte $85
009986  2  32               .byte $32
009987  2  87               .byte $87
009988  2  36               .byte $36
009989  2  36               .byte $36
00998A  2  36               .byte $36
00998B  2  84               .byte $84
00998C  2  3A               .byte $3A
00998D  2  00               .byte 0
00998E  2  5C               .byte $5C
00998F  2  54               .byte $54
009990  2  4C               .byte $4C
009991  2  5C               .byte $5C
009992  2  54               .byte $54
009993  2  4C               .byte $4C
009994  2  5C               .byte $5C
009995  2  1C               .byte $1C
009996  2  1C               .byte $1C
009997  2  5C               .byte $5C
009998  2  5C               .byte $5C
009999  2  5C               .byte $5C
00999A  2  5C               .byte $5C
00999B  2  5E               .byte $5E
00999C  2  56               .byte $56
00999D  2  4E               .byte $4E
00999E  2  5E               .byte $5E
00999F  2  56               .byte $56
0099A0  2  4E               .byte $4E
0099A1  2  5E               .byte $5E
0099A2  2  1E               .byte $1E
0099A3  2  1E               .byte $1E
0099A4  2  5E               .byte $5E
0099A5  2  5E               .byte $5E
0099A6  2  5E               .byte $5E
0099A7  2  5E               .byte $5E
0099A8  2  62               .byte $62
0099A9  2  5A               .byte $5A
0099AA  2  50               .byte $50
0099AB  2  62               .byte $62
0099AC  2  5A               .byte $5A
0099AD  2  50               .byte $50
0099AE  2  62               .byte $62
0099AF  2  22               .byte $22
0099B0  2  22               .byte $22
0099B1  2  62               .byte $62
0099B2  2  E7               .byte $E7
0099B3  2  E7               .byte $E7
0099B4  2  E7               .byte $E7
0099B5  2  2B               .byte $2B
0099B6  2  86               .byte $86
0099B7  2  14               .byte $14
0099B8  2  81               .byte $81
0099B9  2  14               .byte $14
0099BA  2  80               .byte $80
0099BB  2  14               .byte $14
0099BC  2  14               .byte $14
0099BD  2  81               .byte $81
0099BE  2  14               .byte $14
0099BF  2  14               .byte $14
0099C0  2  14               .byte $14
0099C1  2  14               .byte $14
0099C2  2  86               .byte $86
0099C3  2  16               .byte $16
0099C4  2  81               .byte $81
0099C5  2  16               .byte $16
0099C6  2  80               .byte $80
0099C7  2  16               .byte $16
0099C8  2  16               .byte $16
0099C9  2  81               .byte $81
0099CA  2  16               .byte $16
0099CB  2  16               .byte $16
0099CC  2  16               .byte $16
0099CD  2  16               .byte $16
0099CE  2  81               .byte $81
0099CF  2  28               .byte $28
0099D0  2  22               .byte $22
0099D1  2  1A               .byte $1A
0099D2  2  28               .byte $28
0099D3  2  22               .byte $22
0099D4  2  1A               .byte $1A
0099D5  2  28               .byte $28
0099D6  2  80               .byte $80
0099D7  2  28               .byte $28
0099D8  2  28               .byte $28
0099D9  2  81               .byte $81
0099DA  2  28               .byte $28
0099DB  2  87               .byte $87
0099DC  2  2C               .byte $2C
0099DD  2  2C               .byte $2C
0099DE  2  2C               .byte $2C
0099DF  2  84               .byte $84
0099E0  2  30               .byte $30
0099E1  2  FF               .byte $FF
0099E2  2               unk_DF00:
0099E2  2  00               .byte 0
0099E3  2               unk_DF01:
0099E3  2  88               .byte $88
0099E4  2  00               .byte 0
0099E5  2  2F               .byte $2F
0099E6  2  00               .byte 0
0099E7  2  00               .byte 0
0099E8  2  02               .byte 2
0099E9  2  A6               .byte $A6
0099EA  2  02               .byte 2
0099EB  2  80               .byte $80
0099EC  2  02               .byte 2
0099ED  2  5C               .byte $5C
0099EE  2  02               .byte 2
0099EF  2  3A               .byte $3A
0099F0  2  02               .byte 2
0099F1  2  1A               .byte $1A
0099F2  2  01               .byte 1
0099F3  2  DF               .byte $DF
0099F4  2  01               .byte 1
0099F5  2  C4               .byte $C4
0099F6  2  01               .byte 1
0099F7  2  AB               .byte $AB
0099F8  2  01               .byte 1
0099F9  2  93               .byte $93
0099FA  2  01               .byte 1
0099FB  2  7C               .byte $7C
0099FC  2  01               .byte 1
0099FD  2  67               .byte $67
0099FE  2  01               .byte 1
0099FF  2  53               .byte $53
009A00  2  01               .byte 1
009A01  2  40               .byte $40
009A02  2  01               .byte 1
009A03  2  2E               .byte $2E
009A04  2  01               .byte 1
009A05  2  1D               .byte $1D
009A06  2  01               .byte 1
009A07  2  0D               .byte $D
009A08  2  00               .byte 0
009A09  2  FE               .byte $FE
009A0A  2  00               .byte 0
009A0B  2  EF               .byte $EF
009A0C  2  00               .byte 0
009A0D  2  E2               .byte $E2
009A0E  2  00               .byte 0
009A0F  2  D5               .byte $D5
009A10  2  00               .byte 0
009A11  2  C9               .byte $C9
009A12  2  00               .byte 0
009A13  2  BE               .byte $BE
009A14  2  00               .byte 0
009A15  2  B3               .byte $B3
009A16  2  00               .byte 0
009A17  2  A9               .byte $A9
009A18  2  00               .byte 0
009A19  2  A0               .byte $A0
009A1A  2  00               .byte 0
009A1B  2  97               .byte $97
009A1C  2  00               .byte 0
009A1D  2  8E               .byte $8E
009A1E  2  00               .byte 0
009A1F  2  86               .byte $86
009A20  2  00               .byte 0
009A21  2  77               .byte $77
009A22  2  00               .byte 0
009A23  2  7E               .byte $7E
009A24  2  00               .byte 0
009A25  2  71               .byte $71
009A26  2  00               .byte 0
009A27  2  54               .byte $54
009A28  2  00               .byte 0
009A29  2  64               .byte $64
009A2A  2  00               .byte 0
009A2B  2  5F               .byte $5F
009A2C  2  00               .byte 0
009A2D  2  59               .byte $59
009A2E  2  00               .byte 0
009A2F  2  50               .byte $50
009A30  2  00               .byte 0
009A31  2  47               .byte $47
009A32  2  00               .byte 0
009A33  2  43               .byte $43
009A34  2  00               .byte 0
009A35  2  3B               .byte $3B
009A36  2  00               .byte 0
009A37  2  35               .byte $35
009A38  2  00               .byte 0
009A39  2  2A               .byte $2A
009A3A  2  00               .byte 0
009A3B  2  23               .byte $23
009A3C  2  04               .byte 4
009A3D  2  75               .byte $75
009A3E  2  03               .byte 3
009A3F  2  57               .byte $57
009A40  2  02               .byte 2
009A41  2  F9               .byte $F9
009A42  2  02               .byte 2
009A43  2  CF               .byte $CF
009A44  2  01               .byte 1
009A45  2  FC               .byte $FC
009A46  2  00               .byte 0
009A47  2  6A               .byte $6A
009A48  2               LL_MusicLengthLookupTbl:
009A48  2  05               .byte 5
009A49  2  0A               .byte $A
009A4A  2  14               .byte $14
009A4B  2  28               .byte $28
009A4C  2  50               .byte $50
009A4D  2  1E               .byte $1E
009A4E  2  3C               .byte $3C
009A4F  2  02               .byte 2
009A50  2  04               .byte 4
009A51  2  08               .byte 8
009A52  2  10               .byte $10
009A53  2  20               .byte $20
009A54  2  40               .byte $40
009A55  2  18               .byte $18
009A56  2  30               .byte $30
009A57  2  0C               .byte $C
009A58  2  03               .byte 3
009A59  2  06               .byte 6
009A5A  2  0C               .byte $C
009A5B  2  18               .byte $18
009A5C  2  30               .byte $30
009A5D  2  12               .byte $12
009A5E  2  24               .byte $24
009A5F  2  08               .byte 8
009A60  2  36               .byte $36
009A61  2  03               .byte 3
009A62  2  09               .byte 9
009A63  2  06               .byte 6
009A64  2  12               .byte $12
009A65  2  1B               .byte $1B
009A66  2  24               .byte $24
009A67  2  0C               .byte $C
009A68  2  24               .byte $24
009A69  2  02               .byte 2
009A6A  2  06               .byte 6
009A6B  2  04               .byte 4
009A6C  2  0C               .byte $C
009A6D  2  12               .byte $12
009A6E  2  18               .byte $18
009A6F  2  08               .byte 8
009A70  2  12               .byte $12
009A71  2  01               .byte 1
009A72  2  03               .byte 3
009A73  2  02               .byte 2
009A74  2  06               .byte 6
009A75  2  09               .byte 9
009A76  2  0C               .byte $C
009A77  2  04               .byte 4
009A78  2               LL_EndOfCastleMusicEnvData:
009A78  2  98               .byte $98
009A79  2  99               .byte $99
009A7A  2  9A               .byte $9A
009A7B  2  9B               .byte $9B
009A7C  2               LL_AreaMusicEnvData:
009A7C  2  90               .byte $90
009A7D  2  94               .byte $94
009A7E  2  94               .byte $94
009A7F  2  95               .byte $95
009A80  2  95               .byte $95
009A81  2  96               .byte $96
009A82  2  97               .byte $97
009A83  2  98               .byte $98
009A84  2               LL_WaterEventMusEnvData:
009A84  2  90               .byte $90
009A85  2  91               .byte $91
009A86  2  92               .byte $92
009A87  2  92               .byte $92
009A88  2  93               .byte $93
009A89  2  93               .byte $93
009A8A  2  93               .byte $93
009A8B  2  94               .byte $94
009A8C  2  94               .byte $94
009A8D  2  94               .byte $94
009A8E  2  94               .byte $94
009A8F  2  94               .byte $94
009A90  2  94               .byte $94
009A91  2  95               .byte $95
009A92  2  95               .byte $95
009A93  2  95               .byte $95
009A94  2  95               .byte $95
009A95  2  95               .byte $95
009A96  2  95               .byte $95
009A97  2  96               .byte $96
009A98  2  96               .byte $96
009A99  2  96               .byte $96
009A9A  2  96               .byte $96
009A9B  2  96               .byte $96
009A9C  2  96               .byte $96
009A9D  2  96               .byte $96
009A9E  2  96               .byte $96
009A9F  2  96               .byte $96
009AA0  2  96               .byte $96
009AA1  2  96               .byte $96
009AA2  2  96               .byte $96
009AA3  2  96               .byte $96
009AA4  2  96               .byte $96
009AA5  2  96               .byte $96
009AA6  2  96               .byte $96
009AA7  2  96               .byte $96
009AA8  2  95               .byte $95
009AA9  2  95               .byte $95
009AAA  2  94               .byte $94
009AAB  2               unk_DFC9:
009AAB  2  93               .byte $93
009AAC  2  15               .byte $15
009AAD  2  16               .byte $16
009AAE  2  16               .byte $16
009AAF  2  17               .byte $17
009AB0  2  17               .byte $17
009AB1  2  18               .byte $18
009AB2  2  19               .byte $19
009AB3  2  19               .byte $19
009AB4  2  1A               .byte $1A
009AB5  2  1A               .byte $1A
009AB6  2  1C               .byte $1C
009AB7  2  1D               .byte $1D
009AB8  2  1D               .byte $1D
009AB9  2  1E               .byte $1E
009ABA  2  1E               .byte $1E
009ABB  2  1F               .byte $1F
009ABC  2  1F               .byte $1F
009ABD  2  1F               .byte $1F
009ABE  2  1F               .byte $1F
009ABF  2  1E               .byte $1E
009AC0  2  1D               .byte $1D
009AC1  2  1C               .byte $1C
009AC2  2  1E               .byte $1E
009AC3  2  1F               .byte $1F
009AC4  2  1F               .byte $1F
009AC5  2  1E               .byte $1E
009AC6  2  1D               .byte $1D
009AC7  2  1C               .byte $1C
009AC8  2  1A               .byte $1A
009AC9  2  18               .byte $18
009ACA  2  16               .byte $16
009ACB  2  14               .byte $14
009ACC  2               unk_DFEA:
009ACC  2  15               .byte $15
009ACD  2  16               .byte $16
009ACE  2  16               .byte $16
009ACF  2  17               .byte $17
009AD0  2  17               .byte $17
009AD1  2  18               .byte $18
009AD2  2  19               .byte $19
009AD3  2  19               .byte $19
009AD4  2  1A               .byte $1A
009AD5  2  1A               .byte $1A
009AD6  2  1C               .byte $1C
009AD7  2  1D               .byte $1D
009AD8  2  1D               .byte $1D
009AD9  2  1E               .byte $1E
009ADA  2  1E               .byte $1E
009ADB  2  1F               .byte $1F
009ADC  2               
009ADC  1               	.include "game.asm"
009ADC  2               ReadJoypads:
009ADC  2  A9 01        		lda #$01               ;reset and clear strobe of joypad ports
009ADE  2  8D 16 40     		sta JOYPAD_PORT
009AE1  2  4A           		lsr
009AE2  2  8D 16 40     		sta JOYPAD_PORT
009AE5  2  A0 08        		ldy #$08
009AE7  2               PortLoop:
009AE7  2  48           	pha
009AE8  2  AD 16 40     		lda JOYPAD_PORT
009AEB  2  85 00        		sta $00                ;check d1 and d0 of port output
009AED  2  4A           		lsr                    ;this is necessary on the old
009AEE  2  05 00        		ora $00                ;famicom systems in japan
009AF0  2  4A           		lsr
009AF1  2  68           	pla
009AF2  2  2A           		rol                    ;rotate bit from carry flag
009AF3  2  88           		dey
009AF4  2  D0 F1        		bne PortLoop           ;count down bits left
009AF6  2  8D FC 06     		sta SavedJoypadBits
009AF9  2  48           	pha
009AFA  2  29 30        		and #%00110000
009AFC  2  2D 4A 07     		and JoypadBitMask
009AFF  2  F0 07        		beq Save8Bits
009B01  2  68           	pla
009B02  2  29 CF        		and #%11001111
009B04  2  8D FC 06     		sta SavedJoypadBits
009B07  2  60           		rts
009B08  2               Save8Bits:
009B08  2  68           	pla
009B09  2  8D 4A 07     		sta JoypadBitMask
009B0C  2  60           		rts
009B0D  2               
009B0D  2               
009B0D  2               mario_colors:
009B0D  2  3F 11 03 16  		.byte $3F, $11, $03, $16, $27, $18, $00 ; mario
009B11  2  27 18 00     
009B14  2  3F 11 03 30  		.byte $3F, $11, $03, $30, $27, $19, $00 ; luigi
009B18  2  27 19 00     
009B1B  2  3F 11 03 37  		.byte $3F, $11, $03, $37, $27, $16, $00 ; fiery
009B1F  2  27 16 00     
009B22  2               
009B22  2               mario_colors_peach:
009B22  2  3F 11 03 16  		.byte $3F, $11, $03, $16, $27, $30, $00 ; peach
009B26  2  27 30 00     
009B29  2  3F 11 03 30  		.byte $3F, $11, $03, $30, $27, $19, $00 ; not-used (but offset is ;) hack fuck.
009B2D  2  27 19 00     
009B30  2  3F 11 03 16  		.byte $3F, $11, $03, $16, $27, $37, $00 ; fiery
009B34  2  27 37 00     
009B37  2               
009B37  2               mario_gfx:
009B37  2  C0 32 00 A0  		.byte $c0, $32, $00, $A0
009B3B  2  C0 33 00 A8  		.byte $c0, $33, $00, $A8
009B3F  2  C8 4F 00 A0  		.byte $c8, $4f, $00, $A0
009B43  2  C8 4F 40 A8  		.byte $c8, $4f, $40, $A8
009B47  2               
009B47  2               DrawTitleMario:
009B47  2  A2 0F        		ldx #4*4-1
009B49  2  A0 0F        		ldy #4*4-1
009B4B  2               @copy_next:
009B4B  2  BD 37 9B     		lda mario_gfx, x
009B4E  2  99 04 02     		sta Sprite_Data+4, y
009B51  2  88           		dey
009B52  2  CA           		dex
009B53  2  10 F6        		bpl @copy_next
009B55  2               SetMarioPalette:
009B55  2  AC 00 03     		ldy VRAM_Buffer1_Offset
009B58  2  AE 53 07     		ldx CurrentPlayer
009B5B  2  F0 02        		beq @mario_pal
009B5D  2  A2 07        		ldx #$07
009B5F  2               @mario_pal:
009B5F  2  AD 56 07     		lda PlayerStatus
009B62  2  C9 02        		cmp #$02
009B64  2  D0 02        		bne @draw_pal
009B66  2  A2 0E        		ldx #$0E
009B68  2               @draw_pal:
009B68  2  AD 94 61     		lda WRAM_IsContraMode
009B6B  2  F0 06        		beq @normal
009B6D  2  BD 22 9B     		lda mario_colors_peach, x
009B70  2  4C 76 9B     		jmp @write_it
009B73  2               @normal:
009B73  2  BD 0D 9B     		lda mario_colors, x
009B76  2               @write_it:
009B76  2  99 01 03     		sta VRAM_Buffer1, y
009B79  2  F0 04        		beq @copy_done
009B7B  2  E8           		inx
009B7C  2  C8           		iny
009B7D  2  D0 E9        		bne @draw_pal
009B7F  2               @copy_done:
009B7F  2  8C 00 03     		sty VRAM_Buffer1_Offset
009B82  2  60           		rts
009B83  2               
009B83  2               DrawOneSpriteRow:
009B83  2  85 01        		sta $01
009B85  2               DrawSpriteObject:
009B85  2  A5 03        		lda $03                    ;get saved flip control bits
009B87  2  4A           		lsr
009B88  2  4A           		lsr                        ;move d1 into carry
009B89  2  A5 00        		lda $00
009B8B  2  90 0C        		bcc NoHFlip                ;if d1 not set, branch
009B8D  2  99 05 02     		sta Sprite_Tilenumber+4,y  ;store first tile into second sprite
009B90  2  A5 01        		lda $01                    ;and second into first sprite
009B92  2  99 01 02     		sta Sprite_Tilenumber,y
009B95  2  A9 40        		lda #$40                   ;activate horizontal flip OAM attribute
009B97  2  D0 0A        		bne SetHFAt                ;and unconditionally branch
009B99  2               NoHFlip:
009B99  2  99 01 02     		sta Sprite_Tilenumber,y    ;store first tile into first sprite
009B9C  2  A5 01        		lda $01                    ;and second into second sprite
009B9E  2  99 05 02     		sta Sprite_Tilenumber+4,y
009BA1  2  A9 00        		lda #$00                   ;clear bit for horizontal flip
009BA3  2               SetHFAt:
009BA3  2  05 04        		ora $04                    ;add other OAM attributes if necessary
009BA5  2  99 02 02     		sta Sprite_Attributes,y    ;store sprite attributes
009BA8  2  99 06 02     		sta Sprite_Attributes+4,y
009BAB  2  A5 02        		lda $02                    ;now the y coordinates
009BAD  2  99 00 02     		sta Sprite_Y_Position,y    ;note because they are
009BB0  2  99 04 02     		sta Sprite_Y_Position+4,y  ;side by side, they are the same
009BB3  2  A5 05        		lda $05
009BB5  2  99 03 02     		sta Sprite_X_Position,y    ;store x coordinate, then
009BB8  2  18           		clc                        ;add 8 pixels and store another to
009BB9  2  69 08        		adc #$08                   ;put them side by side
009BBB  2  99 07 02     		sta Sprite_X_Position+4,y
009BBE  2  A5 02        		lda $02                    ;add eight pixels to the next y
009BC0  2  18           		clc                        ;coordinate
009BC1  2  69 08        		adc #$08
009BC3  2  85 02        		sta $02
009BC5  2  98           		tya                        ;add eight to the offset in Y to
009BC6  2  18           		clc                        ;move to the next two sprites
009BC7  2  69 08        		adc #$08
009BC9  2  A8           		tay
009BCA  2  E8           		inx                        ;increment offset to return it to the
009BCB  2  E8           		inx                        ;routine that called this subroutine
009BCC  2  60           		rts
009BCD  2               
009BCD  2               RenderPlayerSub:
009BCD  2  85 07        		sta $07                      ;store number of rows of sprites to draw
009BCF  2  AD AD 03     		lda Player_Rel_XPos
009BD2  2  8D 55 07     		sta Player_Pos_ForScroll     ;store player's relative horizontal position
009BD5  2  85 05        		sta $05                      ;store it here also
009BD7  2  AD B8 03     		lda Player_Rel_YPos
009BDA  2  85 02        		sta $02                      ;store player's vertical position
009BDC  2  A5 33        		lda PlayerFacingDir
009BDE  2  85 03        		sta $03                      ;store player's facing direction
009BE0  2  AD C4 03     		lda Player_SprAttrib
009BE3  2  85 04        		sta $04                      ;store player's sprite attributes
009BE5  2  AE D5 06     		ldx PlayerGfxOffset          ;load graphics table offset
009BE8  2  AC E4 06     		ldy Player_SprDataOffset     ;get player's sprite data offset
009BEB  2               DrawPlayerLoop:
009BEB  2  BD A8 9C     		lda PlayerGraphicsTable,x    ;load player's left side
009BEE  2  85 00        		sta $00
009BF0  2  BD A9 9C     		lda PlayerGraphicsTable+1,x  ;now load right side
009BF3  2  20 83 9B     		jsr DrawOneSpriteRow
009BF6  2  C6 07        		dec $07                      ;decrement rows of sprites to draw
009BF8  2  D0 F1        		bne DrawPlayerLoop           ;do this until all rows are drawn
009BFA  2  60           		rts
009BFB  2               
009BFB  2               ChkForPlayerAttrib:
009BFB  2  AC E4 06     		ldy Player_SprDataOffset    ;get sprite data offset
009BFE  2  A5 0E        		lda GameEngineSubroutine
009C00  2  C9 0B        		cmp #$0b                    ;if executing specific game engine routine,
009C02  2  F0 13        		beq KilledAtt               ;branch to change third and fourth row OAM attributes
009C04  2  AD D5 06     		lda PlayerGfxOffset         ;get graphics table offset
009C07  2  C9 50        		cmp #$50
009C09  2  F0 1E        		beq C_S_IGAtt               ;if crouch offset, either standing offset,
009C0B  2  C9 B8        		cmp #$b8                    ;or intermediate growing offset,
009C0D  2  F0 1A        		beq C_S_IGAtt               ;go ahead and execute code to change
009C0F  2  C9 C0        		cmp #$c0                    ;fourth row OAM attributes only
009C11  2  F0 16        		beq C_S_IGAtt
009C13  2  C9 C8        		cmp #$c8
009C15  2  D0 24        		bne ExPlyrAt                ;if none of these, branch to leave
009C17  2               KilledAtt:
009C17  2  B9 12 02     		lda Sprite_Attributes+16,y
009C1A  2  29 3F        		and #%00111111              ;mask out horizontal and vertical flip bits
009C1C  2  99 12 02     		sta Sprite_Attributes+16,y  ;for third row sprites and save
009C1F  2  B9 16 02     		lda Sprite_Attributes+20,y
009C22  2  29 3F        		and #%00111111
009C24  2  09 40        		ora #%01000000              ;set horizontal flip bit for second
009C26  2  99 16 02     		sta Sprite_Attributes+20,y  ;sprite in the third row
009C29  2               C_S_IGAtt:
009C29  2  B9 1A 02     		lda Sprite_Attributes+24,y
009C2C  2  29 3F        		and #%00111111              ;mask out horizontal and vertical flip bits
009C2E  2  99 1A 02     		sta Sprite_Attributes+24,y  ;for fourth row sprites and save
009C31  2  B9 1E 02     		lda Sprite_Attributes+28,y
009C34  2  29 3F        		and #%00111111
009C36  2  09 40        		ora #%01000000              ;set horizontal flip bit for second
009C38  2  99 1E 02     		sta Sprite_Attributes+28,y  ;sprite in the fourth row
009C3B  2               ExPlyrAt:
009C3B  2  60           		rts                         ;leave
009C3C  2               
009C3C  2               
009C3C  2               PlayerGfxProcessing:
009C3C  2  8D D5 06     		sta PlayerGfxOffset           ;store offset to graphics table here
009C3F  2  A9 04        		lda #$04
009C41  2  20 CD 9B     		jsr RenderPlayerSub           ;draw player based on offset loaded
009C44  2  20 FB 9B     		jsr ChkForPlayerAttrib        ;set horizontal flip bits as necessary
009C47  2  AD 11 07     		lda FireballThrowingTimer
009C4A  2  F0 25        		beq PlayerOffscreenChk        ;if fireball throw timer not set, skip to the end
009C4C  2  A0 00        		ldy #$00                      ;set value to initialize by default
009C4E  2  AD 81 07     		lda PlayerAnimTimer           ;get animation frame timer
009C51  2  CD 11 07     		cmp FireballThrowingTimer     ;compare to fireball throw timer
009C54  2  8C 11 07     		sty FireballThrowingTimer     ;initialize fireball throw timer
009C57  2  B0 18        		bcs PlayerOffscreenChk        ;if animation frame timer => fireball throw timer skip to end
009C59  2  8D 11 07     		sta FireballThrowingTimer     ;otherwise store animation timer into fireball throw timer
009C5C  2  A0 07        		ldy #$07                      ;load offset for throwing
009C5E  2  B9 98 9C     		lda PlayerGfxTblOffsets,y     ;get offset to graphics table
009C61  2  8D D5 06     		sta PlayerGfxOffset           ;store it for use later
009C64  2  A0 04        		ldy #$04                      ;set to update four sprite rows by default
009C66  2  A5 57        		lda Player_X_Speed
009C68  2  05 0C        		ora Left_Right_Buttons        ;check for horizontal speed or left/right button press
009C6A  2  F0 01        		beq SUpdR                     ;if no speed or button press, branch using set value in Y
009C6C  2  88           		dey                           ;otherwise set to update only three sprite rows
009C6D  2               SUpdR:
009C6D  2  98           		tya                           ;save in A for use
009C6E  2  20 CD 9B     		jsr RenderPlayerSub           ;in sub, draw player object again
009C71  2               PlayerOffscreenChk:
009C71  2  AD D0 03     		lda Player_OffscreenBits      ;get player's offscreen bits
009C74  2  4A           		lsr
009C75  2  4A           		lsr                           ;move vertical bits to low nybble
009C76  2  4A           		lsr
009C77  2  4A           		lsr
009C78  2  85 00        		sta $00                       ;store here
009C7A  2  A2 03        		ldx #$03                      ;check all four rows of player sprites
009C7C  2  AD E4 06     		lda Player_SprDataOffset      ;get player's sprite data offset
009C7F  2  18           		clc
009C80  2  69 18        		adc #$18                      ;add 24 bytes to start at bottom row
009C82  2  A8           		tay                           ;set as offset here
009C83  2               PROfsLoop:
009C83  2  A9 F8        		lda #$f8                      ;load offscreen Y coordinate just in case
009C85  2  46 00        		lsr $00                       ;shift bit into carry
009C87  2  90 06        		bcc NPROffscr                 ;if bit not set, skip, do not move sprites
009C89  2  99 04 02     		sta Sprite_Data+4,y 	      ;and into first row sprites
009C8C  2  99 00 02     		sta Sprite_Data,y
009C8F  2               NPROffscr:
009C8F  2  98           		tya
009C90  2  38           		sec                           ;subtract eight bytes to do
009C91  2  E9 08        		sbc #$08                      ;next row up
009C93  2  A8           		tay
009C94  2  CA           		dex                           ;decrement row counter
009C95  2  10 EC        		bpl PROfsLoop                 ;do this until all sprite rows are checked
009C97  2  60           		rts                           ;then we are done!
009C98  2               
009C98  2               PlayerGfxTblOffsets:
009C98  2  20 28 C8 18  		.byte $20, $28, $c8, $18, $00, $40, $50, $58
009C9C  2  00 40 50 58  
009CA0  2  80 88 B8 78  		.byte $80, $88, $b8, $78, $60, $a0, $b0, $b8
009CA4  2  60 A0 B0 B8  
009CA8  2               
009CA8  2               PlayerGraphicsTable:
009CA8  2               		;big player table
009CA8  2  00 01 02 03  		.byte $00, $01, $02, $03, $04, $05, $06, $07 ;walking frame 1
009CAC  2  04 05 06 07  
009CB0  2  08 09 0A 0B  		.byte $08, $09, $0a, $0b, $0c, $0d, $0e, $0f ;        frame 2
009CB4  2  0C 0D 0E 0F  
009CB8  2  10 11 12 13  		.byte $10, $11, $12, $13, $14, $15, $16, $17 ;        frame 3
009CBC  2  14 15 16 17  
009CC0  2  18 19 1A 1B  		.byte $18, $19, $1a, $1b, $1c, $1d, $1e, $1f ;skidding
009CC4  2  1C 1D 1E 1F  
009CC8  2  20 21 22 23  		.byte $20, $21, $22, $23, $24, $25, $26, $27 ;jumping
009CCC  2  24 25 26 27  
009CD0  2  08 09 28 29  		.byte $08, $09, $28, $29, $2a, $2b, $2c, $2d ;swimming frame 1
009CD4  2  2A 2B 2C 2D  
009CD8  2  08 09 0A 0B  		.byte $08, $09, $0a, $0b, $0c, $30, $2c, $2d ;         frame 2
009CDC  2  0C 30 2C 2D  
009CE0  2  08 09 0A 0B  		.byte $08, $09, $0a, $0b, $2e, $2f, $2c, $2d ;         frame 3
009CE4  2  2E 2F 2C 2D  
009CE8  2  08 09 28 29  		.byte $08, $09, $28, $29, $2a, $2b, $5c, $5d ;climbing frame 1
009CEC  2  2A 2B 5C 5D  
009CF0  2  08 09 0A 0B  		.byte $08, $09, $0a, $0b, $0c, $0d, $5e, $5f ;         frame 2
009CF4  2  0C 0D 5E 5F  
009CF8  2  FC FC 08 09  		.byte $fc, $fc, $08, $09, $58, $59, $5a, $5a ;crouching
009CFC  2  58 59 5A 5A  
009D00  2  08 09 28 29  		.byte $08, $09, $28, $29, $2a, $2b, $0e, $0f ;fireball throwing
009D04  2  2A 2B 0E 0F  
009D08  2               
009D08  2               		;small player table
009D08  2  FC FC FC FC  		.byte $fc, $fc, $fc, $fc, $32, $33, $34, $35 ;walking frame 1
009D0C  2  32 33 34 35  
009D10  2  FC FC FC FC  		.byte $fc, $fc, $fc, $fc, $36, $37, $38, $39 ;        frame 2
009D14  2  36 37 38 39  
009D18  2  FC FC FC FC  		.byte $fc, $fc, $fc, $fc, $3a, $37, $3b, $3c ;        frame 3
009D1C  2  3A 37 3B 3C  
009D20  2  FC FC FC FC  		.byte $fc, $fc, $fc, $fc, $3d, $3e, $3f, $40 ;skidding
009D24  2  3D 3E 3F 40  
009D28  2  FC FC FC FC  		.byte $fc, $fc, $fc, $fc, $32, $41, $42, $43 ;jumping
009D2C  2  32 41 42 43  
009D30  2  FC FC FC FC  		.byte $fc, $fc, $fc, $fc, $32, $33, $44, $45 ;swimming frame 1
009D34  2  32 33 44 45  
009D38  2  FC FC FC FC  		.byte $fc, $fc, $fc, $fc, $32, $33, $44, $47 ;         frame 2
009D3C  2  32 33 44 47  
009D40  2  FC FC FC FC  		.byte $fc, $fc, $fc, $fc, $32, $33, $48, $49 ;         frame 3
009D44  2  32 33 48 49  
009D48  2  FC FC FC FC  		.byte $fc, $fc, $fc, $fc, $32, $33, $90, $91 ;climbing frame 1
009D4C  2  32 33 90 91  
009D50  2  FC FC FC FC  		.byte $fc, $fc, $fc, $fc, $3a, $37, $92, $93 ;         frame 2
009D54  2  3A 37 92 93  
009D58  2  FC FC FC FC  		.byte $fc, $fc, $fc, $fc, $9e, $9e, $9f, $9f ;killed
009D5C  2  9E 9E 9F 9F  
009D60  2               
009D60  2               		;used by both player sizes
009D60  2  FC FC FC FC  		.byte $fc, $fc, $fc, $fc, $3a, $37, $4f, $4f ;small player standing
009D64  2  3A 37 4F 4F  
009D68  2  FC FC 00 01  		.byte $fc, $fc, $00, $01, $4c, $4d, $4e, $4e ;intermediate grow frame
009D6C  2  4C 4D 4E 4E  
009D70  2  00 01 4C 4D  		.byte $00, $01, $4c, $4d, $4a, $4a, $4b, $4b ;big player standing
009D74  2  4A 4A 4B 4B  
009D78  2               
009D78  2               SwimKickTileNum:
009D78  2  31 46        		.byte $31, $46
009D7A  2               
009D7A  2               RedrawMario:
009D7A  2  A9 B8        		lda #$B8
009D7C  2  AC 54 07     		ldy PlayerSize
009D7F  2  D0 02        		bne @small_mario
009D81  2  A9 C8        		lda #$C8
009D83  2               @small_mario:
009D83  2  20 3C 9C     		jsr PlayerGfxProcessing
009D86  2  4C 55 9B     		jmp SetMarioPalette
009D89  2               
009D89  2               LoadPhysicsData:
009D89  2  20 BF 9D     		jsr LL_UpdatePlayerChange
009D8C  2  4C 08 FF     		jmp ReturnBank
009D8F  2               
009D8F  2               LoadMarioPhysics:
009D8F  2  20 C6 9D     		jsr PlayerIsMarioPatch
009D92  2  4C 08 FF     		jmp ReturnBank
009D95  2               
009D95  2               MarioOrLuigiPhysics:
009D95  2               		;
009D95  2               		; Mario Physics
009D95  2               		;
009D95  2  20 20 1E 28  		.byte $20, $20, $1E, $28
009D99  2  28 0D 04 70  		.byte $28, $0D, $04, $70
009D9D  2  70 60 90 90  		.byte $70, $60, $90, $90
009DA1  2  0A 09 E4 98  		.byte $0A, $09, $E4, $98
009DA5  2  D0           		.byte $D0
009DA6  2               		;
009DA6  2               		; Luigi Physics
009DA6  2               		;
009DA6  2  18 18 18 22  		.byte $18, $18, $18, $22
009DAA  2  22 0D 04 42  		.byte $22, $0D, $04, $42
009DAE  2  42 3E 5D 5D  		.byte $42, $3E, $5D, $5D
009DB2  2  0A 09 B4 68  		.byte $0A, $09, $B4, $68
009DB6  2  A0           		.byte $A0
009DB7  2               
009DB7  2               MarioOrLuigiColors:
009DB7  2  22 16 27 18  		.byte $22, $16, $27, $18 ; Mario
009DBB  2  22 30 27 19  		.byte $22, $30, $27, $19 ; Luigi
009DBF  2               
009DBF  2               LL_UpdatePlayerChange:
009DBF  2               		; ldx #$60
009DBF  2  A0 21        		ldy #$21
009DC1  2  AD 53 07     		lda IsPlayingLuigi
009DC4  2  D0 02        		bne PlayerIsLuigiPath
009DC6  2               PlayerIsMarioPatch:
009DC6  2               		; ldx #$E
009DC6  2  A0 10        		ldy #$10
009DC8  2               PlayerIsLuigiPath:
009DC8  2               		; stx VOLDST_PatchMovementFriction
009DC8  2  A2 10        		ldx #$10
009DCA  2               @copy_more:
009DCA  2  B9 95 9D     		lda MarioOrLuigiPhysics,y
009DCD  2  9D 1F 64     		sta WRAM_JumpMForceData,x
009DD0  2  88           		dey
009DD1  2  CA           		dex
009DD2  2  10 F6        		bpl @copy_more
009DD4  2  A0 07        		ldy #7
009DD6  2  AD 53 07     		lda IsPlayingLuigi
009DD9  2  D0 02        		bne @is_luigi
009DDB  2  A0 03        		ldy #3
009DDD  2               @is_luigi:
009DDD  2  A2 03        		ldx #3
009DDF  2               @copy_pal:
009DDF  2  B9 B7 9D     		lda MarioOrLuigiColors, y
009DE2  2  9D 17 64     		sta WRAM_PlayerColors, x
009DE5  2  88           		dey
009DE6  2  CA           		dex
009DE7  2  10 F6        		bpl @copy_pal
009DE9  2  60           		rts
009DEA  2               
009DEA  2               DigitsMathRoutine3:
009DEA  2  A2 03        		ldx #3
009DEC  2               DigitsMathRoutineN:
009DEC  2  86 00        		stx $00
009DEE  2  A2 05        		ldx #$05
009DF0  2               AddModLoop3:
009DF0  2  BD 34 01     		lda DigitModifier,x       ;load digit amount to increment
009DF3  2  18           		clc
009DF4  2  79 D7 07     		adc DisplayDigits,y       ;add to current digit
009DF7  2  30 18        		bmi BorrowOne3             ;if result is a negative number, branch to subtract
009DF9  2  C9 0A        		cmp #10
009DFB  2  B0 1B        		bcs CarryOne3              ;if digit greater than $09, branch to add
009DFD  2               StoreNewD3:
009DFD  2  99 D7 07     		sta DisplayDigits,y       ;store as new score or game timer digit
009E00  2  88           		dey                       ;move onto next digits in score or game timer
009E01  2  CA           		dex                       ;and digit amounts to increment
009E02  2  E4 00        		cpx $00
009E04  2  10 EA        		bpl AddModLoop3            ;loop back if we're not done yet
009E06  2  A9 00        		lda #$00                  ;store zero here
009E08  2  A2 06        		ldx #$06                  ;start with the last digit
009E0A  2               EraseMLoop3:
009E0A  2  9D 33 01     		sta DigitModifier-1,x     ;initialize the digit amounts to increment
009E0D  2  CA           		dex
009E0E  2  10 FA        		bpl EraseMLoop3            ;do this until they're all reset, then leave
009E10  2  60           		rts
009E11  2               BorrowOne3:
009E11  2  DE 33 01     		dec DigitModifier-1,x     ;decrement the previous digit, then put $09 in
009E14  2  A9 09        		lda #$09                  ;the game timer digit we're currently on to "borrow
009E16  2  D0 E5        		bne StoreNewD3             ;the one", then do an unconditional branch back
009E18  2               CarryOne3:
009E18  2  38           		sec                       ;subtract ten from our digit to make it a
009E19  2  E9 0A        		sbc #10                   ;proper BCD number, then increment the digit
009E1B  2  FE 33 01     		inc DigitModifier-1,x     ;preceding current digit to "carry the one" properly
009E1E  2  4C FD 9D     		jmp StoreNewD3             ;go back to just after we branched here
009E21  2               
009E21  2               
009E21  2               UpdateGameTimer:
009E21  2  A0 23        		ldy #$23
009E23  2  A9 FF        		lda #$ff
009E25  2  8D 39 01     		sta DigitModifier+5
009E28  2  20 EA 9D     		jsr DigitsMathRoutine3
009E2B  2  AE 00 03     		ldx VRAM_Buffer1_Offset
009E2E  2  A9 20        		lda #$20
009E30  2  9D 01 03     		sta VRAM_Buffer1,x
009E33  2  A9 7A        		lda #$7A
009E35  2  9D 02 03     		sta VRAM_Buffer1+1,x
009E38  2  A9 03        		lda #$03
009E3A  2  9D 03 03     		sta VRAM_Buffer1+2,x
009E3D  2  AD F8 07     		lda GameTimerDisplay
009E40  2  9D 04 03     		sta VRAM_Buffer1+3,x
009E43  2  AD F9 07     		lda GameTimerDisplay+1
009E46  2  9D 05 03     		sta VRAM_Buffer1+4,x
009E49  2  AD FA 07     		lda GameTimerDisplay+2
009E4C  2  9D 06 03     		sta VRAM_Buffer1+5,x
009E4F  2  A9 00        		lda #0
009E51  2  9D 07 03     		sta VRAM_Buffer1+6,x
009E54  2  AD 00 03     		lda VRAM_Buffer1_Offset
009E57  2  18           		clc
009E58  2  69 06        		adc #6
009E5A  2  8D 00 03     		sta VRAM_Buffer1_Offset
009E5D  2  A6 08        		ldx ObjectOffset
009E5F  2  4C 08 FF     		jmp ReturnBank
009E62  2               
009E62  2               
009E62  2               
009E62  1               	.include "pausemenu.asm"
009E62  2               .define UservarIndex0	WRAM_Temp+4
009E62  2               .define UservarIndex1	WRAM_Temp+6
009E62  2               
009E62  2               CustomRow = WRAM_Temp+$10
009E62  2               
009E62  2               .define MENU_ROW_LENGTH 16
009E62  2               .define MENU_ROW_COUNT 10
009E62  2               
009E62  2               pm_empty_row:
009E62  2  24 24 24 24  	.byte "                "
009E66  2  24 24 24 24  
009E6A  2  24 24 24 24  
009E72  2               pm_no_pup_row:
009E72  2  24 24 19 28  	.byte $24, " P-UP  NONE ", $24, $24, $24
009E76  2  1E 19 24 24  
009E7A  2  17 18 17 0E  
009E82  2               pm_super_pup_row:
009E82  2  24 24 19 28  	.byte $24, " P-UP  SUPER", $24, $24, $24
009E86  2  1E 19 24 24  
009E8A  2  1C 1E 19 0E  
009E92  2               pm_fire_pup_row:
009E92  2  24 24 19 28  	.byte $24, " P-UP  FIRE ", $24, $24, $24
009E96  2  1E 19 24 24  
009E9A  2  0F 12 1B 0E  
009EA2  2               pm_small_row:
009EA2  2  24 24 1C 12  	.byte $24, " SIZE  SMALL", $24, $24, $24
009EA6  2  23 0E 24 24  
009EAA  2  1C 16 0A 15  
009EB2  2               pm_big_row:
009EB2  2  24 24 1C 12  	.byte $24, " SIZE  BIG  ", $24, $24, $24
009EB6  2  23 0E 24 24  
009EBA  2  0B 12 10 24  
009EC2  2               
009EC2  2               pm_hero_mario_row:
009EC2  2  24 24 11 0E  	.byte $24, " HERO  MARIO", $24, $24, $24
009EC6  2  1B 18 24 24  
009ECA  2  16 0A 1B 12  
009ED2  2               pm_hero_luigi_row:
009ED2  2  24 24 11 0E  	.byte $24, " HERO  LUIGI", $24, $24, $24
009ED6  2  1B 18 24 24  
009EDA  2  15 1E 12 10  
009EE2  2               pm_hero_peach_row:
009EE2  2  24 24 11 0E  	.byte $24, " HERO  PEACH", $24, $24, $24
009EE6  2  1B 18 24 24  
009EEA  2  19 0E 0A 0C  
009EF2  2               
009EF2  2               pm_show_rule_row:
009EF2  2  24 24 1C 11  	.byte $24, " SHOW  RULE ", $24, $24, $24
009EF6  2  18 20 24 24  
009EFA  2  1B 1E 15 0E  
009F02  2               pm_show_sock_row:
009F02  2  24 24 1C 11  	.byte $24, " SHOW  SOCK ", $24, $24, $24
009F06  2  18 20 24 24  
009F0A  2  1C 18 0C 14  
009F12  2               
009F12  2               pm_info_on_row:
009F12  2  24 24 12 17  	.byte $24, " INFO  ON   ", $24, $24, $24
009F16  2  0F 18 24 24  
009F1A  2  18 17 24 24  
009F22  2               pm_info_off_row:
009F22  2  24 24 12 17  	.byte $24, " INFO  OFF  ", $24, $24, $24
009F26  2  0F 18 24 24  
009F2A  2  18 0F 0F 24  
009F32  2               
009F32  2               pm_input_on_row:
009F32  2  24 24 12 17  	.byte $24, " INPUT ON   ", $24, $24, $24
009F36  2  19 1E 1D 24  
009F3A  2  18 17 24 24  
009F42  2               pm_input_off_row:
009F42  2  24 24 12 17  	.byte $24, " INPUT OFF  ", $24, $24, $24
009F46  2  19 1E 1D 24  
009F4A  2  18 0F 0F 24  
009F52  2               
009F52  2               pm_star_row:
009F52  2  24 24 10 0E  	.byte $24, " GET STAR   ", $24, $24, $24
009F56  2  1D 24 1C 1D  
009F5A  2  0A 1B 24 24  
009F62  2               
009F62  2               pm_slowmo_off_row:
009F62  2  24 24 1C 15  	.byte $24, " SLOMO NONE ", $24, $24, $24
009F66  2  18 16 18 24  
009F6A  2  17 18 17 0E  
009F72  2               
009F72  2               pm_slowmo_min_row:
009F72  2  24 24 1C 15  	.byte $24, " SLOMO LOW  ", $24, $24, $24
009F76  2  18 16 18 24  
009F7A  2  15 18 20 24  
009F82  2               
009F82  2               pm_slowmo_mid_row:
009F82  2  24 24 1C 15  	.byte $24, " SLOMO MID  ", $24, $24, $24
009F86  2  18 16 18 24  
009F8A  2  16 12 0D 24  
009F92  2               
009F92  2               pm_slowmo_max_row:
009F92  2  24 24 1C 15  	.byte $24, " SLOMO MAX  ", $24, $24, $24
009F96  2  18 16 18 24  
009F9A  2  16 0A 21 24  
009FA2  2               
009FA2  2               pm_slowmo_adv_row:
009FA2  2  24 24 1C 15  	.byte $24, " SLOMO ADV  ", $24, $24, $24
009FA6  2  18 16 18 24  
009FAA  2  0A 0D 1F 24  
009FB2  2               
009FB2  2               pm_restart_row:
009FB2  2  24 24 1B 0E  	.byte $24, " RESTART LEV", $24, $24, $24
009FB6  2  1C 1D 0A 1B  
009FBA  2  1D 24 15 0E  
009FC2  2               
009FC2  2               pm_save_row:
009FC2  2  24 24 1C 0A  	.byte $24, " SAVE STATE", $24, $24, $24
009FC6  2  1F 0E 24 1C  
009FCA  2  1D 0A 1D 0E  
009FD1  2               pm_load_row:
009FD1  2  24 24 15 18  	.byte $24, " LOAD STATE", $24, $24, $24
009FD5  2  0A 0D 24 1C  
009FD9  2  1D 0A 1D 0E  
009FE0  2               
009FE0  2               pm_title_row:
009FE0  2  24 24 0E 21  	.byte $24, " EXIT TITLE ", $24, $24, $24
009FE4  2  12 1D 24 1D  
009FE8  2  12 1D 15 0E  
009FF0  2               pm_intro_row:
009FF0  2  24 24 0E 21  	.byte $24, " EXIT INTRO ", $24, $24, $24
009FF4  2  12 1D 24 12  
009FF8  2  17 1D 1B 18  
00A000  2               
00A000  2               
00A000  2               .macro row_render_data ppu, data
00A000  2               		lda #<ppu
00A000  2               		sta $00
00A000  2               		lda #>ppu
00A000  2               		sta $01
00A000  2               		lda #<data
00A000  2               		sta $02
00A000  2               		lda #>data
00A000  2               		sta $03
00A000  2               .endmacro
00A000  2               
00A000  2               pm_attr_data:
00A000  2  AA AA AA AA  		.byte $AA, $AA, $AA, $AA
00A004  2               
00A004  2               _draw_pm_row_0:
00A004  2  A9 C8 85 00  		row_render_data $23C8, pm_attr_data
00A008  2  A9 23 85 01  
00A00C  2  A9 00 85 02  
00A014  2  E6 07        		inc $07
00A016  2  20 8E A1     		jsr draw_prepared_row
00A019  2  A9 80 85 00  		row_render_data $2080, pm_empty_row
00A01D  2  A9 20 85 01  
00A021  2  A9 62 85 02  
00A029  2  60           		rts
00A02A  2               
00A02A  2               _draw_pm_row_1:
00A02A  2  AD 56 07     		lda PlayerStatus
00A02D  2  D0 11        		bne @check_is_fire
00A02F  2  A9 A0 85 00  		row_render_data $20A0, pm_no_pup_row
00A033  2  A9 20 85 01  
00A037  2  A9 72 85 02  
00A03F  2  60           		rts
00A040  2               	@check_is_fire:
00A040  2  C9 02        		cmp #2
00A042  2  F0 11        		beq @is_fire
00A044  2  A9 A0 85 00  		row_render_data $20A0, pm_super_pup_row
00A048  2  A9 20 85 01  
00A04C  2  A9 82 85 02  
00A054  2  60           		rts
00A055  2               	@is_fire:
00A055  2  A9 A0 85 00  		row_render_data $20A0, pm_fire_pup_row
00A059  2  A9 20 85 01  
00A05D  2  A9 92 85 02  
00A065  2  60           		rts
00A066  2               
00A066  2               _draw_pm_row_2:
00A066  2  A9 C0 85 00  		row_render_data $20C0, pm_big_row
00A06A  2  A9 20 85 01  
00A06E  2  A9 B2 85 02  
00A076  2  AD 54 07     		lda PlayerSize
00A079  2  F0 10        		beq @is_big
00A07B  2  A9 C0 85 00  		row_render_data $20C0, pm_small_row
00A07F  2  A9 20 85 01  
00A083  2  A9 A2 85 02  
00A08B  2               	@is_big:
00A08B  2  60           		rts
00A08C  2               
00A08C  2               _draw_pm_row_3:
00A08C  2  AD 94 61     		lda WRAM_IsContraMode
00A08F  2  F0 11        		beq @checkplayer
00A091  2  A9 E0 85 00  		row_render_data $20E0, pm_hero_peach_row
00A095  2  A9 20 85 01  
00A099  2  A9 E2 85 02  
00A0A1  2  60           		rts
00A0A2  2               @checkplayer:
00A0A2  2  A9 E0 85 00  		row_render_data $20E0, pm_hero_mario_row
00A0A6  2  A9 20 85 01  
00A0AA  2  A9 C2 85 02  
00A0B2  2  AD 53 07     		lda CurrentPlayer
00A0B5  2  F0 10        		beq @is_mario
00A0B7  2  A9 E0 85 00  		row_render_data $20E0, pm_hero_luigi_row
00A0BB  2  A9 20 85 01  
00A0BF  2  A9 D2 85 02  
00A0C7  2               	@is_mario:
00A0C7  2  60           		rts
00A0C8  2               
00A0C8  2               _draw_pm_row_10:
00A0C8  2  A9 D0 85 00  		row_render_data $23D0, pm_attr_data
00A0CC  2  A9 23 85 01  
00A0D0  2  A9 00 85 02  
00A0D8  2  E6 07        		inc $07
00A0DA  2  20 8E A1     		jsr draw_prepared_row
00A0DD  2  A9 00 85 00  		row_render_data $2100, pm_star_row
00A0E1  2  A9 21 85 01  
00A0E5  2  A9 52 85 02  
00A0ED  2  60           		rts
00A0EE  2               
00A0EE  2               _draw_pm_row_11:
00A0EE  2  A9 20 85 00  		row_render_data $2120, pm_restart_row
00A0F2  2  A9 21 85 01  
00A0F6  2  A9 B2 85 02  
00A0FE  2  60           		rts
00A0FF  2               
00A0FF  2               _draw_pm_row_12:
00A0FF  2  A9 40 85 00  		row_render_data $2140, pm_save_row
00A103  2  A9 21 85 01  
00A107  2  A9 C2 85 02  
00A10F  2  60           		rts
00A110  2               
00A110  2               _draw_pm_row_13:
00A110  2  A9 60 85 00  		row_render_data $2160, pm_load_row
00A114  2  A9 21 85 01  
00A118  2  A9 D1 85 02  
00A120  2  60           		rts
00A121  2               
00A121  2               _draw_pm_row_14:
00A121  2  A9 D8 85 00  		row_render_data $23D8, pm_attr_data
00A125  2  A9 23 85 01  
00A129  2  A9 00 85 02  
00A131  2  E6 07        		inc $07
00A133  2  20 8E A1     		jsr draw_prepared_row
00A136  2  A9 80 85 00  		row_render_data $2180, pm_title_row
00A13A  2  A9 21 85 01  
00A13E  2  A9 E0 85 02  
00A146  2  60           		rts
00A147  2               
00A147  2               _draw_pm_row_15:
00A147  2  A9 A0 85 00  		row_render_data $21A0, pm_intro_row
00A14B  2  A9 21 85 01  
00A14F  2  A9 F0 85 02  
00A157  2  60           		rts
00A158  2               
00A158  2               _draw_pm_row_16:
00A158  2  A9 C0 85 00  		row_render_data $21C0, pm_empty_row
00A15C  2  A9 21 85 01  
00A160  2  A9 62 85 02  
00A168  2  60           		rts
00A169  2               
00A169  2               
00A169  2               pm_row_initializers:
00A169  2  04 A0        		.word _draw_pm_row_0
00A16B  2  2A A0        		.word _draw_pm_row_1
00A16D  2  66 A0        		.word _draw_pm_row_2
00A16F  2  8C A0        		.word _draw_pm_row_3
00A171  2  C8 A0        		.word _draw_pm_row_10
00A173  2  EE A0        		.word _draw_pm_row_11
00A175  2  FF A0        		.word _draw_pm_row_12
00A177  2  10 A1        		.word _draw_pm_row_13
00A179  2  21 A1        		.word _draw_pm_row_14
00A17B  2  47 A1        		.word _draw_pm_row_15
00A17D  2  58 A1        		.word _draw_pm_row_16
00A17F  2               
00A17F  2               prepare_draw_row:
00A17F  2  0A           		asl ; *=2
00A180  2  A8           		tay
00A181  2  B9 69 A1     		lda pm_row_initializers, y
00A184  2  85 00        		sta $00
00A186  2  B9 6A A1     		lda pm_row_initializers+1, y
00A189  2  85 01        		sta $01
00A18B  2  6C 00 00     		jmp ($0000)
00A18E  2               
00A18E  2               draw_prepared_row:
00A18E  2  A5 00        		lda $00
00A190  2  48           	pha
00A191  2  AD 78 07     		lda Mirror_PPU_CTRL_REG1
00A194  2  AE FF 07     		ldx BANK_SELECTED
00A197  2  E0 08        		cpx #BANK_ORG
00A199  2  F0 03        		beq @okok
00A19B  2  AD 7A 07             lda UseNtBase2400
00A19E  2               @okok:
00A19E  2  29 03        		and #3
00A1A0  2  F0 06        		beq @ntbase_selected
00A1A2  2  A5 01        		lda $01
00A1A4  2  49 04        		eor #$04
00A1A6  2  85 01        		sta $01
00A1A8  2               @ntbase_selected:
00A1A8  2  A5 01        		lda $01
00A1AA  2  48           	pha
00A1AB  2  AD 3F 07     		lda HorizontalScroll
00A1AE  2  4A           		lsr
00A1AF  2  4A           		lsr
00A1B0  2  4A           		lsr
00A1B1  2  A6 07        		ldx $07
00A1B3  2  F0 02        		beq @copy_names
00A1B5  2  4A           		lsr
00A1B6  2  4A           		lsr
00A1B7  2               @copy_names:
00A1B7  2  85 04        		sta $04
00A1B9  2  18           		clc
00A1BA  2  A9 20        		lda #$20
00A1BC  2  A6 07        		ldx $07
00A1BE  2  F0 02        		beq @not_attr
00A1C0  2  A9 08        		lda #$20/4
00A1C2  2               @not_attr:
00A1C2  2  38           		sec
00A1C3  2  E5 04        		sbc $04
00A1C5  2  F0 4B        		beq @all_on_next
00A1C7  2  A6 07        		ldx $07
00A1C9  2  F0 08        		beq @minmax_names
00A1CB  2  C9 04        		cmp #MENU_ROW_LENGTH/4
00A1CD  2  30 0A        		bmi @partial
00A1CF  2  A9 04        		lda #MENU_ROW_LENGTH/4
00A1D1  2  D0 06        		bne @partial
00A1D3  2               @minmax_names:
00A1D3  2  C9 10        		cmp #MENU_ROW_LENGTH
00A1D5  2  30 02        		bmi @partial
00A1D7  2  A9 10        		lda #MENU_ROW_LENGTH
00A1D9  2               @partial:
00A1D9  2  AC 00 03     		ldy VRAM_Buffer1_Offset
00A1DC  2  85 05        		sta $05
00A1DE  2  85 06        		sta $06
00A1E0  2  99 03 03     		sta VRAM_Buffer1+2, y ; Count
00A1E3  2  A5 01        		lda $01
00A1E5  2  99 01 03     		sta VRAM_Buffer1+0, y ; High dest
00A1E8  2  A5 04        		lda $04
00A1EA  2  18           		clc
00A1EB  2  65 00        		adc $00
00A1ED  2  99 02 03     		sta VRAM_Buffer1+1, y ; Low dest
00A1F0  2               		;
00A1F0  2               		; COPY
00A1F0  2               		;
00A1F0  2  A2 00        		ldx #0
00A1F2  2  C8           		iny
00A1F3  2  C8           		iny
00A1F4  2  C8           		iny
00A1F5  2               @copy_more_firstpass:
00A1F5  2  A1 02        		lda ($02, x)
00A1F7  2  99 01 03     		sta VRAM_Buffer1, y
00A1FA  2  E6 02        		inc $02
00A1FC  2  D0 02        		bne @no_high_inc
00A1FE  2  E6 03        		inc $03
00A200  2               @no_high_inc:
00A200  2  C8           		iny
00A201  2  C6 06        		dec $06
00A203  2  D0 F0        		bne @copy_more_firstpass
00A205  2  A9 10        		lda #MENU_ROW_LENGTH
00A207  2  A6 07        		ldx $07
00A209  2  F0 02        		beq @nametable_mode
00A20B  2  4A           		lsr
00A20C  2  4A           		lsr
00A20D  2               @nametable_mode:
00A20D  2  38           		sec
00A20E  2  E5 05        		sbc $05
00A210  2  85 06        		sta $06
00A212  2               @all_on_next:
00A212  2  68           	pla
00A213  2  49 04        		eor #$04
00A215  2  85 01        		sta $01
00A217  2  68           	pla
00A218  2  85 00        		sta $00
00A21A  2  A5 06        		lda $06
00A21C  2  F0 24        		beq @done
00A21E  2  A5 06        		lda $06 ; remaining to copy
00A220  2  99 03 03     		sta VRAM_Buffer1+2, y ; Count
00A223  2  A5 01        		lda $01
00A225  2  99 01 03     		sta VRAM_Buffer1+0, y ; High dest
00A228  2  A5 00        		lda $00
00A22A  2  99 02 03     		sta VRAM_Buffer1+1, y ; Low dest
00A22D  2  C8           		iny
00A22E  2  C8           		iny
00A22F  2  C8           		iny
00A230  2  A2 00        		ldx #0
00A232  2               @copy_more_secondpass:
00A232  2  A1 02        		lda ($02, x)
00A234  2  99 01 03     		sta VRAM_Buffer1, y
00A237  2  E6 02        		inc $02
00A239  2  D0 02        		bne @no_high_inc2
00A23B  2  E6 03        		inc $03
00A23D  2               @no_high_inc2:
00A23D  2  C8           		iny
00A23E  2  C6 06        		dec $06
00A240  2  D0 F0        		bne @copy_more_secondpass
00A242  2               @done:
00A242  2  A9 00        		lda #0
00A244  2  99 01 03     		sta VRAM_Buffer1, y
00A247  2  8C 00 03     		sty VRAM_Buffer1_Offset
00A24A  2  60           		rts
00A24B  2               
00A24B  2               playerstatus_to_savestate:
00A24B  2  AD 56 07     		lda PlayerStatus
00A24E  2  8D 1A 60     		sta WRAM_LevelPlayerStatus
00A251  2  AD 54 07     		lda PlayerSize
00A254  2  8D 1B 60     		sta WRAM_LevelPlayerSize
00A257  2  60           		rts
00A258  2               
00A258  2               pm_toggle_powerup:
00A258  2  AD 56 07     		lda PlayerStatus
00A25B  2  C9 02        		cmp #2
00A25D  2  D0 0C        		bne @solve_state
00A25F  2  A2 01        		ldx #1
00A261  2  8E 54 07     		stx PlayerSize
00A264  2  CA           		dex
00A265  2  8E 56 07     		stx PlayerStatus
00A268  2  4C 7A A2     		jmp @redraw_and_save
00A26B  2               @solve_state:
00A26B  2  A2 00        		ldx #0
00A26D  2  A0 01        		ldy #1
00A26F  2  C9 01        		cmp #1
00A271  2  D0 01        		bne @fire_or_big
00A273  2  C8           		iny
00A274  2               @fire_or_big:
00A274  2  8E 54 07     		stx PlayerSize
00A277  2  8C 56 07     		sty PlayerStatus
00A27A  2               @redraw_and_save:
00A27A  2  A9 02        		lda #2
00A27C  2  20 0D A3     		jsr draw_menu_row_from_a
00A27F  2  20 7A 9D     		jsr RedrawMario
00A282  2  4C 4B A2     		jmp playerstatus_to_savestate
00A285  2               
00A285  2               pm_toggle_size:
00A285  2  AD 54 07     		lda PlayerSize
00A288  2  49 01        		eor #1
00A28A  2  8D 54 07     		sta PlayerSize
00A28D  2  20 7A 9D     		jsr RedrawMario
00A290  2  4C 4B A2     		jmp playerstatus_to_savestate
00A293  2               
00A293  2               pm_toggle_hero:
00A293  2  AD 94 61     		lda WRAM_IsContraMode
00A296  2  F0 01        		beq @okchange
00A298  2  60           		rts
00A299  2               @okchange:
00A299  2  AD 53 07     		lda CurrentPlayer
00A29C  2  49 01        		eor #1
00A29E  2  8D 53 07     		sta CurrentPlayer
00A2A1  2  20 BF 9D     		jsr LL_UpdatePlayerChange
00A2A4  2  4C 7A 9D     		jmp RedrawMario
00A2A7  2               
00A2A7  2               
00A2A7  2               pm_slowmo:
00A2A7  2  AE 12 60     		ldx WRAM_SlowMotion
00A2AA  2  E8           		inx
00A2AB  2  E0 05        		cpx #5
00A2AD  2  D0 02        		bne @good
00A2AF  2  A2 00        		ldx #0
00A2B1  2               @good:
00A2B1  2  8E 12 60     		stx WRAM_SlowMotion
00A2B4  2  60           		rts
00A2B5  2               
00A2B5  2               pm_give_star:
00A2B5  2  A9 FF        		lda #$FF
00A2B7  2  8D 9F 07     		sta StarInvincibleTimer
00A2BA  2  A9 40        		lda #StarPowerMusic
00A2BC  2  85 FB        		sta AreaMusicQueue
00A2BE  2  60           		rts
00A2BF  2               
00A2BF  2               pm_low_user:
00A2BF  2  20 22 A3     		jsr get_user_selected
00A2C2  2  B1 00        		lda ($00), y
00A2C4  2  18           		clc
00A2C5  2  69 01        		adc #1
00A2C7  2  29 0F        		and #$0F
00A2C9  2  85 03        		sta $03
00A2CB  2  B1 00        		lda ($00), y
00A2CD  2  29 F0        		and #$F0
00A2CF  2  05 03        		ora $03
00A2D1  2  91 00        		sta ($00), y
00A2D3  2  60           		rts
00A2D4  2               
00A2D4  2               pm_restart_level:
00A2D4  2  4C 8C B1     		jmp RequestRestartLevel
00A2D7  2               
00A2D7  2               pm_exit_intro:
00A2D7  2  A9 00        		lda #BANK_LOADER
00A2D9  2  4C 5B FF     		jmp StartBank
00A2DC  2               
00A2DC  2               pm_exit_title:
00A2DC  2  AD FF 07     		lda BANK_SELECTED
00A2DF  2  4C 5B FF     		jmp StartBank
00A2E2  2               
00A2E2  2               pm_no_activation:
00A2E2  2  60           		rts
00A2E3  2               
00A2E3  2               pm_save_state:
00A2E3  2  4C 2C AD     		jmp begin_save
00A2E6  2               
00A2E6  2               pm_load_state:
00A2E6  2  4C 51 AD     		jmp begin_load
00A2E9  2               
00A2E9  2               pm_activation_slots:
00A2E9  2  58 A2        		.word pm_toggle_powerup
00A2EB  2  85 A2        		.word pm_toggle_size
00A2ED  2  93 A2        		.word pm_toggle_hero
00A2EF  2  B5 A2        		.word pm_give_star
00A2F1  2  D4 A2        		.word pm_restart_level
00A2F3  2  E3 A2        		.word pm_save_state
00A2F5  2  E6 A2        		.word pm_load_state
00A2F7  2  DC A2        		.word pm_exit_title
00A2F9  2  D7 A2        		.word pm_exit_intro
00A2FB  2               
00A2FB  2               pause_run_activation:
00A2FB  2  AD 04 60     		lda WRAM_MenuIndex
00A2FE  2  0A           		asl
00A2FF  2  A8           		tay
00A300  2  B9 E9 A2     		lda pm_activation_slots, y
00A303  2  85 00        		sta $00
00A305  2  B9 EA A2     		lda pm_activation_slots+1, y
00A308  2  85 01        		sta $01
00A30A  2  6C 00 00     		jmp ($0000)
00A30D  2               
00A30D  2               draw_menu_row_from_a:
00A30D  2  20 7F A1     		jsr prepare_draw_row
00A310  2  A9 00        		lda #0
00A312  2  85 07        		sta $07
00A314  2  4C 8E A1     		jmp draw_prepared_row
00A317  2               
00A317  2               pause_menu_activate:
00A317  2  20 FB A2     		jsr pause_run_activation
00A31A  2  AE 04 60     		ldx WRAM_MenuIndex
00A31D  2  E8           		inx
00A31E  2  8A           		txa
00A31F  2  4C 0D A3     		jmp draw_menu_row_from_a
00A322  2               
00A322  2               get_user_selected:
00A322  2  AE 04 60     		ldx WRAM_MenuIndex
00A325  2  AD FF 07     		lda BANK_SELECTED
00A328  2  C9 08        		cmp #BANK_ORG
00A32A  2  F0 12        		beq @is_org
00A32C  2  E0 06        		cpx #6
00A32E  2  D0 07        		bne @is_0
00A330  2  A9 FE        		lda #<WRAM_LostUser0
00A332  2  A2 61        		ldx #>WRAM_LostUser0
00A334  2  4C 4D A3     		jmp @save
00A337  2               @is_0:
00A337  2  A9 00        		lda #<WRAM_LostUser1
00A339  2  A2 62        		ldx #>WRAM_LostUser1
00A33B  2  4C 4D A3     		jmp @save
00A33E  2               @is_org:
00A33E  2  E0 06        		cpx #6
00A340  2  F0 07        		beq @is_org_0
00A342  2  A9 FC        		lda #<WRAM_OrgUser1
00A344  2  A2 61        		ldx #>WRAM_OrgUser1
00A346  2  4C 4D A3     		jmp @save
00A349  2               @is_org_0:
00A349  2  A9 FA        		lda #<WRAM_OrgUser0
00A34B  2  A2 61        		ldx #>WRAM_OrgUser0
00A34D  2               @save:
00A34D  2  85 00        		sta $00
00A34F  2  86 01        		stx $01
00A351  2  A0 00        		ldy #0
00A353  2  60           		rts
00A354  2               
00A354  2               do_uservar_input:
00A354  2  AD FC 06     		lda SavedJoypad1Bits
00A357  2  C9 02        		cmp #Left_Dir
00A359  2  D0 10        		bne @check_right
00A35B  2  20 22 A3     		jsr get_user_selected
00A35E  2  C8           		iny
00A35F  2  B1 00        		lda ($00), y
00A361  2  18           		clc
00A362  2  69 01        		adc #1
00A364  2  29 07        		and #7
00A366  2  91 00        		sta ($00), y
00A368  2  4C 86 A3     		jmp @redraw
00A36B  2               @check_right:
00A36B  2  C9 01        		cmp #Right_Dir
00A36D  2  D0 1F        		bne @exit
00A36F  2  20 22 A3     		jsr get_user_selected
00A372  2  B1 00        		lda ($00), y
00A374  2  18           		clc
00A375  2  69 10        		adc #$10
00A377  2  29 F0        		and #$F0
00A379  2  85 03        		sta $03
00A37B  2  20 22 A3     		jsr get_user_selected
00A37E  2  B1 00        		lda ($00), y
00A380  2  29 0F        		and #$0F
00A382  2  05 03        		ora $03
00A384  2  91 00        		sta ($00), y
00A386  2               @redraw:
00A386  2  AE 04 60     		ldx WRAM_MenuIndex
00A389  2  E8           		inx
00A38A  2  8A           		txa
00A38B  2  4C 0D A3     		jmp draw_menu_row_from_a
00A38E  2               @exit:
00A38E  2  60           		rts
00A38F  2               
00A38F  2               
00A38F  2               RunPauseMenu:
00A38F  2  29 1F        		and #$1F
00A391  2  F0 25        		beq @draw_cursor
00A393  2  48           	pha
00A394  2  85 00        		sta $0
00A396  2  A9 0A        		lda #MENU_ROW_COUNT
00A398  2  38           		sec
00A399  2  E5 00        		sbc $0
00A39B  2  20 7F A1     		jsr prepare_draw_row
00A39E  2  A9 00        		lda #0
00A3A0  2  85 07        		sta $07
00A3A2  2  20 8E A1     		jsr draw_prepared_row
00A3A5  2  68           	pla
00A3A6  2  38           		sec
00A3A7  2  E9 01        		sbc #1
00A3A9  2  0A           		asl
00A3AA  2  0A           		asl
00A3AB  2  85 00        		sta $00
00A3AD  2  AD 76 07     		lda GamePauseStatus
00A3B0  2  29 81        		and #$81
00A3B2  2  05 00        		ora $00
00A3B4  2  8D 76 07     		sta GamePauseStatus
00A3B7  2  60           		rts
00A3B8  2               @draw_cursor:
00A3B8  2  AD 04 60     		lda WRAM_MenuIndex
00A3BB  2  0A           		asl
00A3BC  2  0A           		asl
00A3BD  2  0A           		asl
00A3BE  2  18           		clc
00A3BF  2  69 26        		adc #$26
00A3C1  2  8D FC 02     		sta $2FC
00A3C4  2  A9 75        		lda #$75
00A3C6  2  8D FD 02     		sta $2FD
00A3C9  2  A9 00        		lda #$00
00A3CB  2  8D FE 02     		sta $2FE
00A3CE  2  A9 04        		lda #$04
00A3D0  2  8D FF 02     		sta $2FF
00A3D3  2               
00A3D3  2  AD 5A 07     		lda LastInputBits
00A3D6  2  D0 0B        		bne @no_input
00A3D8  2  AD FC 06     		lda SavedJoypad1Bits
00A3DB  2  0D 4A 07     		ora JoypadBitMask
00A3DE  2  CD 5A 07     		cmp LastInputBits
00A3E1  2  D0 01        		bne @input_changed
00A3E3  2               @no_input:
00A3E3  2  60           		rts
00A3E4  2               @input_changed:
00A3E4  2  C9 20        		cmp #Select_Button
00A3E6  2  D0 0D        		bne @check_down
00A3E8  2               @move_cursor_down:
00A3E8  2  AE 04 60     		ldx WRAM_MenuIndex
00A3EB  2  E8           		inx
00A3EC  2  E0 09        		cpx #MENU_ROW_COUNT-1
00A3EE  2  30 02        		bmi @no_wrap_down
00A3F0  2  A2 00        		ldx #0
00A3F2  2               @no_wrap_down:
00A3F2  2  4C 11 A4     		jmp @save_exit
00A3F5  2               @check_down:
00A3F5  2  C9 04        		cmp #Down_Dir
00A3F7  2  F0 EF        		beq @move_cursor_down
00A3F9  2  C9 08        		cmp #Up_Dir
00A3FB  2  D0 0D        		bne @check_a
00A3FD  2  AE 04 60     		ldx WRAM_MenuIndex
00A400  2  CA           		dex
00A401  2  E0 00        		cpx #0
00A403  2  10 02        		bpl @no_wrap_up
00A405  2  A2 08        		ldx #MENU_ROW_COUNT-2
00A407  2               @no_wrap_up:
00A407  2  4C 11 A4     		jmp @save_exit
00A40A  2               @check_a:
00A40A  2  29 80        		and #A_Button
00A40C  2  F0 06        		beq @exit
00A40E  2  4C 17 A3     		jmp pause_menu_activate
00A411  2               @save_exit:
00A411  2  8E 04 60     		stx WRAM_MenuIndex
00A414  2               @exit:
00A414  2  AE 04 60     		ldx WRAM_MenuIndex
00A417  2  E0 06        		cpx #6
00A419  2  90 07        		bcc @doneso
00A41B  2  E0 08        		cpx #8
00A41D  2  B0 03        		bcs @doneso ;6-7
00A41F  2  4C 54 A3     		jmp do_uservar_input
00A422  2               @doneso:
00A422  2  60           		rts
00A423  2               
00A423  2               PauseMenu:
00A423  2  AD 76 07     		lda GamePauseStatus
00A426  2  4A           		lsr
00A427  2  90 07        		bcc @not_paused
00A429  2  4A           		lsr
00A42A  2  20 8F A3     		jsr RunPauseMenu
00A42D  2  4C 3D A4     		jmp @continue
00A430  2               @not_paused:
00A430  2  AD FB 63     		lda WRAM_Timer+1
00A433  2  30 08        		bmi @continue
00A435  2  EE FA 63     		inc WRAM_Timer
00A438  2  D0 03        		bne @continue
00A43A  2  EE FB 63     		inc WRAM_Timer+1
00A43D  2               @continue:
00A43D  2  AE 77 07     		ldx GamePauseTimer
00A440  2  F0 05        		beq @pause_ready
00A442  2  CA           		dex
00A443  2  8E 77 07     		stx GamePauseTimer
00A446  2  60           		rts
00A447  2               @pause_ready:
00A447  2  AD FC 06     		lda SavedJoypad1Bits
00A44A  2  29 10        		and #Start_Button
00A44C  2  F0 45        		beq @clear_legacy
00A44E  2  AD 76 07     		lda GamePauseStatus
00A451  2  29 80        		and #$80
00A453  2  D0 46        		bne @exit
00A455  2  A9 2B        		lda #$2b
00A457  2  8D 77 07     		sta GamePauseTimer
00A45A  2  AD 76 07     		lda GamePauseStatus
00A45D  2  A8           		tay
00A45E  2  C8           		iny
00A45F  2  84 FA        		sty PauseSoundQueue
00A461  2  49 01        		eor #$01
00A463  2  09 80        		ora #$80
00A465  2  8D 76 07     		sta GamePauseStatus
00A468  2  4A           		lsr
00A469  2  90 30        		bcc @exit
00A46B  2  A9 00        		lda #0
00A46D  2  8D 04 60     		sta WRAM_MenuIndex
00A470  2  A2 03        		ldx #3
00A472  2  A0 FF        		ldy #$ff
00A474  2               @save_more_sprite:
00A474  2  B9 00 02     		lda $200, y
00A477  2  9D 96 61     		sta WRAM_Temp, x
00A47A  2  88           		dey
00A47B  2  CA           		dex
00A47C  2  10 F6        		bpl @save_more_sprite
00A47E  2  A9 00        		lda #0
00A480  2  8D 9A 61     		sta UservarIndex0
00A483  2  8D 9C 61     		sta UservarIndex1
00A486  2  AD 76 07     		lda GamePauseStatus
00A489  2  09 28        		ora #MENU_ROW_COUNT<<2
00A48B  2  8D 76 07     		sta GamePauseStatus
00A48E  2  4A           		lsr
00A48F  2  4A           		lsr
00A490  2  4C 8F A3     		jmp RunPauseMenu
00A493  2               @clear_legacy:
00A493  2  AD 76 07     		lda GamePauseStatus
00A496  2  29 7F        		and #$7f
00A498  2  8D 76 07     		sta GamePauseStatus
00A49B  2               @exit:
00A49B  2  60           		rts
00A49C  2               
00A49C  2               
00A49C  2               
00A49C  2               
00A49C  2               
00A49C  1               	.include "practice.asm"
00A49C  2               	.include "org.inc"
00A49C  3               CHR_SMB = 0
00A49C  3               CHR_PRACTICE = 2
00A49C  3               CHR_FPG = 4
00A49C  3               CHR_LOADER = 6
00A49C  3               
00A49C  3               ;
00A49C  3               ; FPG vars
00A49C  3               ;
00A49C  3               FpgRuleset = $0717		; DemoAction
00A49C  3               FpgSelected = $075a		; NumberOfLives
00A49C  3               FpgFlags  = $0761		; OffScr_NumberofLives
00A49C  3               FpgLastInput = $0762	; OffScr_HalfwayPage
00A49C  3               FpgScrollTo = $07d7 	; TopScoreDisplay+0
00A49C  3               FpgError = $07d8		; TopScoreDisplay+1
00A49C  3               FpgErrorParam = $07d9	; TopScoreDisplay+2
00A49C  3               FpgOldFlags = $07da		; TopScoreDisplay+3
00A49C  3               
00A49C  3               ;
00A49C  3               ; Practice vars
00A49C  3               ;
00A49C  3               ;
00A49C  3               ; RAM vars
00A49C  3               ;
00A49C  3               PowerUpFrames				= $04	; Anywhere thats temporary
00A49C  3               LastInputBits				= $075a ; Previously NumberOfLives
00A49C  3               MenuSelection				= $077a ; Previously NumberOfPlayers
00A49C  3               ;SaveStateFlags				= $07fc ; Previously WorldSelectEnableFlag
00A49C  3               SavedEnterTimer				= $07f7
00A49C  3               
00A49C  3               STATUS_BAR_OFFSET = $02
00A49C  3               RULE_COUNT_OFFSET = $0b
00A49C  3               FRAME_NUMBER_OFFSET = $15
00A49C  3               FRAMES_REMAIN_OFFSET = $0e
00A49C  3               POSITION_OFFSET = $12
00A49C  3               
00A49C  3               
00A49C  3               
00A49C  2               	.include "lost.inc"
00A49C  3               FDS_IRQ_RELOAD_LOW = $4020
00A49C  3               FDS_IRQ_RELOAD_HIGH = $4021
00A49C  3               FDS_IRQ_CONTROL = $4022
00A49C  3               FDS_CONTROL  = $4024
00A49C  3               FDS_DISK_STATUS = $4030
00A49C  3               FDS_DRIVE_STATUS = $4032
00A49C  3               
00A49C  3               IsWindy = $07ec ; Old CoinTally
00A49C  3               FdsOperTask = $07FC				; SMB2J
00A49C  3               ; WaitForIRQ = $077B				; SMB2J ; KILLED.
00A49C  3               ; LoadListIndex = $07f7			; SMB2J KILLED
00A49C  3               FdsBiosIrqAction = $101			; SMB2J
00A49C  3               FdsLastWrite4025 = $fa			; SMB2J
00A49C  3               IsPlayingExtendedWorlds = $7FB	; SMB2J
00A49C  3               byte_7F5 = $7f5 ; what is this...?
00A49C  3               WorldsCompleted = $7f7 ; Moved from 7FA (think there is other shit there ;))
00A49C  3               
00A49C  3               ; ContinueWorld is killed too
00A49C  3               ; Old LOST timer:
00A49C  3               ; byte_7EC = $7ec ; KILLED
00A49C  3               ; byte_7ED = $7ed ; KILLED
00A49C  3               ; byte_7EE = $7ee ; KILLED
00A49C  3               ; </timer>
00A49C  3               
00A49C  3               ; byte_7FA = $7fa; KILLED. WorldsCompleted
00A49C  3               ; byte_7F9 = $7f9; KILLED
00A49C  3               ; GameTimerDisplay_OBSOLETE = $07f8 ; KILLED.
00A49C  3               
00A49C  3               byte_2 = $2
00A49C  3               byte_3 = $3
00A49C  3               byte_4 = $4
00A49C  3               byte_5 = $5
00A49C  3               byte_6 = $6
00A49C  3               unk_7 = $7
00A49C  3               
00A49C  3               byte_14 = $14
00A49C  3               byte_1B = $1b
00A49C  3               byte_23 = $23
00A49C  3               byte_73 = $73
00A49C  3               byte_8C = $8c
00A49C  3               byte_BB = $bb
00A49C  3               byte_D4 = $d4
00A49C  3               byte_EB = $eb
00A49C  3               byte_EC = $ec
00A49C  3               byte_ED = $ed
00A49C  3               byte_EF = $ef
00A49C  3               byte_138 = $138
00A49C  3               byte_139 = $139
00A49C  3               byte_1A9 = $1a9
00A49C  3               byte_207 = $207
00A49C  3               byte_222 = $222
00A49C  3               byte_226 = $226
00A49C  3               byte_2A9 = $2a9
00A49C  3               byte_308 = $308
00A49C  3               byte_309 = $309
00A49C  3               byte_314 = $314
00A49C  3               byte_316 = $316
00A49C  3               byte_31C = $31c
00A49C  3               byte_3A9 = $3a9
00A49C  3               byte_3B2 = $3b2
00A49C  3               byte_3BD = $3bd
00A49C  3               byte_3CA = $3ca
00A49C  3               byte_49F = $49f
00A49C  3               byte_4A9 = $4a9
00A49C  3               byte_5B4 = $5b4
00A49C  3               unk_6A2 = $6a2
00A49C  3               byte_6A8 = $6a8
00A49C  3               byte_6AB = $6ab
00A49C  3               byte_6C9 = $6c9
00A49C  3               byte_6E2 = $6e2
00A49C  3               byte_6E3 = $6e3
00A49C  3               unk_6E9 = $6e9
00A49C  3               byte_6EA = $6ea
00A49C  3               unk_6F2 = $6f2
00A49C  3               byte_731 = $731
00A49C  3               byte_732 = $732
00A49C  3               byte_7A9 = $7a9
00A49C  3               byte_7F6 = $7f6
00A49C  3               byte_7E7 = $7e7
00A49C  3               byte_7E8 = $7e8
00A49C  3               byte_6EB = $6eb
00A49C  3               
00A49C  3               TMP_0 = $0
00A49C  3               TMP_1 = $1
00A49C  3               
00A49C  3               
00A49C  2               	.include "wram.inc"
00A49C  3               ;
00A49C  3               ; ramvars.inc is auto-generated from ram_region.asm
00A49C  3               ; don't alter directly. bad idea. very bad idea.
00A49C  3               ;
00A49C  3               WRAM_StartAddress = $6000
00A49C  3               WRAM_Magic = $6000
00A49C  3               WRAM_MenuIndex = $6004
00A49C  3               WRAM_PracticeFlags = $6005
00A49C  3               WRAM_CharSet = $6006
00A49C  3               WRAM_DelaySaveFrames = $6007
00A49C  3               WRAM_DelayUserFrames = $6008
00A49C  3               WRAM_SaveFramesLeft = $6009
00A49C  3               WRAM_UserFramesLeft = $600A
00A49C  3               WRAM_SaveStateBank = $600B
00A49C  3               WRAM_DisableMusic = $600C
00A49C  3               WRAM_DisableSound = $600D
00A49C  3               WRAM_SaveButtons = $600E
00A49C  3               WRAM_LoadButtons = $600F
00A49C  3               WRAM_TitleButtons = $6010
00A49C  3               WRAM_RestartButtons = $6011
00A49C  3               WRAM_SlowMotion = $6012
00A49C  3               WRAM_SlowMotionLeft = $6013
00A49C  3               WRAM_ToSaveFile = $6014
00A49C  3               WRAM_LoadedLevel = $6014
00A49C  3               WRAM_LoadedWorld = $6015
00A49C  3               WRAM_LevelAreaPointer = $6016
00A49C  3               WRAM_LevelAreaType = $6017
00A49C  3               WRAM_LevelIntervalTimerControl = $6018
00A49C  3               WRAM_LevelFrameCounter = $6019
00A49C  3               WRAM_LevelPlayerStatus = $601A
00A49C  3               WRAM_LevelPlayerSize = $601B
00A49C  3               WRAM_EntrySockTimer = $601C
00A49C  3               WRAM_LevelRandomData = $601D
00A49C  3               WRAM_LevelFrameRuleData = $6024
00A49C  3               WRAM_EnemyData = $6028
00A49C  3               WRAM_LevelData = $6094
00A49C  3               WRAM_IsContraMode = $6194
00A49C  3               WRAM_Temp = $6196
00A49C  3               WRAM_OrgUser0 = $61FA
00A49C  3               WRAM_OrgUser1 = $61FC
00A49C  3               WRAM_LostUser0 = $61FE
00A49C  3               WRAM_LostUser1 = $6200
00A49C  3               WRAM_OrgRules = $6202
00A49C  3               WRAM_LostRules = $6282
00A49C  3               WRAM_OrgTimes = $6352
00A49C  3               WRAM_OrgTimesEnd = $6392
00A49C  3               WRAM_LostTimes = $6392
00A49C  3               WRAM_LostTimesEnd = $63D2
00A49C  3               WRAM_ExtTimes = $63D2
00A49C  3               WRAM_ExtTimesEnd = $63FA
00A49C  3               WRAM_Timer = $63FA
00A49C  3               WRAM_PrettyTime = $63FC
00A49C  3               WRAM_PrettyTimeMin = $63FC
00A49C  3               WRAM_PrettyTimeSec = $63FD
00A49C  3               WRAM_PrettyTimeFrac = $63FE
00A49C  3               WRAM_LostStart = $63FF
00A49C  3               WRAM_LeafY = $63FF
00A49C  3               WRAM_LeafX = $640B
00A49C  3               WRAM_PlayerColors = $6417
00A49C  3               WRAM_JumpMForceData = $641F
00A49C  3               WRAM_FallMForceData = $6426
00A49C  3               WRAM_FrictionData = $642D
00A49C  3               WRAM_EnemyAttributeData = $6430
00A49C  3               WRAM_PiranhaPlantAttributeData = $643D
00A49C  3               WRAM_UnknownAttributeData0 = $6448
00A49C  3               WRAM_UnknownAttributeData1 = $6449
00A49C  3               WRAM_UnknownAttributeData2 = $644A
00A49C  3               WRAM_MushroomSelection = $644B
00A49C  3               WRAM_SelectMario = $644E
00A49C  3               WRAM_SelectLuigi = $6450
00A49C  3               WRAM_PiranhaPlantDist = $6452
00A49C  3               WRAM_HalfwayPageNybbles = $6453
00A49C  3               WRAM_LostEnd = $6465
00A49C  3               WRAM_SaveLost = $6465
00A49C  3               WRAM_SaveRAM = $64CB
00A49C  3               WRAM_SaveWRAM = $6CCB
00A49C  3               WRAM_SaveLevel = $6D4B
00A49C  3               WRAM_SaveNT = $6E4B
00A49C  3               WRAM_SavePAL = $764B
00A49C  3               WRAM_StoredInputs = $766B
00A49C  3               FrameRuleData = $7676
00A49C  3               
00A49C  2               
00A49C  2               ;
00A49C  2               ; Practice stuff
00A49C  2               ;
00A49C  2               quick_resume_0:
00A49C  2  A5 00 00 00  	.byte $A5, $00, $00, $00, $00, $00, $00, $00 ; Base for 0
00A4A0  2  00 00 00 00  
00A4A4  2  26 90 DD FC  	.byte $26, $90, $DD, $FC, $47, $BF, $30, $00 ; Base for 100
00A4A8  2  47 BF 30 00  
00A4AC  2  81 98 9B AA  	.byte $81, $98, $9B, $AA, $9D, $C8, $F3, $00 ; Base for 200
00A4B0  2  9D C8 F3 00  
00A4B4  2  2A A2 F7 B2  	.byte $2A, $A2, $F7, $B2, $5D, $39, $83, $00 ; Base for 300
00A4B8  2  5D 39 83 00  
00A4BC  2  9F 14 2A 02  	.byte $9F, $14, $2A, $02, $56, $52, $FE, $00 ; Base for 400
00A4C0  2  56 52 FE 00  
00A4C4  2  9F 4A 74 E0  	.byte $9F, $4A, $74, $E0, $09, $C9, $DA, $00 ; Base for 500
00A4C8  2  09 C9 DA 00  
00A4CC  2  F2 E9 0C DE  	.byte $F2, $E9, $0C, $DE, $C7, $7A, $F4, $00 ; Base for 600
00A4D0  2  C7 7A F4 00  
00A4D4  2  18 00 30 30  	.byte $18, $00, $30, $30, $50, $30, $90, $00 ; Base for 700
00A4D8  2  50 30 90 00  
00A4DC  2  02 AC A9 F0  	.byte $02, $AC, $A9, $F0, $A3, $42, $04, $00 ; Base for 800
00A4E0  2  A3 42 04 00  
00A4E4  2  00 B8 B9 C8  	.byte $00, $B8, $B9, $C8, $BB, $2A, $5C, $00 ; Base for 900
00A4E8  2  BB 2A 5C 00  
00A4EC  2  BD A0 DB 9A  	.byte $BD, $A0, $DB, $9A, $2D, $19, $43, $00 ; Base for 1000
00A4F0  2  2D 19 43 00  
00A4F4  2  CF C8 57 C7  	.byte $CF, $C8, $57, $C7, $68, $E6, $37, $00 ; Base for 1100
00A4F8  2  68 E6 37 00  
00A4FC  2  12 B4 91 F8  	.byte $12, $B4, $91, $F8, $DB, $2A, $9C, $00 ; Base for 1200
00A500  2  DB 2A 9C 00  
00A504  2  55 DB 70 C6  	.byte $55, $DB, $70, $C6, $27, $AB, $E4, $00 ; Base for 1300
00A508  2  27 AB E4 00  
00A50C  2  E1 2C EE B7  	.byte $E1, $2C, $EE, $B7, $6A, $04, $D0, $00 ; Base for 1400
00A510  2  6A 04 D0 00  
00A514  2  36 9A F7 C2  	.byte $36, $9A, $F7, $C2, $2D, $A9, $F2, $00 ; Base for 1500
00A518  2  2D A9 F2 00  
00A51C  2  7C 10 E8 C9  	.byte $7C, $10, $E8, $C9, $18, $8A, $BB, $00 ; Base for 1600
00A520  2  18 8A BB 00  
00A524  2  13 4B 6D FB  	.byte $13, $4B, $6D, $FB, $20, $D6, $97, $00 ; Base for 1700
00A528  2  20 D6 97 00  
00A52C  2  6A 06 D2 DF  	.byte $6A, $06, $D2, $DF, $7A, $C4, $31, $00 ; Base for 1800
00A530  2  7A C4 31 00  
00A534  2  1E DA E7 52  	.byte $1E, $DA, $E7, $52, $9C, $39, $01, $00 ; Base for 1900
00A538  2  9C 39 01 00  
00A53C  2  15 87 AC A3  	.byte $15, $87, $AC, $A3, $FA, $BD, $48, $00 ; Base for 2000
00A540  2  FA BD 48 00  
00A544  2  B3 20 46 06  	.byte $B3, $20, $46, $06, $8A, $87, $92, $00 ; Base for 2100
00A548  2  8A 87 92 00  
00A54C  2  D2 3D 99 E2  	.byte $D2, $3D, $99, $E2, $D1, $14, $B6, $00 ; Base for 2200
00A550  2  D1 14 B6 00  
00A554  2  51 B7 14 7A  	.byte $51, $B7, $14, $7A, $52, $A6, $03, $00 ; Base for 2300
00A558  2  52 A6 03 00  
00A55C  2  93 98 BF 8E  	.byte $93, $98, $BF, $8E, $F1, $EC, $0F, $00 ; Base for 2400
00A560  2  F1 EC 0F 00  
00A564  2  69 F3 20 C6  	.byte $69, $F3, $20, $C6, $87, $0A, $04, $00 ; Base for 2500
00A568  2  87 0A 04 00  
00A56C  2  9F DE E1 5C  	.byte $9F, $DE, $E1, $5C, $9E, $27, $1B, $00 ; Base for 2600
00A570  2  9E 27 1B 00  
00A574  2  D3 52 F4 51  	.byte $D3, $52, $F4, $51, $B9, $1A, $68, $00 ; Base for 2700
00A578  2  B9 1A 68 00  
00A57C  2  29 37 65 0B  	.byte $29, $37, $65, $0B, $C1, $D6, $55, $00 ; Base for 2800
00A580  2  C1 D6 55 00  
00A584  2  47 43 CD 4A  	.byte $47, $43, $CD, $4A, $D0, $45, $E5, $00 ; Base for 2900
00A588  2  D0 45 E5 00  
00A58C  2  28 EC BD 64  	.byte $28, $EC, $BD, $64, $1E, $D6, $EB, $00 ; Base for 3000
00A590  2  1E D6 EB 00  
00A594  2  29 49 1B 89  	.byte $29, $49, $1B, $89, $BE, $AD, $D0, $00 ; Base for 3100
00A598  2  BE AD D0 00  
00A59C  2               quick_resume_32:
00A59C  2  1D D1 EA 49  	.byte $1D, $D1, $EA, $49, $9D, $0E, $34, $00 ; Base for 3200
00A5A0  2  9D 0E 34 00  
00A5A4  2  12 D4 F1 58  	.byte $12, $D4, $F1, $58, $BA, $0B, $7F, $00 ; Base for 3300
00A5A8  2  BA 0B 7F 00  
00A5AC  2  0C 88 91 80  	.byte $0C, $88, $91, $80, $A3, $A2, $E5, $00 ; Base for 3400
00A5B0  2  A3 A2 E5 00  
00A5B4  2  90 5F 7F C1  	.byte $90, $5F, $7F, $C1, $3E, $BC, $C1, $00 ; Base for 3500
00A5B8  2  3E BC C1 00  
00A5BC  2  77 2D C3 98  	.byte $77, $2D, $C3, $98, $1F, $2F, $11, $00 ; Base for 3600
00A5C0  2  1F 2F 11 00  
00A5C4  2  EC BF 66 18  	.byte $EC, $BF, $66, $18, $D4, $E5, $4C, $00 ; Base for 3700
00A5C8  2  D4 E5 4C 00  
00A5CC  2  7A 68 9C 4D  	.byte $7A, $68, $9C, $4D, $75, $EF, $04, $00 ; Base for 3800
00A5D0  2  75 EF 04 00  
00A5D4  2  DC E7 5E 90  	.byte $DC, $E7, $5E, $90, $2D, $0D, $57, $00 ; Base for 3900
00A5D8  2  2D 0D 57 00  
00A5DC  2  47 07 89 86  	.byte $47, $07, $89, $86, $95, $98, $B3, $00 ; Base for 4000
00A5E0  2  95 98 B3 00  
00A5E4  2  20 68 28 F8  	.byte $20, $68, $28, $F8, $A9, $58, $0A, $00 ; Base for 4100
00A5E8  2  A9 58 0A 00  
00A5EC  2  92 F1 D4 37  	.byte $92, $F1, $D4, $37, $9F, $F0, $CF, $00 ; Base for 4200
00A5F0  2  9F F0 CF 00  
00A5F4  2  44 E6 6F A3  	.byte $44, $E6, $6F, $A3, $7C, $3A, $C2, $00 ; Base for 4300
00A5F8  2  7C 3A C2 00  
00A5FC  2  5C 12 AA 8F  	.byte $5C, $12, $AA, $8F, $DA, $C5, $70, $00 ; Base for 4400
00A600  2  DA C5 70 00  
00A604  2  26 56 1A B6  	.byte $26, $56, $1A, $B6, $83, $EE, $E9, $00 ; Base for 4500
00A608  2  83 EE E9 00  
00A60C  2  66 AA 67 33  	.byte $66, $AA, $67, $33, $FD, $9A, $61, $00 ; Base for 4600
00A610  2  FD 9A 61 00  
00A614  2  DF 52 EC 49  	.byte $DF, $52, $EC, $49, $91, $02, $20, $00 ; Base for 4700
00A618  2  91 02 20 00  
00A61C  2  A8 61 31 F3  	.byte $A8, $61, $31, $F3, $90, $77, $57, $00 ; Base for 4800
00A620  2  90 77 57 00  
00A624  2  47 1F 91 AE  	.byte $47, $1F, $91, $AE, $8D, $D0, $CB, $00 ; Base for 4900
00A628  2  8D D0 CB 00  
00A62C  2  76 3C D0 A9  	.byte $76, $3C, $D0, $A9, $08, $5A, $4A, $00 ; Base for 5000
00A630  2  08 5A 4A 00  
00A634  2  CE AD 30 6A  	.byte $CE, $AD, $30, $6A, $0A, $DE, $CB, $00 ; Base for 5100
00A638  2  0A DE CB 00  
00A63C  2  94 8B A2 B5  	.byte $94, $8B, $A2, $B5, $F0, $9B, $7A, $00 ; Base for 5200
00A640  2  F0 9B 7A 00  
00A644  2  B8 39 49 3B  	.byte $B8, $39, $49, $3B, $A9, $DE, $8D, $00 ; Base for 5300
00A648  2  A9 DE 8D 00  
00A64C  2  7C 1E E6 DB  	.byte $7C, $1E, $E6, $DB, $16, $A0, $8D, $00 ; Base for 5400
00A650  2  16 A0 8D 00  
00A654  2  8B 12 04 20  	.byte $8B, $12, $04, $20, $28, $68, $38, $00 ; Base for 5500
00A658  2  28 68 38 00  
00A65C  2  49 25 B7 FC  	.byte $49, $25, $B7, $FC, $93, $6A, $4C, $00 ; Base for 5600
00A660  2  93 6A 4C 00  
00A664  2  E5 1A D0 E5  	.byte $E5, $1A, $D0, $E5, $44, $8E, $07, $00 ; Base for 5700
00A668  2  44 8E 07 00  
00A66C  2  4F 6B F5 22  	.byte $4F, $6B, $F5, $22, $C8, $8D, $1C, $00 ; Base for 5800
00A670  2  C8 8D 1C 00  
00A674  2  D3 8A 2D 39  	.byte $D3, $8A, $2D, $39, $63, $11, $D7, $00 ; Base for 5900
00A678  2  63 11 D7 00  
00A67C  2  CD C4 5F D7  	.byte $CD, $C4, $5F, $D7, $68, $C6, $17, $00 ; Base for 6000
00A680  2  68 C6 17 00  
00A684  2  F9 F8 0B FB  	.byte $F9, $F8, $0B, $FB, $EC, $1B, $C3, $00 ; Base for 6100
00A688  2  EC 1B C3 00  
00A68C  2  7B EF 18 C6  	.byte $7B, $EF, $18, $C6, $F7, $7A, $94, $00 ; Base for 6200
00A690  2  F7 7A 94 00  
00A694  2  EC 3D E5 9E  	.byte $EC, $3D, $E5, $9E, $55, $69, $C3, $00 ; Base for 6300
00A698  2  55 69 C3 00  
00A69C  2               quick_resume_64:
00A69C  2  95 DE F5 48  	.byte $95, $DE, $F5, $48, $A2, $33, $77, $00 ; Base for 6400
00A6A0  2  A2 33 77 00  
00A6A4  2  92 AF 8A D5  	.byte $92, $AF, $8A, $D5, $C0, $6B, $EB, $00 ; Base for 6500
00A6A8  2  C0 6B EB 00  
00A6AC  2  29 45 17 9D  	.byte $29, $45, $17, $9D, $B2, $89, $EC, $00 ; Base for 6600
00A6B0  2  B2 89 EC 00  
00A6B4  2  B6 FB 96 61  	.byte $B6, $FB, $96, $61, $4D, $8F, $14, $00 ; Base for 6700
00A6B8  2  4D 8F 14 00  
00A6BC  2  3C FA 83 76  	.byte $3C, $FA, $83, $76, $70, $9C, $7D, $00 ; Base for 6800
00A6C0  2  70 9C 7D 00  
00A6C4  2  64 BE 77 0B  	.byte $64, $BE, $77, $0B, $E5, $F2, $39, $00 ; Base for 6900
00A6C8  2  E5 F2 39 00  
00A6CC  2  62 4A 8E 1B  	.byte $62, $4A, $8E, $1B, $07, $31, $3F, $00 ; Base for 7000
00A6D0  2  07 31 3F 00  
00A6D4  2  DA 09 BD AE  	.byte $DA, $09, $BD, $AE, $D5, $88, $23, $00 ; Base for 7100
00A6D8  2  D5 88 23 00  
00A6DC  2  9A 63 57 91  	.byte $9A, $63, $57, $91, $3E, $1C, $60, $00 ; Base for 7200
00A6E0  2  3E 1C 60 00  
00A6E4  2  31 53 31 97  	.byte $31, $53, $31, $97, $F4, $DB, $32, $00 ; Base for 7300
00A6E8  2  F4 DB 32 00  
00A6EC  2  7A 5A AE 1B  	.byte $7A, $5A, $AE, $1B, $47, $71, $FF, $00 ; Base for 7400
00A6F0  2  47 71 FF 00  
00A6F4  2  43 3D BB C0  	.byte $43, $3D, $BB, $C0, $B7, $36, $58, $00 ; Base for 7500
00A6F8  2  B7 36 58 00  
00A6FC  2  F2 B3 56 30  	.byte $F2, $B3, $56, $30, $9C, $FD, $C4, $00 ; Base for 7600
00A700  2  9C FD C4 00  
00A704  2  13 45 63 E9  	.byte $13, $45, $63, $E9, $2E, $FC, $A1, $00 ; Base for 7700
00A708  2  2E FC A1 00  
00A70C  2  F2 5F BB 04  	.byte $F2, $5F, $BB, $04, $72, $7A, $9E, $00 ; Base for 7800
00A710  2  72 7A 9E 00  
00A714  2  3D F9 82 71  	.byte $3D, $F9, $82, $71, $75, $97, $7C, $00 ; Base for 7900
00A718  2  75 97 7C 00  
00A71C  2  EE 47 9B 14  	.byte $EE, $47, $9B, $14, $22, $0A, $4E, $00 ; Base for 8000
00A720  2  22 0A 4E 00  
00A724  2  E9 CC 1F 87  	.byte $E9, $CC, $1F, $87, $B8, $B7, $C6, $00 ; Base for 8100
00A728  2  B8 B7 C6 00  
00A72C  2  B2 97 F2 DD  	.byte $B2, $97, $F2, $DD, $38, $82, $F3, $00 ; Base for 8200
00A730  2  38 82 F3 00  
00A734  2  4E 4E D2 4F  	.byte $4E, $4E, $D2, $4F, $EB, $74, $A2, $00 ; Base for 8300
00A738  2  EB 74 A2 00  
00A73C  2  3B D7 A0 0F  	.byte $3B, $D7, $A0, $0F, $4F, $51, $CF, $00 ; Base for 8400
00A740  2  4F 51 CF 00  
00A744  2  81 84 87 8E  	.byte $81, $84, $87, $8E, $81, $9C, $9F, $00 ; Base for 8500
00A748  2  81 9C 9F 00  
00A74C  2  1A 10 24 04  	.byte $1A, $10, $24, $04, $4C, $44, $DC, $00 ; Base for 8600
00A750  2  4C 44 DC 00  
00A754  2  D9 52 E0 45  	.byte $D9, $52, $E0, $45, $85, $0E, $04, $00 ; Base for 8700
00A758  2  85 0E 04 00  
00A75C  2  68 CA 1B 8F  	.byte $68, $CA, $1B, $8F, $B8, $A7, $D6, $00 ; Base for 8800
00A760  2  B8 A7 D6 00  
00A764  2  47 31 BF DC  	.byte $47, $31, $BF, $DC, $A3, $1A, $5C, $00 ; Base for 8900
00A768  2  A3 1A 5C 00  
00A76C  2  D9 54 E6 4F  	.byte $D9, $54, $E6, $4F, $83, $1C, $1A, $00 ; Base for 9000
00A770  2  83 1C 1A 00  
00A774  2  3D 5F 25 9B  	.byte $3D, $5F, $25, $9B, $D0, $E7, $46, $00 ; Base for 9100
00A778  2  D0 E7 46 00  
00A77C  2  50 26 86 CB  	.byte $50, $26, $86, $CB, $C6, $51, $DD, $00 ; Base for 9200
00A780  2  C6 51 DD 00  
00A784  2  6D 4F 95 0A  	.byte $6D, $4F, $95, $0A, $20, $34, $74, $00 ; Base for 9300
00A788  2  20 34 74 00  
00A78C  2  C4 55 DD 76  	.byte $C4, $55, $DD, $76, $CC, $21, $B9, $00 ; Base for 9400
00A790  2  CC 21 B9 00  
00A794  2  06 B4 B9 D0  	.byte $06, $B4, $B9, $D0, $A3, $02, $44, $00 ; Base for 9500
00A798  2  A3 02 44 00  
00A79C  2               quick_resume_96:
00A79C  2  D6 21 8D CE  	.byte $D6, $21, $8D, $CE, $D5, $48, $E2, $00 ; Base for 9600
00A7A0  2  D5 48 E2 00  
00A7A4  2  E1 C8 0B 9B  	.byte $E1, $C8, $0B, $9B, $8C, $BB, $A2, $00 ; Base for 9700
00A7A8  2  8C BB A2 00  
00A7AC  2  D5 EA 41 95  	.byte $D5, $EA, $41, $95, $16, $3C, $10, $00 ; Base for 9800
00A7B0  2  16 3C 10 00  
00A7B4  2  54 3C 94 ED  	.byte $54, $3C, $94, $ED, $C4, $1F, $97, $00 ; Base for 9900
00A7B8  2  C4 1F 97 00  
00A7BC  2               
00A7BC  2               do_quick_resume:
00A7BC  2  0A           	asl ; *= 2
00A7BD  2  0A           	asl ; *= 4
00A7BE  2  0A           	asl ; *= 8
00A7BF  2  A8           	tay
00A7C0  2  A2 00        	ldx #0
00A7C2  2               more_quick_resume:
00A7C2  2  18           	clc
00A7C3  2  B1 00        	lda ($00), y
00A7C5  2  9D A7 07     	sta PseudoRandomBitReg,x
00A7C8  2  C8           	iny
00A7C9  2  E8           	inx
00A7CA  2  E0 07        	cpx #7
00A7CC  2  D0 F4        	bne more_quick_resume
00A7CE  2  60           	rts
00A7CF  2               
00A7CF  2               prac_quick_resume:
00A7CF  2               	;
00A7CF  2               	; Get the top two digits of target rule (1234 -> 12)
00A7CF  2               	;
00A7CF  2  AD D9 07     	lda TopScoreDisplay+2
00A7D2  2  20 28 80     	jsr MulByTen
00A7D5  2  18           	clc
00A7D6  2  6D DA 07     	adc TopScoreDisplay+3
00A7D9  2  A0 00        	ldy #0
00A7DB  2  8C D9 07     	sty TopScoreDisplay+2 ; clear (1234 - > 34)
00A7DE  2  8C DA 07     	sty TopScoreDisplay+3 ; clear
00A7E1  2  C9 20        	cmp #$20
00A7E3  2  30 16        	bmi prac_quick_using_0
00A7E5  2  C9 40        	cmp #$40
00A7E7  2  30 1D        	bmi prac_quick_using_32
00A7E9  2  C9 60        	cmp #$60
00A7EB  2  30 27        	bmi prac_quick_using_64
00A7ED  2  38           	sec
00A7EE  2  E9 60        	sbc #$60
00A7F0  2  A2 9C        	ldx #<quick_resume_96
00A7F2  2  86 00        	stx $00
00A7F4  2  A2 A7        	ldx #>quick_resume_96
00A7F6  2  86 01        	stx $01
00A7F8  2  4C BC A7     	jmp do_quick_resume
00A7FB  2               
00A7FB  2               prac_quick_using_0:
00A7FB  2  A2 9C        	ldx #<quick_resume_0
00A7FD  2  86 00        	stx $00
00A7FF  2  A2 A4        	ldx #>quick_resume_0
00A801  2  86 01        	stx $01
00A803  2  4C BC A7     	jmp do_quick_resume
00A806  2               
00A806  2               prac_quick_using_32:
00A806  2  38           	sec
00A807  2  E9 20        	sbc #$20
00A809  2  A2 9C        	ldx #<quick_resume_32
00A80B  2  86 00        	stx $00
00A80D  2  A2 A5        	ldx #>quick_resume_32
00A80F  2  86 01        	stx $01
00A811  2  4C BC A7     	jmp do_quick_resume
00A814  2               
00A814  2               prac_quick_using_64:
00A814  2  38           	sec
00A815  2  E9 40        	sbc #$40
00A817  2  A2 9C        	ldx #<quick_resume_64
00A819  2  86 00        	stx $00
00A81B  2  A2 A6        	ldx #>quick_resume_64
00A81D  2  86 01        	stx $01
00A81F  2  4C BC A7     	jmp do_quick_resume
00A822  2               
00A822  2               SMALL_FIRE_FRAMES = $1b3
00A822  2               
00A822  2               AdvanceToRule:
00A822  2               		;
00A822  2               		; Regardless of rule, always honor powerups
00A822  2               		;
00A822  2  A9 00        		lda #0
00A824  2  A0 00        		ldy #0
00A826  2  AE E3 07     		ldx PowerUps
00A829  2  F0 18        		beq NoPowerups
00A82B  2  A9 3B        		lda #$3B
00A82D  2  C8           		iny
00A82E  2  CA           		dex
00A82F  2  F0 0C        		beq BigMarioPowerup
00A831  2  A9 7A        		lda #$7A
00A833  2  C8           		iny
00A834  2  CA           		dex
00A835  2  F0 06        		beq BigMarioPowerup
00A837  2  A2 01        		ldx #1
00A839  2  A0 02        		ldy #2
00A83B  2  A9 B3        		lda #<SMALL_FIRE_FRAMES
00A83D  2               		;
00A83D  2               		; Big mario
00A83D  2               		;
00A83D  2               BigMarioPowerup:
00A83D  2  8E 54 07     		stx PlayerSize
00A840  2  8C 56 07     		sty PlayerStatus
00A843  2               
00A843  2               NoPowerups:
00A843  2  A2 00            ldx #0
00A845  2  8E E3 07     		stx PowerUps
00A848  2  85 04        		sta PowerUpFrames
00A84A  2               		;
00A84A  2               		; If Rule is 0, use title Rule
00A84A  2               		;
00A84A  2  AD D9 07     		lda TopScoreDisplay+2
00A84D  2  0D DA 07     		ora TopScoreDisplay+3
00A850  2  0D DB 07     		ora TopScoreDisplay+4
00A853  2  0D DC 07     		ora TopScoreDisplay+5
00A856  2  D0 01        		bne StartAdvance
00A858  2  60           		rts
00A859  2               StartAdvance:
00A859  2  AD 7F 07     		lda IntervalTimerControl
00A85C  2  C9 03        		cmp #3
00A85E  2               DeadLock:
00A85E  2  D0 FE        		bne DeadLock
00A860  2               		;
00A860  2               		; Copy to current rule
00A860  2               		;
00A860  2  A2 04        		ldx #4
00A862  2               KeepCopyRule:
00A862  2  BD D8 07     		lda TopScoreDisplay+1,x
00A865  2  9D 76 76     		sta FrameRuleData, x
00A868  2  CA           		dex
00A869  2  D0 F7        		bne KeepCopyRule
00A86B  2  A9 00        		lda #0
00A86D  2  8D 76 76     		sta FrameRuleData
00A870  2               		;
00A870  2               		; Advance to correct frame rule
00A870  2               		;
00A870  2  20 CF A7     		jsr prac_quick_resume
00A873  2               AdvanceFurther:
00A873  2  CE DC 07     		dec TopScoreDisplay+5
00A876  2  10 0A        		bpl CheckAdvanceFurther
00A878  2  CE DB 07     		dec TopScoreDisplay+4
00A87B  2  30 4F        		bmi RuleContinue
00A87D  2  A9 09        		lda #9
00A87F  2  8D DC 07     		sta TopScoreDisplay+5
00A882  2               CheckAdvanceFurther:
00A882  2  AD DB 07     		lda TopScoreDisplay+4
00A885  2  0D DC 07     		ora TopScoreDisplay+5
00A888  2  F0 42        		beq RuleContinue
00A88A  2               RunRandomAdvance:
00A88A  2  20 00 80     		jsr AdvanceRandom
00A88D  2  20 00 80     		jsr AdvanceRandom
00A890  2  20 00 80     		jsr AdvanceRandom
00A893  2  20 00 80     		jsr AdvanceRandom
00A896  2  20 00 80     		jsr AdvanceRandom
00A899  2  20 00 80     		jsr AdvanceRandom
00A89C  2  20 00 80     		jsr AdvanceRandom
00A89F  2  20 00 80     		jsr AdvanceRandom
00A8A2  2  20 00 80     		jsr AdvanceRandom
00A8A5  2  20 00 80     		jsr AdvanceRandom
00A8A8  2  20 00 80     		jsr AdvanceRandom
00A8AB  2  20 00 80     		jsr AdvanceRandom
00A8AE  2  20 00 80     		jsr AdvanceRandom
00A8B1  2  20 00 80     		jsr AdvanceRandom
00A8B4  2  20 00 80     		jsr AdvanceRandom
00A8B7  2  20 00 80     		jsr AdvanceRandom
00A8BA  2  20 00 80     		jsr AdvanceRandom
00A8BD  2  20 00 80     		jsr AdvanceRandom
00A8C0  2  20 00 80     		jsr AdvanceRandom
00A8C3  2  20 00 80     		jsr AdvanceRandom
00A8C6  2  20 00 80     		jsr AdvanceRandom
00A8C9  2  4C 73 A8     		jmp AdvanceFurther
00A8CC  2               RuleContinue:
00A8CC  2  A9 00        		lda #0
00A8CE  2  8D DC 07     		sta TopScoreDisplay+5
00A8D1  2  8D DB 07     		sta TopScoreDisplay+4
00A8D4  2               		;
00A8D4  2               		; Advance to correct place within this rule
00A8D4  2               		;
00A8D4  2  A9 12        		lda #18
00A8D6  2  85 02        		sta $02
00A8D8  2               AdvanceWithin:
00A8D8  2  20 00 80     		jsr AdvanceRandom
00A8DB  2  C6 02        		dec $02
00A8DD  2  D0 F9        		bne AdvanceWithin
00A8DF  2               		;
00A8DF  2               		; Advance powerup frames
00A8DF  2               		;
00A8DF  2  A5 04        		lda PowerUpFrames
00A8E1  2  C9 B3        		cmp #<SMALL_FIRE_FRAMES
00A8E3  2  D0 08        		bne StartFramePrecision
00A8E5  2  A2 00        		ldx #0
00A8E7  2               CorrectForSmallFire:
00A8E7  2  20 00 80     		jsr AdvanceRandom
00A8EA  2  CA           		dex
00A8EB  2  D0 FA        		bne CorrectForSmallFire
00A8ED  2               StartFramePrecision:
00A8ED  2  A5 04        		lda PowerUpFrames
00A8EF  2               MorePowerUpFrames:
00A8EF  2  F0 08        		beq NoPowerUpFrames
00A8F1  2  20 00 80     		jsr AdvanceRandom
00A8F4  2  C6 04        		dec PowerUpFrames
00A8F6  2  4C EF A8     		jmp MorePowerUpFrames
00A8F9  2               NoPowerUpFrames:
00A8F9  2               		;
00A8F9  2               		; Set the correct framecounter
00A8F9  2               		;
00A8F9  2  A0 0E        		ldy #$0e
00A8FB  2  A2 A2        		ldx #$a2
00A8FD  2               
00A8FD  2  AD FF 07     		lda BANK_SELECTED
00A900  2  C9 08        		cmp #BANK_ORG
00A902  2  F0 04        		beq @is_org
00A904  2  CA           		dex
00A905  2  CA           		dex
00A906  2  88           		dey
00A907  2  88           		dey
00A908  2               @is_org:
00A908  2  AD 5C 07     		lda LevelNumber
00A90B  2  D0 02        		bne SaveFrameCounter
00A90D  2  E8           		inx
00A90E  2  C8           		iny
00A90F  2               SaveFrameCounter:
00A90F  2  86 09        		stx FrameCounter
00A911  2  8C F7 07     		sty SavedEnterTimer
00A914  2               		;
00A914  2               		; On the correct framerule, continue with the game.
00A914  2               		;
00A914  2  60           		rts
00A915  2               
00A915  2               TopText:
00A915  2  20 44 0C 1B  	text_block $2044, "RULE * FRAME"
00A919  2  1E 15 0E 24  
00A91D  2  29 24 0F 1B  
00A924  2  20 51 0F 24  	text_block $2051, " X   Y  TIME R "
00A928  2  21 24 24 24  
00A92C  2  22 24 24 1D  
00A936  2  20 6B 02 2E  	.byte $20, $6b, $02, $2e, $29 ; score trailing digit and coin display
00A93A  2  29           
00A93B  2  23 C0 7F AA  	.byte $23, $c0, $7f, $aa ; attribute table data, clears name table 0 to palette 2
00A93F  2  23 C2 01 EA  	.byte $23, $c2, $01, $ea ; attribute table data, used for coin icon in status bar
00A943  2  00           	.byte $00
00A944  2               
00A944  2               WritePracticeTop:
00A944  2  A2 00 AC 00  	inline_write_block TopText
00A948  2  03 BD 15 A9  
00A94C  2  99 01 03 E8  
00A959  2  4C 08 FF     	jmp ReturnBank
00A95C  2               
00A95C  2               RedrawFramesRemaningInner:
00A95C  2  AD 05 60             lda WRAM_PracticeFlags
00A95F  2  29 20                and #PF_DisablePracticeInfo
00A961  2  F0 19                beq @draw
00A963  2  AD 46 07     		lda StarFlagTaskControl
00A966  2  C9 04        		cmp #$04
00A968  2  F0 12        		beq @draw ; force remainder if flagpole end
00A96A  2  AD 70 07     		lda OperMode
00A96D  2  C9 02        		cmp #$02
00A96F  2  F0 0B        		beq @draw ; force remainder if castle end
00A971  2  AD D6 06     		lda WarpZoneControl
00A974  2  F0 31        		beq nodraw
00A976  2  A5 0E        		lda GameEngineSubroutine
00A978  2  C9 03        		cmp #$03
00A97A  2  D0 2B        		bne nodraw ; force remainder if warp zone
00A97C  2  AC 00 03     @draw:	ldy VRAM_Buffer1_Offset
00A97F  2  A9 20        		lda #$20
00A981  2  99 01 03     		sta VRAM_Buffer1, y
00A984  2  A9 7E        		lda #$7E
00A986  2  99 02 03     		sta VRAM_Buffer1+1, y
00A989  2  A9 02        		lda #$02
00A98B  2  99 03 03     		sta VRAM_Buffer1+2, y
00A98E  2  AD 7F 07     		lda IntervalTimerControl
00A991  2  20 31 80     		jsr DivByTen
00A994  2  99 05 03     		sta VRAM_Buffer1+4, y
00A997  2  8A           		txa
00A998  2  99 04 03     		sta VRAM_Buffer1+3, y
00A99B  2  A9 00        		lda #0
00A99D  2  99 06 03     		sta VRAM_Buffer1+5, y
00A9A0  2  18           		clc
00A9A1  2  98           		tya
00A9A2  2  69 05        		adc #5
00A9A4  2  8D 00 03     		sta VRAM_Buffer1_Offset
00A9A7  2  60           nodraw:	rts
00A9A8  2               
00A9A8  2               RedrawAllInner:
00A9A8  2  20 5C A9     		jsr RedrawFramesRemaningInner
00A9AB  2  20 B8 A9     		jsr RedrawFrameNumbersInner
00A9AE  2  60           		rts
00A9AF  2               
00A9AF  2               RedrawAll:
00A9AF  2  20 5C A9     		jsr RedrawFramesRemaningInner
00A9B2  2  20 B8 A9     		jsr RedrawFrameNumbersInner
00A9B5  2  4C 08 FF     		jmp ReturnBank
00A9B8  2               
00A9B8  2               RedrawFrameNumbersInner:
00A9B8  2  AD 70 07     		lda OperMode
00A9BB  2  F0 07        		beq @draw ; slighty dumb
00A9BD  2  AD 05 60     		lda WRAM_PracticeFlags
00A9C0  2  29 20        		and #PF_DisablePracticeInfo
00A9C2  2  D0 E3        		bne nodraw
00A9C4  2  AC 00 03     @draw:	ldy VRAM_Buffer1_Offset
00A9C7  2  A9 20        		lda #$20
00A9C9  2  99 01 03     		sta VRAM_Buffer1, y
00A9CC  2  A9 6D        		lda #$6d
00A9CE  2  99 02 03     		sta VRAM_Buffer1+1, y
00A9D1  2  A9 03        		lda #$03
00A9D3  2  99 03 03     		sta VRAM_Buffer1+2, y
00A9D6  2  A5 09        		lda FrameCounter
00A9D8  2  20 31 80     		jsr DivByTen
00A9DB  2  99 06 03     		sta VRAM_Buffer1+5, y
00A9DE  2  8A           		txa
00A9DF  2  20 31 80     		jsr DivByTen
00A9E2  2  99 05 03     		sta VRAM_Buffer1+4, y
00A9E5  2  8A           		txa
00A9E6  2  99 04 03     		sta VRAM_Buffer1+3, y
00A9E9  2  A9 00        		lda #0
00A9EB  2  99 07 03     		sta VRAM_Buffer1+6, y
00A9EE  2               
00A9EE  2  AD 70 07     		lda OperMode
00A9F1  2  F0 07        		beq @rule ; force RULE if on title screen
00A9F3  2  AD 05 60     		lda WRAM_PracticeFlags
00A9F6  2  29 01        		and #PF_SockMode
00A9F8  2  F0 25        		beq @dont_draw_rule
00A9FA  2  A9 20        @rule:	lda #$20
00A9FC  2  99 07 03     		sta VRAM_Buffer1+6, y ; Offset for RULE (if any)
00A9FF  2  A9 64        		lda #$64
00AA01  2  99 08 03     		sta VRAM_Buffer1+7, y
00AA04  2  A9 04        		lda #$04
00AA06  2  99 09 03     		sta VRAM_Buffer1+8, y
00AA09  2  A2 00        		ldx #0
00AA0B  2               @copy_rule:
00AA0B  2  BD DF 07     		lda CurrentRule, x
00AA0E  2  99 0A 03     		sta VRAM_Buffer1+9, y
00AA11  2  C8           		iny
00AA12  2  E8           		inx
00AA13  2  E0 04        		cpx #4
00AA15  2  D0 F4        		bne @copy_rule
00AA17  2  A9 00        		lda #0
00AA19  2  99 0A 03     		sta VRAM_Buffer1+9, y
00AA1C  2  C8           		iny
00AA1D  2  C8           		iny
00AA1E  2  C8           		iny
00AA1F  2               @dont_draw_rule:
00AA1F  2  98           		tya
00AA20  2  18           		clc
00AA21  2  69 06        		adc #6
00AA23  2  8D 00 03     		sta VRAM_Buffer1_Offset
00AA26  2  A6 08        		ldx ObjectOffset
00AA28  2  60           		rts
00AA29  2               
00AA29  2               RedrawFrameNumbers:
00AA29  2  20 B8 A9     		jsr RedrawFrameNumbersInner
00AA2C  2  4C 08 FF     		jmp ReturnBank
00AA2F  2               
00AA2F  2               UpdateFrameRule:
00AA2F  2  A9 14        		lda #$14
00AA31  2  CD 7F 07     		cmp IntervalTimerControl
00AA34  2  D0 0C        		bne NotEvenFrameRule
00AA36  2  A9 01        		lda #$01
00AA38  2  8D 39 01     		sta DigitModifier+5
00AA3B  2  A0 0B        		ldy #RULE_COUNT_OFFSET
00AA3D  2  A2 02        		ldx #2
00AA3F  2  20 EC 9D     		jsr DigitsMathRoutineN
00AA42  2               NotEvenFrameRule:
00AA42  2  4C 08 FF     		jmp ReturnBank
00AA45  2               
00AA45  2               PrintableWorldNumber:
00AA45  2  AD FF 07     		lda BANK_SELECTED
00AA48  2  C9 08        		cmp #BANK_ORG
00AA4A  2  D0 06        		bne @get_ll_world
00AA4C  2               @org_world:
00AA4C  2  AD 5F 07     		lda WorldNumber
00AA4F  2  4C 5F AA     		jmp @to_print
00AA52  2               @get_ll_world:
00AA52  2  AD FB 07     		lda IsPlayingExtendedWorlds
00AA55  2  F0 F5        		beq @org_world
00AA57  2  AD 5F 07     		lda WorldNumber
00AA5A  2  29 03        		and #3
00AA5C  2  18           		clc
00AA5D  2  69 09        		adc #9
00AA5F  2               @to_print:
00AA5F  2  38           		sec
00AA60  2  69 00        		adc #0
00AA62  2  60           		rts
00AA63  2               
00AA63  2               GetSelectedValue:
00AA63  2  A5 00        		lda $0
00AA65  2  F0 24        		beq @get_world
00AA67  2  C9 01        		cmp #1
00AA69  2  F0 06        		beq @get_level
00AA6B  2  C9 02        		cmp #2
00AA6D  2  F0 09        		beq @get_pups
00AA6F  2  D0 0B        		bne @get_player
00AA71  2               @get_level:
00AA71  2  AD 5C 07     		lda LevelNumber
00AA74  2  38           		sec
00AA75  2  69 00        		adc #0
00AA77  2  60           		rts
00AA78  2               @get_pups:
00AA78  2  AD E3 07     		lda PowerUps
00AA7B  2  60           		rts
00AA7C  2               @get_player:
00AA7C  2  AD 94 61     		lda WRAM_IsContraMode ;
00AA7F  2  F0 03        		beq @not_peach
00AA81  2  A9 19        		lda #$19
00AA83  2  60           		rts
00AA84  2               @not_peach:
00AA84  2  A9 16        		lda #$16 ; M
00AA86  2  38           		sec
00AA87  2  ED 53 07     		sbc CurrentPlayer ; M / L
00AA8A  2  60           		rts
00AA8B  2               @get_world:
00AA8B  2  4C 45 AA     		jmp PrintableWorldNumber
00AA8E  2               
00AA8E  2               DrawRuleNumber:
00AA8E  2  AE 00 03     		ldx VRAM_Buffer1_Offset
00AA91  2  A9 22        		lda #$22
00AA93  2  9D 01 03     		sta VRAM_Buffer1, x
00AA96  2  A9 EB        		lda #$Eb
00AA98  2  9D 02 03     		sta VRAM_Buffer1+1, x
00AA9B  2  A9 04        		lda #$04
00AA9D  2  9D 03 03     		sta VRAM_Buffer1+2, x
00AAA0  2  A0 00        		ldy #0
00AAA2  2               @copy_next:
00AAA2  2  B1 04        		lda ($04), y
00AAA4  2  9D 04 03     		sta VRAM_Buffer1+3, x
00AAA7  2  E8           		inx
00AAA8  2  C8           		iny
00AAA9  2  C0 04        		cpy #4
00AAAB  2  D0 F5        		bne @copy_next
00AAAD  2  AD 00 03     		lda VRAM_Buffer1_Offset
00AAB0  2  18           		clc
00AAB1  2  69 07        		adc #7
00AAB3  2  8D 00 03     		sta VRAM_Buffer1_Offset
00AAB6  2  60           		rts
00AAB7  2               
00AAB7  2               
00AAB7  2               menu_text:
00AAB7  2  22 2B 07 25  	text_block $222B, "% WORLD"
00AABB  2  24 20 18 1B  
00AABF  2  15 0D        
00AAC1  2  22 4B 07 25  	text_block $224B, "% LEVEL"
00AAC5  2  24 15 0E 1F  
00AAC9  2  0E 15        
00AACB  2  22 6B 07 25  	text_block $226B, "% P-UPS"
00AACF  2  24 19 28 1E  
00AAD3  2  19 1C        
00AAD5  2  22 8B 06 25  	text_block $228B, "% HERO"
00AAD9  2  24 11 0E 1B  
00AADD  2  18           
00AADE  2  22 F0 04 1B  	text_block $22f0, "RULE"
00AAE2  2  1E 15 0E     
00AAE5  2  00           	.byte $00
00AAE6  2               
00AAE6  2               draw_menu:
00AAE6  2  20 47 9B     		jsr DrawTitleMario
00AAE9  2  A5 09        		lda FrameCounter
00AAEB  2  29 01        		and #$1
00AAED  2  F0 24        		beq @redraw_extra
00AAEF  2  A2 00        		ldx #0
00AAF1  2  86 00        		stx $0
00AAF3  2  AC 00 03     		ldy VRAM_Buffer1_Offset
00AAF6  2               @more_bytes:
00AAF6  2  BD B7 AA     		lda menu_text, x
00AAF9  2  C9 25        		cmp #$25 ; %
00AAFB  2  D0 05        		bne @draw_menu_byte
00AAFD  2  20 63 AA     		jsr GetSelectedValue
00AB00  2  E6 00        		inc $0
00AB02  2               @draw_menu_byte:
00AB02  2  99 01 03     		sta VRAM_Buffer1, y
00AB05  2  BD B7 AA     		lda menu_text, x
00AB08  2  E8           		inx
00AB09  2  C8           		iny
00AB0A  2  C9 00        		cmp #0
00AB0C  2  D0 E8        		bne @more_bytes
00AB0E  2  88           		dey
00AB0F  2  8C 00 03     		sty VRAM_Buffer1_Offset
00AB12  2  60           		rts
00AB13  2               @redraw_extra:
00AB13  2  20 8E AA     		jsr DrawRuleNumber
00AB16  2  20 29 AB     		jsr DrawRuleCursor
00AB19  2  20 64 AB     		jsr DrawMushroomIcon
00AB1C  2  4C B8 A9     		jmp RedrawFrameNumbersInner
00AB1F  2               
00AB1F  2               ;-------------------------------------------------------------------------------------
00AB1F  2               
00AB1F  2               RuleCursorData:
00AB1F  2  22 CA 06 24  	.byte $22, $ca, $06, $24, $24, $24, $24, $24, $24, $00
00AB23  2  24 24 24 24  
00AB27  2  24 00        
00AB29  2               
00AB29  2               DrawRuleCursor:
00AB29  2  AD 17 07     		lda RuleIndex
00AB2C  2  D0 05        		bne @initialized
00AB2E  2  A9 04        		lda #4
00AB30  2  8D 17 07     		sta RuleIndex
00AB33  2               @initialized:
00AB33  2  A0 09        		ldy #9
00AB35  2  AD 00 03     		lda VRAM_Buffer1_Offset
00AB38  2  18           		clc
00AB39  2  69 09        		adc #9
00AB3B  2  8D 00 03     		sta VRAM_Buffer1_Offset
00AB3E  2  AA           		tax
00AB3F  2               WriteRuleCursor:
00AB3F  2  B9 1F AB     		lda RuleCursorData,y
00AB42  2  9D 01 03     		sta VRAM_Buffer1,x
00AB45  2  CA           		dex
00AB46  2  88           		dey
00AB47  2  10 F6        		bpl WriteRuleCursor
00AB49  2  AD 00 03     		lda VRAM_Buffer1_Offset
00AB4C  2  38           		sec
00AB4D  2  E9 06        		sbc #6
00AB4F  2  6D 17 07     		adc RuleIndex
00AB52  2  AA           		tax
00AB53  2  CA           		dex
00AB54  2  A9 29        		lda #$29
00AB56  2  9D 01 03     		sta VRAM_Buffer1,x
00AB59  2  60           		rts
00AB5A  2               
00AB5A  2               MushroomIconData:
00AB5A  2  22 29 87 24  		.byte $22, $29, $87, $24, $24, $24, $24, $24, $24, $24
00AB5E  2  24 24 24 24  
00AB62  2  24 24        
00AB64  2               DrawMushroomIcon:
00AB64  2  A0 0A        		ldy #$0a
00AB66  2  AD 00 03     		lda VRAM_Buffer1_Offset
00AB69  2  18           		clc
00AB6A  2  69 0A        		adc #$0a
00AB6C  2  8D 00 03     		sta VRAM_Buffer1_Offset
00AB6F  2  AA           		tax
00AB70  2               IconDataRead:
00AB70  2  B9 5A AB     		lda MushroomIconData,y
00AB73  2  9D 01 03     		sta VRAM_Buffer1,x
00AB76  2  CA           		dex
00AB77  2  88           		dey
00AB78  2  10 F6        		bpl IconDataRead
00AB7A  2  AD 04 60     		lda WRAM_MenuIndex
00AB7D  2  C9 04        		cmp #4
00AB7F  2  30 03        		bmi FirstFour
00AB81  2  18           		clc
00AB82  2  69 02        		adc #2
00AB84  2               FirstFour:
00AB84  2  6D 00 03     		adc VRAM_Buffer1_Offset
00AB87  2  AA           		tax
00AB88  2  A9 CE        		lda #$ce
00AB8A  2  9D FA 02     		sta VRAM_Buffer1+3-$0a,x
00AB8D  2  60           		rts
00AB8E  2               
00AB8E  2               rule_input:
00AB8E  2  AE 17 07     		ldx RuleIndex
00AB91  2  C9 02        		cmp #Left_Dir
00AB93  2  D0 04        		bne @test_right
00AB95  2  CA           		dex
00AB96  2  4C 9E AB     		jmp @rule_hori
00AB99  2               @test_right:
00AB99  2  C9 01        		cmp #Right_Dir
00AB9B  2  D0 11        		bne @test_down
00AB9D  2  E8           		inx
00AB9E  2               @rule_hori:
00AB9E  2  E0 01        		cpx #1
00ABA0  2  10 02        		bpl @test_high
00ABA2  2  A2 04        		ldx #4
00ABA4  2               @test_high:
00ABA4  2  E0 05        		cpx #5
00ABA6  2  D0 02        		bne @save_index
00ABA8  2  A2 01        		ldx #1
00ABAA  2               @save_index:
00ABAA  2  8E 17 07     		stx RuleIndex
00ABAD  2  60           		rts
00ABAE  2               @test_down:
00ABAE  2  C9 04        		cmp #Down_Dir
00ABB0  2  D0 05        		bne @test_up
00ABB2  2  A9 FF        		lda #$ff
00ABB4  2  4C BD AB     		jmp @update
00ABB7  2               @test_up:
00ABB7  2  C9 08        		cmp #Up_Dir
00ABB9  2  D0 18        		bne rule_done
00ABBB  2  A9 01        		lda #$01
00ABBD  2               @update:
00ABBD  2  AC 17 07     		ldy RuleIndex
00ABC0  2  88           		dey
00ABC1  2  18           		clc
00ABC2  2  71 04        		adc ($04),y
00ABC4  2  30 09        		bmi @negative
00ABC6  2  C9 0A        		cmp #10
00ABC8  2  30 07        		bmi @save_digit
00ABCA  2  A9 00        		lda #0
00ABCC  2  4C D1 AB     		jmp @save_digit
00ABCF  2               @negative:
00ABCF  2  A9 09        		lda #9
00ABD1  2               @save_digit:
00ABD1  2  91 04        		sta ($04), y
00ABD3  2               rule_done:
00ABD3  2  60           		rts
00ABD4  2               
00ABD4  2               menu_input:
00ABD4  2  C9 02        		cmp #Left_Dir
00ABD6  2  D0 06        		bne @check_right
00ABD8  2  A9 FF        		lda #$ff
00ABDA  2  85 00        		sta $0
00ABDC  2  D0 08        		bne @set_mask
00ABDE  2               @check_right:
00ABDE  2  C9 01        		cmp #Right_Dir
00ABE0  2  D0 F1        		bne rule_done
00ABE2  2  A9 01        		lda #$01
00ABE4  2  85 00        		sta $0
00ABE6  2               @set_mask:
00ABE6  2  AE 04 60     		ldx WRAM_MenuIndex
00ABE9  2  CA           		dex
00ABEA  2  30 0E        		bmi @world_selected
00ABEC  2  D0 32        		bne @check_pups
00ABEE  2  AD 5C 07     		lda LevelNumber ; level
00ABF1  2  18           		clc
00ABF2  2  65 00        		adc $00
00ABF4  2  29 03        		and #$03
00ABF6  2  8D 5C 07     		sta LevelNumber
00ABF9  2  60           		rts
00ABFA  2               @world_selected:
00ABFA  2  AD 5F 07     		lda WorldNumber
00ABFD  2  18           		clc
00ABFE  2  65 00        		adc $00
00AC00  2  AE FF 07     		ldx BANK_SELECTED
00AC03  2  E0 08        		cpx #BANK_ORG
00AC05  2  D0 05        		bne @world_lost
00AC07  2  29 07        		and #$07
00AC09  2  4C 1C AC     		jmp @save_world
00AC0C  2               @world_lost:
00AC0C  2  C9 0D        		cmp #$0D
00AC0E  2  90 0C        		bcc @save_world
00AC10  2  A5 00        		lda $0
00AC12  2  C9 01        		cmp #1 ; going right
00AC14  2  F0 04        		beq @going_left
00AC16  2  A9 0C        		lda #$0C
00AC18  2  D0 02        		bne @save_world
00AC1A  2               @going_left:
00AC1A  2  A9 00        		lda #$00
00AC1C  2               @save_world:
00AC1C  2  8D 5F 07     		sta WorldNumber
00AC1F  2  60           		rts
00AC20  2               @check_pups:
00AC20  2  CA           		dex
00AC21  2  D0 0C        		bne @hero_selected
00AC23  2  AD E3 07     		lda PowerUps
00AC26  2  18           		clc
00AC27  2  65 00        		adc $00
00AC29  2  29 03        		and #$03
00AC2B  2  8D E3 07     		sta PowerUps
00AC2E  2               @keep_peach:
00AC2E  2  60           		rts
00AC2F  2               @hero_selected:
00AC2F  2  AD 94 61     		lda WRAM_IsContraMode
00AC32  2  D0 FA        		bne @keep_peach
00AC34  2  AD 53 07     		lda CurrentPlayer
00AC37  2  18           		clc
00AC38  2  65 01        		adc $01
00AC3A  2  29 01        		and #$01
00AC3C  2  8D 53 07     		sta CurrentPlayer
00AC3F  2  4C BF 9D     		jmp LL_UpdatePlayerChange
00AC42  2               
00AC42  2               next_task:
00AC42  2  A2 0F        		ldx #4*4-1
00AC44  2  A9 00        		lda #0
00AC46  2  8D 01 03     		sta VRAM_Buffer1
00AC49  2  8D 00 03     		sta VRAM_Buffer1_Offset
00AC4C  2               @reset_next:
00AC4C  2  9D 04 02     		sta Sprite_Data+4, x
00AC4F  2  CA           		dex
00AC50  2  10 FA        		bpl @reset_next
00AC52  2  20 65 AC     		jsr WriteRulePointer
00AC55  2  A0 03        		ldy #3
00AC57  2               @copy_rule:
00AC57  2  B1 04        		lda ($04), y
00AC59  2  99 D9 07     		sta SavedRule, y
00AC5C  2  88           		dey
00AC5D  2  10 F8        		bpl @copy_rule
00AC5F  2  EE 72 07     		inc OperMode_Task
00AC62  2  4C 08 FF     		jmp ReturnBank
00AC65  2               
00AC65  2               WriteRulePointer:
00AC65  2  AD 5F 07     		lda WorldNumber
00AC68  2  0A           		asl ; *=2
00AC69  2  0A           		asl ; *=4
00AC6A  2  0A           		asl ; *=8
00AC6B  2  0A           		asl ; *=16
00AC6C  2  85 04        		sta $04
00AC6E  2  AD 5C 07     		lda LevelNumber
00AC71  2  0A           		asl ; *=2
00AC72  2  0A           		asl ; *=4
00AC73  2  18           		clc
00AC74  2  65 04        		adc $04
00AC76  2  AE FF 07     		ldx BANK_SELECTED
00AC79  2  E0 08        		cpx #BANK_ORG
00AC7B  2  F0 0C        		beq @is_org
00AC7D  2  18           		clc
00AC7E  2  69 82        		adc #<WRAM_LostRules
00AC80  2  85 04        		sta $04
00AC82  2  A9 00        		lda #0
00AC84  2  69 62        		adc #>WRAM_LostRules
00AC86  2  85 05        		sta $05
00AC88  2  60           		rts
00AC89  2               @is_org:
00AC89  2  18           		clc
00AC8A  2  69 02        		adc #<WRAM_OrgRules
00AC8C  2  85 04        		sta $04
00AC8E  2  A9 00        		lda #0
00AC90  2  69 62        		adc #>WRAM_OrgRules
00AC92  2  85 05        		sta $05
00AC94  2  60           		rts
00AC95  2               
00AC95  2               toggle_second_quest:
00AC95  2  AD FF 07     		lda BANK_SELECTED
00AC98  2  C9 08        		cmp #BANK_ORG
00AC9A  2  D0 30        		bne @not_org
00AC9C  2  AD 6A 07     		lda PrimaryHardMode
00AC9F  2  49 01        		eor #1
00ACA1  2  8D 6A 07     		sta PrimaryHardMode
00ACA4  2  AE 00 03     		ldx VRAM_Buffer1_Offset
00ACA7  2  A9 3F        		lda #$3F
00ACA9  2  9D 01 03     		sta VRAM_Buffer1,x
00ACAC  2  A9 00        		lda #$00
00ACAE  2  9D 02 03     		sta VRAM_Buffer1+1,x
00ACB1  2  9D 05 03     		sta VRAM_Buffer1+4,x
00ACB4  2  A9 01        		lda #$01
00ACB6  2  9D 03 03     		sta VRAM_Buffer1+2,x
00ACB9  2  A9 22        		lda #$22 ; Original color
00ACBB  2  AC 6A 07     		ldy PrimaryHardMode
00ACBE  2  F0 02        		beq @set_default
00ACC0  2  A9 05        		lda #$05 ; Hardmode color
00ACC2  2               @set_default:
00ACC2  2  9D 04 03     		sta VRAM_Buffer1+3,x
00ACC5  2  E8           		inx
00ACC6  2  E8           		inx
00ACC7  2  E8           		inx
00ACC8  2  E8           		inx
00ACC9  2  8D 00 03     		sta VRAM_Buffer1_Offset
00ACCC  2               @not_org:
00ACCC  2  60           		rts
00ACCD  2               
00ACCD  2               nuke_timer:
00ACCD  2  A9 00        		lda #0
00ACCF  2  8D 80 07     		sta SelectTimer
00ACD2  2  4C 08 FF     		jmp ReturnBank
00ACD5  2               
00ACD5  2               next_task_proxy:
00ACD5  2  4C 42 AC     		jmp next_task
00ACD8  2               
00ACD8  2               PracticeTitleMenu:
00ACD8  2  20 65 AC     		jsr WriteRulePointer
00ACDB  2  20 E6 AA     		jsr draw_menu
00ACDE  2  AD 4A 07     		lda JoypadBitMask
00ACE1  2  0D FC 06     		ora SavedJoypadBits
00ACE4  2  F0 E7        		beq nuke_timer
00ACE6  2  AE 80 07     		ldx SelectTimer
00ACE9  2  D0 37        		bne @dec_timer
00ACEB  2  A2 20        		ldx #32
00ACED  2  8E 80 07     		stx SelectTimer
00ACF0  2  C9 10        		cmp #Start_Button
00ACF2  2  F0 E1        		beq next_task_proxy
00ACF4  2  C9 20        		cmp #Select_Button
00ACF6  2  D0 10        		bne @check_b
00ACF8  2  AE 04 60     		ldx WRAM_MenuIndex
00ACFB  2  E8           		inx
00ACFC  2  E0 05        		cpx #5
00ACFE  2  D0 02        		bne @save_menu_index
00AD00  2  A2 00        		ldx #0
00AD02  2               @save_menu_index:
00AD02  2  8E 04 60     		stx WRAM_MenuIndex
00AD05  2  4C 22 AD     		jmp @dec_timer
00AD08  2               @check_b:
00AD08  2  C9 40        		cmp #B_Button
00AD0A  2  D0 06        		bne @check_input
00AD0C  2  20 95 AC     		jsr toggle_second_quest
00AD0F  2  4C 22 AD     		jmp @dec_timer
00AD12  2               @check_input:
00AD12  2  AE 04 60     		ldx WRAM_MenuIndex
00AD15  2  E0 04        		cpx #4
00AD17  2  D0 06        		bne @check_menu_input
00AD19  2  20 8E AB     		jsr rule_input
00AD1C  2  4C 22 AD     		jmp @dec_timer
00AD1F  2               @check_menu_input:
00AD1F  2  20 D4 AB     		jsr menu_input
00AD22  2               @dec_timer:
00AD22  2  AE 80 07     		ldx SelectTimer
00AD25  2  CA           		dex
00AD26  2  8E 80 07     		stx SelectTimer
00AD29  2  4C 08 FF     		jmp ReturnBank
00AD2C  2               
00AD2C  2               begin_save:
00AD2C  2  AD FF 07     		lda BANK_SELECTED
00AD2F  2  8D 0B 60     		sta WRAM_SaveStateBank
00AD32  2  AD 76 07     		lda GamePauseStatus
00AD35  2  09 02        		ora #02
00AD37  2  8D 76 07     		sta GamePauseStatus
00AD3A  2  AD 05 60     		lda WRAM_PracticeFlags
00AD3D  2  09 02        		ora #PF_SaveState
00AD3F  2  8D 05 60     		sta WRAM_PracticeFlags
00AD42  2  EE 74 07     		inc DisableScreenFlag
00AD45  2  AD 07 60     		lda WRAM_DelaySaveFrames
00AD48  2  8D 09 60     		sta WRAM_SaveFramesLeft
00AD4B  2  A9 00        		lda #0
00AD4D  2  8D 15 40     		sta SND_MASTERCTRL_REG
00AD50  2  60           		rts
00AD51  2               
00AD51  2               begin_load:
00AD51  2  AD 0B 60     		lda WRAM_SaveStateBank
00AD54  2  CD FF 07     		cmp BANK_SELECTED
00AD57  2  D0 1E        		bne @invalid_save
00AD59  2  AD 76 07     		lda GamePauseStatus
00AD5C  2  09 02        		ora #02
00AD5E  2  8D 76 07     		sta GamePauseStatus
00AD61  2  AD 05 60     		lda WRAM_PracticeFlags
00AD64  2  09 04        		ora #PF_LoadState
00AD66  2  8D 05 60     		sta WRAM_PracticeFlags
00AD69  2  EE 74 07     		inc DisableScreenFlag
00AD6C  2  AD 07 60     		lda WRAM_DelaySaveFrames
00AD6F  2  8D 09 60     		sta WRAM_SaveFramesLeft
00AD72  2  A9 00        		lda #$00
00AD74  2  8D 15 40     		sta SND_MASTERCTRL_REG
00AD77  2               @invalid_save:
00AD77  2  60           		rts
00AD78  2               
00AD78  2               run_save_load:
00AD78  2  29 02        		and #PF_SaveState
00AD7A  2  F0 03        		beq @load_state
00AD7C  2  4C 7F AF     		jmp SaveState
00AD7F  2               @load_state:
00AD7F  2  4C 7B AE     		jmp LoadState
00AD82  2               
00AD82  2               PracticeOnFrame:
00AD82  2  20 88 AD     		jsr PracticeOnFrameInner
00AD85  2  4C 08 FF     		jmp ReturnBank
00AD88  2               
00AD88  2               PracticeOnFrameInner:
00AD88  2  AD 05 60     		lda WRAM_PracticeFlags
00AD8B  2  29 06        		and #PF_SaveState|PF_LoadState
00AD8D  2  F0 03        		beq @no_queued_commands
00AD8F  2  4C 78 AD     		jmp run_save_load
00AD92  2               @no_queued_commands:
00AD92  2  AD FF 07     		lda BANK_SELECTED
00AD95  2  C9 08        		cmp #BANK_ORG
00AD97  2  D0 06        		bne @lost_sound
00AD99  2  20 44 80     		jsr SoundEngine
00AD9C  2  4C A2 AD     		jmp @read_keypads
00AD9F  2               @lost_sound:
00AD9F  2  20 78 8D     		jsr LL_SoundEngine
00ADA2  2               @read_keypads:
00ADA2  2  AD FC 06     		lda SavedJoypad1Bits
00ADA5  2  0D 4A 07     		ora JoypadBitMask
00ADA8  2  8D 5A 07     		sta LastInputBits
00ADAB  2  20 DC 9A     		jsr ReadJoypads
00ADAE  2  AD 4A 07     		lda JoypadBitMask
00ADB1  2  0D FC 06     		ora SavedJoypadBits
00ADB4  2  F0 28        		beq @pause_things
00ADB6  2  CD 5A 07     		cmp LastInputBits
00ADB9  2  F0 23        		beq @pause_things
00ADBB  2  CD 0E 60     		cmp WRAM_SaveButtons
00ADBE  2  D0 03        		bne @no_begin_save
00ADC0  2  4C 2C AD     		jmp begin_save
00ADC3  2               @no_begin_save:
00ADC3  2  CD 0F 60     		cmp WRAM_LoadButtons
00ADC6  2  D0 03        		bne @no_begin_load
00ADC8  2  4C 51 AD     		jmp begin_load
00ADCB  2               @no_begin_load:
00ADCB  2  CD 11 60     		cmp WRAM_RestartButtons
00ADCE  2  D0 03        		bne @no_restart_level
00ADD0  2  4C 8C B1     		jmp RequestRestartLevel
00ADD3  2               @no_restart_level:
00ADD3  2  CD 10 60     		cmp WRAM_TitleButtons
00ADD6  2  D0 06        		bne @pause_things
00ADD8  2  AD FF 07     		lda BANK_SELECTED
00ADDB  2  4C 5B FF     		jmp StartBank
00ADDE  2               @pause_things:
00ADDE  2  AD 70 07     		lda OperMode
00ADE1  2  C9 02        		cmp #VictoryModeValue
00ADE3  2  F0 0B        		beq @check_pause
00ADE5  2  C9 01        		cmp #GameModeValue
00ADE7  2  D0 0A        		bne @exit
00ADE9  2  AD 72 07     		lda OperMode_Task
00ADEC  2  C9 03        		cmp #$03
00ADEE  2  30 03        		bmi @exit
00ADF0  2               @check_pause:
00ADF0  2               		; TODO RENABLE
00ADF0  2               		; jsr HandleRestarts ; Wont return if it did something
00ADF0  2  4C 23 A4     		jmp PauseMenu
00ADF3  2               @exit:
00ADF3  2  60           		rts
00ADF4  2               
00ADF4  2               PrintHexByte:
00ADF4  2  85 00        		sta $0
00ADF6  2  4A           		lsr
00ADF7  2  4A           		lsr
00ADF8  2  4A           		lsr
00ADF9  2  4A           		lsr
00ADFA  2  20 FF AD     		jsr DoNibble
00ADFD  2  A5 00        		lda $0
00ADFF  2               DoNibble:
00ADFF  2  29 0F        		and #$0f
00AE01  2  9D 04 03     		sta VRAM_Buffer1+3,x
00AE04  2  E8           		inx
00AE05  2               DontUpdateSockHash:
00AE05  2  60           		rts
00AE06  2               
00AE06  2               ForceUpdateSockHashInner:
00AE06  2  AD 05 60     		lda WRAM_PracticeFlags
00AE09  2  29 20                and #PF_DisablePracticeInfo
00AE0B  2  D0 F8                bne DontUpdateSockHash
00AE0D  2  AD 00 04     		lda SprObject_X_MoveForce ; Player force
00AE10  2  85 03        		sta $3
00AE12  2  A5 86        		lda SprObject_X_Position ; Player X
00AE14  2  85 02        		sta $2
00AE16  2  A5 6D        		lda SprObject_PageLoc ; Player page
00AE18  2  85 01        		sta $1
00AE1A  2  A5 CE        		lda SprObject_Y_Position ; Player Y
00AE1C  2  49 FF        		eor #$ff
00AE1E  2  4A           		lsr
00AE1F  2  4A           		lsr
00AE20  2  4A           		lsr
00AE21  2  90 15        		bcc something_or_other
00AE23  2  48           		pha
00AE24  2  18           		clc
00AE25  2  A9 80        		lda #$80
00AE27  2  65 03        		adc $3
00AE29  2  85 03        		sta $3
00AE2B  2  A5 02        		lda $2
00AE2D  2  69 02        		adc #2
00AE2F  2  85 02        		sta $2
00AE31  2  A5 01        		lda $1
00AE33  2  69 00        		adc #0
00AE35  2  85 01        		sta $1
00AE37  2  68           		pla
00AE38  2               something_or_other:
00AE38  2  85 04        		sta $04
00AE3A  2  0A           		asl
00AE3B  2  0A           		asl
00AE3C  2  65 04        		adc $04
00AE3E  2  65 02        		adc $2
00AE40  2  85 02        		sta $2
00AE42  2  A5 01        		lda $1
00AE44  2  69 00        		adc #0
00AE46  2  85 01        		sta $1
00AE48  2  AE 00 03     		ldx VRAM_Buffer1_Offset
00AE4B  2  D0 2A        		bne skip_sock_hash
00AE4D  2               draw_sock_hash:
00AE4D  2  A9 20        		lda #$20
00AE4F  2  8D 01 03     		sta VRAM_Buffer1
00AE52  2  A9 62        		lda #$62 ;
00AE54  2  8D 02 03     		sta VRAM_Buffer1+1
00AE57  2  A9 06        		lda #$06 ; len
00AE59  2  8D 03 03     		sta VRAM_Buffer1+2
00AE5C  2  A2 00        		ldx #0
00AE5E  2  A5 01        		lda $1
00AE60  2  20 F4 AD     		jsr PrintHexByte
00AE63  2  A5 02        		lda $2
00AE65  2  20 F4 AD     		jsr PrintHexByte
00AE68  2  A5 03        		lda $3
00AE6A  2  20 F4 AD     		jsr PrintHexByte
00AE6D  2  A9 00        		lda #0
00AE6F  2  9D 04 03     		sta VRAM_Buffer1+3, x
00AE72  2  A9 09        		lda #$09
00AE74  2  8D 00 03     		sta VRAM_Buffer1_Offset
00AE77  2               skip_sock_hash:
00AE77  2  60           		rts
00AE78  2               
00AE78  2               ForceUpdateSockHash:
00AE78  2  4C 08 FF     		jmp ReturnBank
00AE7B  2               
00AE7B  2               LoadState:
00AE7B  2  CE 09 60     		dec WRAM_SaveFramesLeft
00AE7E  2  F0 09        		beq @do_loadstate
00AE80  2  AD 76 07     		lda GamePauseStatus
00AE83  2  09 02        		ora #02
00AE85  2  8D 76 07     		sta GamePauseStatus
00AE88  2  60           		rts
00AE89  2               @do_loadstate:
00AE89  2  A9 FF        		lda #$FF
00AE8B  2  8D FB 63     		sta WRAM_Timer+1 ; Invalidate timer
00AE8E  2  A2 7F        		ldx #$7F
00AE90  2               @save_wram:
00AE90  2  BD CB 6C     		lda WRAM_SaveWRAM, x
00AE93  2  9D 14 60     		sta WRAM_ToSaveFile, x
00AE96  2  CA           		dex
00AE97  2  10 F7        		bpl @save_wram
00AE99  2  A2 00        		ldx #0
00AE9B  2               @save_level:
00AE9B  2  BD 4B 6D     		lda WRAM_SaveLevel, x
00AE9E  2  9D 94 60     		sta WRAM_LevelData, x
00AEA1  2  E8           		inx
00AEA2  2  D0 F7        		bne @save_level
00AEA4  2               
00AEA4  2  AD 70 07     		lda OperMode
00AEA7  2  CD 3B 6C     		cmp WRAM_SaveRAM+OperMode
00AEAA  2  D0 18        		bne @restore_pal
00AEAC  2  AD 72 07     		lda OperMode_Task
00AEAF  2  CD 3D 6C     		cmp WRAM_SaveRAM+OperMode_Task
00AEB2  2  D0 10        		bne @restore_pal
00AEB4  2  AD 53 07     		lda CurrentPlayer
00AEB7  2  CD 1E 6C     		cmp WRAM_SaveRAM+CurrentPlayer
00AEBA  2  D0 08        		bne @restore_pal
00AEBC  2  AD 4E 07     		lda AreaType
00AEBF  2  CD 19 6C     		cmp WRAM_SaveRAM+AreaType
00AEC2  2  F0 20        		beq @copy_ram
00AEC4  2               @restore_pal:
00AEC4  2  AD 02 20     		lda PPU_STATUS
00AEC7  2  A9 3F        		lda #$3F
00AEC9  2  8D 06 20     		sta PPU_ADDRESS
00AECC  2  A9 00        		lda #$00
00AECE  2  8D 06 20     		sta PPU_ADDRESS
00AED1  2  AD 07 20     		lda PPU_DATA ; Internal buffer; throw
00AED4  2               
00AED4  2  A2 00        		ldx #$0
00AED6  2  A0 20        		ldy #$20
00AED8  2               @copy_pal:
00AED8  2  BD 4B 76     		lda WRAM_SavePAL, x
00AEDB  2  8D 07 20     		sta PPU_DATA
00AEDE  2  E8           		inx
00AEDF  2  88           		dey
00AEE0  2  D0 F6        		bne @copy_pal
00AEE2  2  A2 00        		ldx #0
00AEE4  2               @copy_ram:
00AEE4  2  BD CB 64     		lda WRAM_SaveRAM, x
00AEE7  2  95 00        		sta $000, x
00AEE9  2  BD CB 65     		lda WRAM_SaveRAM+$100, x
00AEEC  2  9D 00 01     		sta $100, x
00AEEF  2  BD CB 66     		lda WRAM_SaveRAM+$200, x
00AEF2  2  9D 00 02     		sta $200, x
00AEF5  2  BD CB 67     		lda WRAM_SaveRAM+$300, x
00AEF8  2  9D 00 03     		sta $300, x
00AEFB  2  BD CB 68     		lda WRAM_SaveRAM+$400, x
00AEFE  2  9D 00 04     		sta $400, x
00AF01  2  BD CB 69     		lda WRAM_SaveRAM+$500, x
00AF04  2  9D 00 05     		sta $500, x
00AF07  2  BD CB 6A     		lda WRAM_SaveRAM+$600, x
00AF0A  2  9D 00 06     		sta $600, x
00AF0D  2  BD CB 6B     		lda WRAM_SaveRAM+$700, x
00AF10  2  9D 00 07     		sta $700, x
00AF13  2  E8           		inx
00AF14  2  D0 CE        		bne @copy_ram
00AF16  2  AD 02 20     		lda PPU_STATUS
00AF19  2  A9 20        		lda #$20
00AF1B  2  8D 06 20     		sta PPU_ADDRESS
00AF1E  2  A9 00        		lda #$00
00AF20  2  8D 06 20     		sta PPU_ADDRESS
00AF23  2               
00AF23  2  A2 00        		ldx #0
00AF25  2               @copy_nt:
00AF25  2  BD 4B 6E     		lda WRAM_SaveNT, x
00AF28  2  8D 07 20     		sta PPU_DATA
00AF2B  2  BD 4B 6F     		lda WRAM_SaveNT+$100, x
00AF2E  2  8D 07 20     		sta PPU_DATA
00AF31  2  BD 4B 70     		lda WRAM_SaveNT+$200, x
00AF34  2  8D 07 20     		sta PPU_DATA
00AF37  2  BD 4B 71     		lda WRAM_SaveNT+$300, x
00AF3A  2  8D 07 20     		sta PPU_DATA
00AF3D  2  BD 4B 72     		lda WRAM_SaveNT+$400, x
00AF40  2  8D 07 20     		sta PPU_DATA
00AF43  2  BD 4B 73     		lda WRAM_SaveNT+$500, x
00AF46  2  8D 07 20     		sta PPU_DATA
00AF49  2  BD 4B 74     		lda WRAM_SaveNT+$600, x
00AF4C  2  8D 07 20     		sta PPU_DATA
00AF4F  2  BD 4B 75     		lda WRAM_SaveNT+$700, x
00AF52  2  8D 07 20     		sta PPU_DATA
00AF55  2  E8           		inx
00AF56  2  D0 CD        		bne @copy_nt
00AF58  2               
00AF58  2  A2 65        		ldx #(WRAM_LostEnd - WRAM_LostStart)-1
00AF5A  2               @copy_lost:
00AF5A  2  BD 65 64     		lda WRAM_SaveLost, x
00AF5D  2  9D FF 63     		sta WRAM_LostStart, x
00AF60  2  CA           		dex
00AF61  2  10 F7        		bpl @copy_lost
00AF63  2  AD 76 07     		lda GamePauseStatus
00AF66  2  09 02        		ora #2
00AF68  2  8D 76 07     		sta GamePauseStatus
00AF6B  2  AD 05 60     		lda WRAM_PracticeFlags
00AF6E  2  29 FB        		and #PF_LoadState^$FF
00AF70  2  8D 05 60     		sta WRAM_PracticeFlags
00AF73  2  A9 00        		lda #0
00AF75  2  8D 74 07     		sta DisableScreenFlag
00AF78  2               		; Controllers will be read again this frame. Reset them (very buggy otherwise ;)).
00AF78  2  8D FC 06     		sta SavedJoypad1Bits
00AF7B  2  8D 4A 07     		sta JoypadBitMask
00AF7E  2  60           		rts
00AF7F  2               
00AF7F  2               SaveState:
00AF7F  2  CE 09 60     		dec WRAM_SaveFramesLeft
00AF82  2  F0 09        		beq @do_savestate
00AF84  2  AD 76 07     		lda GamePauseStatus
00AF87  2  09 02        		ora #02
00AF89  2  8D 76 07     		sta GamePauseStatus
00AF8C  2  60           		rts
00AF8D  2               @do_savestate:
00AF8D  2  AD 02 20     		lda PPU_STATUS
00AF90  2  A9 3F        		lda #$3F
00AF92  2  8D 06 20     		sta PPU_ADDRESS
00AF95  2  A9 00        		lda #$00
00AF97  2  8D 06 20     		sta PPU_ADDRESS
00AF9A  2  AD 07 20     		lda PPU_DATA ; Internal buffer; throw
00AF9D  2               
00AF9D  2  A2 00        		ldx #$0
00AF9F  2  A0 20        		ldy #$20
00AFA1  2               @copy_pal:
00AFA1  2  AD 07 20     		lda PPU_DATA
00AFA4  2  9D 4B 76     		sta WRAM_SavePAL, x
00AFA7  2  E8           		inx
00AFA8  2  88           		dey
00AFA9  2  D0 F6        		bne @copy_pal
00AFAB  2               
00AFAB  2  A2 7F        		ldx #$7F
00AFAD  2               @save_wram:
00AFAD  2  BD 14 60     		lda WRAM_ToSaveFile, x
00AFB0  2  9D CB 6C     		sta WRAM_SaveWRAM, x
00AFB3  2  CA           		dex
00AFB4  2  10 F7        		bpl @save_wram
00AFB6  2  A2 00        		ldx #0
00AFB8  2               @save_level:
00AFB8  2  BD 94 60     		lda WRAM_LevelData, x
00AFBB  2  9D 4B 6D     		sta WRAM_SaveLevel, x
00AFBE  2  E8           		inx
00AFBF  2  D0 F7        		bne @save_level
00AFC1  2               @copy_ram:
00AFC1  2  B5 00        		lda $000, x
00AFC3  2  9D CB 64     		sta WRAM_SaveRAM, x
00AFC6  2  BD 00 01     		lda $100, x
00AFC9  2  9D CB 65     		sta WRAM_SaveRAM+$100, x
00AFCC  2  BD 00 02     		lda $200, x
00AFCF  2  9D CB 66     		sta WRAM_SaveRAM+$200, x
00AFD2  2  BD 00 03     		lda $300, x
00AFD5  2  9D CB 67     		sta WRAM_SaveRAM+$300, x
00AFD8  2  BD 00 04     		lda $400, x
00AFDB  2  9D CB 68     		sta WRAM_SaveRAM+$400, x
00AFDE  2  BD 00 05     		lda $500, x
00AFE1  2  9D CB 69     		sta WRAM_SaveRAM+$500, x
00AFE4  2  BD 00 06     		lda $600, x
00AFE7  2  9D CB 6A     		sta WRAM_SaveRAM+$600, x
00AFEA  2  BD 00 07     		lda $700, x
00AFED  2  9D CB 6B     		sta WRAM_SaveRAM+$700, x
00AFF0  2  E8           		inx
00AFF1  2  D0 CE        		bne @copy_ram
00AFF3  2  AD 02 20     		lda PPU_STATUS
00AFF6  2  A9 20        		lda #$20
00AFF8  2  8D 06 20     		sta PPU_ADDRESS
00AFFB  2  A9 00        		lda #$00
00AFFD  2  8D 06 20     		sta PPU_ADDRESS
00B000  2  AD 07 20     		lda PPU_DATA ; Internal buffer; throw
00B003  2               
00B003  2  A2 00        		ldx #0
00B005  2               @copy_nt:
00B005  2  AD 07 20     		lda PPU_DATA
00B008  2  9D 4B 6E     		sta WRAM_SaveNT, x
00B00B  2  AD 07 20     		lda PPU_DATA
00B00E  2  9D 4B 6F     		sta WRAM_SaveNT+$100, x
00B011  2  AD 07 20     		lda PPU_DATA
00B014  2  9D 4B 70     		sta WRAM_SaveNT+$200, x
00B017  2  AD 07 20     		lda PPU_DATA
00B01A  2  9D 4B 71     		sta WRAM_SaveNT+$300, x
00B01D  2  AD 07 20     		lda PPU_DATA
00B020  2  9D 4B 72     		sta WRAM_SaveNT+$400, x
00B023  2  AD 07 20     		lda PPU_DATA
00B026  2  9D 4B 73     		sta WRAM_SaveNT+$500, x
00B029  2  AD 07 20     		lda PPU_DATA
00B02C  2  9D 4B 74     		sta WRAM_SaveNT+$600, x
00B02F  2  AD 07 20     		lda PPU_DATA
00B032  2  9D 4B 75     		sta WRAM_SaveNT+$700, x
00B035  2  E8           		inx
00B036  2  D0 CD        		bne @copy_nt
00B038  2               
00B038  2  A2 65        		ldx #(WRAM_LostEnd - WRAM_LostStart)-1
00B03A  2               @copy_lost:
00B03A  2  BD FF 63     		lda WRAM_LostStart, x
00B03D  2  9D 65 64     		sta WRAM_SaveLost, x
00B040  2  CA           		dex
00B041  2  10 F7        		bpl @copy_lost
00B043  2               
00B043  2               
00B043  2  AD 76 07     		lda GamePauseStatus
00B046  2  09 02        		ora #2
00B048  2  8D 76 07     		sta GamePauseStatus
00B04B  2  AD 05 60     		lda WRAM_PracticeFlags
00B04E  2  29 FD        		and #PF_SaveState^$FF
00B050  2  8D 05 60     		sta WRAM_PracticeFlags
00B053  2  A9 00        		lda #0
00B055  2  8D 74 07     		sta DisableScreenFlag
00B058  2  60           		rts
00B059  2               
00B059  2               
00B059  2               .macro RedrawUserVar name, off
00B059  2               		lda name
00B059  2               		sta $00
00B059  2               		lda name+1
00B059  2               		sta $01
00B059  2               		lda ($00), y
00B059  2               		jsr DivByTen
00B059  2               		sta VRAM_Buffer1+off+2
00B059  2               		txa
00B059  2               		jsr DivByTen
00B059  2               		sta VRAM_Buffer1+off+1
00B059  2               		stx VRAM_Buffer1+off+0
00B059  2               .endmacro
00B059  2               
00B059  2               noredraw_dec:
00B059  2  CE 0A 60     		dec WRAM_UserFramesLeft
00B05C  2               noredraw:
00B05C  2  4C 00 B1     		jmp UpdateStatusInput
00B05F  2               
00B05F  2               RedrawUserVars:
00B05F  2  AD 0A 60     		lda WRAM_UserFramesLeft
00B062  2  D0 F5        		bne noredraw_dec
00B064  2  AC 00 03     		ldy VRAM_Buffer1_Offset
00B067  2  D0 F3        		bne noredraw
00B069  2  A9 20        		lda #$20
00B06B  2  8D 01 03     		sta VRAM_Buffer1
00B06E  2  A9 71        		lda #$71
00B070  2  8D 02 03     		sta VRAM_Buffer1+1
00B073  2  A9 07        		lda #$07
00B075  2  8D 03 03     		sta VRAM_Buffer1+2
00B078  2  A9 24        		lda #$24
00B07A  2  8D 07 03     		sta VRAM_Buffer1+6
00B07D  2               
00B07D  2  AD FF 07     		lda BANK_SELECTED
00B080  2  C9 08        		cmp #BANK_ORG
00B082  2  F0 3B        		beq @is_org
00B084  2  AD FE 61 85  		RedrawUserVar WRAM_LostUser0, 3
00B088  2  00 AD FF 61  
00B08C  2  85 01 B1 00  
00B0A0  2  AD 00 62 85  		RedrawUserVar WRAM_LostUser1, 7
00B0A4  2  00 AD 01 62  
00B0A8  2  85 01 B1 00  
00B0BC  2  4C F7 B0     		jmp @terminate
00B0BF  2               @is_org:
00B0BF  2  AD FA 61 85  		RedrawUserVar WRAM_OrgUser0, 3
00B0C3  2  00 AD FB 61  
00B0C7  2  85 01 B1 00  
00B0DB  2  AD FC 61 85  		RedrawUserVar WRAM_OrgUser1, 7
00B0DF  2  00 AD FD 61  
00B0E3  2  85 01 B1 00  
00B0F7  2               @terminate:
00B0F7  2  8C 0B 03     		sty VRAM_Buffer1+$0A
00B0FA  2  AD 08 60     		lda WRAM_DelayUserFrames
00B0FD  2  8D 0A 60     		sta WRAM_UserFramesLeft
00B100  2               
00B100  2               UpdateStatusInput:
00B100  2  AD 05 60         lda WRAM_PracticeFlags
00B103  2  29 40        	and #PF_EnableInputDisplay
00B105  2  F0 03        	beq @exit
00B107  2  20 0D B1     	jsr DrawInputButtons
00B10A  2               @exit:
00B10A  2  4C 08 FF     	jmp ReturnBank
00B10D  2               DrawInputButtons:
00B10D  2  AC 4A 07     	ldy JoypadBitMask
00B110  2  84 03        	sty $03
00B112  2  A9 20        	lda #$20
00B114  2  8D 6B 76     	sta WRAM_StoredInputs
00B117  2  A9 51        	lda #$51
00B119  2  8D 6C 76     	sta WRAM_StoredInputs+1
00B11C  2  A9 07        	lda #$07
00B11E  2  8D 6D 76     	sta WRAM_StoredInputs+2
00B121  2  A9 24        	lda #$24
00B123  2  8D 72 76     	sta WRAM_StoredInputs+7
00B126  2               	;
00B126  2               	; Up
00B126  2               	;
00B126  2  A5 03        	lda $03
00B128  2  29 08        	and #Up_Dir
00B12A  2  F0 05        	beq NoUpStatus
00B12C  2  A9 1E        	lda #$1e
00B12E  2  4C 33 B1     	jmp WriteUp
00B131  2               NoUpStatus:
00B131  2  A9 28        	lda #$28
00B133  2               WriteUp:
00B133  2  8D 6E 76     	sta WRAM_StoredInputs+3
00B136  2               	;
00B136  2               	; Left
00B136  2               	;
00B136  2  A5 03        	lda $03
00B138  2  29 02        	and #Left_Dir
00B13A  2  F0 05        	beq NoLeftStatus
00B13C  2  A9 15        	lda #$15
00B13E  2  4C 43 B1     	jmp WriteLeft
00B141  2               NoLeftStatus:
00B141  2  A9 28        	lda #$28
00B143  2               WriteLeft:
00B143  2  8D 6F 76     	sta WRAM_StoredInputs+4
00B146  2               	;
00B146  2               	; Down
00B146  2               	;
00B146  2  A5 03        	lda $03
00B148  2  29 04        	and #Down_Dir
00B14A  2  F0 05        	beq NoDownStatus
00B14C  2  A9 0D        	lda #$0d
00B14E  2  4C 53 B1     	jmp WriteDown
00B151  2               NoDownStatus:
00B151  2  A9 28        	lda #$28
00B153  2               WriteDown:
00B153  2  8D 70 76     	sta WRAM_StoredInputs+5
00B156  2               	;
00B156  2               	; Right
00B156  2               	;
00B156  2  A5 03        	lda $03
00B158  2  29 01        	and #Right_Dir
00B15A  2  F0 05        	beq NoRightStatus
00B15C  2  A9 1B        	lda #$1b
00B15E  2  4C 63 B1     	jmp WriteRight
00B161  2               NoRightStatus:
00B161  2  A9 28        	lda #$28
00B163  2               WriteRight:
00B163  2  8D 71 76     	sta WRAM_StoredInputs+6
00B166  2               	;
00B166  2               	; B
00B166  2               	;
00B166  2  A5 03        	lda $03
00B168  2  29 40        	and #B_Button
00B16A  2  F0 05        	beq NoBStatus
00B16C  2  A9 0B        	lda #$0b
00B16E  2  4C 73 B1     	jmp WriteB
00B171  2               NoBStatus:
00B171  2  A9 28        	lda #$28
00B173  2               WriteB:
00B173  2  8D 73 76     	sta WRAM_StoredInputs+8
00B176  2               	;
00B176  2               	; A
00B176  2               	;
00B176  2  A5 03        	lda $03
00B178  2  29 80        	and #A_Button
00B17A  2  F0 05        	beq NoAStatus
00B17C  2  A9 0A        	lda #$0a
00B17E  2  4C 83 B1     	jmp WriteA
00B181  2               NoAStatus:
00B181  2  A9 28        	lda #$28
00B183  2               WriteA:
00B183  2  8D 74 76     	sta WRAM_StoredInputs+9
00B186  2  A9 00        	lda #$00
00B188  2  8D 75 76     	sta WRAM_StoredInputs+10 ; maybe redundant due to WRAM init?
00B18B  2  60           	rts
00B18C  2               
00B18C  2               RequestRestartLevel:
00B18C  2  A9 80        		lda #$80 ; REMOVE 0x80?
00B18E  2  8D 76 07     		sta GamePauseStatus
00B191  2  A2 00        		ldx #0
00B193  2  8E C6 07     		stx PauseModeFlag
00B196  2  E8           		inx
00B197  2  8E 77 07     		stx GamePauseTimer
00B19A  2  E8           		inx
00B19B  2  86 FA        		stx PauseSoundQueue
00B19D  2  AD 05 60     		lda WRAM_PracticeFlags
00B1A0  2  09 08        		ora #PF_RestartLevel
00B1A2  2  8D 05 60     		sta WRAM_PracticeFlags
00B1A5  2  A2 00        		ldx #$00
00B1A7  2  8E C4 07     		stx NoteLengthTblAdder ; Less hysterical music
00B1AA  2  8E 72 07     		stx OperMode_Task
00B1AD  2  8E 3C 07     		stx ScreenRoutineTask
00B1B0  2  8E 69 07     		stx DisableIntermediate
00B1B3  2  8E 52 07     		stx AltEntranceControl
00B1B6  2  8E 5B 07     		stx HalfwayPage
00B1B9  2  E8           		inx
00B1BA  2  8E 70 07     		stx OperMode
00B1BD  2  AD 16 60     		lda WRAM_LevelAreaPointer
00B1C0  2  8D 50 07     		sta AreaPointer
00B1C3  2  AD 17 60     		lda WRAM_LevelAreaType
00B1C6  2  8D 4E 07     		sta AreaType ; Probably not needed but whatever
00B1C9  2  EE 57 07     		inc FetchNewGameTimerFlag
00B1CC  2  60           		rts
00B1CD  2               
00B1CD  2               RestartLevel:
00B1CD  2  A9 00        		lda #$0
00B1CF  2  8D 0B 07     		sta PlayerChangeSizeFlag
00B1D2  2  AD 18 60     		lda WRAM_LevelIntervalTimerControl
00B1D5  2  8D 7F 07     		sta IntervalTimerControl
00B1D8  2  AD 19 60     		lda WRAM_LevelFrameCounter
00B1DB  2  85 09        		sta FrameCounter
00B1DD  2  AD 1A 60     		lda WRAM_LevelPlayerStatus
00B1E0  2  8D 56 07     		sta PlayerStatus
00B1E3  2  AD 1B 60     		lda WRAM_LevelPlayerSize
00B1E6  2  8D 54 07     		sta PlayerSize
00B1E9  2  A2 06        		ldx #6
00B1EB  2               @copy_random:
00B1EB  2  BD 1D 60     		lda WRAM_LevelRandomData, x
00B1EE  2  9D A7 07     		sta PseudoRandomBitReg,x
00B1F1  2  CA           		dex
00B1F2  2  10 F7        		bpl @copy_random
00B1F4  2  A2 03        		ldx #3
00B1F6  2               @copy_rule:
00B1F6  2  BD 24 60     		lda WRAM_LevelFrameRuleData, x
00B1F9  2  9D 76 76     		sta FrameRuleData, x
00B1FC  2  CA           		dex
00B1FD  2  10 F7        		bpl @copy_rule
00B1FF  2               
00B1FF  2  AD 05 60     		lda WRAM_PracticeFlags
00B202  2  29 F7        		and #PF_RestartLevel^$FF
00B204  2  8D 05 60     		sta WRAM_PracticeFlags
00B207  2  4C 08 FF     		jmp ReturnBank
00B20A  2               
00B20A  2               ProcessLevelLoad:
00B20A  2  AD 5C 07     		lda LevelNumber
00B20D  2  8D 14 60     		sta WRAM_LoadedLevel
00B210  2  AD 5F 07     		lda WorldNumber
00B213  2  8D 15 60     		sta WRAM_LoadedWorld
00B216  2  20 22 A8     		jsr AdvanceToRule
00B219  2  AD 70 07     		lda OperMode
00B21C  2  F0 43        		beq @done
00B21E  2  AD 05 60     		lda WRAM_PracticeFlags
00B221  2  29 08        		and #PF_RestartLevel
00B223  2  D0 A8        		bne RestartLevel
00B225  2  AD 05 60     		lda WRAM_PracticeFlags
00B228  2  29 10        		and #PF_LevelEntrySaved
00B22A  2  D0 35        		bne @done
00B22C  2  AD 7F 07     		lda IntervalTimerControl
00B22F  2  8D 18 60     		sta WRAM_LevelIntervalTimerControl
00B232  2  A5 09        		lda FrameCounter
00B234  2  8D 19 60     		sta WRAM_LevelFrameCounter
00B237  2  AD 56 07     		lda PlayerStatus
00B23A  2  8D 1A 60     		sta WRAM_LevelPlayerStatus
00B23D  2  AD 54 07     		lda PlayerSize
00B240  2  8D 1B 60     		sta WRAM_LevelPlayerSize
00B243  2  AD 05 60     		lda WRAM_PracticeFlags
00B246  2  09 10        		ora #PF_LevelEntrySaved
00B248  2  8D 05 60     		sta WRAM_PracticeFlags
00B24B  2  A2 06        		ldx #6
00B24D  2               @save_random:
00B24D  2  BD A7 07     		lda PseudoRandomBitReg,x
00B250  2  9D 1D 60     		sta WRAM_LevelRandomData, x
00B253  2  CA           		dex
00B254  2  10 F7        		bpl @save_random
00B256  2               
00B256  2  A2 03        		ldx #$3
00B258  2               @save_rule:
00B258  2  BD 76 76     		lda FrameRuleData, x
00B25B  2  9D 24 60     		sta WRAM_LevelFrameRuleData, x
00B25E  2  CA           		dex
00B25F  2  10 F7        		bpl @save_rule
00B261  2               @done:
00B261  2  4C 08 FF     		jmp ReturnBank
00B264  2               
00B264  2               PracticeInit:
00B264  2  A9 00        		lda #0
00B266  2  8D FA 63     		sta WRAM_Timer
00B269  2  8D FB 63     		sta WRAM_Timer+1
00B26C  2  8D 12 60     		sta WRAM_SlowMotion
00B26F  2  8D 13 60     		sta WRAM_SlowMotionLeft
00B272  2  8D 04 60     		sta WRAM_MenuIndex
00B275  2               		;
00B275  2               		; Dont reset the SaveStateBank right?
00B275  2               		;
00B275  2               		; sta WRAM_SaveStateBank
00B275  2  AD 05 60     		lda WRAM_PracticeFlags
00B278  2  29 E1        		and #((PF_SaveState|PF_LoadState|PF_RestartLevel|PF_LevelEntrySaved)^$ff)
00B27A  2  8D 05 60     		sta WRAM_PracticeFlags
00B27D  2  4C 08 FF     nosock:	jmp ReturnBank
00B280  2               
00B280  2               RedrawSockTimer:
00B280  2  AD 05 60     		lda WRAM_PracticeFlags
00B283  2  29 20        		and #PF_DisablePracticeInfo
00B285  2  D0 F6        		bne nosock
00B287  2  AE 00 03     		ldx VRAM_Buffer1_Offset
00B28A  2  A9 20        		lda #$20
00B28C  2  9D 01 03     		sta VRAM_Buffer1,x
00B28F  2  A9 69        		lda #$69
00B291  2  9D 02 03           	sta VRAM_Buffer1+1,x
00B294  2  A9 01              	lda #$01
00B296  2  9D 03 03           	sta VRAM_Buffer1+2,x
00B299  2  AD 05 60           	lda WRAM_PracticeFlags
00B29C  2  29 10              	and #PF_LevelEntrySaved
00B29E  2  D0 09              	bne @already_saved
00B2A0  2  AD 7F 07           	lda IntervalTimerControl
00B2A3  2  8D 1C 60           	sta WRAM_EntrySockTimer
00B2A6  2  4C B9 B2           	jmp @write_it
00B2A9  2               @already_saved:
00B2A9  2  AD 05 60     		lda WRAM_PracticeFlags
00B2AC  2  29 08              	and #PF_RestartLevel
00B2AE  2  F0 06              	beq @use_as_is
00B2B0  2  AD 1C 60           	lda WRAM_EntrySockTimer
00B2B3  2  4C B9 B2           	jmp @write_it
00B2B6  2               @use_as_is:
00B2B6  2  AD 7F 07     		lda IntervalTimerControl
00B2B9  2               @write_it:
00B2B9  2  9D 04 03     		sta VRAM_Buffer1+3,x
00B2BC  2  A9 00        		lda #0
00B2BE  2  9D 05 03     		sta VRAM_Buffer1+4,x
00B2C1  2  E8           		inx
00B2C2  2  E8           		inx
00B2C3  2  E8           		inx
00B2C4  2  E8           		inx
00B2C5  2  8E 00 03     		stx VRAM_Buffer1_Offset
00B2C8  2  4C 29 AA     		jmp RedrawFrameNumbers
00B2CB  2               
00B2CB  2               MagicByte0 = $70 ; P
00B2CB  2               MagicByte1 = $56 ; V
00B2CB  2               MagicByte2 = $35 ; 5
00B2CB  2               MagicByte3 = $35 ; 5
00B2CB  2               
00B2CB  2               ValidWRAMMagic:
00B2CB  2  AD 00 60     		lda WRAM_Magic+0
00B2CE  2  C9 70        		cmp #MagicByte0
00B2D0  2  D0 13        		bne @exit
00B2D2  2  AD 01 60     		lda WRAM_Magic+1
00B2D5  2  C9 56        		cmp #MagicByte1
00B2D7  2  D0 0C        		bne @exit
00B2D9  2  AD 02 60     		lda WRAM_Magic+2
00B2DC  2  C9 35        		cmp #MagicByte2
00B2DE  2  D0 05        		bne @exit
00B2E0  2  AD 03 60     		lda WRAM_Magic+3
00B2E3  2  C9 35        		cmp #MagicByte3
00B2E5  2               @exit:
00B2E5  2  60           		rts
00B2E6  2               
00B2E6  2               InitializeWRAM:
00B2E6  2  20 CB B2     		jsr ValidWRAMMagic
00B2E9  2  F0 03        		beq RamGoodExit
00B2EB  2  4C 4B B3     		jmp FactoryResetWRAM
00B2EE  2               RamGoodExit:
00B2EE  2  4C 08 FF     		jmp ReturnBank
00B2F1  2               
00B2F1  2               SetDefaultWRAM:
00B2F1  2  20 CB B2     		jsr ValidWRAMMagic
00B2F4  2  F0 F8        		beq RamGoodExit
00B2F6  2               
00B2F6  2  A9 70        		lda #MagicByte0
00B2F8  2  8D 00 60     		sta WRAM_Magic+0
00B2FB  2  A9 56        		lda #MagicByte1
00B2FD  2  8D 01 60     		sta WRAM_Magic+1
00B300  2  A9 35        		lda #MagicByte2
00B302  2  8D 02 60     		sta WRAM_Magic+2
00B305  2  A9 35        		lda #MagicByte3
00B307  2  8D 03 60     		sta WRAM_Magic+3
00B30A  2               
00B30A  2  A9 AD        		lda #<Player_Rel_XPos
00B30C  2  8D FA 61     		sta WRAM_OrgUser0
00B30F  2  8D FE 61     		sta WRAM_LostUser0
00B312  2  A9 03        		lda #>Player_Rel_XPos
00B314  2  8D FB 61     		sta WRAM_OrgUser0+1
00B317  2  8D FF 61     		sta WRAM_LostUser0+1
00B31A  2  A9 00        		lda #<SprObject_X_MoveForce
00B31C  2  8D FC 61     		sta WRAM_OrgUser1
00B31F  2  8D 00 62     		sta WRAM_LostUser1
00B322  2  A9 04        		lda #>SprObject_X_MoveForce
00B324  2  8D FD 61     		sta WRAM_OrgUser1+1
00B327  2  8D 01 62     		sta WRAM_LostUser1+1
00B32A  2               
00B32A  2  A9 1E        		lda #30
00B32C  2  8D 07 60     		sta WRAM_DelaySaveFrames
00B32F  2  A9 08        		lda #8
00B331  2  8D 08 60     		sta WRAM_DelayUserFrames
00B334  2               
00B334  2  A9 28        		lda #RESTART_LEVEL_BUTTONS
00B336  2  8D 11 60     		sta WRAM_RestartButtons
00B339  2  A9 24        		lda #RESTART_GAME_BUTTONS
00B33B  2  8D 10 60     		sta WRAM_TitleButtons
00B33E  2  A9 21        		lda #SAVE_STATE_BUTTONS
00B340  2  8D 0E 60     		sta WRAM_SaveButtons
00B343  2  A9 22        		lda #LOAD_STATE_BUTTONS
00B345  2  8D 0F 60     		sta WRAM_LoadButtons
00B348  2               		;
00B348  2               		; TODO : Sane init values
00B348  2               		;
00B348  2  4C 08 FF     		jmp ReturnBank
00B34B  2               
00B34B  2               FactoryResetWRAM:
00B34B  2  A2 60        		ldx #$60
00B34D  2               @copy_page:
00B34D  2  86 01        		stx $01
00B34F  2  A9 00        		lda #$00
00B351  2  85 00        		sta $00
00B353  2  A0 00        		ldy #$00
00B355  2               @copy_byte:
00B355  2  91 00        		sta ($00), Y
00B357  2  C8           		iny
00B358  2  D0 FB        		bne @copy_byte
00B35A  2  E8           		inx
00B35B  2  10 F0        		bpl @copy_page
00B35D  2  4C F1 B2     		jmp SetDefaultWRAM
00B360  2               
00B360  2               EndLevel:
00B360  2  20 66 B3     		jsr EndLevelInner
00B363  2  4C 08 FF     		jmp ReturnBank
00B366  2               
00B366  2               EndLevelInner:
00B366  2  AD 5F 07     		lda WorldNumber
00B369  2  0A           		asl ; *= 2
00B36A  2  0A           		asl ; *= 4
00B36B  2  0A           		asl ; *= 8
00B36C  2  0A           		asl ; *= 16
00B36D  2  85 00        		sta $00
00B36F  2  AD 5C 07     		lda LevelNumber
00B372  2  0A           		asl ; *= 2
00B373  2  65 00        		adc $00
00B375  2  AA           		tax
00B376  2  AD FF 07     		lda BANK_SELECTED
00B379  2  C9 08        		cmp #BANK_ORG
00B37B  2  F0 0D        		beq @is_org
00B37D  2  BD 92 63     		lda WRAM_LostTimes, x
00B380  2  85 01        		sta $01
00B382  2  BD 93 63     		lda WRAM_LostTimes+1, x
00B385  2  85 02        		sta $02
00B387  2  4C 94 B3     		jmp @checktime
00B38A  2               @is_org:
00B38A  2  BD 52 63     		lda WRAM_OrgTimes, x
00B38D  2  85 01        		sta $01
00B38F  2  BD 53 63     		lda WRAM_OrgTimes+1, x
00B392  2  85 02        		sta $02
00B394  2               @checktime:
00B394  2  AD FA 63     		lda WRAM_Timer
00B397  2  C5 01        		cmp $01
00B399  2  90 0D        		bcc @new_record
00B39B  2  F0 01        		beq @checklower
00B39D  2  60           		rts
00B39E  2               @checklower:
00B39E  2  AD FB 63     		lda WRAM_Timer+1
00B3A1  2  C5 02        		cmp $02
00B3A3  2  90 03        		bcc @new_record
00B3A5  2  F0 01        		beq @new_record
00B3A7  2  60           		rts
00B3A8  2               @new_record:
00B3A8  2  A0 00        		ldy #0
00B3AA  2  AD FA 63     		lda WRAM_Timer
00B3AD  2  91 01        		sta ($01), y
00B3AF  2  AD FB 63     		lda WRAM_Timer+1
00B3B2  2  C8           		iny
00B3B3  2  91 01        		sta ($01), y
00B3B5  2  88           		dey
00B3B6  2  8C FA 63     		sty WRAM_Timer
00B3B9  2  8C FB 63     		sty WRAM_Timer+1
00B3BC  2  60           		rts
00B3BD  2               
00B3BD  2               
00B3BD  2               N = WRAM_Temp
00B3BD  2               CARRY = WRAM_Temp+7
00B3BD  2               ;
00B3BD  2               ; Source div32_16_16:
00B3BD  2               ; http://www.6502.org/source/integers/ummodfix/ummodfix.htm
00B3BD  2               ;
00B3BD  2               div32_16_16:
00B3BD  2  38           		sec
00B3BE  2  AD 98 61             lda N+2
00B3C1  2  ED 96 61             sbc N
00B3C4  2  AD 99 61             lda N+3
00B3C7  2  ED 97 61             sbc N+1
00B3CA  2  B0 3C                bcs @oflo
00B3CC  2  A2 11                ldx #$11
00B3CE  2               @loop:
00B3CE  2  2E 9A 61      		rol N+4
00B3D1  2  2E 9B 61             rol N+5
00B3D4  2               
00B3D4  2  CA                   dex
00B3D5  2  F0 3F                beq @end
00B3D7  2               
00B3D7  2  2E 98 61             rol N+2
00B3DA  2  2E 99 61             rol N+3
00B3DD  2  A9 00                lda #0
00B3DF  2  8D 9D 61             sta CARRY
00B3E2  2  2E 9D 61             rol CARRY
00B3E5  2               
00B3E5  2  38                   sec
00B3E6  2  AD 98 61             lda N+2
00B3E9  2  ED 96 61             sbc N
00B3EC  2  8D 9C 61             sta N+6
00B3EF  2  AD 99 61             lda N+3
00B3F2  2  ED 97 61             sbc N+1
00B3F5  2  A8                   tay
00B3F6  2  AD 9D 61             lda CARRY
00B3F9  2  E9 00                sbc #0
00B3FB  2  90 D1                bcc @loop
00B3FD  2               
00B3FD  2  AD 9C 61             lda N+6
00B400  2  8D 98 61             sta N+2
00B403  2  8C 99 61             sty N+3
00B406  2  B0 C6                bcs @loop ; always
00B408  2                @oflo:
00B408  2  A9 FF         		lda #$FF
00B40A  2  8D 98 61             sta N+2
00B40D  2  8D 99 61             sta N+3
00B410  2  8D 9A 61             sta N+4
00B413  2  8D 9B 61             sta N+5
00B416  2               @end:
00B416  2  60           		rts
00B417  2               
00B417  2               PROD = WRAM_Temp+$10
00B417  2               MULR = WRAM_Temp+$10+8
00B417  2               MULND = WRAM_Temp+$10+8+4
00B417  2               
00B417  2               mult64_32_32:
00B417  2  A9 00        		lda     #$00
00B419  2  8D AA 61     		sta     PROD+4   ;Clear upper half of
00B41C  2  8D AB 61     		sta     PROD+5   ;product
00B41F  2  8D AC 61     		sta     PROD+6
00B422  2  8D AD 61     		sta     PROD+7
00B425  2  A2 20        		ldx     #$20     ;Set binary count to 32
00B427  2               SHIFT_R:
00B427  2  4E B1 61     		lsr     MULR+3   ;Shift multiplyer right
00B42A  2  6E B0 61     		ror     MULR+2
00B42D  2  6E AF 61     		ror     MULR+1
00B430  2  6E AE 61     		ror     MULR
00B433  2  90 22        		bcc     ROTATE_R ;Go rotate right if c = 0
00B435  2  AD AA 61     		lda     PROD+4   ;Get upper half of product
00B438  2  18           		clc              ; and add multiplicand to
00B439  2  6D B2 61     		adc     MULND    ; it
00B43C  2  8D AA 61     		sta     PROD+4
00B43F  2  AD AB 61     		lda     PROD+5
00B442  2  6D B3 61     		adc     MULND+1
00B445  2  8D AB 61     		sta     PROD+5
00B448  2  AD AC 61     		lda     PROD+6
00B44B  2  6D B4 61     		adc     MULND+2
00B44E  2  8D AC 61     		sta     PROD+6
00B451  2  AD AD 61     		lda     PROD+7
00B454  2  6D B5 61     		adc     MULND+3
00B457  2               ROTATE_R:
00B457  2  6A           		ror
00B458  2  8D AD 61     		sta     PROD+7   ; right
00B45B  2  6E AC 61     		ror     PROD+6
00B45E  2  6E AB 61     		ror     PROD+5
00B461  2  6E AA 61     		ror     PROD+4
00B464  2  6E A9 61     		ror     PROD+3
00B467  2  6E A8 61     		ror     PROD+2
00B46A  2  6E A7 61     		ror     PROD+1
00B46D  2  6E A6 61     		ror     PROD
00B470  2  CA           		dex              ;Decrement bit count and
00B471  2  D0 B4        		bne     SHIFT_R  ; loop until 32 bits are
00B473  2  60           		rts
00B474  2               
00B474  2               ; https://forums.nesdev.com/viewtopic.php?f=2&t=11341
00B474  2               HexToBCD:
00B474  2  85 01        		sta  $01
00B476  2  4A           		lsr
00B477  2  65 01        		adc  $01
00B479  2  6A           		ror
00B47A  2  4A           		lsr
00B47B  2  4A           		lsr
00B47C  2  65 01        		adc  $01
00B47E  2  6A           		ror
00B47F  2  65 01        		adc  $01
00B481  2  6A           		ror
00B482  2  4A           		lsr
00B483  2  29 3C        		and  #$3C
00B485  2  85 02        		sta  $02
00B487  2  4A           		lsr
00B488  2  65 02        		adc  $02
00B48A  2  65 01        		adc  $01
00B48C  2  60           		rts
00B48D  2               
00B48D  2               FrameToTime:
00B48D  2  20 93 B4     		jsr FrameToTimeInner
00B490  2  4C 08 FF     		jmp ReturnBank
00B493  2               
00B493  2               FrameToTimeInner:
00B493  2  A9 00        		lda #0
00B495  2  8D A9 61     		sta PROD+3
00B498  2  8D 9D 61     		sta CARRY
00B49B  2  8D B0 61     		sta MULR+2
00B49E  2  8D B1 61     		sta MULR+3
00B4A1  2  8D B5 61     		sta MULND+3
00B4A4  2  8E AE 61     		stx MULR
00B4A7  2  8C AF 61     		sty MULR+1
00B4AA  2  A9 A0        		lda #$a0
00B4AC  2  8D B2 61     		sta MULND
00B4AF  2  A9 86        		lda #$86
00B4B1  2  8D B3 61     		sta MULND+1
00B4B4  2  A9 01        		lda #$01
00B4B6  2  8D B4 61     		sta MULND+2
00B4B9  2  20 17 B4     		jsr mult64_32_32 ; x = frames * 100000
00B4BC  2               
00B4BC  2  AD A6 61     		lda PROD+0
00B4BF  2  8D 9A 61     		sta N+4
00B4C2  2  AD A7 61     		lda PROD+1
00B4C5  2  8D 9B 61     		sta N+5
00B4C8  2  AD A8 61     		lda PROD+2
00B4CB  2  8D 98 61     		sta N+2
00B4CE  2  AD A9 61     		lda PROD+3
00B4D1  2  8D 99 61     		sta N+3
00B4D4  2  A9 C2        		lda #<60098
00B4D6  2  8D 96 61     		sta N+0
00B4D9  2  A9 EA        		lda #>60098
00B4DB  2  8D 97 61     		sta N+1
00B4DE  2  20 BD B3     		jsr div32_16_16 ; x / 60098
00B4E1  2               
00B4E1  2  A9 00        		lda #0
00B4E3  2  8D 98 61     		sta N+2
00B4E6  2  8D 99 61     		sta N+3
00B4E9  2               
00B4E9  2  8D 97 61     		sta N+1
00B4EC  2  A9 64        		lda #100
00B4EE  2  8D 96 61     		sta N+0
00B4F1  2  20 BD B3     		jsr div32_16_16 ; r = x % 100; s = x / 100
00B4F4  2               
00B4F4  2  AD 98 61     		lda N+2
00B4F7  2  20 74 B4     		jsr HexToBCD
00B4FA  2  8D FE 63     		sta WRAM_PrettyTimeFrac
00B4FD  2               
00B4FD  2  A9 00        		lda #0
00B4FF  2  8D 98 61     		sta N+2
00B502  2  8D 99 61     		sta N+3
00B505  2               
00B505  2  8D 97 61     		sta N+1
00B508  2  A9 3C        		lda #60
00B50A  2  8D 96 61     		sta N+0
00B50D  2  20 BD B3     		jsr div32_16_16 ; m = s/60 s = s%60
00B510  2               
00B510  2  AD 98 61     		lda N+2
00B513  2  20 74 B4     		jsr HexToBCD
00B516  2  8D FD 63     		sta WRAM_PrettyTimeSec
00B519  2  AD 9A 61     		lda N+4
00B51C  2  20 74 B4     		jsr HexToBCD
00B51F  2  8D FC 63     		sta WRAM_PrettyTimeMin
00B522  2               
00B522  2  60           		rts
00B523  2               
00B523  2               
00B523  2               
00B523  2               BCD_BITS = 19
00B523  2               bcdNum = WRAM_Timer
00B523  2               bcdResult = 2
00B523  2               curDigit = 7
00B523  2               b = 2
00B523  2               
00B523  2               TimerToDecimal:
00B523  2  A9 20        		lda #$80 >> ((BCD_BITS - 1) & 3)
00B525  2  85 07        		sta curDigit
00B527  2  A2 04        		ldx #(BCD_BITS - 1) >> 2
00B529  2  A0 0E        		ldy #BCD_BITS - 5
00B52B  2               @loop:
00B52B  2               		; Trial subtract this bit to A:b
00B52B  2  38           		sec
00B52C  2  AD FA 63     		lda bcdNum
00B52F  2  F9 5A B5     		sbc bcdTableLo,y
00B532  2  85 02        		sta b
00B534  2  AD FB 63     		lda bcdNum+1
00B537  2  F9 69 B5     		sbc bcdTableHi,y
00B53A  2               
00B53A  2               		; If A:b > bcdNum then bcdNum = A:b
00B53A  2  90 08        		bcc @trial_lower
00B53C  2  8D FB 63     		sta bcdNum+1
00B53F  2  A5 02        		lda b
00B541  2  8D FA 63     		sta bcdNum
00B544  2               @trial_lower:
00B544  2               		; Copy bit from carry into digit and pick up
00B544  2               		; end-of-digit sentinel into carry
00B544  2  26 07        		rol curDigit
00B546  2  88           		dey
00B547  2  90 E2        		bcc @loop
00B549  2               
00B549  2               		; Copy digit into result
00B549  2  A5 07        		lda curDigit
00B54B  2  95 02        		sta bcdResult,x
00B54D  2  A9 10        		lda #$10  ; Empty digit; sentinel at 4 bits
00B54F  2  85 07        		sta curDigit
00B551  2               		; If there are digits left, do those
00B551  2  CA           		dex
00B552  2  D0 D7        		bne @loop
00B554  2  AD FA 63     		lda bcdNum
00B557  2  85 02        		sta bcdResult
00B559  2  60           		rts
00B55A  2               
00B55A  2               bcdTableLo:
00B55A  2  0A 14 28 50  		.byte <10, <20, <40, <80
00B55E  2  64 C8 90 20  		.byte <100, <200, <400, <800
00B562  2  E8 D0 A0 40  		.byte <1000, <2000, <4000, <8000
00B566  2  10 20 40     		.byte <10000, <20000, <40000
00B569  2               
00B569  2               bcdTableHi:
00B569  2  00 00 00 00  		.byte >10, >20, >40, >80
00B56D  2  00 00 01 03  		.byte >100, >200, >400, >800
00B571  2  03 07 0F 1F  		.byte >1000, >2000, >4000, >8000
00B575  2  27 4E 9C     		.byte >10000, >20000, >40000
00B578  2               
00B578  2               DrawTimeDigit:
00B578  2  48           	pha
00B579  2  4A           		lsr
00B57A  2  4A           		lsr
00B57B  2  4A           		lsr
00B57C  2  4A           		lsr
00B57D  2  99 01 03     		sta VRAM_Buffer1, y
00B580  2  C8           		iny
00B581  2  68           	pla
00B582  2  29 0F        		and #$0F
00B584  2  99 01 03     		sta VRAM_Buffer1, y
00B587  2  C8           		iny
00B588  2  60           		rts
00B589  2               
00B589  2               WriteTime:
00B589  2  98           	tya
00B58A  2  48           	pha
00B58B  2  A6 00            ldx $00
00B58D  2  A4 01            ldy $01
00B58F  2  20 93 B4     		jsr FrameToTimeInner
00B592  2  68           	pla
00B593  2  A8           	tay
00B594  2  AD FC 63     		lda WRAM_PrettyTimeMin
00B597  2  29 0F        		and #$0F
00B599  2  99 01 03     		sta VRAM_Buffer1, y
00B59C  2  C8           		iny
00B59D  2  A9 AF        		lda #$AF ; .
00B59F  2  99 01 03     		sta VRAM_Buffer1, y
00B5A2  2  C8           		iny
00B5A3  2               
00B5A3  2  AD FD 63     		lda WRAM_PrettyTimeSec
00B5A6  2  20 78 B5     		jsr DrawTimeDigit
00B5A9  2  A9 AF        		lda #$AF ; .
00B5AB  2  99 01 03     		sta VRAM_Buffer1, y
00B5AE  2  C8           		iny
00B5AF  2               
00B5AF  2  AD FE 63     		lda WRAM_PrettyTimeFrac
00B5B2  2  20 78 B5     		jsr DrawTimeDigit
00B5B5  2                 .if 0
00B5B5  2               		lda #$29 ; x
00B5B5  2               		sta VRAM_Buffer1, y
00B5B5  2               		iny
00B5B5  2               	tya
00B5B5  2               	pha
00B5B5  2               		jsr TimerToDecimal
00B5B5  2               	pla
00B5B5  2               	tay
00B5B5  2               		ldx #4
00B5B5  2               @writeframe:
00B5B5  2               		lda bcdResult,x
00B5B5  2               		sta VRAM_Buffer1,y
00B5B5  2               		iny
00B5B5  2               		dex
00B5B5  2               		bpl @writeframe
00B5B5  2                 .endif
00B5B5  2  60           		rts
00B5B6  2               
00B5B6  2               PersonalBestText:
00B5B6  2               YourTime:
00B5B6  2  22 2A 0C     	.byte $22, $2a, $0c
00B5B9  2  1D 12 16 0E  	.byte "TIME ", $fe, $ff
00B5BD  2  24 FE FF     
00B5C0  2               YourPB:
00B5C0  2  22 4A 0C     	.byte $22, $4a, $0c
00B5C3  2  19 0B 24 24  	.byte "PB   ", $fe, $ff
00B5C7  2  24 FE FF     
00B5CA  2               NewRecord:
00B5CA  2  22 4A 0C     	.byte $22, $4a, $0c
00B5CD  2  17 0E 20 24  	.byte "NEW RECORD! ", $ff
00B5D1  2  1B 0E 0C 18  
00B5D5  2  1B 0D 2B 24  
00B5DA  2               LoadedGame:
00B5DA  2  22 2A 0C     	.byte $22, $2a, $0c
00B5DD  2  1C 0A 1F 0E  	.byte "SAVES USED! ", $ff
00B5E1  2  1C 24 1E 1C  
00B5E5  2  0E 0D 2B 24  
00B5EA  2               
00B5EA  2               PbTextOffsets:
00B5EA  2  00           	.byte YourTime - PersonalBestText
00B5EB  2  0A           	.byte YourPB - PersonalBestText
00B5EC  2  14               .byte NewRecord - PersonalBestText
00B5ED  2  24               .byte LoadedGame - PersonalBestText
00B5EE  2               
00B5EE  2               WriteTimeText:
00B5EE  2  AC 00 03     		ldy VRAM_Buffer1_Offset
00B5F1  2  BD EA B5     		lda PbTextOffsets, x
00B5F4  2  AA           		tax
00B5F5  2               @copy_more:
00B5F5  2  BD B6 B5     		lda PersonalBestText, x
00B5F8  2  99 01 03     		sta VRAM_Buffer1, y
00B5FB  2  C9 FF        		cmp #$ff
00B5FD  2  F0 12        		beq @done
00B5FF  2  C9 FE        		cmp #$fe
00B601  2  D0 0A        		bne @no_time
00B603  2  8A           		txa
00B604  2  48           	pha
00B605  2  20 89 B5     		jsr WriteTime
00B608  2  68           	pla
00B609  2  AA           		tax
00B60A  2  E8           		inx
00B60B  2  D0 E8        		bne @copy_more ; Always...
00B60D  2               @no_time:
00B60D  2  C8           		iny
00B60E  2  E8           		inx
00B60F  2  D0 E4        		bne @copy_more
00B611  2               @done:
00B611  2  A9 00        		lda #0
00B613  2  99 01 03     		sta VRAM_Buffer1, y
00B616  2  8C 00 03     		sty VRAM_Buffer1_Offset
00B619  2  60           		rts
00B61A  2               
00B61A  2               GetPbTimeX:
00B61A  2  AD 15 60     		lda WRAM_LoadedWorld
00B61D  2  AE FF 07     		ldx BANK_SELECTED
00B620  2  E0 08        		cpx #BANK_ORG
00B622  2  F0 0A        		beq @not_ext
00B624  2  AE FB 07     		ldx IsPlayingExtendedWorlds
00B627  2  F0 05        		beq @not_ext
00B629  2  29 03        		and #$03
00B62B  2  18           		clc
00B62C  2  69 09        		adc #$09
00B62E  2               @not_ext:
00B62E  2  0A           	    asl
00B62F  2  0A           	    asl
00B630  2  0A           	    asl
00B631  2  85 00        	    sta $00
00B633  2  AD 14 60     	    lda WRAM_LoadedLevel
00B636  2  0A           	    asl
00B637  2  65 00        	    adc $00
00B639  2  AA           	    tax
00B63A  2  AD FF 07     	    lda BANK_SELECTED
00B63D  2  C9 08        	    cmp #BANK_ORG
00B63F  2  F0 0B        	    beq @org
00B641  2  BD 92 63     	    lda WRAM_LostTimes, x
00B644  2  85 00        	    sta $00
00B646  2  BD 93 63     	    lda WRAM_LostTimes+1,x
00B649  2  85 01        	    sta $01
00B64B  2  60           	    rts
00B64C  2               @org:
00B64C  2  BD 52 63     	    lda WRAM_OrgTimes, x
00B64F  2  85 00        	    sta $00
00B651  2  BD 53 63     	    lda WRAM_OrgTimes+1, x
00B654  2  85 01        	    sta $01
00B656  2  60           	    rts
00B657  2               
00B657  2               
00B657  2               RenderIntermediateTime:
00B657  2  20 5D B6     		jsr RenderIntermediateTimeInner
00B65A  2  4C 08 FF     		jmp ReturnBank
00B65D  2               
00B65D  2               RenderIntermediateTimeInner:
00B65D  2  AD 05 60     	    lda WRAM_PracticeFlags
00B660  2  29 10        	    and #PF_LevelEntrySaved
00B662  2  D0 74        	    bne @dontshow
00B664  2  AD FB 63     	    lda WRAM_Timer+1
00B667  2  F0 6F        	    beq @dontshow
00B669  2  C9 FF        	    cmp #$FF
00B66B  2  D0 08        	    bne @no_load
00B66D  2  A2 03        	    ldx #3
00B66F  2  20 EE B5     	    jsr WriteTimeText
00B672  2  4C D0 B6     	    jmp @resettimer
00B675  2               @no_load:
00B675  2  AD FA 63     	    lda WRAM_Timer
00B678  2  85 00        	    sta $00
00B67A  2  AD FB 63     	    lda WRAM_Timer+1
00B67D  2  85 01        	    sta $01
00B67F  2  A2 00        		ldx #0
00B681  2  20 EE B5     		jsr WriteTimeText
00B684  2  20 1A B6     	    jsr GetPbTimeX
00B687  2  A5 00        	    lda $00
00B689  2  05 01        	    ora $01
00B68B  2  D0 2E        	    bne @checkisrecord
00B68D  2               @newrecord:
00B68D  2  A9 40        		lda #Sfx_ExtraLife
00B68F  2  85 FE        		sta Square2SoundQueue
00B691  2  AD FF 07     	    lda BANK_SELECTED
00B694  2  C9 08        	    cmp #BANK_ORG
00B696  2  F0 0F        	    beq @save_org
00B698  2  AD FA 63     	    lda WRAM_Timer
00B69B  2  9D 92 63     	    sta WRAM_LostTimes, x
00B69E  2  AD FB 63     	    lda WRAM_Timer+1
00B6A1  2  9D 93 63     	    sta WRAM_LostTimes+1, x
00B6A4  2  4C B3 B6     	    jmp @printrecord
00B6A7  2               @save_org:
00B6A7  2  AD FA 63     	    lda WRAM_Timer
00B6AA  2  9D 52 63     	    sta WRAM_OrgTimes, x
00B6AD  2  AD FB 63     	    lda WRAM_Timer+1
00B6B0  2  9D 53 63     	    sta WRAM_OrgTimes+1, x
00B6B3  2               @printrecord:
00B6B3  2  A2 02        	    ldx #2
00B6B5  2  20 EE B5     	    jsr WriteTimeText
00B6B8  2  4C D0 B6     	    jmp @resettimer
00B6BB  2               @checkisrecord:
00B6BB  2  AD FB 63     	    lda WRAM_Timer+1
00B6BE  2  C5 01        	    cmp $01
00B6C0  2  30 CB        	    bmi @newrecord
00B6C2  2  D0 07        	    bne @notarecord
00B6C4  2  AD FA 63     	    lda WRAM_Timer
00B6C7  2  C5 00        	    cmp $00
00B6C9  2  30 C2        	    bmi @newrecord
00B6CB  2               @notarecord:
00B6CB  2  A2 01        		ldx #1
00B6CD  2  20 EE B5     		jsr WriteTimeText
00B6D0  2               @resettimer:
00B6D0  2  A9 00        	    lda #0
00B6D2  2  8D FA 63     	    sta WRAM_Timer
00B6D5  2  8D FB 63     	    sta WRAM_Timer+1
00B6D8  2               @dontshow:
00B6D8  2  60               	rts
00B6D9  2               
00B6D9  2               EndOfCastle:
00B6D9  2  AD FB 63     		lda WRAM_Timer+1
00B6DC  2  C9 EE        		cmp #$EE ; FUCK HACK
00B6DE  2  F0 31        		beq @exit
00B6E0  2  AE 5F 07     		ldx WorldNumber
00B6E3  2  E0 07        		cpx #World8
00B6E5  2  D0 1A        		bne @check_ext
00B6E7  2               @is_end:
00B6E7  2  AD 05 60 29  		PF_SetToLevelEnd_A
00B6EB  2  EF 8D 05 60  
00B6EF  2  20 5D B6     		jsr RenderIntermediateTimeInner
00B6F2  2  AD 05 60     		lda WRAM_PracticeFlags
00B6F5  2  09 10        		ora #PF_LevelEntrySaved
00B6F7  2  8D 05 60     		sta WRAM_PracticeFlags
00B6FA  2  A9 EE        		lda #$EE
00B6FC  2  8D FB 63     		sta WRAM_Timer+1
00B6FF  2  D0 10        		bne @exit
00B701  2               @check_ext:
00B701  2  AD FF 07     		lda BANK_SELECTED
00B704  2  C9 08        		cmp #BANK_ORG
00B706  2  F0 09        		beq @exit
00B708  2  AD FB 07     		lda IsPlayingExtendedWorlds
00B70B  2  F0 04        		beq @exit
00B70D  2  E0 03        		cpx #3 ; World D
00B70F  2  F0 D6        		beq @is_end
00B711  2               @exit:
00B711  2  4C 08 FF     		jmp ReturnBank
00B714  2               
00B714  2               
00B714  1               
00B714  1               	.export EndOfCastle
00B714  1               	.export RenderIntermediateTime
00B714  1               	.export FrameToTime
00B714  1               	.export PracticeInit
00B714  1               	.export InitializeWRAM
00B714  1               	.export ForceUpdateSockHash
00B714  1               	.export PracticeOnFrame
00B714  1               	.export PracticeTitleMenu
00B714  1               	.export SoundEngineExternal
00B714  1               	.export ProcessLevelLoad
00B714  1               	.export LoadPhysicsData
00B714  1               	.export LoadMarioPhysics
00B714  1               	.export RedrawUserVars
00B714  1               	.export RedrawAll
00B714  1               	.export UpdateFrameRule
00B714  1               	.export WritePracticeTop
00B714  1               	.export RedrawFrameNumbers
00B714  1               	.export RedrawSockTimer
00B714  1               	.export SetDefaultWRAM
00B714  1               	.export FactoryResetWRAM
00B714  1               	.export UpdateGameTimer
00B714  1               
00B714  1  EA EA EA EA  practice_callgate
00B718  1  EA EA EA EA  
00B71C  1  EA EA EA EA  
00FEC0  1  EA EA EA EA  control_bank
00FEC4  1  EA EA EA EA  
00FEC8  1  EA EA EA EA  
00FEC0  1               
